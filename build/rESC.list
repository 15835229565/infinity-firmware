
build/rESC.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <Reset_Handler>:
 8000200:	b672      	cpsid	i
 8000202:	4834      	ldr	r0, [pc, #208]	; (80002d4 <endfiniloop+0x4>)
 8000204:	f380 8809 	msr	PSP, r0
 8000208:	f240 0000 	movw	r0, #0
 800020c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 8000210:	f64e 7134 	movw	r1, #61236	; 0xef34
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000218:	6008      	str	r0, [r1, #0]
 800021a:	f3bf 8f4f 	dsb	sy
 800021e:	f3bf 8f6f 	isb	sy
 8000222:	f240 0000 	movw	r0, #0
 8000226:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800022a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800022e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000232:	6008      	str	r0, [r1, #0]
 8000234:	f3bf 8f4f 	dsb	sy
 8000238:	f3bf 8f6f 	isb	sy
 800023c:	f04f 0000 	mov.w	r0, #0
 8000240:	eee1 0a10 	vmsr	fpscr, r0
 8000244:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000248:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800024c:	6008      	str	r0, [r1, #0]
 800024e:	2006      	movs	r0, #6
 8000250:	f380 8814 	msr	CONTROL, r0
 8000254:	f3bf 8f6f 	isb	sy
 8000258:	f00a fa6a 	bl	800a730 <__core_init>
 800025c:	f00d fcd8 	bl	800dc10 <__early_init>
 8000260:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000264:	491c      	ldr	r1, [pc, #112]	; (80002d8 <endfiniloop+0x8>)
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <endfiniloop+0xc>)

08000268 <msloop>:
 8000268:	4291      	cmp	r1, r2
 800026a:	bf3c      	itt	cc
 800026c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000270:	e7fa      	bcc.n	8000268 <msloop>
 8000272:	491b      	ldr	r1, [pc, #108]	; (80002e0 <endfiniloop+0x10>)
 8000274:	4a17      	ldr	r2, [pc, #92]	; (80002d4 <endfiniloop+0x4>)

08000276 <psloop>:
 8000276:	4291      	cmp	r1, r2
 8000278:	bf3c      	itt	cc
 800027a:	f841 0b04 	strcc.w	r0, [r1], #4
 800027e:	e7fa      	bcc.n	8000276 <psloop>
 8000280:	4918      	ldr	r1, [pc, #96]	; (80002e4 <endfiniloop+0x14>)
 8000282:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <endfiniloop+0x18>)
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <endfiniloop+0x1c>)

08000286 <dloop>:
 8000286:	429a      	cmp	r2, r3
 8000288:	bf3e      	ittt	cc
 800028a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800028e:	f842 0b04 	strcc.w	r0, [r2], #4
 8000292:	e7f8      	bcc.n	8000286 <dloop>
 8000294:	2000      	movs	r0, #0
 8000296:	4916      	ldr	r1, [pc, #88]	; (80002f0 <endfiniloop+0x20>)
 8000298:	4a16      	ldr	r2, [pc, #88]	; (80002f4 <endfiniloop+0x24>)

0800029a <bloop>:
 800029a:	4291      	cmp	r1, r2
 800029c:	bf3c      	itt	cc
 800029e:	f841 0b04 	strcc.w	r0, [r1], #4
 80002a2:	e7fa      	bcc.n	800029a <bloop>
 80002a4:	f00a fa5c 	bl	800a760 <__init_ram_areas>
 80002a8:	f00a fa4a 	bl	800a740 <__late_init>
 80002ac:	4c12      	ldr	r4, [pc, #72]	; (80002f8 <endfiniloop+0x28>)
 80002ae:	4d13      	ldr	r5, [pc, #76]	; (80002fc <endfiniloop+0x2c>)

080002b0 <initloop>:
 80002b0:	42ac      	cmp	r4, r5
 80002b2:	da03      	bge.n	80002bc <endinitloop>
 80002b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80002b8:	4788      	blx	r1
 80002ba:	e7f9      	b.n	80002b0 <initloop>

080002bc <endinitloop>:
 80002bc:	f00e f978 	bl	800e5b0 <main>
 80002c0:	4c0f      	ldr	r4, [pc, #60]	; (8000300 <endfiniloop+0x30>)
 80002c2:	4d10      	ldr	r5, [pc, #64]	; (8000304 <endfiniloop+0x34>)

080002c4 <finiloop>:
 80002c4:	42ac      	cmp	r4, r5
 80002c6:	da03      	bge.n	80002d0 <endfiniloop>
 80002c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80002cc:	4788      	blx	r1
 80002ce:	e7f9      	b.n	80002c4 <finiloop>

080002d0 <endfiniloop>:
 80002d0:	f00a ba3e 	b.w	800a750 <__default_exit>
 80002d4:	20000800 	.word	0x20000800
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000400 	.word	0x20000400
 80002e0:	20000400 	.word	0x20000400
 80002e4:	08016e68 	.word	0x08016e68
 80002e8:	20000800 	.word	0x20000800
 80002ec:	2000108c 	.word	0x2000108c
 80002f0:	20001090 	.word	0x20001090
 80002f4:	20001c6c 	.word	0x20001c6c
 80002f8:	080001c0 	.word	0x080001c0
 80002fc:	080001c4 	.word	0x080001c4
 8000300:	080001c4 	.word	0x080001c4
 8000304:	080001c4 	.word	0x080001c4
	...

08000310 <_port_switch>:
 8000310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000314:	ed2d 8a10 	vpush	{s16-s31}
 8000318:	f8c1 d00c 	str.w	sp, [r1, #12]
 800031c:	68c3      	ldr	r3, [r0, #12]
 800031e:	469d      	mov	sp, r3
 8000320:	ecbd 8a10 	vpop	{s16-s31}
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000328 <_port_thread_start>:
 8000328:	2300      	movs	r3, #0
 800032a:	f383 8811 	msr	BASEPRI, r3
 800032e:	4628      	mov	r0, r5
 8000330:	47a0      	blx	r4
 8000332:	2000      	movs	r0, #0
 8000334:	f00a fd44 	bl	800adc0 <chThdExit>

08000338 <_port_switch_from_isr>:
 8000338:	f00a fc72 	bl	800ac20 <chSchDoReschedule>

0800033c <_port_exit_from_isr>:
 800033c:	df00      	svc	0
 800033e:	e7fe      	b.n	800033e <_port_exit_from_isr+0x2>

08000340 <d_make_comp>:
 8000340:	b470      	push	{r4, r5, r6}
 8000342:	1e4c      	subs	r4, r1, #1
 8000344:	2c4a      	cmp	r4, #74	; 0x4a
 8000346:	d82c      	bhi.n	80003a2 <d_make_comp+0x62>
 8000348:	e8df f004 	tbb	[pc, r4]
 800034c:	3c3c3c3c 	.word	0x3c3c3c3c
 8000350:	2b2b2b2b 	.word	0x2b2b2b2b
 8000354:	263c2626 	.word	0x263c2626
 8000358:	26262626 	.word	0x26262626
 800035c:	26262626 	.word	0x26262626
 8000360:	2b262626 	.word	0x2b262626
 8000364:	27272727 	.word	0x27272727
 8000368:	27272727 	.word	0x27272727
 800036c:	2626263c 	.word	0x2626263c
 8000370:	262b2626 	.word	0x262b2626
 8000374:	2b3c3d27 	.word	0x2b3c3d27
 8000378:	3d27273c 	.word	0x3d27273c
 800037c:	26262b2b 	.word	0x26262b2b
 8000380:	3c3c3c3c 	.word	0x3c3c3c3c
 8000384:	3c3c263c 	.word	0x3c3c263c
 8000388:	2b2b3c26 	.word	0x2b2b3c26
 800038c:	2b262626 	.word	0x2b262626
 8000390:	26262b2b 	.word	0x26262b2b
 8000394:	3c26      	.short	0x3c26
 8000396:	3c          	.byte	0x3c
 8000397:	00          	.byte	0x00
 8000398:	b1ca      	cbz	r2, 80003ce <d_make_comp+0x8e>
 800039a:	6944      	ldr	r4, [r0, #20]
 800039c:	6985      	ldr	r5, [r0, #24]
 800039e:	42ac      	cmp	r4, r5
 80003a0:	db02      	blt.n	80003a8 <d_make_comp+0x68>
 80003a2:	2000      	movs	r0, #0
 80003a4:	bc70      	pop	{r4, r5, r6}
 80003a6:	4770      	bx	lr
 80003a8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80003ac:	6906      	ldr	r6, [r0, #16]
 80003ae:	3401      	adds	r4, #1
 80003b0:	00ad      	lsls	r5, r5, #2
 80003b2:	6144      	str	r4, [r0, #20]
 80003b4:	1974      	adds	r4, r6, r5
 80003b6:	d00c      	beq.n	80003d2 <d_make_comp+0x92>
 80003b8:	5571      	strb	r1, [r6, r5]
 80003ba:	6062      	str	r2, [r4, #4]
 80003bc:	60a3      	str	r3, [r4, #8]
 80003be:	4620      	mov	r0, r4
 80003c0:	bc70      	pop	{r4, r5, r6}
 80003c2:	4770      	bx	lr
 80003c4:	b11a      	cbz	r2, 80003ce <d_make_comp+0x8e>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1e7      	bne.n	800039a <d_make_comp+0x5a>
 80003ca:	4618      	mov	r0, r3
 80003cc:	e7ea      	b.n	80003a4 <d_make_comp+0x64>
 80003ce:	4610      	mov	r0, r2
 80003d0:	e7e8      	b.n	80003a4 <d_make_comp+0x64>
 80003d2:	4620      	mov	r0, r4
 80003d4:	e7e6      	b.n	80003a4 <d_make_comp+0x64>
 80003d6:	bf00      	nop

080003d8 <d_cv_qualifiers>:
 80003d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003dc:	68c3      	ldr	r3, [r0, #12]
 80003de:	f1b2 0a00 	subs.w	sl, r2, #0
 80003e2:	4604      	mov	r4, r0
 80003e4:	460f      	mov	r7, r1
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	bf15      	itete	ne
 80003ea:	f04f 081c 	movne.w	r8, #28
 80003ee:	f04f 0819 	moveq.w	r8, #25
 80003f2:	f04f 091d 	movne.w	r9, #29
 80003f6:	f04f 091a 	moveq.w	r9, #26
 80003fa:	bf14      	ite	ne
 80003fc:	261e      	movne	r6, #30
 80003fe:	261b      	moveq	r6, #27
 8000400:	460d      	mov	r5, r1
 8000402:	e012      	b.n	800042a <d_cv_qualifiers+0x52>
 8000404:	2a56      	cmp	r2, #86	; 0x56
 8000406:	d01b      	beq.n	8000440 <d_cv_qualifiers+0x68>
 8000408:	2a4b      	cmp	r2, #75	; 0x4b
 800040a:	d122      	bne.n	8000452 <d_cv_qualifiers+0x7a>
 800040c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800040e:	60e1      	str	r1, [r4, #12]
 8000410:	3306      	adds	r3, #6
 8000412:	6323      	str	r3, [r4, #48]	; 0x30
 8000414:	4631      	mov	r1, r6
 8000416:	2300      	movs	r3, #0
 8000418:	461a      	mov	r2, r3
 800041a:	4620      	mov	r0, r4
 800041c:	f7ff ff90 	bl	8000340 <d_make_comp>
 8000420:	6028      	str	r0, [r5, #0]
 8000422:	b1a0      	cbz	r0, 800044e <d_cv_qualifiers+0x76>
 8000424:	68e3      	ldr	r3, [r4, #12]
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	1d05      	adds	r5, r0, #4
 800042a:	2a72      	cmp	r2, #114	; 0x72
 800042c:	f103 0101 	add.w	r1, r3, #1
 8000430:	d1e8      	bne.n	8000404 <d_cv_qualifiers+0x2c>
 8000432:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000434:	3301      	adds	r3, #1
 8000436:	3209      	adds	r2, #9
 8000438:	60e3      	str	r3, [r4, #12]
 800043a:	6322      	str	r2, [r4, #48]	; 0x30
 800043c:	4641      	mov	r1, r8
 800043e:	e7ea      	b.n	8000416 <d_cv_qualifiers+0x3e>
 8000440:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000442:	3301      	adds	r3, #1
 8000444:	3209      	adds	r2, #9
 8000446:	60e3      	str	r3, [r4, #12]
 8000448:	6322      	str	r2, [r4, #48]	; 0x30
 800044a:	4649      	mov	r1, r9
 800044c:	e7e3      	b.n	8000416 <d_cv_qualifiers+0x3e>
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1ba 0f00 	cmp.w	sl, #0
 8000456:	d101      	bne.n	800045c <d_cv_qualifiers+0x84>
 8000458:	2a46      	cmp	r2, #70	; 0x46
 800045a:	d002      	beq.n	8000462 <d_cv_qualifiers+0x8a>
 800045c:	4628      	mov	r0, r5
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	42bd      	cmp	r5, r7
 8000464:	d0fa      	beq.n	800045c <d_cv_qualifiers+0x84>
 8000466:	201d      	movs	r0, #29
 8000468:	211e      	movs	r1, #30
 800046a:	221c      	movs	r2, #28
 800046c:	e007      	b.n	800047e <d_cv_qualifiers+0xa6>
 800046e:	2b1b      	cmp	r3, #27
 8000470:	d00b      	beq.n	800048a <d_cv_qualifiers+0xb2>
 8000472:	2b19      	cmp	r3, #25
 8000474:	d100      	bne.n	8000478 <d_cv_qualifiers+0xa0>
 8000476:	703a      	strb	r2, [r7, #0]
 8000478:	3704      	adds	r7, #4
 800047a:	42bd      	cmp	r5, r7
 800047c:	d0ee      	beq.n	800045c <d_cv_qualifiers+0x84>
 800047e:	683f      	ldr	r7, [r7, #0]
 8000480:	783b      	ldrb	r3, [r7, #0]
 8000482:	2b1a      	cmp	r3, #26
 8000484:	d1f3      	bne.n	800046e <d_cv_qualifiers+0x96>
 8000486:	7038      	strb	r0, [r7, #0]
 8000488:	e7f6      	b.n	8000478 <d_cv_qualifiers+0xa0>
 800048a:	7039      	strb	r1, [r7, #0]
 800048c:	e7f4      	b.n	8000478 <d_cv_qualifiers+0xa0>
 800048e:	bf00      	nop

08000490 <d_ref_qualifier>:
 8000490:	b410      	push	{r4}
 8000492:	68c3      	ldr	r3, [r0, #12]
 8000494:	781c      	ldrb	r4, [r3, #0]
 8000496:	2c52      	cmp	r4, #82	; 0x52
 8000498:	460a      	mov	r2, r1
 800049a:	d00f      	beq.n	80004bc <d_ref_qualifier+0x2c>
 800049c:	2c4f      	cmp	r4, #79	; 0x4f
 800049e:	d003      	beq.n	80004a8 <d_ref_qualifier+0x18>
 80004a0:	4608      	mov	r0, r1
 80004a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80004aa:	3103      	adds	r1, #3
 80004ac:	6301      	str	r1, [r0, #48]	; 0x30
 80004ae:	2120      	movs	r1, #32
 80004b0:	3301      	adds	r3, #1
 80004b2:	60c3      	str	r3, [r0, #12]
 80004b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004b8:	2300      	movs	r3, #0
 80004ba:	e741      	b.n	8000340 <d_make_comp>
 80004bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80004be:	3102      	adds	r1, #2
 80004c0:	6301      	str	r1, [r0, #48]	; 0x30
 80004c2:	211f      	movs	r1, #31
 80004c4:	e7f4      	b.n	80004b0 <d_ref_qualifier+0x20>
 80004c6:	bf00      	nop

080004c8 <d_count_templates_scopes>:
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	d04c      	beq.n	8000566 <d_count_templates_scopes+0x9e>
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	4605      	mov	r5, r0
 80004d0:	460e      	mov	r6, r1
 80004d2:	4614      	mov	r4, r2
 80004d4:	7823      	ldrb	r3, [r4, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	2b4a      	cmp	r3, #74	; 0x4a
 80004da:	d82a      	bhi.n	8000532 <d_count_templates_scopes+0x6a>
 80004dc:	e8df f003 	tbb	[pc, r3]
 80004e0:	3e353535 	.word	0x3e353535
 80004e4:	26262929 	.word	0x26262929
 80004e8:	35353535 	.word	0x35353535
 80004ec:	35353535 	.word	0x35353535
 80004f0:	35353535 	.word	0x35353535
 80004f4:	29353535 	.word	0x29353535
 80004f8:	35353535 	.word	0x35353535
 80004fc:	35353535 	.word	0x35353535
 8000500:	2e2e3535 	.word	0x2e2e3535
 8000504:	35293535 	.word	0x35293535
 8000508:	2a353535 	.word	0x2a353535
 800050c:	35353535 	.word	0x35353535
 8000510:	35352629 	.word	0x35352629
 8000514:	35353535 	.word	0x35353535
 8000518:	35353535 	.word	0x35353535
 800051c:	29293535 	.word	0x29293535
 8000520:	2a2a2a35 	.word	0x2a2a2a35
 8000524:	3535292a 	.word	0x3535292a
 8000528:	3535      	.short	0x3535
 800052a:	35          	.byte	0x35
 800052b:	00          	.byte	0x00
 800052c:	68a4      	ldr	r4, [r4, #8]
 800052e:	2c00      	cmp	r4, #0
 8000530:	d1d0      	bne.n	80004d4 <d_count_templates_scopes+0xc>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	6864      	ldr	r4, [r4, #4]
 8000536:	2c00      	cmp	r4, #0
 8000538:	d1cc      	bne.n	80004d4 <d_count_templates_scopes+0xc>
 800053a:	e7fa      	b.n	8000532 <d_count_templates_scopes+0x6a>
 800053c:	6862      	ldr	r2, [r4, #4]
 800053e:	7813      	ldrb	r3, [r2, #0]
 8000540:	2b05      	cmp	r3, #5
 8000542:	d103      	bne.n	800054c <d_count_templates_scopes+0x84>
 8000544:	6833      	ldr	r3, [r6, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	6033      	str	r3, [r6, #0]
 800054a:	6862      	ldr	r2, [r4, #4]
 800054c:	4631      	mov	r1, r6
 800054e:	4628      	mov	r0, r5
 8000550:	f7ff ffba 	bl	80004c8 <d_count_templates_scopes>
 8000554:	68a4      	ldr	r4, [r4, #8]
 8000556:	2c00      	cmp	r4, #0
 8000558:	d1bc      	bne.n	80004d4 <d_count_templates_scopes+0xc>
 800055a:	e7ea      	b.n	8000532 <d_count_templates_scopes+0x6a>
 800055c:	682b      	ldr	r3, [r5, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	602b      	str	r3, [r5, #0]
 8000562:	6862      	ldr	r2, [r4, #4]
 8000564:	e7f2      	b.n	800054c <d_count_templates_scopes+0x84>
 8000566:	4770      	bx	lr

08000568 <d_append_buffer>:
 8000568:	b37a      	cbz	r2, 80005ca <d_append_buffer+0x62>
 800056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800056e:	460d      	mov	r5, r1
 8000570:	4604      	mov	r4, r0
 8000572:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000576:	18af      	adds	r7, r5, r2
 8000578:	f04f 0800 	mov.w	r8, #0
 800057c:	e009      	b.n	8000592 <d_append_buffer+0x2a>
 800057e:	460b      	mov	r3, r1
 8000580:	42bd      	cmp	r5, r7
 8000582:	f101 0101 	add.w	r1, r1, #1
 8000586:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800058a:	54e6      	strb	r6, [r4, r3]
 800058c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000590:	d019      	beq.n	80005c6 <d_append_buffer+0x5e>
 8000592:	29ff      	cmp	r1, #255	; 0xff
 8000594:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000598:	d1f1      	bne.n	800057e <d_append_buffer+0x16>
 800059a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800059e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80005a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80005a6:	4620      	mov	r0, r4
 80005a8:	4798      	blx	r3
 80005aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80005ae:	3301      	adds	r3, #1
 80005b0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80005b4:	2300      	movs	r3, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	42bd      	cmp	r5, r7
 80005ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80005be:	54e6      	strb	r6, [r4, r3]
 80005c0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80005c4:	d1e5      	bne.n	8000592 <d_append_buffer+0x2a>
 80005c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ca:	4770      	bx	lr

080005cc <d_number.isra.0>:
 80005cc:	b430      	push	{r4, r5}
 80005ce:	6803      	ldr	r3, [r0, #0]
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	2a6e      	cmp	r2, #110	; 0x6e
 80005d4:	4604      	mov	r4, r0
 80005d6:	d016      	beq.n	8000606 <d_number.isra.0+0x3a>
 80005d8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80005dc:	2909      	cmp	r1, #9
 80005de:	d81c      	bhi.n	800061a <d_number.isra.0+0x4e>
 80005e0:	2500      	movs	r5, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	3301      	adds	r3, #1
 80005e6:	6023      	str	r3, [r4, #0]
 80005e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80005ec:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80005f6:	2909      	cmp	r1, #9
 80005f8:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 80005fc:	d9f2      	bls.n	80005e4 <d_number.isra.0+0x18>
 80005fe:	b105      	cbz	r5, 8000602 <d_number.isra.0+0x36>
 8000600:	4240      	negs	r0, r0
 8000602:	bc30      	pop	{r4, r5}
 8000604:	4770      	bx	lr
 8000606:	1c59      	adds	r1, r3, #1
 8000608:	6001      	str	r1, [r0, #0]
 800060a:	785a      	ldrb	r2, [r3, #1]
 800060c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000610:	2b09      	cmp	r3, #9
 8000612:	d802      	bhi.n	800061a <d_number.isra.0+0x4e>
 8000614:	460b      	mov	r3, r1
 8000616:	2501      	movs	r5, #1
 8000618:	e7e3      	b.n	80005e2 <d_number.isra.0+0x16>
 800061a:	2000      	movs	r0, #0
 800061c:	e7f1      	b.n	8000602 <d_number.isra.0+0x36>
 800061e:	bf00      	nop

08000620 <d_number_component>:
 8000620:	6943      	ldr	r3, [r0, #20]
 8000622:	6982      	ldr	r2, [r0, #24]
 8000624:	4293      	cmp	r3, r2
 8000626:	da14      	bge.n	8000652 <d_number_component+0x32>
 8000628:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800062c:	6901      	ldr	r1, [r0, #16]
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	b510      	push	{r4, lr}
 8000632:	3301      	adds	r3, #1
 8000634:	188c      	adds	r4, r1, r2
 8000636:	6143      	str	r3, [r0, #20]
 8000638:	d008      	beq.n	800064c <d_number_component+0x2c>
 800063a:	2340      	movs	r3, #64	; 0x40
 800063c:	548b      	strb	r3, [r1, r2]
 800063e:	300c      	adds	r0, #12
 8000640:	f7ff ffc4 	bl	80005cc <d_number.isra.0>
 8000644:	4623      	mov	r3, r4
 8000646:	6060      	str	r0, [r4, #4]
 8000648:	4618      	mov	r0, r3
 800064a:	bd10      	pop	{r4, pc}
 800064c:	4623      	mov	r3, r4
 800064e:	4618      	mov	r0, r3
 8000650:	bd10      	pop	{r4, pc}
 8000652:	2300      	movs	r3, #0
 8000654:	4618      	mov	r0, r3
 8000656:	4770      	bx	lr

08000658 <d_compact_number>:
 8000658:	b510      	push	{r4, lr}
 800065a:	68c3      	ldr	r3, [r0, #12]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	2a5f      	cmp	r2, #95	; 0x5f
 8000660:	4604      	mov	r4, r0
 8000662:	d00b      	beq.n	800067c <d_compact_number+0x24>
 8000664:	2a6e      	cmp	r2, #110	; 0x6e
 8000666:	d006      	beq.n	8000676 <d_compact_number+0x1e>
 8000668:	300c      	adds	r0, #12
 800066a:	f7ff ffaf 	bl	80005cc <d_number.isra.0>
 800066e:	68e3      	ldr	r3, [r4, #12]
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	2a5f      	cmp	r2, #95	; 0x5f
 8000674:	d006      	beq.n	8000684 <d_compact_number+0x2c>
 8000676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800067a:	bd10      	pop	{r4, pc}
 800067c:	2000      	movs	r0, #0
 800067e:	3301      	adds	r3, #1
 8000680:	60e3      	str	r3, [r4, #12]
 8000682:	bd10      	pop	{r4, pc}
 8000684:	3001      	adds	r0, #1
 8000686:	e7fa      	b.n	800067e <d_compact_number+0x26>

08000688 <d_template_param>:
 8000688:	b538      	push	{r3, r4, r5, lr}
 800068a:	68c3      	ldr	r3, [r0, #12]
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	2a54      	cmp	r2, #84	; 0x54
 8000690:	d001      	beq.n	8000696 <d_template_param+0xe>
 8000692:	2000      	movs	r0, #0
 8000694:	bd38      	pop	{r3, r4, r5, pc}
 8000696:	3301      	adds	r3, #1
 8000698:	60c3      	str	r3, [r0, #12]
 800069a:	4604      	mov	r4, r0
 800069c:	f7ff ffdc 	bl	8000658 <d_compact_number>
 80006a0:	1e05      	subs	r5, r0, #0
 80006a2:	dbf6      	blt.n	8000692 <d_template_param+0xa>
 80006a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006a6:	6963      	ldr	r3, [r4, #20]
 80006a8:	69a1      	ldr	r1, [r4, #24]
 80006aa:	3201      	adds	r2, #1
 80006ac:	428b      	cmp	r3, r1
 80006ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80006b0:	daef      	bge.n	8000692 <d_template_param+0xa>
 80006b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80006b6:	6921      	ldr	r1, [r4, #16]
 80006b8:	3301      	adds	r3, #1
 80006ba:	0092      	lsls	r2, r2, #2
 80006bc:	6163      	str	r3, [r4, #20]
 80006be:	188b      	adds	r3, r1, r2
 80006c0:	d0e7      	beq.n	8000692 <d_template_param+0xa>
 80006c2:	2005      	movs	r0, #5
 80006c4:	5488      	strb	r0, [r1, r2]
 80006c6:	605d      	str	r5, [r3, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	bd38      	pop	{r3, r4, r5, pc}

080006cc <d_source_name>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	4604      	mov	r4, r0
 80006d0:	300c      	adds	r0, #12
 80006d2:	f7ff ff7b 	bl	80005cc <d_number.isra.0>
 80006d6:	1e06      	subs	r6, r0, #0
 80006d8:	dd4e      	ble.n	8000778 <d_source_name+0xac>
 80006da:	68e5      	ldr	r5, [r4, #12]
 80006dc:	6863      	ldr	r3, [r4, #4]
 80006de:	1b5b      	subs	r3, r3, r5
 80006e0:	429e      	cmp	r6, r3
 80006e2:	dc2c      	bgt.n	800073e <d_source_name+0x72>
 80006e4:	68a2      	ldr	r2, [r4, #8]
 80006e6:	19ab      	adds	r3, r5, r6
 80006e8:	0752      	lsls	r2, r2, #29
 80006ea:	60e3      	str	r3, [r4, #12]
 80006ec:	d504      	bpl.n	80006f8 <d_source_name+0x2c>
 80006ee:	5daa      	ldrb	r2, [r5, r6]
 80006f0:	2a24      	cmp	r2, #36	; 0x24
 80006f2:	bf04      	itt	eq
 80006f4:	3301      	addeq	r3, #1
 80006f6:	60e3      	streq	r3, [r4, #12]
 80006f8:	2e09      	cmp	r6, #9
 80006fa:	dd0c      	ble.n	8000716 <d_source_name+0x4a>
 80006fc:	2208      	movs	r2, #8
 80006fe:	491f      	ldr	r1, [pc, #124]	; (800077c <d_source_name+0xb0>)
 8000700:	4628      	mov	r0, r5
 8000702:	f010 fded 	bl	80112e0 <memcmp>
 8000706:	b930      	cbnz	r0, 8000716 <d_source_name+0x4a>
 8000708:	7a2b      	ldrb	r3, [r5, #8]
 800070a:	2b2e      	cmp	r3, #46	; 0x2e
 800070c:	d01a      	beq.n	8000744 <d_source_name+0x78>
 800070e:	2b5f      	cmp	r3, #95	; 0x5f
 8000710:	d018      	beq.n	8000744 <d_source_name+0x78>
 8000712:	2b24      	cmp	r3, #36	; 0x24
 8000714:	d016      	beq.n	8000744 <d_source_name+0x78>
 8000716:	6963      	ldr	r3, [r4, #20]
 8000718:	69a2      	ldr	r2, [r4, #24]
 800071a:	4293      	cmp	r3, r2
 800071c:	da0f      	bge.n	800073e <d_source_name+0x72>
 800071e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000722:	6921      	ldr	r1, [r4, #16]
 8000724:	3301      	adds	r3, #1
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	6163      	str	r3, [r4, #20]
 800072a:	188b      	adds	r3, r1, r2
 800072c:	d007      	beq.n	800073e <d_source_name+0x72>
 800072e:	b135      	cbz	r5, 800073e <d_source_name+0x72>
 8000730:	2000      	movs	r0, #0
 8000732:	5488      	strb	r0, [r1, r2]
 8000734:	4618      	mov	r0, r3
 8000736:	605d      	str	r5, [r3, #4]
 8000738:	609e      	str	r6, [r3, #8]
 800073a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	2000      	movs	r0, #0
 8000740:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	7a6b      	ldrb	r3, [r5, #9]
 8000746:	2b4e      	cmp	r3, #78	; 0x4e
 8000748:	d1e5      	bne.n	8000716 <d_source_name+0x4a>
 800074a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800074c:	6962      	ldr	r2, [r4, #20]
 800074e:	69a1      	ldr	r1, [r4, #24]
 8000750:	3316      	adds	r3, #22
 8000752:	1b9e      	subs	r6, r3, r6
 8000754:	428a      	cmp	r2, r1
 8000756:	6326      	str	r6, [r4, #48]	; 0x30
 8000758:	daf1      	bge.n	800073e <d_source_name+0x72>
 800075a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800075e:	6921      	ldr	r1, [r4, #16]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	3201      	adds	r2, #1
 8000764:	18c8      	adds	r0, r1, r3
 8000766:	6162      	str	r2, [r4, #20]
 8000768:	d0e9      	beq.n	800073e <d_source_name+0x72>
 800076a:	2500      	movs	r5, #0
 800076c:	54cd      	strb	r5, [r1, r3]
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <d_source_name+0xb4>)
 8000770:	6042      	str	r2, [r0, #4]
 8000772:	2315      	movs	r3, #21
 8000774:	6083      	str	r3, [r0, #8]
 8000776:	e7e3      	b.n	8000740 <d_source_name+0x74>
 8000778:	2000      	movs	r0, #0
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	080161e0 	.word	0x080161e0
 8000780:	080161ec 	.word	0x080161ec

08000784 <d_abi_tags>:
 8000784:	b538      	push	{r3, r4, r5, lr}
 8000786:	68c3      	ldr	r3, [r0, #12]
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	2a42      	cmp	r2, #66	; 0x42
 800078c:	460d      	mov	r5, r1
 800078e:	d110      	bne.n	80007b2 <d_abi_tags+0x2e>
 8000790:	4604      	mov	r4, r0
 8000792:	3301      	adds	r3, #1
 8000794:	60e3      	str	r3, [r4, #12]
 8000796:	4620      	mov	r0, r4
 8000798:	f7ff ff98 	bl	80006cc <d_source_name>
 800079c:	462a      	mov	r2, r5
 800079e:	4603      	mov	r3, r0
 80007a0:	214a      	movs	r1, #74	; 0x4a
 80007a2:	4620      	mov	r0, r4
 80007a4:	f7ff fdcc 	bl	8000340 <d_make_comp>
 80007a8:	68e3      	ldr	r3, [r4, #12]
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	2a42      	cmp	r2, #66	; 0x42
 80007ae:	4605      	mov	r5, r0
 80007b0:	d0ef      	beq.n	8000792 <d_abi_tags+0xe>
 80007b2:	4628      	mov	r0, r5
 80007b4:	bd38      	pop	{r3, r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <d_substitution>:
 80007b8:	68c2      	ldr	r2, [r0, #12]
 80007ba:	7813      	ldrb	r3, [r2, #0]
 80007bc:	2b53      	cmp	r3, #83	; 0x53
 80007be:	d002      	beq.n	80007c6 <d_substitution+0xe>
 80007c0:	2100      	movs	r1, #0
 80007c2:	4608      	mov	r0, r1
 80007c4:	4770      	bx	lr
 80007c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ca:	1c53      	adds	r3, r2, #1
 80007cc:	60c3      	str	r3, [r0, #12]
 80007ce:	7853      	ldrb	r3, [r2, #1]
 80007d0:	b18b      	cbz	r3, 80007f6 <d_substitution+0x3e>
 80007d2:	1c93      	adds	r3, r2, #2
 80007d4:	60c3      	str	r3, [r0, #12]
 80007d6:	7854      	ldrb	r4, [r2, #1]
 80007d8:	2c5f      	cmp	r4, #95	; 0x5f
 80007da:	d12d      	bne.n	8000838 <d_substitution+0x80>
 80007dc:	2300      	movs	r3, #0
 80007de:	6a02      	ldr	r2, [r0, #32]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d21c      	bcs.n	800081e <d_substitution+0x66>
 80007e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80007e6:	69c1      	ldr	r1, [r0, #28]
 80007e8:	3201      	adds	r2, #1
 80007ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80007ee:	6282      	str	r2, [r0, #40]	; 0x28
 80007f0:	4608      	mov	r0, r1
 80007f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007f6:	461c      	mov	r4, r3
 80007f8:	6883      	ldr	r3, [r0, #8]
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2501      	movne	r5, #1
 8000804:	2500      	moveq	r5, #0
 8000806:	d00e      	beq.n	8000826 <d_substitution+0x6e>
 8000808:	4b4d      	ldr	r3, [pc, #308]	; (8000940 <d_substitution+0x188>)
 800080a:	2274      	movs	r2, #116	; 0x74
 800080c:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
 8000810:	e000      	b.n	8000814 <d_substitution+0x5c>
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	4294      	cmp	r4, r2
 8000816:	d038      	beq.n	800088a <d_substitution+0xd2>
 8000818:	331c      	adds	r3, #28
 800081a:	428b      	cmp	r3, r1
 800081c:	d3f9      	bcc.n	8000812 <d_substitution+0x5a>
 800081e:	2100      	movs	r1, #0
 8000820:	4608      	mov	r0, r1
 8000822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000826:	2900      	cmp	r1, #0
 8000828:	d0ee      	beq.n	8000808 <d_substitution+0x50>
 800082a:	68c3      	ldr	r3, [r0, #12]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b43      	subs	r3, #67	; 0x43
 8000830:	2b01      	cmp	r3, #1
 8000832:	bf98      	it	ls
 8000834:	2501      	movls	r5, #1
 8000836:	e7e7      	b.n	8000808 <d_substitution+0x50>
 8000838:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 800083c:	b2eb      	uxtb	r3, r5
 800083e:	2b09      	cmp	r3, #9
 8000840:	d879      	bhi.n	8000936 <d_substitution+0x17e>
 8000842:	2100      	movs	r1, #0
 8000844:	e00d      	b.n	8000862 <d_substitution+0xaa>
 8000846:	3b30      	subs	r3, #48	; 0x30
 8000848:	4299      	cmp	r1, r3
 800084a:	d8e8      	bhi.n	800081e <d_substitution+0x66>
 800084c:	68c2      	ldr	r2, [r0, #12]
 800084e:	7814      	ldrb	r4, [r2, #0]
 8000850:	1c51      	adds	r1, r2, #1
 8000852:	b11c      	cbz	r4, 800085c <d_substitution+0xa4>
 8000854:	60c1      	str	r1, [r0, #12]
 8000856:	7814      	ldrb	r4, [r2, #0]
 8000858:	2c5f      	cmp	r4, #95	; 0x5f
 800085a:	d014      	beq.n	8000886 <d_substitution+0xce>
 800085c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8000860:	4619      	mov	r1, r3
 8000862:	b2ed      	uxtb	r5, r5
 8000864:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8000868:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800086c:	2d09      	cmp	r5, #9
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000874:	d9e7      	bls.n	8000846 <d_substitution+0x8e>
 8000876:	2a19      	cmp	r2, #25
 8000878:	d8d1      	bhi.n	800081e <d_substitution+0x66>
 800087a:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800087e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8000882:	3b37      	subs	r3, #55	; 0x37
 8000884:	e7e0      	b.n	8000848 <d_substitution+0x90>
 8000886:	3301      	adds	r3, #1
 8000888:	e7a9      	b.n	80007de <d_substitution+0x26>
 800088a:	695c      	ldr	r4, [r3, #20]
 800088c:	2c00      	cmp	r4, #0
 800088e:	d049      	beq.n	8000924 <d_substitution+0x16c>
 8000890:	6942      	ldr	r2, [r0, #20]
 8000892:	6981      	ldr	r1, [r0, #24]
 8000894:	428a      	cmp	r2, r1
 8000896:	da43      	bge.n	8000920 <d_substitution+0x168>
 8000898:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800089c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80008a0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80008a4:	00b6      	lsls	r6, r6, #2
 80008a6:	3201      	adds	r2, #1
 80008a8:	eb1e 0706 	adds.w	r7, lr, r6
 80008ac:	6142      	str	r2, [r0, #20]
 80008ae:	d040      	beq.n	8000932 <d_substitution+0x17a>
 80008b0:	f04f 0c18 	mov.w	ip, #24
 80008b4:	f80e c006 	strb.w	ip, [lr, r6]
 80008b8:	463e      	mov	r6, r7
 80008ba:	607c      	str	r4, [r7, #4]
 80008bc:	f8c7 8008 	str.w	r8, [r7, #8]
 80008c0:	62c6      	str	r6, [r0, #44]	; 0x2c
 80008c2:	b345      	cbz	r5, 8000916 <d_substitution+0x15e>
 80008c4:	68de      	ldr	r6, [r3, #12]
 80008c6:	691c      	ldr	r4, [r3, #16]
 80008c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80008ca:	4291      	cmp	r1, r2
 80008cc:	4423      	add	r3, r4
 80008ce:	6303      	str	r3, [r0, #48]	; 0x30
 80008d0:	dd24      	ble.n	800091c <d_substitution+0x164>
 80008d2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80008d6:	6905      	ldr	r5, [r0, #16]
 80008d8:	0089      	lsls	r1, r1, #2
 80008da:	3201      	adds	r2, #1
 80008dc:	186b      	adds	r3, r5, r1
 80008de:	6142      	str	r2, [r0, #20]
 80008e0:	d025      	beq.n	800092e <d_substitution+0x176>
 80008e2:	2218      	movs	r2, #24
 80008e4:	546a      	strb	r2, [r5, r1]
 80008e6:	4619      	mov	r1, r3
 80008e8:	605e      	str	r6, [r3, #4]
 80008ea:	609c      	str	r4, [r3, #8]
 80008ec:	68c3      	ldr	r3, [r0, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b42      	cmp	r3, #66	; 0x42
 80008f2:	f47f af7d 	bne.w	80007f0 <d_substitution+0x38>
 80008f6:	4604      	mov	r4, r0
 80008f8:	f7ff ff44 	bl	8000784 <d_abi_tags>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d08e      	beq.n	800081e <d_substitution+0x66>
 8000900:	6a23      	ldr	r3, [r4, #32]
 8000902:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000904:	4293      	cmp	r3, r2
 8000906:	da10      	bge.n	800092a <d_substitution+0x172>
 8000908:	69e1      	ldr	r1, [r4, #28]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000910:	4601      	mov	r1, r0
 8000912:	6222      	str	r2, [r4, #32]
 8000914:	e76c      	b.n	80007f0 <d_substitution+0x38>
 8000916:	685e      	ldr	r6, [r3, #4]
 8000918:	689c      	ldr	r4, [r3, #8]
 800091a:	e7d5      	b.n	80008c8 <d_substitution+0x110>
 800091c:	2100      	movs	r1, #0
 800091e:	e7e5      	b.n	80008ec <d_substitution+0x134>
 8000920:	2600      	movs	r6, #0
 8000922:	e7cd      	b.n	80008c0 <d_substitution+0x108>
 8000924:	6981      	ldr	r1, [r0, #24]
 8000926:	6942      	ldr	r2, [r0, #20]
 8000928:	e7cb      	b.n	80008c2 <d_substitution+0x10a>
 800092a:	4601      	mov	r1, r0
 800092c:	e760      	b.n	80007f0 <d_substitution+0x38>
 800092e:	4619      	mov	r1, r3
 8000930:	e7dc      	b.n	80008ec <d_substitution+0x134>
 8000932:	463e      	mov	r6, r7
 8000934:	e7c4      	b.n	80008c0 <d_substitution+0x108>
 8000936:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800093a:	2b19      	cmp	r3, #25
 800093c:	d981      	bls.n	8000842 <d_substitution+0x8a>
 800093e:	e75b      	b.n	80007f8 <d_substitution+0x40>
 8000940:	08015280 	.word	0x08015280

08000944 <d_call_offset>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4604      	mov	r4, r0
 8000948:	b929      	cbnz	r1, 8000956 <d_call_offset+0x12>
 800094a:	68c3      	ldr	r3, [r0, #12]
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	b132      	cbz	r2, 800095e <d_call_offset+0x1a>
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	60c2      	str	r2, [r0, #12]
 8000954:	7819      	ldrb	r1, [r3, #0]
 8000956:	2968      	cmp	r1, #104	; 0x68
 8000958:	d019      	beq.n	800098e <d_call_offset+0x4a>
 800095a:	2976      	cmp	r1, #118	; 0x76
 800095c:	d001      	beq.n	8000962 <d_call_offset+0x1e>
 800095e:	2000      	movs	r0, #0
 8000960:	bd38      	pop	{r3, r4, r5, pc}
 8000962:	f104 050c 	add.w	r5, r4, #12
 8000966:	4628      	mov	r0, r5
 8000968:	f7ff fe30 	bl	80005cc <d_number.isra.0>
 800096c:	68e3      	ldr	r3, [r4, #12]
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	2a5f      	cmp	r2, #95	; 0x5f
 8000972:	d1f4      	bne.n	800095e <d_call_offset+0x1a>
 8000974:	3301      	adds	r3, #1
 8000976:	60e3      	str	r3, [r4, #12]
 8000978:	4628      	mov	r0, r5
 800097a:	f7ff fe27 	bl	80005cc <d_number.isra.0>
 800097e:	68e3      	ldr	r3, [r4, #12]
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	2a5f      	cmp	r2, #95	; 0x5f
 8000984:	d1eb      	bne.n	800095e <d_call_offset+0x1a>
 8000986:	3301      	adds	r3, #1
 8000988:	60e3      	str	r3, [r4, #12]
 800098a:	2001      	movs	r0, #1
 800098c:	bd38      	pop	{r3, r4, r5, pc}
 800098e:	f104 000c 	add.w	r0, r4, #12
 8000992:	f7ff fe1b 	bl	80005cc <d_number.isra.0>
 8000996:	e7f2      	b.n	800097e <d_call_offset+0x3a>

08000998 <d_lookup_template_argument.isra.6>:
 8000998:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800099c:	4602      	mov	r2, r0
 800099e:	b1c3      	cbz	r3, 80009d2 <d_lookup_template_argument.isra.6+0x3a>
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	680b      	ldr	r3, [r1, #0]
 80009a4:	6890      	ldr	r0, [r2, #8]
 80009a6:	b170      	cbz	r0, 80009c6 <d_lookup_template_argument.isra.6+0x2e>
 80009a8:	7802      	ldrb	r2, [r0, #0]
 80009aa:	2a2f      	cmp	r2, #47	; 0x2f
 80009ac:	d10d      	bne.n	80009ca <d_lookup_template_argument.isra.6+0x32>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dc04      	bgt.n	80009bc <d_lookup_template_argument.isra.6+0x24>
 80009b2:	e009      	b.n	80009c8 <d_lookup_template_argument.isra.6+0x30>
 80009b4:	7802      	ldrb	r2, [r0, #0]
 80009b6:	2a2f      	cmp	r2, #47	; 0x2f
 80009b8:	d107      	bne.n	80009ca <d_lookup_template_argument.isra.6+0x32>
 80009ba:	b143      	cbz	r3, 80009ce <d_lookup_template_argument.isra.6+0x36>
 80009bc:	6880      	ldr	r0, [r0, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d1f7      	bne.n	80009b4 <d_lookup_template_argument.isra.6+0x1c>
 80009c4:	4770      	bx	lr
 80009c6:	4770      	bx	lr
 80009c8:	d001      	beq.n	80009ce <d_lookup_template_argument.isra.6+0x36>
 80009ca:	2000      	movs	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	6840      	ldr	r0, [r0, #4]
 80009d0:	4770      	bx	lr
 80009d2:	2101      	movs	r1, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 80009da:	4770      	bx	lr

080009dc <d_find_pack>:
 80009dc:	2900      	cmp	r1, #0
 80009de:	d041      	beq.n	8000a64 <d_find_pack+0x88>
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4605      	mov	r5, r0
 80009e4:	460c      	mov	r4, r1
 80009e6:	7823      	ldrb	r3, [r4, #0]
 80009e8:	2b4a      	cmp	r3, #74	; 0x4a
 80009ea:	d827      	bhi.n	8000a3c <d_find_pack+0x60>
 80009ec:	e8df f003 	tbb	[pc, r3]
 80009f0:	2626262e 	.word	0x2626262e
 80009f4:	2b2e3026 	.word	0x2b2e3026
 80009f8:	2626262b 	.word	0x2626262b
 80009fc:	26262626 	.word	0x26262626
 8000a00:	26262626 	.word	0x26262626
 8000a04:	26262626 	.word	0x26262626
 8000a08:	2626262e 	.word	0x2626262e
 8000a0c:	26262626 	.word	0x26262626
 8000a10:	26262626 	.word	0x26262626
 8000a14:	2e262626 	.word	0x2e262626
 8000a18:	26262626 	.word	0x26262626
 8000a1c:	26262626 	.word	0x26262626
 8000a20:	262b2e26 	.word	0x262b2e26
 8000a24:	26262626 	.word	0x26262626
 8000a28:	26262626 	.word	0x26262626
 8000a2c:	2e262626 	.word	0x2e262626
 8000a30:	26262626 	.word	0x26262626
 8000a34:	262e262e 	.word	0x262e262e
 8000a38:	2e26      	.short	0x2e26
 8000a3a:	2e          	.byte	0x2e
 8000a3b:	00          	.byte	0x00
 8000a3c:	6861      	ldr	r1, [r4, #4]
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f7ff ffcc 	bl	80009dc <d_find_pack>
 8000a44:	b918      	cbnz	r0, 8000a4e <d_find_pack+0x72>
 8000a46:	68a4      	ldr	r4, [r4, #8]
 8000a48:	2c00      	cmp	r4, #0
 8000a4a:	d1cc      	bne.n	80009e6 <d_find_pack+0xa>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	1d21      	adds	r1, r4, #4
 8000a52:	4628      	mov	r0, r5
 8000a54:	f7ff ffa0 	bl	8000998 <d_lookup_template_argument.isra.6>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d0f7      	beq.n	8000a4c <d_find_pack+0x70>
 8000a5c:	7803      	ldrb	r3, [r0, #0]
 8000a5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000a60:	d1f4      	bne.n	8000a4c <d_find_pack+0x70>
 8000a62:	bd38      	pop	{r3, r4, r5, pc}
 8000a64:	2000      	movs	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <d_growable_string_callback_adapter>:
 8000a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6a:	6853      	ldr	r3, [r2, #4]
 8000a6c:	6894      	ldr	r4, [r2, #8]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	440b      	add	r3, r1
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	b083      	sub	sp, #12
 8000a76:	4615      	mov	r5, r2
 8000a78:	460e      	mov	r6, r1
 8000a7a:	4607      	mov	r7, r0
 8000a7c:	d813      	bhi.n	8000aa6 <d_growable_string_callback_adapter+0x3e>
 8000a7e:	68ec      	ldr	r4, [r5, #12]
 8000a80:	b10c      	cbz	r4, 8000a86 <d_growable_string_callback_adapter+0x1e>
 8000a82:	b003      	add	sp, #12
 8000a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a86:	e895 0009 	ldmia.w	r5, {r0, r3}
 8000a8a:	4632      	mov	r2, r6
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	4418      	add	r0, r3
 8000a90:	f009 fa36 	bl	8009f00 <memcpy>
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	686a      	ldr	r2, [r5, #4]
 8000a98:	4433      	add	r3, r6
 8000a9a:	549c      	strb	r4, [r3, r2]
 8000a9c:	686b      	ldr	r3, [r5, #4]
 8000a9e:	441e      	add	r6, r3
 8000aa0:	606e      	str	r6, [r5, #4]
 8000aa2:	b003      	add	sp, #12
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	68d2      	ldr	r2, [r2, #12]
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d1ea      	bne.n	8000a82 <d_growable_string_callback_adapter+0x1a>
 8000aac:	b91c      	cbnz	r4, 8000ab6 <d_growable_string_callback_adapter+0x4e>
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	f04f 0402 	mov.w	r4, #2
 8000ab4:	d902      	bls.n	8000abc <d_growable_string_callback_adapter+0x54>
 8000ab6:	0064      	lsls	r4, r4, #1
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	d8fc      	bhi.n	8000ab6 <d_growable_string_callback_adapter+0x4e>
 8000abc:	4621      	mov	r1, r4
 8000abe:	6828      	ldr	r0, [r5, #0]
 8000ac0:	f010 fd3e 	bl	8011540 <realloc>
 8000ac4:	b110      	cbz	r0, 8000acc <d_growable_string_callback_adapter+0x64>
 8000ac6:	6028      	str	r0, [r5, #0]
 8000ac8:	60ac      	str	r4, [r5, #8]
 8000aca:	e7d8      	b.n	8000a7e <d_growable_string_callback_adapter+0x16>
 8000acc:	9001      	str	r0, [sp, #4]
 8000ace:	6828      	ldr	r0, [r5, #0]
 8000ad0:	f010 f946 	bl	8010d60 <free>
 8000ad4:	9b01      	ldr	r3, [sp, #4]
 8000ad6:	602b      	str	r3, [r5, #0]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	606b      	str	r3, [r5, #4]
 8000adc:	60ab      	str	r3, [r5, #8]
 8000ade:	60ea      	str	r2, [r5, #12]
 8000ae0:	e7cf      	b.n	8000a82 <d_growable_string_callback_adapter+0x1a>
 8000ae2:	bf00      	nop

08000ae4 <d_print_comp_inner>:
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	4604      	mov	r4, r0
 8000aea:	b095      	sub	sp, #84	; 0x54
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f000 80c3 	beq.w	8000c78 <d_print_comp_inner+0x194>
 8000af2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 80b6 	bne.w	8000c68 <d_print_comp_inner+0x184>
 8000afc:	7813      	ldrb	r3, [r2, #0]
 8000afe:	460f      	mov	r7, r1
 8000b00:	4615      	mov	r5, r2
 8000b02:	2b4b      	cmp	r3, #75	; 0x4b
 8000b04:	f201 81eb 	bhi.w	8001ede <d_print_comp_inner+0x13fa>
 8000b08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000b0c:	094c096d 	.word	0x094c096d
 8000b10:	08bf094c 	.word	0x08bf094c
 8000b14:	09cc087b 	.word	0x09cc087b
 8000b18:	09e409a2 	.word	0x09e409a2
 8000b1c:	085407c7 	.word	0x085407c7
 8000b20:	0806082d 	.word	0x0806082d
 8000b24:	05d607df 	.word	0x05d607df
 8000b28:	057a05af 	.word	0x057a05af
 8000b2c:	07100553 	.word	0x07100553
 8000b30:	06c206e9 	.word	0x06c206e9
 8000b34:	0674069b 	.word	0x0674069b
 8000b38:	0626064d 	.word	0x0626064d
 8000b3c:	07ad05fd 	.word	0x07ad05fd
 8000b40:	07ad07ad 	.word	0x07ad07ad
 8000b44:	07a807a8 	.word	0x07a807a8
 8000b48:	07a807a8 	.word	0x07a807a8
 8000b4c:	07a807a8 	.word	0x07a807a8
 8000b50:	077607a8 	.word	0x077607a8
 8000b54:	07a80776 	.word	0x07a80776
 8000b58:	073707a8 	.word	0x073707a8
 8000b5c:	04fd07da 	.word	0x04fd07da
 8000b60:	04760491 	.word	0x04760491
 8000b64:	047603d4 	.word	0x047603d4
 8000b68:	03940394 	.word	0x03940394
 8000b6c:	03470371 	.word	0x03470371
 8000b70:	02f90320 	.word	0x02f90320
 8000b74:	02c702f5 	.word	0x02c702f5
 8000b78:	0472004c 	.word	0x0472004c
 8000b7c:	04170512 	.word	0x04170512
 8000b80:	04420417 	.word	0x04420417
 8000b84:	041b0442 	.word	0x041b0442
 8000b88:	02b102be 	.word	0x02b102be
 8000b8c:	0233025a 	.word	0x0233025a
 8000b90:	01d001f7 	.word	0x01d001f7
 8000b94:	09e901a9 	.word	0x09e901a9
 8000b98:	028a0183 	.word	0x028a0183
 8000b9c:	0110015c 	.word	0x0110015c
 8000ba0:	00bc00e6 	.word	0x00bc00e6
 8000ba4:	68ae      	ldr	r6, [r5, #8]
 8000ba6:	7833      	ldrb	r3, [r6, #0]
 8000ba8:	2b37      	cmp	r3, #55	; 0x37
 8000baa:	d165      	bne.n	8000c78 <d_print_comp_inner+0x194>
 8000bac:	686a      	ldr	r2, [r5, #4]
 8000bae:	6853      	ldr	r3, [r2, #4]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	7848      	ldrb	r0, [r1, #1]
 8000bb4:	2863      	cmp	r0, #99	; 0x63
 8000bb6:	f002 808b 	beq.w	8002cd0 <d_print_comp_inner+0x21ec>
 8000bba:	7811      	ldrb	r1, [r2, #0]
 8000bbc:	2931      	cmp	r1, #49	; 0x31
 8000bbe:	f002 8160 	beq.w	8002e82 <d_print_comp_inner+0x239e>
 8000bc2:	6853      	ldr	r3, [r2, #4]
 8000bc4:	49d1      	ldr	r1, [pc, #836]	; (8000f0c <d_print_comp_inner+0x428>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	f009 fa3e 	bl	800a048 <strcmp>
 8000bcc:	6872      	ldr	r2, [r6, #4]
 8000bce:	b918      	cbnz	r0, 8000bd8 <d_print_comp_inner+0xf4>
 8000bd0:	7813      	ldrb	r3, [r2, #0]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	f002 81ef 	beq.w	8002fb6 <d_print_comp_inner+0x24d2>
 8000bd8:	4639      	mov	r1, r7
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f003 fa48 	bl	8004070 <d_print_subexpr>
 8000be0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8000be4:	49ca      	ldr	r1, [pc, #808]	; (8000f10 <d_print_comp_inner+0x42c>)
 8000be6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000bea:	f8d3 9000 	ldr.w	r9, [r3]
 8000bee:	4648      	mov	r0, r9
 8000bf0:	f009 fa2a 	bl	800a048 <strcmp>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	f041 87f0 	bne.w	8002bdc <d_print_comp_inner+0x20f8>
 8000bfc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000c00:	29ff      	cmp	r1, #255	; 0xff
 8000c02:	f002 827e 	beq.w	8003102 <d_print_comp_inner+0x261e>
 8000c06:	1c4a      	adds	r2, r1, #1
 8000c08:	235b      	movs	r3, #91	; 0x5b
 8000c0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000c0e:	5463      	strb	r3, [r4, r1]
 8000c10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8000c14:	68ab      	ldr	r3, [r5, #8]
 8000c16:	4639      	mov	r1, r7
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f002 fb7c 	bl	8003318 <d_print_comp>
 8000c20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000c24:	29ff      	cmp	r1, #255	; 0xff
 8000c26:	f002 827c 	beq.w	8003122 <d_print_comp_inner+0x263e>
 8000c2a:	235d      	movs	r3, #93	; 0x5d
 8000c2c:	1c4a      	adds	r2, r1, #1
 8000c2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000c32:	5463      	strb	r3, [r4, r1]
 8000c34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8000c38:	686b      	ldr	r3, [r5, #4]
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	2a31      	cmp	r2, #49	; 0x31
 8000c3e:	d113      	bne.n	8000c68 <d_print_comp_inner+0x184>
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	2a01      	cmp	r2, #1
 8000c46:	d10f      	bne.n	8000c68 <d_print_comp_inner+0x184>
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8000c4e:	d10b      	bne.n	8000c68 <d_print_comp_inner+0x184>
 8000c50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000c54:	29ff      	cmp	r1, #255	; 0xff
 8000c56:	f002 8325 	beq.w	80032a4 <d_print_comp_inner+0x27c0>
 8000c5a:	2329      	movs	r3, #41	; 0x29
 8000c5c:	1c4a      	adds	r2, r1, #1
 8000c5e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000c62:	5463      	strb	r3, [r4, r1]
 8000c64:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8000c68:	b015      	add	sp, #84	; 0x54
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c6e:	f1b8 0f00 	cmp.w	r8, #0
 8000c72:	d001      	beq.n	8000c78 <d_print_comp_inner+0x194>
 8000c74:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8000c7e:	b015      	add	sp, #84	; 0x54
 8000c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c84:	4ea3      	ldr	r6, [pc, #652]	; (8000f14 <d_print_comp_inner+0x430>)
 8000c86:	686a      	ldr	r2, [r5, #4]
 8000c88:	f002 fb46 	bl	8003318 <d_print_comp>
 8000c8c:	f106 0a08 	add.w	sl, r6, #8
 8000c90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000c94:	f04f 0900 	mov.w	r9, #0
 8000c98:	e00a      	b.n	8000cb0 <d_print_comp_inner+0x1cc>
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	3101      	adds	r1, #1
 8000c9e:	45b2      	cmp	sl, r6
 8000ca0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000ca4:	f804 8003 	strb.w	r8, [r4, r3]
 8000ca8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000cac:	f001 8299 	beq.w	80021e2 <d_print_comp_inner+0x16fe>
 8000cb0:	29ff      	cmp	r1, #255	; 0xff
 8000cb2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000cb6:	d1f0      	bne.n	8000c9a <d_print_comp_inner+0x1b6>
 8000cb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000cbc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000cc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	4798      	blx	r3
 8000cc8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e7e2      	b.n	8000c9e <d_print_comp_inner+0x1ba>
 8000cd8:	4e8f      	ldr	r6, [pc, #572]	; (8000f18 <d_print_comp_inner+0x434>)
 8000cda:	686a      	ldr	r2, [r5, #4]
 8000cdc:	f002 fb1c 	bl	8003318 <d_print_comp>
 8000ce0:	f106 0a05 	add.w	sl, r6, #5
 8000ce4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000ce8:	f04f 0900 	mov.w	r9, #0
 8000cec:	e00a      	b.n	8000d04 <d_print_comp_inner+0x220>
 8000cee:	460b      	mov	r3, r1
 8000cf0:	3101      	adds	r1, #1
 8000cf2:	45b2      	cmp	sl, r6
 8000cf4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000cf8:	f804 8003 	strb.w	r8, [r4, r3]
 8000cfc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000d00:	f001 8247 	beq.w	8002192 <d_print_comp_inner+0x16ae>
 8000d04:	29ff      	cmp	r1, #255	; 0xff
 8000d06:	f816 8b01 	ldrb.w	r8, [r6], #1
 8000d0a:	d1f0      	bne.n	8000cee <d_print_comp_inner+0x20a>
 8000d0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000d10:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000d14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4798      	blx	r3
 8000d1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000d20:	3301      	adds	r3, #1
 8000d22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000d26:	2101      	movs	r1, #1
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e7e2      	b.n	8000cf2 <d_print_comp_inner+0x20e>
 8000d2c:	6869      	ldr	r1, [r5, #4]
 8000d2e:	f7ff fe55 	bl	80009dc <d_find_pack>
 8000d32:	f04f 0900 	mov.w	r9, #0
 8000d36:	2800      	cmp	r0, #0
 8000d38:	f002 814b 	beq.w	8002fd2 <d_print_comp_inner+0x24ee>
 8000d3c:	7803      	ldrb	r3, [r0, #0]
 8000d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d40:	f041 8315 	bne.w	800236e <d_print_comp_inner+0x188a>
 8000d44:	6843      	ldr	r3, [r0, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f001 8311 	beq.w	800236e <d_print_comp_inner+0x188a>
 8000d4c:	6880      	ldr	r0, [r0, #8]
 8000d4e:	f109 0901 	add.w	r9, r9, #1
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d1f2      	bne.n	8000d3c <d_print_comp_inner+0x258>
 8000d56:	686b      	ldr	r3, [r5, #4]
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	f04f 0b00 	mov.w	fp, #0
 8000d5e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8000d62:	46da      	mov	sl, fp
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	f8c4 b11c 	str.w	fp, [r4, #284]	; 0x11c
 8000d6a:	9a00      	ldr	r2, [sp, #0]
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f002 fad2 	bl	8003318 <d_print_comp>
 8000d74:	9b01      	ldr	r3, [sp, #4]
 8000d76:	455b      	cmp	r3, fp
 8000d78:	f341 80b6 	ble.w	8001ee8 <d_print_comp_inner+0x1404>
 8000d7c:	4d67      	ldr	r5, [pc, #412]	; (8000f1c <d_print_comp_inner+0x438>)
 8000d7e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000d82:	f105 0802 	add.w	r8, r5, #2
 8000d86:	e009      	b.n	8000d9c <d_print_comp_inner+0x2b8>
 8000d88:	460b      	mov	r3, r1
 8000d8a:	3101      	adds	r1, #1
 8000d8c:	45a8      	cmp	r8, r5
 8000d8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000d92:	54e6      	strb	r6, [r4, r3]
 8000d94:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000d98:	f001 80a6 	beq.w	8001ee8 <d_print_comp_inner+0x1404>
 8000d9c:	29ff      	cmp	r1, #255	; 0xff
 8000d9e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000da2:	d1f1      	bne.n	8000d88 <d_print_comp_inner+0x2a4>
 8000da4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000da8:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8000dac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000db0:	4620      	mov	r0, r4
 8000db2:	4798      	blx	r3
 8000db4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000db8:	3301      	adds	r3, #1
 8000dba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e7e3      	b.n	8000d8c <d_print_comp_inner+0x2a8>
 8000dc4:	4e56      	ldr	r6, [pc, #344]	; (8000f20 <d_print_comp_inner+0x43c>)
 8000dc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000dca:	f106 0a1a 	add.w	sl, r6, #26
 8000dce:	f04f 0900 	mov.w	r9, #0
 8000dd2:	e00a      	b.n	8000dea <d_print_comp_inner+0x306>
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	3101      	adds	r1, #1
 8000dd8:	45b2      	cmp	sl, r6
 8000dda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000dde:	f804 8003 	strb.w	r8, [r4, r3]
 8000de2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000de6:	f001 81e7 	beq.w	80021b8 <d_print_comp_inner+0x16d4>
 8000dea:	29ff      	cmp	r1, #255	; 0xff
 8000dec:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000df0:	d1f0      	bne.n	8000dd4 <d_print_comp_inner+0x2f0>
 8000df2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000df6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000dfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000dfe:	4620      	mov	r0, r4
 8000e00:	4798      	blx	r3
 8000e02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000e06:	3301      	adds	r3, #1
 8000e08:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e7e2      	b.n	8000dd8 <d_print_comp_inner+0x2f4>
 8000e12:	4e44      	ldr	r6, [pc, #272]	; (8000f24 <d_print_comp_inner+0x440>)
 8000e14:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000e18:	f106 090e 	add.w	r9, r6, #14
 8000e1c:	f04f 0800 	mov.w	r8, #0
 8000e20:	e009      	b.n	8000e36 <d_print_comp_inner+0x352>
 8000e22:	460b      	mov	r3, r1
 8000e24:	3101      	adds	r1, #1
 8000e26:	45b1      	cmp	r9, r6
 8000e28:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000e2c:	54e7      	strb	r7, [r4, r3]
 8000e2e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8000e32:	f001 80b0 	beq.w	8001f96 <d_print_comp_inner+0x14b2>
 8000e36:	29ff      	cmp	r1, #255	; 0xff
 8000e38:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8000e3c:	d1f1      	bne.n	8000e22 <d_print_comp_inner+0x33e>
 8000e3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000e42:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000e46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	4798      	blx	r3
 8000e4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000e52:	3301      	adds	r3, #1
 8000e54:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e7e3      	b.n	8000e26 <d_print_comp_inner+0x342>
 8000e5e:	4e32      	ldr	r6, [pc, #200]	; (8000f28 <d_print_comp_inner+0x444>)
 8000e60:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000e64:	f106 0a08 	add.w	sl, r6, #8
 8000e68:	f04f 0900 	mov.w	r9, #0
 8000e6c:	e00a      	b.n	8000e84 <d_print_comp_inner+0x3a0>
 8000e6e:	460b      	mov	r3, r1
 8000e70:	3101      	adds	r1, #1
 8000e72:	45b2      	cmp	sl, r6
 8000e74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000e78:	f804 8003 	strb.w	r8, [r4, r3]
 8000e7c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000e80:	f001 80c5 	beq.w	800200e <d_print_comp_inner+0x152a>
 8000e84:	29ff      	cmp	r1, #255	; 0xff
 8000e86:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000e8a:	d1f0      	bne.n	8000e6e <d_print_comp_inner+0x38a>
 8000e8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000e90:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000e94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000e98:	4620      	mov	r0, r4
 8000e9a:	4798      	blx	r3
 8000e9c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e7e2      	b.n	8000e72 <d_print_comp_inner+0x38e>
 8000eac:	4e1f      	ldr	r6, [pc, #124]	; (8000f2c <d_print_comp_inner+0x448>)
 8000eae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000eb2:	f106 0a1c 	add.w	sl, r6, #28
 8000eb6:	f04f 0900 	mov.w	r9, #0
 8000eba:	e00a      	b.n	8000ed2 <d_print_comp_inner+0x3ee>
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	3101      	adds	r1, #1
 8000ec0:	45b2      	cmp	sl, r6
 8000ec2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000ec6:	f804 8003 	strb.w	r8, [r4, r3]
 8000eca:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000ece:	f001 805b 	beq.w	8001f88 <d_print_comp_inner+0x14a4>
 8000ed2:	29ff      	cmp	r1, #255	; 0xff
 8000ed4:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000ed8:	d1f0      	bne.n	8000ebc <d_print_comp_inner+0x3d8>
 8000eda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000ede:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000ee2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	4798      	blx	r3
 8000eea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e7e2      	b.n	8000ec0 <d_print_comp_inner+0x3dc>
 8000efa:	4e0d      	ldr	r6, [pc, #52]	; (8000f30 <d_print_comp_inner+0x44c>)
 8000efc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000f00:	f106 0a1d 	add.w	sl, r6, #29
 8000f04:	f04f 0900 	mov.w	r9, #0
 8000f08:	e01f      	b.n	8000f4a <d_print_comp_inner+0x466>
 8000f0a:	bf00      	nop
 8000f0c:	080163bc 	.word	0x080163bc
 8000f10:	080163c0 	.word	0x080163c0
 8000f14:	0801647f 	.word	0x0801647f
 8000f18:	08016204 	.word	0x08016204
 8000f1c:	08016394 	.word	0x08016394
 8000f20:	0801635f 	.word	0x0801635f
 8000f24:	0801646f 	.word	0x0801646f
 8000f28:	0801645f 	.word	0x0801645f
 8000f2c:	0801643f 	.word	0x0801643f
 8000f30:	0801641f 	.word	0x0801641f
 8000f34:	460b      	mov	r3, r1
 8000f36:	3101      	adds	r1, #1
 8000f38:	45b2      	cmp	sl, r6
 8000f3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000f3e:	f804 8003 	strb.w	r8, [r4, r3]
 8000f42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000f46:	f001 80da 	beq.w	80020fe <d_print_comp_inner+0x161a>
 8000f4a:	29ff      	cmp	r1, #255	; 0xff
 8000f4c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000f50:	d1f0      	bne.n	8000f34 <d_print_comp_inner+0x450>
 8000f52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000f56:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000f5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4798      	blx	r3
 8000f62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000f66:	3301      	adds	r3, #1
 8000f68:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e7e2      	b.n	8000f38 <d_print_comp_inner+0x454>
 8000f72:	4eca      	ldr	r6, [pc, #808]	; (800129c <d_print_comp_inner+0x7b8>)
 8000f74:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000f78:	f106 0a0a 	add.w	sl, r6, #10
 8000f7c:	f04f 0900 	mov.w	r9, #0
 8000f80:	e00a      	b.n	8000f98 <d_print_comp_inner+0x4b4>
 8000f82:	460b      	mov	r3, r1
 8000f84:	3101      	adds	r1, #1
 8000f86:	45b2      	cmp	sl, r6
 8000f88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000f8c:	f804 8003 	strb.w	r8, [r4, r3]
 8000f90:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000f94:	f000 87e5 	beq.w	8001f62 <d_print_comp_inner+0x147e>
 8000f98:	29ff      	cmp	r1, #255	; 0xff
 8000f9a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8000f9e:	d1f0      	bne.n	8000f82 <d_print_comp_inner+0x49e>
 8000fa0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000fa4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000fa8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000fac:	4620      	mov	r0, r4
 8000fae:	4798      	blx	r3
 8000fb0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e7e2      	b.n	8000f86 <d_print_comp_inner+0x4a2>
 8000fc0:	686a      	ldr	r2, [r5, #4]
 8000fc2:	49b7      	ldr	r1, [pc, #732]	; (80012a0 <d_print_comp_inner+0x7bc>)
 8000fc4:	a804      	add	r0, sp, #16
 8000fc6:	f010 fd0b 	bl	80119e0 <sprintf>
 8000fca:	a804      	add	r0, sp, #16
 8000fcc:	f009 f9a8 	bl	800a320 <strlen>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	f43f ae49 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8000fd6:	ad04      	add	r5, sp, #16
 8000fd8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000fdc:	182f      	adds	r7, r5, r0
 8000fde:	f04f 0800 	mov.w	r8, #0
 8000fe2:	e009      	b.n	8000ff8 <d_print_comp_inner+0x514>
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	3101      	adds	r1, #1
 8000fe8:	42af      	cmp	r7, r5
 8000fea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000fee:	54e6      	strb	r6, [r4, r3]
 8000ff0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000ff4:	f43f ae38 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8000ff8:	29ff      	cmp	r1, #255	; 0xff
 8000ffa:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000ffe:	d1f1      	bne.n	8000fe4 <d_print_comp_inner+0x500>
 8001000:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001004:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001008:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800100c:	4620      	mov	r0, r4
 800100e:	4798      	blx	r3
 8001010:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001014:	3301      	adds	r3, #1
 8001016:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800101a:	2101      	movs	r1, #1
 800101c:	2300      	movs	r3, #0
 800101e:	e7e3      	b.n	8000fe8 <d_print_comp_inner+0x504>
 8001020:	4ea0      	ldr	r6, [pc, #640]	; (80012a4 <d_print_comp_inner+0x7c0>)
 8001022:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001026:	f106 0a16 	add.w	sl, r6, #22
 800102a:	f04f 0900 	mov.w	r9, #0
 800102e:	e00a      	b.n	8001046 <d_print_comp_inner+0x562>
 8001030:	460b      	mov	r3, r1
 8001032:	3101      	adds	r1, #1
 8001034:	45b2      	cmp	sl, r6
 8001036:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800103a:	f804 8003 	strb.w	r8, [r4, r3]
 800103e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001042:	f001 8055 	beq.w	80020f0 <d_print_comp_inner+0x160c>
 8001046:	29ff      	cmp	r1, #255	; 0xff
 8001048:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800104c:	d1f0      	bne.n	8001030 <d_print_comp_inner+0x54c>
 800104e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001052:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001056:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800105a:	4620      	mov	r0, r4
 800105c:	4798      	blx	r3
 800105e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001062:	3301      	adds	r3, #1
 8001064:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001068:	2101      	movs	r1, #1
 800106a:	2300      	movs	r3, #0
 800106c:	e7e2      	b.n	8001034 <d_print_comp_inner+0x550>
 800106e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001072:	792d      	ldrb	r5, [r5, #4]
 8001074:	29ff      	cmp	r1, #255	; 0xff
 8001076:	f001 846f 	beq.w	8002958 <d_print_comp_inner+0x1e74>
 800107a:	1c4b      	adds	r3, r1, #1
 800107c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8001080:	5465      	strb	r5, [r4, r1]
 8001082:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8001086:	e5ef      	b.n	8000c68 <d_print_comp_inner+0x184>
 8001088:	686a      	ldr	r2, [r5, #4]
 800108a:	f002 f945 	bl	8003318 <d_print_comp>
 800108e:	68aa      	ldr	r2, [r5, #8]
 8001090:	4639      	mov	r1, r7
 8001092:	4620      	mov	r0, r4
 8001094:	f002 f940 	bl	8003318 <d_print_comp>
 8001098:	e5e6      	b.n	8000c68 <d_print_comp_inner+0x184>
 800109a:	686e      	ldr	r6, [r5, #4]
 800109c:	68ad      	ldr	r5, [r5, #8]
 800109e:	7833      	ldrb	r3, [r6, #0]
 80010a0:	2b31      	cmp	r3, #49	; 0x31
 80010a2:	f001 82bb 	beq.w	800261c <d_print_comp_inner+0x1b38>
 80010a6:	2b33      	cmp	r3, #51	; 0x33
 80010a8:	f041 83fe 	bne.w	80028a8 <d_print_comp_inner+0x1dc4>
 80010ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80010b0:	2bff      	cmp	r3, #255	; 0xff
 80010b2:	f001 8731 	beq.w	8002f18 <d_print_comp_inner+0x2434>
 80010b6:	1c59      	adds	r1, r3, #1
 80010b8:	f04f 0e28 	mov.w	lr, #40	; 0x28
 80010bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80010c0:	1d32      	adds	r2, r6, #4
 80010c2:	4639      	mov	r1, r7
 80010c4:	f804 e003 	strb.w	lr, [r4, r3]
 80010c8:	4620      	mov	r0, r4
 80010ca:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 80010ce:	f002 febd 	bl	8003e4c <d_print_cast.isra.12>
 80010d2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80010d6:	29ff      	cmp	r1, #255	; 0xff
 80010d8:	f001 870d 	beq.w	8002ef6 <d_print_comp_inner+0x2412>
 80010dc:	2329      	movs	r3, #41	; 0x29
 80010de:	1c4a      	adds	r2, r1, #1
 80010e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80010e4:	5463      	strb	r3, [r4, r1]
 80010e6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80010ea:	462a      	mov	r2, r5
 80010ec:	4639      	mov	r1, r7
 80010ee:	4620      	mov	r0, r4
 80010f0:	f002 ffbe 	bl	8004070 <d_print_subexpr>
 80010f4:	e5b8      	b.n	8000c68 <d_print_comp_inner+0x184>
 80010f6:	686a      	ldr	r2, [r5, #4]
 80010f8:	f002 ff7c 	bl	8003ff4 <d_print_expr_op>
 80010fc:	e5b4      	b.n	8000c68 <d_print_comp_inner+0x184>
 80010fe:	4e6a      	ldr	r6, [pc, #424]	; (80012a8 <d_print_comp_inner+0x7c4>)
 8001100:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001104:	f106 0a09 	add.w	sl, r6, #9
 8001108:	f04f 0900 	mov.w	r9, #0
 800110c:	e00a      	b.n	8001124 <d_print_comp_inner+0x640>
 800110e:	460b      	mov	r3, r1
 8001110:	3101      	adds	r1, #1
 8001112:	45b2      	cmp	sl, r6
 8001114:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001118:	f804 8003 	strb.w	r8, [r4, r3]
 800111c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001120:	f001 8030 	beq.w	8002184 <d_print_comp_inner+0x16a0>
 8001124:	29ff      	cmp	r1, #255	; 0xff
 8001126:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800112a:	d1f0      	bne.n	800110e <d_print_comp_inner+0x62a>
 800112c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001130:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001134:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001138:	4620      	mov	r0, r4
 800113a:	4798      	blx	r3
 800113c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001140:	3301      	adds	r3, #1
 8001142:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001146:	2101      	movs	r1, #1
 8001148:	2300      	movs	r3, #0
 800114a:	e7e2      	b.n	8001112 <d_print_comp_inner+0x62e>
 800114c:	4e56      	ldr	r6, [pc, #344]	; (80012a8 <d_print_comp_inner+0x7c4>)
 800114e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001152:	f106 0a09 	add.w	sl, r6, #9
 8001156:	f04f 0900 	mov.w	r9, #0
 800115a:	e00a      	b.n	8001172 <d_print_comp_inner+0x68e>
 800115c:	460b      	mov	r3, r1
 800115e:	3101      	adds	r1, #1
 8001160:	45b2      	cmp	sl, r6
 8001162:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001166:	f804 8003 	strb.w	r8, [r4, r3]
 800116a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800116e:	f001 8031 	beq.w	80021d4 <d_print_comp_inner+0x16f0>
 8001172:	29ff      	cmp	r1, #255	; 0xff
 8001174:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001178:	d1f0      	bne.n	800115c <d_print_comp_inner+0x678>
 800117a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800117e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001182:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001186:	4620      	mov	r0, r4
 8001188:	4798      	blx	r3
 800118a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800118e:	3301      	adds	r3, #1
 8001190:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001194:	2101      	movs	r1, #1
 8001196:	2300      	movs	r3, #0
 8001198:	e7e2      	b.n	8001160 <d_print_comp_inner+0x67c>
 800119a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800119e:	4d43      	ldr	r5, [pc, #268]	; (80012ac <d_print_comp_inner+0x7c8>)
 80011a0:	f8da 7008 	ldr.w	r7, [sl, #8]
 80011a4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80011a8:	f105 0808 	add.w	r8, r5, #8
 80011ac:	f04f 0900 	mov.w	r9, #0
 80011b0:	e009      	b.n	80011c6 <d_print_comp_inner+0x6e2>
 80011b2:	460b      	mov	r3, r1
 80011b4:	3101      	adds	r1, #1
 80011b6:	45a8      	cmp	r8, r5
 80011b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80011bc:	54e6      	strb	r6, [r4, r3]
 80011be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80011c2:	f000 8755 	beq.w	8002070 <d_print_comp_inner+0x158c>
 80011c6:	29ff      	cmp	r1, #255	; 0xff
 80011c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80011cc:	d1f1      	bne.n	80011b2 <d_print_comp_inner+0x6ce>
 80011ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80011d2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80011d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80011da:	4620      	mov	r0, r4
 80011dc:	4798      	blx	r3
 80011de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80011e2:	3301      	adds	r3, #1
 80011e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80011e8:	2101      	movs	r1, #1
 80011ea:	2300      	movs	r3, #0
 80011ec:	e7e3      	b.n	80011b6 <d_print_comp_inner+0x6d2>
 80011ee:	686a      	ldr	r2, [r5, #4]
 80011f0:	68ae      	ldr	r6, [r5, #8]
 80011f2:	b10a      	cbz	r2, 80011f8 <d_print_comp_inner+0x714>
 80011f4:	f002 f890 	bl	8003318 <d_print_comp>
 80011f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80011fc:	2bff      	cmp	r3, #255	; 0xff
 80011fe:	f001 8486 	beq.w	8002b0e <d_print_comp_inner+0x202a>
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	257b      	movs	r5, #123	; 0x7b
 8001206:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800120a:	4639      	mov	r1, r7
 800120c:	54e5      	strb	r5, [r4, r3]
 800120e:	4632      	mov	r2, r6
 8001210:	4620      	mov	r0, r4
 8001212:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8001216:	f002 f87f 	bl	8003318 <d_print_comp>
 800121a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800121e:	29ff      	cmp	r1, #255	; 0xff
 8001220:	f001 8369 	beq.w	80028f6 <d_print_comp_inner+0x1e12>
 8001224:	1c4a      	adds	r2, r1, #1
 8001226:	237d      	movs	r3, #125	; 0x7d
 8001228:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800122c:	5463      	strb	r3, [r4, r1]
 800122e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001232:	e519      	b.n	8000c68 <d_print_comp_inner+0x184>
 8001234:	686a      	ldr	r2, [r5, #4]
 8001236:	b10a      	cbz	r2, 800123c <d_print_comp_inner+0x758>
 8001238:	f002 f86e 	bl	8003318 <d_print_comp>
 800123c:	68ab      	ldr	r3, [r5, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f43f ad12 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8001244:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8001248:	2efd      	cmp	r6, #253	; 0xfd
 800124a:	f201 830d 	bhi.w	8002868 <d_print_comp_inner+0x1d84>
 800124e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80012b0 <d_print_comp_inner+0x7cc>
 8001252:	f04f 0a00 	mov.w	sl, #0
 8001256:	f108 0b02 	add.w	fp, r8, #2
 800125a:	4631      	mov	r1, r6
 800125c:	e009      	b.n	8001272 <d_print_comp_inner+0x78e>
 800125e:	460b      	mov	r3, r1
 8001260:	3101      	adds	r1, #1
 8001262:	45c3      	cmp	fp, r8
 8001264:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001268:	54e6      	strb	r6, [r4, r3]
 800126a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800126e:	f001 8060 	beq.w	8002332 <d_print_comp_inner+0x184e>
 8001272:	29ff      	cmp	r1, #255	; 0xff
 8001274:	f818 6b01 	ldrb.w	r6, [r8], #1
 8001278:	d1f1      	bne.n	800125e <d_print_comp_inner+0x77a>
 800127a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800127e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8001282:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001286:	4620      	mov	r0, r4
 8001288:	4798      	blx	r3
 800128a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800128e:	3301      	adds	r3, #1
 8001290:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001294:	2101      	movs	r1, #1
 8001296:	2300      	movs	r3, #0
 8001298:	e7e3      	b.n	8001262 <d_print_comp_inner+0x77e>
 800129a:	bf00      	nop
 800129c:	08016400 	.word	0x08016400
 80012a0:	08016220 	.word	0x08016220
 80012a4:	08016363 	.word	0x08016363
 80012a8:	080163a3 	.word	0x080163a3
 80012ac:	08016397 	.word	0x08016397
 80012b0:	08016394 	.word	0x08016394
 80012b4:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f041 8188 	bne.w	80025ce <d_print_comp_inner+0x1aea>
 80012be:	686a      	ldr	r2, [r5, #4]
 80012c0:	4bd3      	ldr	r3, [pc, #844]	; (8001610 <d_print_comp_inner+0xb2c>)
 80012c2:	6851      	ldr	r1, [r2, #4]
 80012c4:	4299      	cmp	r1, r3
 80012c6:	f001 817e 	beq.w	80025c6 <d_print_comp_inner+0x1ae2>
 80012ca:	4639      	mov	r1, r7
 80012cc:	4620      	mov	r0, r4
 80012ce:	f002 f823 	bl	8003318 <d_print_comp>
 80012d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	f001 85c0 	beq.w	8002e5c <d_print_comp_inner+0x2378>
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	2220      	movs	r2, #32
 80012e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80012e4:	54e2      	strb	r2, [r4, r3]
 80012e6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80012ea:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f001 8100 	beq.w	80024f4 <d_print_comp_inner+0x1a10>
 80012f4:	4dc7      	ldr	r5, [pc, #796]	; (8001614 <d_print_comp_inner+0xb30>)
 80012f6:	f04f 0800 	mov.w	r8, #0
 80012fa:	1daf      	adds	r7, r5, #6
 80012fc:	e009      	b.n	8001312 <d_print_comp_inner+0x82e>
 80012fe:	460b      	mov	r3, r1
 8001300:	3101      	adds	r1, #1
 8001302:	42bd      	cmp	r5, r7
 8001304:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001308:	54e6      	strb	r6, [r4, r3]
 800130a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800130e:	f43f acab 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8001312:	29ff      	cmp	r1, #255	; 0xff
 8001314:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001318:	d1f1      	bne.n	80012fe <d_print_comp_inner+0x81a>
 800131a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800131e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001322:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001326:	4620      	mov	r0, r4
 8001328:	4798      	blx	r3
 800132a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800132e:	3301      	adds	r3, #1
 8001330:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001334:	2101      	movs	r1, #1
 8001336:	2300      	movs	r3, #0
 8001338:	e7e3      	b.n	8001302 <d_print_comp_inner+0x81e>
 800133a:	2301      	movs	r3, #1
 800133c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8001340:	e492      	b.n	8000c68 <d_print_comp_inner+0x184>
 8001342:	4eb5      	ldr	r6, [pc, #724]	; (8001618 <d_print_comp_inner+0xb34>)
 8001344:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001348:	f106 0a0e 	add.w	sl, r6, #14
 800134c:	f04f 0900 	mov.w	r9, #0
 8001350:	e00a      	b.n	8001368 <d_print_comp_inner+0x884>
 8001352:	460b      	mov	r3, r1
 8001354:	3101      	adds	r1, #1
 8001356:	45b2      	cmp	sl, r6
 8001358:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800135c:	f804 8003 	strb.w	r8, [r4, r3]
 8001360:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001364:	f000 867d 	beq.w	8002062 <d_print_comp_inner+0x157e>
 8001368:	29ff      	cmp	r1, #255	; 0xff
 800136a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800136e:	d1f0      	bne.n	8001352 <d_print_comp_inner+0x86e>
 8001370:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001374:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001378:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800137c:	4620      	mov	r0, r4
 800137e:	4798      	blx	r3
 8001380:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001384:	3301      	adds	r3, #1
 8001386:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800138a:	2101      	movs	r1, #1
 800138c:	2300      	movs	r3, #0
 800138e:	e7e2      	b.n	8001356 <d_print_comp_inner+0x872>
 8001390:	686a      	ldr	r2, [r5, #4]
 8001392:	7811      	ldrb	r1, [r2, #0]
 8001394:	2927      	cmp	r1, #39	; 0x27
 8001396:	f001 81a8 	beq.w	80026ea <d_print_comp_inner+0x1c06>
 800139a:	2600      	movs	r6, #0
 800139c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80013a0:	29ff      	cmp	r1, #255	; 0xff
 80013a2:	f001 842a 	beq.w	8002bfa <d_print_comp_inner+0x2116>
 80013a6:	1c4a      	adds	r2, r1, #1
 80013a8:	2328      	movs	r3, #40	; 0x28
 80013aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80013ae:	5463      	strb	r3, [r4, r1]
 80013b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80013b4:	686a      	ldr	r2, [r5, #4]
 80013b6:	4639      	mov	r1, r7
 80013b8:	4620      	mov	r0, r4
 80013ba:	f001 ffad 	bl	8003318 <d_print_comp>
 80013be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80013c2:	2bff      	cmp	r3, #255	; 0xff
 80013c4:	f001 83ef 	beq.w	8002ba6 <d_print_comp_inner+0x20c2>
 80013c8:	1c59      	adds	r1, r3, #1
 80013ca:	2229      	movs	r2, #41	; 0x29
 80013cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80013d0:	54e2      	strb	r2, [r4, r3]
 80013d2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80013d6:	782b      	ldrb	r3, [r5, #0]
 80013d8:	2b3c      	cmp	r3, #60	; 0x3c
 80013da:	f001 8280 	beq.w	80028de <d_print_comp_inner+0x1dfa>
 80013de:	2e08      	cmp	r6, #8
 80013e0:	f001 8223 	beq.w	800282a <d_print_comp_inner+0x1d46>
 80013e4:	68aa      	ldr	r2, [r5, #8]
 80013e6:	4639      	mov	r1, r7
 80013e8:	4620      	mov	r0, r4
 80013ea:	f001 ff95 	bl	8003318 <d_print_comp>
 80013ee:	e43b      	b.n	8000c68 <d_print_comp_inner+0x184>
 80013f0:	2301      	movs	r3, #1
 80013f2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80013f6:	e437      	b.n	8000c68 <d_print_comp_inner+0x184>
 80013f8:	ab14      	add	r3, sp, #80	; 0x50
 80013fa:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80013fe:	f843 2d40 	str.w	r2, [r3, #-64]!
 8001402:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8001406:	68aa      	ldr	r2, [r5, #8]
 8001408:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800140c:	9307      	str	r3, [sp, #28]
 800140e:	2600      	movs	r6, #0
 8001410:	9505      	str	r5, [sp, #20]
 8001412:	9606      	str	r6, [sp, #24]
 8001414:	f001 ff80 	bl	8003318 <d_print_comp>
 8001418:	9b06      	ldr	r3, [sp, #24]
 800141a:	b923      	cbnz	r3, 8001426 <d_print_comp_inner+0x942>
 800141c:	462a      	mov	r2, r5
 800141e:	4639      	mov	r1, r7
 8001420:	4620      	mov	r0, r4
 8001422:	f001 ff89 	bl	8003338 <d_print_mod>
 8001426:	9b04      	ldr	r3, [sp, #16]
 8001428:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800142c:	e41c      	b.n	8000c68 <d_print_comp_inner+0x184>
 800142e:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8001432:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8001436:	f849 bd40 	str.w	fp, [r9, #-64]!
 800143a:	2200      	movs	r2, #0
 800143c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001440:	f8cd b000 	str.w	fp, [sp]
 8001444:	4659      	mov	r1, fp
 8001446:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 800144a:	9505      	str	r5, [sp, #20]
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	9307      	str	r3, [sp, #28]
 8001450:	2900      	cmp	r1, #0
 8001452:	f001 8587 	beq.w	8002f64 <d_print_comp_inner+0x2480>
 8001456:	684b      	ldr	r3, [r1, #4]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3b19      	subs	r3, #25
 800145c:	2b02      	cmp	r3, #2
 800145e:	f201 8581 	bhi.w	8002f64 <d_print_comp_inner+0x2480>
 8001462:	46ac      	mov	ip, r5
 8001464:	f04f 0801 	mov.w	r8, #1
 8001468:	460e      	mov	r6, r1
 800146a:	464d      	mov	r5, r9
 800146c:	e004      	b.n	8001478 <d_print_comp_inner+0x994>
 800146e:	6873      	ldr	r3, [r6, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	3b19      	subs	r3, #25
 8001474:	2b02      	cmp	r3, #2
 8001476:	d81d      	bhi.n	80014b4 <d_print_comp_inner+0x9d0>
 8001478:	68b3      	ldr	r3, [r6, #8]
 800147a:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 800147e:	aa14      	add	r2, sp, #80	; 0x50
 8001480:	eb02 0b0e 	add.w	fp, r2, lr
 8001484:	b99b      	cbnz	r3, 80014ae <d_print_comp_inner+0x9ca>
 8001486:	f1b8 0f03 	cmp.w	r8, #3
 800148a:	f201 82ce 	bhi.w	8002a2a <d_print_comp_inner+0x1f46>
 800148e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001492:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 8001496:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 800149a:	f84b 5c40 	str.w	r5, [fp, #-64]
 800149e:	2301      	movs	r3, #1
 80014a0:	eb09 050e 	add.w	r5, r9, lr
 80014a4:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 80014a8:	f108 0801 	add.w	r8, r8, #1
 80014ac:	60b3      	str	r3, [r6, #8]
 80014ae:	6836      	ldr	r6, [r6, #0]
 80014b0:	2e00      	cmp	r6, #0
 80014b2:	d1dc      	bne.n	800146e <d_print_comp_inner+0x98a>
 80014b4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80014b8:	4639      	mov	r1, r7
 80014ba:	4620      	mov	r0, r4
 80014bc:	4665      	mov	r5, ip
 80014be:	f001 ff2b 	bl	8003318 <d_print_comp>
 80014c2:	9b06      	ldr	r3, [sp, #24]
 80014c4:	9a00      	ldr	r2, [sp, #0]
 80014c6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f abcc 	bne.w	8000c68 <d_print_comp_inner+0x184>
 80014d0:	f1b8 0f01 	cmp.w	r8, #1
 80014d4:	d00e      	beq.n	80014f4 <d_print_comp_inner+0xa10>
 80014d6:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 80014da:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80014de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80014e2:	4639      	mov	r1, r7
 80014e4:	4620      	mov	r0, r4
 80014e6:	f001 ff27 	bl	8003338 <d_print_mod>
 80014ea:	f1b8 0f01 	cmp.w	r8, #1
 80014ee:	f1a9 0910 	sub.w	r9, r9, #16
 80014f2:	d1f2      	bne.n	80014da <d_print_comp_inner+0x9f6>
 80014f4:	1d2a      	adds	r2, r5, #4
 80014f6:	4639      	mov	r1, r7
 80014f8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80014fc:	4620      	mov	r0, r4
 80014fe:	f002 fad5 	bl	8003aac <d_print_array_type.isra.10>
 8001502:	f7ff bbb1 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001506:	068b      	lsls	r3, r1, #26
 8001508:	f101 804a 	bmi.w	80025a0 <d_print_comp_inner+0x1abc>
 800150c:	686b      	ldr	r3, [r5, #4]
 800150e:	b11b      	cbz	r3, 8001518 <d_print_comp_inner+0xa34>
 8001510:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8001514:	f001 82cc 	beq.w	8002ab0 <d_print_comp_inner+0x1fcc>
 8001518:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 800151c:	f105 0208 	add.w	r2, r5, #8
 8001520:	4639      	mov	r1, r7
 8001522:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8001526:	4620      	mov	r0, r4
 8001528:	f002 fb9c 	bl	8003c64 <d_print_function_type.isra.11>
 800152c:	f7ff bb9c 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001530:	68ab      	ldr	r3, [r5, #8]
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	2a39      	cmp	r2, #57	; 0x39
 8001536:	f47f ab9f 	bne.w	8000c78 <d_print_comp_inner+0x194>
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	7811      	ldrb	r1, [r2, #0]
 800153e:	293a      	cmp	r1, #58	; 0x3a
 8001540:	f47f ab9a 	bne.w	8000c78 <d_print_comp_inner+0x194>
 8001544:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8001548:	4934      	ldr	r1, [pc, #208]	; (800161c <d_print_comp_inner+0xb38>)
 800154a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800154e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8001552:	6800      	ldr	r0, [r0, #0]
 8001554:	6856      	ldr	r6, [r2, #4]
 8001556:	6895      	ldr	r5, [r2, #8]
 8001558:	f008 fd76 	bl	800a048 <strcmp>
 800155c:	2800      	cmp	r0, #0
 800155e:	f001 850f 	beq.w	8002f80 <d_print_comp_inner+0x249c>
 8001562:	2204      	movs	r2, #4
 8001564:	492e      	ldr	r1, [pc, #184]	; (8001620 <d_print_comp_inner+0xb3c>)
 8001566:	4620      	mov	r0, r4
 8001568:	f7fe fffe 	bl	8000568 <d_append_buffer>
 800156c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001570:	b183      	cbz	r3, 8001594 <d_print_comp_inner+0xab0>
 8001572:	4639      	mov	r1, r7
 8001574:	4642      	mov	r2, r8
 8001576:	4620      	mov	r0, r4
 8001578:	f002 fd7a 	bl	8004070 <d_print_subexpr>
 800157c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001580:	29ff      	cmp	r1, #255	; 0xff
 8001582:	f001 862a 	beq.w	80031da <d_print_comp_inner+0x26f6>
 8001586:	2320      	movs	r3, #32
 8001588:	1c4a      	adds	r2, r1, #1
 800158a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800158e:	5463      	strb	r3, [r4, r1]
 8001590:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001594:	4632      	mov	r2, r6
 8001596:	4639      	mov	r1, r7
 8001598:	4620      	mov	r0, r4
 800159a:	f001 febd 	bl	8003318 <d_print_comp>
 800159e:	2d00      	cmp	r5, #0
 80015a0:	f43f ab62 	beq.w	8000c68 <d_print_comp_inner+0x184>
 80015a4:	462a      	mov	r2, r5
 80015a6:	4639      	mov	r1, r7
 80015a8:	4620      	mov	r0, r4
 80015aa:	f002 fd61 	bl	8004070 <d_print_subexpr>
 80015ae:	f7ff bb5b 	b.w	8000c68 <d_print_comp_inner+0x184>
 80015b2:	4e1c      	ldr	r6, [pc, #112]	; (8001624 <d_print_comp_inner+0xb40>)
 80015b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80015b8:	f106 0a11 	add.w	sl, r6, #17
 80015bc:	f04f 0900 	mov.w	r9, #0
 80015c0:	e00a      	b.n	80015d8 <d_print_comp_inner+0xaf4>
 80015c2:	460b      	mov	r3, r1
 80015c4:	3101      	adds	r1, #1
 80015c6:	4556      	cmp	r6, sl
 80015c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80015cc:	f804 8003 	strb.w	r8, [r4, r3]
 80015d0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80015d4:	f000 84be 	beq.w	8001f54 <d_print_comp_inner+0x1470>
 80015d8:	29ff      	cmp	r1, #255	; 0xff
 80015da:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80015de:	d1f0      	bne.n	80015c2 <d_print_comp_inner+0xade>
 80015e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80015e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80015e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80015ec:	4620      	mov	r0, r4
 80015ee:	4798      	blx	r3
 80015f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80015f4:	3301      	adds	r3, #1
 80015f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80015fa:	2101      	movs	r1, #1
 80015fc:	2300      	movs	r3, #0
 80015fe:	e7e2      	b.n	80015c6 <d_print_comp_inner+0xae2>
 8001600:	4e09      	ldr	r6, [pc, #36]	; (8001628 <d_print_comp_inner+0xb44>)
 8001602:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001606:	f106 0a15 	add.w	sl, r6, #21
 800160a:	f04f 0900 	mov.w	r9, #0
 800160e:	e018      	b.n	8001642 <d_print_comp_inner+0xb5e>
 8001610:	080153e4 	.word	0x080153e4
 8001614:	08016384 	.word	0x08016384
 8001618:	080163ef 	.word	0x080163ef
 800161c:	080163c4 	.word	0x080163c4
 8001620:	080163cc 	.word	0x080163cc
 8001624:	080162ab 	.word	0x080162ab
 8001628:	080162a7 	.word	0x080162a7
 800162c:	460b      	mov	r3, r1
 800162e:	3101      	adds	r1, #1
 8001630:	45b2      	cmp	sl, r6
 8001632:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001636:	f804 8003 	strb.w	r8, [r4, r3]
 800163a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800163e:	f000 8482 	beq.w	8001f46 <d_print_comp_inner+0x1462>
 8001642:	29ff      	cmp	r1, #255	; 0xff
 8001644:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001648:	d1f0      	bne.n	800162c <d_print_comp_inner+0xb48>
 800164a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800164e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001652:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001656:	4620      	mov	r0, r4
 8001658:	4798      	blx	r3
 800165a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800165e:	3301      	adds	r3, #1
 8001660:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001664:	2101      	movs	r1, #1
 8001666:	2300      	movs	r3, #0
 8001668:	e7e2      	b.n	8001630 <d_print_comp_inner+0xb4c>
 800166a:	4eda      	ldr	r6, [pc, #872]	; (80019d4 <d_print_comp_inner+0xef0>)
 800166c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001670:	f106 0a10 	add.w	sl, r6, #16
 8001674:	f04f 0900 	mov.w	r9, #0
 8001678:	e00a      	b.n	8001690 <d_print_comp_inner+0xbac>
 800167a:	460b      	mov	r3, r1
 800167c:	3101      	adds	r1, #1
 800167e:	45b2      	cmp	sl, r6
 8001680:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001684:	f804 8003 	strb.w	r8, [r4, r3]
 8001688:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800168c:	f000 8454 	beq.w	8001f38 <d_print_comp_inner+0x1454>
 8001690:	29ff      	cmp	r1, #255	; 0xff
 8001692:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001696:	d1f0      	bne.n	800167a <d_print_comp_inner+0xb96>
 8001698:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800169c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80016a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80016a4:	4620      	mov	r0, r4
 80016a6:	4798      	blx	r3
 80016a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80016ac:	3301      	adds	r3, #1
 80016ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80016b2:	2101      	movs	r1, #1
 80016b4:	2300      	movs	r3, #0
 80016b6:	e7e2      	b.n	800167e <d_print_comp_inner+0xb9a>
 80016b8:	4ec7      	ldr	r6, [pc, #796]	; (80019d8 <d_print_comp_inner+0xef4>)
 80016ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80016be:	f106 0a12 	add.w	sl, r6, #18
 80016c2:	f04f 0900 	mov.w	r9, #0
 80016c6:	e00a      	b.n	80016de <d_print_comp_inner+0xbfa>
 80016c8:	460b      	mov	r3, r1
 80016ca:	3101      	adds	r1, #1
 80016cc:	45b2      	cmp	sl, r6
 80016ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80016d2:	f804 8003 	strb.w	r8, [r4, r3]
 80016d6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80016da:	f000 85d5 	beq.w	8002288 <d_print_comp_inner+0x17a4>
 80016de:	29ff      	cmp	r1, #255	; 0xff
 80016e0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80016e4:	d1f0      	bne.n	80016c8 <d_print_comp_inner+0xbe4>
 80016e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80016ea:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80016ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80016f2:	4620      	mov	r0, r4
 80016f4:	4798      	blx	r3
 80016f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80016fa:	3301      	adds	r3, #1
 80016fc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001700:	2101      	movs	r1, #1
 8001702:	2300      	movs	r3, #0
 8001704:	e7e2      	b.n	80016cc <d_print_comp_inner+0xbe8>
 8001706:	68af      	ldr	r7, [r5, #8]
 8001708:	686d      	ldr	r5, [r5, #4]
 800170a:	2f00      	cmp	r7, #0
 800170c:	f43f aaac 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8001710:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001714:	442f      	add	r7, r5
 8001716:	f04f 0800 	mov.w	r8, #0
 800171a:	e009      	b.n	8001730 <d_print_comp_inner+0xc4c>
 800171c:	460b      	mov	r3, r1
 800171e:	3101      	adds	r1, #1
 8001720:	42af      	cmp	r7, r5
 8001722:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001726:	54e6      	strb	r6, [r4, r3]
 8001728:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800172c:	f43f aa9c 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8001730:	29ff      	cmp	r1, #255	; 0xff
 8001732:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001736:	d1f1      	bne.n	800171c <d_print_comp_inner+0xc38>
 8001738:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800173c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001740:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001744:	4620      	mov	r0, r4
 8001746:	4798      	blx	r3
 8001748:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800174c:	3301      	adds	r3, #1
 800174e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001752:	2101      	movs	r1, #1
 8001754:	2300      	movs	r3, #0
 8001756:	e7e3      	b.n	8001720 <d_print_comp_inner+0xc3c>
 8001758:	4ea0      	ldr	r6, [pc, #640]	; (80019dc <d_print_comp_inner+0xef8>)
 800175a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800175e:	f106 0a11 	add.w	sl, r6, #17
 8001762:	f04f 0900 	mov.w	r9, #0
 8001766:	e00a      	b.n	800177e <d_print_comp_inner+0xc9a>
 8001768:	460b      	mov	r3, r1
 800176a:	3101      	adds	r1, #1
 800176c:	45b2      	cmp	sl, r6
 800176e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001772:	f804 8003 	strb.w	r8, [r4, r3]
 8001776:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800177a:	f000 858c 	beq.w	8002296 <d_print_comp_inner+0x17b2>
 800177e:	29ff      	cmp	r1, #255	; 0xff
 8001780:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001784:	d1f0      	bne.n	8001768 <d_print_comp_inner+0xc84>
 8001786:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800178a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800178e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001792:	4620      	mov	r0, r4
 8001794:	4798      	blx	r3
 8001796:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800179a:	3301      	adds	r3, #1
 800179c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80017a0:	2101      	movs	r1, #1
 80017a2:	2300      	movs	r3, #0
 80017a4:	e7e2      	b.n	800176c <d_print_comp_inner+0xc88>
 80017a6:	4e8e      	ldr	r6, [pc, #568]	; (80019e0 <d_print_comp_inner+0xefc>)
 80017a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80017ac:	f106 0a15 	add.w	sl, r6, #21
 80017b0:	f04f 0900 	mov.w	r9, #0
 80017b4:	e00a      	b.n	80017cc <d_print_comp_inner+0xce8>
 80017b6:	460b      	mov	r3, r1
 80017b8:	3101      	adds	r1, #1
 80017ba:	45b2      	cmp	sl, r6
 80017bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80017c0:	f804 8003 	strb.w	r8, [r4, r3]
 80017c4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80017c8:	f000 8533 	beq.w	8002232 <d_print_comp_inner+0x174e>
 80017cc:	29ff      	cmp	r1, #255	; 0xff
 80017ce:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80017d2:	d1f0      	bne.n	80017b6 <d_print_comp_inner+0xcd2>
 80017d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80017d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80017dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80017e0:	4620      	mov	r0, r4
 80017e2:	4798      	blx	r3
 80017e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80017e8:	3301      	adds	r3, #1
 80017ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80017ee:	2101      	movs	r1, #1
 80017f0:	2300      	movs	r3, #0
 80017f2:	e7e2      	b.n	80017ba <d_print_comp_inner+0xcd6>
 80017f4:	4e7b      	ldr	r6, [pc, #492]	; (80019e4 <d_print_comp_inner+0xf00>)
 80017f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80017fa:	f106 0a19 	add.w	sl, r6, #25
 80017fe:	f04f 0900 	mov.w	r9, #0
 8001802:	e00a      	b.n	800181a <d_print_comp_inner+0xd36>
 8001804:	460b      	mov	r3, r1
 8001806:	3101      	adds	r1, #1
 8001808:	45b2      	cmp	sl, r6
 800180a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800180e:	f804 8003 	strb.w	r8, [r4, r3]
 8001812:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001816:	f000 8545 	beq.w	80022a4 <d_print_comp_inner+0x17c0>
 800181a:	29ff      	cmp	r1, #255	; 0xff
 800181c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001820:	d1f0      	bne.n	8001804 <d_print_comp_inner+0xd20>
 8001822:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001826:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800182a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800182e:	4620      	mov	r0, r4
 8001830:	4798      	blx	r3
 8001832:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001836:	3301      	adds	r3, #1
 8001838:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800183c:	2101      	movs	r1, #1
 800183e:	2300      	movs	r3, #0
 8001840:	e7e2      	b.n	8001808 <d_print_comp_inner+0xd24>
 8001842:	4e69      	ldr	r6, [pc, #420]	; (80019e8 <d_print_comp_inner+0xf04>)
 8001844:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001848:	f106 0a16 	add.w	sl, r6, #22
 800184c:	f04f 0900 	mov.w	r9, #0
 8001850:	e00a      	b.n	8001868 <d_print_comp_inner+0xd84>
 8001852:	460b      	mov	r3, r1
 8001854:	3101      	adds	r1, #1
 8001856:	45b2      	cmp	sl, r6
 8001858:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800185c:	f804 8003 	strb.w	r8, [r4, r3]
 8001860:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001864:	f000 84d7 	beq.w	8002216 <d_print_comp_inner+0x1732>
 8001868:	29ff      	cmp	r1, #255	; 0xff
 800186a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800186e:	d1f0      	bne.n	8001852 <d_print_comp_inner+0xd6e>
 8001870:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001874:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001878:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800187c:	4620      	mov	r0, r4
 800187e:	4798      	blx	r3
 8001880:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001884:	3301      	adds	r3, #1
 8001886:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800188a:	2101      	movs	r1, #1
 800188c:	2300      	movs	r3, #0
 800188e:	e7e2      	b.n	8001856 <d_print_comp_inner+0xd72>
 8001890:	4e56      	ldr	r6, [pc, #344]	; (80019ec <d_print_comp_inner+0xf08>)
 8001892:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001896:	f106 0a13 	add.w	sl, r6, #19
 800189a:	f04f 0900 	mov.w	r9, #0
 800189e:	e00a      	b.n	80018b6 <d_print_comp_inner+0xdd2>
 80018a0:	460b      	mov	r3, r1
 80018a2:	3101      	adds	r1, #1
 80018a4:	4556      	cmp	r6, sl
 80018a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80018aa:	f804 8003 	strb.w	r8, [r4, r3]
 80018ae:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80018b2:	f000 84b7 	beq.w	8002224 <d_print_comp_inner+0x1740>
 80018b6:	29ff      	cmp	r1, #255	; 0xff
 80018b8:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80018bc:	d1f0      	bne.n	80018a0 <d_print_comp_inner+0xdbc>
 80018be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80018c2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80018c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80018ca:	4620      	mov	r0, r4
 80018cc:	4798      	blx	r3
 80018ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80018d2:	3301      	adds	r3, #1
 80018d4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80018d8:	2101      	movs	r1, #1
 80018da:	2300      	movs	r3, #0
 80018dc:	e7e2      	b.n	80018a4 <d_print_comp_inner+0xdc0>
 80018de:	4e44      	ldr	r6, [pc, #272]	; (80019f0 <d_print_comp_inner+0xf0c>)
 80018e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80018e4:	f106 0a0f 	add.w	sl, r6, #15
 80018e8:	f04f 0900 	mov.w	r9, #0
 80018ec:	e00a      	b.n	8001904 <d_print_comp_inner+0xe20>
 80018ee:	460b      	mov	r3, r1
 80018f0:	3101      	adds	r1, #1
 80018f2:	4556      	cmp	r6, sl
 80018f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80018f8:	f804 8003 	strb.w	r8, [r4, r3]
 80018fc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001900:	f000 830c 	beq.w	8001f1c <d_print_comp_inner+0x1438>
 8001904:	29ff      	cmp	r1, #255	; 0xff
 8001906:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800190a:	d1f0      	bne.n	80018ee <d_print_comp_inner+0xe0a>
 800190c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001910:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001914:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001918:	4620      	mov	r0, r4
 800191a:	4798      	blx	r3
 800191c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001920:	3301      	adds	r3, #1
 8001922:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001926:	2101      	movs	r1, #1
 8001928:	2300      	movs	r3, #0
 800192a:	e7e2      	b.n	80018f2 <d_print_comp_inner+0xe0e>
 800192c:	4e31      	ldr	r6, [pc, #196]	; (80019f4 <d_print_comp_inner+0xf10>)
 800192e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001932:	f106 0a1a 	add.w	sl, r6, #26
 8001936:	f04f 0900 	mov.w	r9, #0
 800193a:	e00a      	b.n	8001952 <d_print_comp_inner+0xe6e>
 800193c:	460b      	mov	r3, r1
 800193e:	3101      	adds	r1, #1
 8001940:	4556      	cmp	r6, sl
 8001942:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001946:	f804 8003 	strb.w	r8, [r4, r3]
 800194a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800194e:	f000 82ec 	beq.w	8001f2a <d_print_comp_inner+0x1446>
 8001952:	29ff      	cmp	r1, #255	; 0xff
 8001954:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001958:	d1f0      	bne.n	800193c <d_print_comp_inner+0xe58>
 800195a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800195e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001962:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001966:	4620      	mov	r0, r4
 8001968:	4798      	blx	r3
 800196a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800196e:	3301      	adds	r3, #1
 8001970:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001974:	2101      	movs	r1, #1
 8001976:	2300      	movs	r3, #0
 8001978:	e7e2      	b.n	8001940 <d_print_comp_inner+0xe5c>
 800197a:	f011 0704 	ands.w	r7, r1, #4
 800197e:	f040 8539 	bne.w	80023f4 <d_print_comp_inner+0x1910>
 8001982:	686a      	ldr	r2, [r5, #4]
 8001984:	6853      	ldr	r3, [r2, #4]
 8001986:	6815      	ldr	r5, [r2, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f43f a96d 	beq.w	8000c68 <d_print_comp_inner+0x184>
 800198e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001992:	eb05 0803 	add.w	r8, r5, r3
 8001996:	e009      	b.n	80019ac <d_print_comp_inner+0xec8>
 8001998:	460b      	mov	r3, r1
 800199a:	3101      	adds	r1, #1
 800199c:	4545      	cmp	r5, r8
 800199e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80019a2:	54e6      	strb	r6, [r4, r3]
 80019a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80019a8:	f43f a95e 	beq.w	8000c68 <d_print_comp_inner+0x184>
 80019ac:	29ff      	cmp	r1, #255	; 0xff
 80019ae:	f815 6b01 	ldrb.w	r6, [r5], #1
 80019b2:	d1f1      	bne.n	8001998 <d_print_comp_inner+0xeb4>
 80019b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80019b8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80019bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80019c0:	4620      	mov	r0, r4
 80019c2:	4798      	blx	r3
 80019c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80019c8:	3301      	adds	r3, #1
 80019ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80019ce:	2101      	movs	r1, #1
 80019d0:	2300      	movs	r3, #0
 80019d2:	e7e3      	b.n	800199c <d_print_comp_inner+0xeb8>
 80019d4:	08016293 	.word	0x08016293
 80019d8:	0801627f 	.word	0x0801627f
 80019dc:	0801634b 	.word	0x0801634b
 80019e0:	08016333 	.word	0x08016333
 80019e4:	08016317 	.word	0x08016317
 80019e8:	080162ff 	.word	0x080162ff
 80019ec:	080162eb 	.word	0x080162eb
 80019f0:	080162db 	.word	0x080162db
 80019f4:	080162bf 	.word	0x080162bf
 80019f8:	6868      	ldr	r0, [r5, #4]
 80019fa:	7803      	ldrb	r3, [r0, #0]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	f000 8699 	beq.w	8002734 <d_print_comp_inner+0x1c50>
 8001a02:	f04f 0800 	mov.w	r8, #0
 8001a06:	2b23      	cmp	r3, #35	; 0x23
 8001a08:	f000 8596 	beq.w	8002538 <d_print_comp_inner+0x1a54>
 8001a0c:	782a      	ldrb	r2, [r5, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f000 8592 	beq.w	8002538 <d_print_comp_inner+0x1a54>
 8001a14:	2b24      	cmp	r3, #36	; 0x24
 8001a16:	f001 808d 	beq.w	8002b34 <d_print_comp_inner+0x2050>
 8001a1a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8001a1e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8001a22:	9505      	str	r5, [sp, #20]
 8001a24:	ab14      	add	r3, sp, #80	; 0x50
 8001a26:	2100      	movs	r1, #0
 8001a28:	f843 0d40 	str.w	r0, [r3, #-64]!
 8001a2c:	9106      	str	r1, [sp, #24]
 8001a2e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001a32:	9207      	str	r2, [sp, #28]
 8001a34:	686a      	ldr	r2, [r5, #4]
 8001a36:	4639      	mov	r1, r7
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f001 fc6d 	bl	8003318 <d_print_comp>
 8001a3e:	9b06      	ldr	r3, [sp, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 848d 	beq.w	8002360 <d_print_comp_inner+0x187c>
 8001a46:	9b04      	ldr	r3, [sp, #16]
 8001a48:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001a4c:	f1b8 0f00 	cmp.w	r8, #0
 8001a50:	f43f a90a 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8001a54:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8001a58:	f7ff b906 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001a5c:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8001a60:	f04f 0800 	mov.w	r8, #0
 8001a64:	e7db      	b.n	8001a1e <d_print_comp_inner+0xf3a>
 8001a66:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8001a6a:	f1bc 0f00 	cmp.w	ip, #0
 8001a6e:	f001 8321 	beq.w	80030b4 <d_print_comp_inner+0x25d0>
 8001a72:	4662      	mov	r2, ip
 8001a74:	6891      	ldr	r1, [r2, #8]
 8001a76:	b951      	cbnz	r1, 8001a8e <d_print_comp_inner+0xfaa>
 8001a78:	6850      	ldr	r0, [r2, #4]
 8001a7a:	7800      	ldrb	r0, [r0, #0]
 8001a7c:	f1a0 0e19 	sub.w	lr, r0, #25
 8001a80:	f1be 0f02 	cmp.w	lr, #2
 8001a84:	f200 8705 	bhi.w	8002892 <d_print_comp_inner+0x1dae>
 8001a88:	4283      	cmp	r3, r0
 8001a8a:	f000 8706 	beq.w	800289a <d_print_comp_inner+0x1db6>
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d1ef      	bne.n	8001a74 <d_print_comp_inner+0xf90>
 8001a94:	4660      	mov	r0, ip
 8001a96:	4690      	mov	r8, r2
 8001a98:	e7c1      	b.n	8001a1e <d_print_comp_inner+0xf3a>
 8001a9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001a9e:	29ff      	cmp	r1, #255	; 0xff
 8001aa0:	f000 876b 	beq.w	800297a <d_print_comp_inner+0x1e96>
 8001aa4:	1c4a      	adds	r2, r1, #1
 8001aa6:	237e      	movs	r3, #126	; 0x7e
 8001aa8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001aac:	5463      	strb	r3, [r4, r1]
 8001aae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001ab2:	4639      	mov	r1, r7
 8001ab4:	68aa      	ldr	r2, [r5, #8]
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f001 fc2e 	bl	8003318 <d_print_comp>
 8001abc:	f7ff b8d4 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001ac0:	686a      	ldr	r2, [r5, #4]
 8001ac2:	f001 fc29 	bl	8003318 <d_print_comp>
 8001ac6:	f7ff b8cf 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001aca:	4edd      	ldr	r6, [pc, #884]	; (8001e40 <d_print_comp_inner+0x135c>)
 8001acc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001ad0:	f106 0a0d 	add.w	sl, r6, #13
 8001ad4:	f04f 0900 	mov.w	r9, #0
 8001ad8:	e00a      	b.n	8001af0 <d_print_comp_inner+0x100c>
 8001ada:	460b      	mov	r3, r1
 8001adc:	3101      	adds	r1, #1
 8001ade:	45b2      	cmp	sl, r6
 8001ae0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001ae4:	f804 8003 	strb.w	r8, [r4, r3]
 8001ae8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001aec:	f000 83e8 	beq.w	80022c0 <d_print_comp_inner+0x17dc>
 8001af0:	29ff      	cmp	r1, #255	; 0xff
 8001af2:	f816 8b01 	ldrb.w	r8, [r6], #1
 8001af6:	d1f0      	bne.n	8001ada <d_print_comp_inner+0xff6>
 8001af8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001afc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001b00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001b04:	4620      	mov	r0, r4
 8001b06:	4798      	blx	r3
 8001b08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001b12:	2101      	movs	r1, #1
 8001b14:	2300      	movs	r3, #0
 8001b16:	e7e2      	b.n	8001ade <d_print_comp_inner+0xffa>
 8001b18:	4eca      	ldr	r6, [pc, #808]	; (8001e44 <d_print_comp_inner+0x1360>)
 8001b1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001b1e:	f106 0a18 	add.w	sl, r6, #24
 8001b22:	f04f 0900 	mov.w	r9, #0
 8001b26:	e00a      	b.n	8001b3e <d_print_comp_inner+0x105a>
 8001b28:	460b      	mov	r3, r1
 8001b2a:	3101      	adds	r1, #1
 8001b2c:	45b2      	cmp	sl, r6
 8001b2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001b32:	f804 8003 	strb.w	r8, [r4, r3]
 8001b36:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001b3a:	f000 83c8 	beq.w	80022ce <d_print_comp_inner+0x17ea>
 8001b3e:	29ff      	cmp	r1, #255	; 0xff
 8001b40:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001b44:	d1f0      	bne.n	8001b28 <d_print_comp_inner+0x1044>
 8001b46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001b4a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001b4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001b52:	4620      	mov	r0, r4
 8001b54:	4798      	blx	r3
 8001b56:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001b60:	2101      	movs	r1, #1
 8001b62:	2300      	movs	r3, #0
 8001b64:	e7e2      	b.n	8001b2c <d_print_comp_inner+0x1048>
 8001b66:	4eb8      	ldr	r6, [pc, #736]	; (8001e48 <d_print_comp_inner+0x1364>)
 8001b68:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001b6c:	f106 0a08 	add.w	sl, r6, #8
 8001b70:	f04f 0900 	mov.w	r9, #0
 8001b74:	e00a      	b.n	8001b8c <d_print_comp_inner+0x10a8>
 8001b76:	460b      	mov	r3, r1
 8001b78:	3101      	adds	r1, #1
 8001b7a:	45b2      	cmp	sl, r6
 8001b7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001b80:	f804 8003 	strb.w	r8, [r4, r3]
 8001b84:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001b88:	f000 833e 	beq.w	8002208 <d_print_comp_inner+0x1724>
 8001b8c:	29ff      	cmp	r1, #255	; 0xff
 8001b8e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001b92:	d1f0      	bne.n	8001b76 <d_print_comp_inner+0x1092>
 8001b94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001b98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001b9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4798      	blx	r3
 8001ba4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e7e2      	b.n	8001b7a <d_print_comp_inner+0x1096>
 8001bb4:	4ea5      	ldr	r6, [pc, #660]	; (8001e4c <d_print_comp_inner+0x1368>)
 8001bb6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001bba:	f106 0a0b 	add.w	sl, r6, #11
 8001bbe:	f04f 0900 	mov.w	r9, #0
 8001bc2:	e00a      	b.n	8001bda <d_print_comp_inner+0x10f6>
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	3101      	adds	r1, #1
 8001bc8:	45b2      	cmp	sl, r6
 8001bca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001bce:	f804 8003 	strb.w	r8, [r4, r3]
 8001bd2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001bd6:	f000 819a 	beq.w	8001f0e <d_print_comp_inner+0x142a>
 8001bda:	29ff      	cmp	r1, #255	; 0xff
 8001bdc:	f816 8b01 	ldrb.w	r8, [r6], #1
 8001be0:	d1f0      	bne.n	8001bc4 <d_print_comp_inner+0x10e0>
 8001be2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001be6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001bea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4798      	blx	r3
 8001bf2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e7e2      	b.n	8001bc8 <d_print_comp_inner+0x10e4>
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8001c08:	f8d0 8140 	ldr.w	r8, [r0, #320]	; 0x140
 8001c0c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8001c10:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
 8001c14:	074a      	lsls	r2, r1, #29
 8001c16:	686e      	ldr	r6, [r5, #4]
 8001c18:	d505      	bpl.n	8001c26 <d_print_comp_inner+0x1142>
 8001c1a:	7833      	ldrb	r3, [r6, #0]
 8001c1c:	b91b      	cbnz	r3, 8001c26 <d_print_comp_inner+0x1142>
 8001c1e:	68b2      	ldr	r2, [r6, #8]
 8001c20:	2a06      	cmp	r2, #6
 8001c22:	f001 808d 	beq.w	8002d40 <d_print_comp_inner+0x225c>
 8001c26:	4632      	mov	r2, r6
 8001c28:	4639      	mov	r1, r7
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f001 fb74 	bl	8003318 <d_print_comp>
 8001c30:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8001c34:	2b3c      	cmp	r3, #60	; 0x3c
 8001c36:	f000 85ea 	beq.w	800280e <d_print_comp_inner+0x1d2a>
 8001c3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	f000 879e 	beq.w	8002b80 <d_print_comp_inner+0x209c>
 8001c44:	1c59      	adds	r1, r3, #1
 8001c46:	223c      	movs	r2, #60	; 0x3c
 8001c48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001c4c:	54e2      	strb	r2, [r4, r3]
 8001c4e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8001c52:	4639      	mov	r1, r7
 8001c54:	68aa      	ldr	r2, [r5, #8]
 8001c56:	4620      	mov	r0, r4
 8001c58:	f001 fb5e 	bl	8003318 <d_print_comp>
 8001c5c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8001c60:	2b3e      	cmp	r3, #62	; 0x3e
 8001c62:	f000 85c6 	beq.w	80027f2 <d_print_comp_inner+0x1d0e>
 8001c66:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8001c6a:	2bff      	cmp	r3, #255	; 0xff
 8001c6c:	f000 8775 	beq.w	8002b5a <d_print_comp_inner+0x2076>
 8001c70:	1c59      	adds	r1, r3, #1
 8001c72:	223e      	movs	r2, #62	; 0x3e
 8001c74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001c78:	54e2      	strb	r2, [r4, r3]
 8001c7a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8001c7e:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8001c82:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 8001c86:	f7fe bfef 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8001c90:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8001c94:	686e      	ldr	r6, [r5, #4]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2e00      	cmp	r6, #0
 8001c9a:	f000 8133 	beq.w	8001f04 <d_print_comp_inner+0x1420>
 8001c9e:	f10d 0910 	add.w	r9, sp, #16
 8001ca2:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8001ca6:	4696      	mov	lr, r2
 8001ca8:	4610      	mov	r0, r2
 8001caa:	464b      	mov	r3, r9
 8001cac:	7831      	ldrb	r1, [r6, #0]
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f1a1 0a1c 	sub.w	sl, r1, #28
 8001cb4:	f1ba 0f04 	cmp.w	sl, #4
 8001cb8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001cbc:	605e      	str	r6, [r3, #4]
 8001cbe:	6098      	str	r0, [r3, #8]
 8001cc0:	f8c3 c00c 	str.w	ip, [r3, #12]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f10e 0801 	add.w	r8, lr, #1
 8001cca:	f103 0310 	add.w	r3, r3, #16
 8001cce:	f240 8112 	bls.w	8001ef6 <d_print_comp_inner+0x1412>
 8001cd2:	2904      	cmp	r1, #4
 8001cd4:	f001 8195 	beq.w	8003002 <d_print_comp_inner+0x251e>
 8001cd8:	2902      	cmp	r1, #2
 8001cda:	d137      	bne.n	8001d4c <d_print_comp_inner+0x1268>
 8001cdc:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8001ce0:	f89b 3000 	ldrb.w	r3, [fp]
 8001ce4:	2b45      	cmp	r3, #69	; 0x45
 8001ce6:	bf08      	it	eq
 8001ce8:	f8db b004 	ldreq.w	fp, [fp, #4]
 8001cec:	f89b 3000 	ldrb.w	r3, [fp]
 8001cf0:	3b1c      	subs	r3, #28
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d82a      	bhi.n	8001d4c <d_print_comp_inner+0x1268>
 8001cf6:	f1b8 0f04 	cmp.w	r8, #4
 8001cfa:	f000 8103 	beq.w	8001f04 <d_print_comp_inner+0x1420>
 8001cfe:	462b      	mov	r3, r5
 8001d00:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
 8001d04:	46b2      	mov	sl, r6
 8001d06:	465d      	mov	r5, fp
 8001d08:	4666      	mov	r6, ip
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	46a4      	mov	ip, r4
 8001d0e:	4674      	mov	r4, lr
 8001d10:	e003      	b.n	8001d1a <d_print_comp_inner+0x1236>
 8001d12:	f1b8 0f04 	cmp.w	r8, #4
 8001d16:	f001 81b9 	beq.w	800308c <d_print_comp_inner+0x25a8>
 8001d1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d1e:	f104 0e10 	add.w	lr, r4, #16
 8001d22:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001d26:	4623      	mov	r3, r4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611c      	str	r4, [r3, #16]
 8001d2c:	605d      	str	r5, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60de      	str	r6, [r3, #12]
 8001d32:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 8001d36:	686d      	ldr	r5, [r5, #4]
 8001d38:	782b      	ldrb	r3, [r5, #0]
 8001d3a:	3b1c      	subs	r3, #28
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	4674      	mov	r4, lr
 8001d40:	f108 0801 	add.w	r8, r8, #1
 8001d44:	d9e5      	bls.n	8001d12 <d_print_comp_inner+0x122e>
 8001d46:	4656      	mov	r6, sl
 8001d48:	4664      	mov	r4, ip
 8001d4a:	465d      	mov	r5, fp
 8001d4c:	68aa      	ldr	r2, [r5, #8]
 8001d4e:	4639      	mov	r1, r7
 8001d50:	4620      	mov	r0, r4
 8001d52:	f001 fae1 	bl	8003318 <d_print_comp>
 8001d56:	7833      	ldrb	r3, [r6, #0]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	f001 8192 	beq.w	8003082 <d_print_comp_inner+0x259e>
 8001d5e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 8001d62:	4646      	mov	r6, r8
 8001d64:	2520      	movs	r5, #32
 8001d66:	46b8      	mov	r8, r7
 8001d68:	f859 7c08 	ldr.w	r7, [r9, #-8]
 8001d6c:	3e01      	subs	r6, #1
 8001d6e:	b987      	cbnz	r7, 8001d92 <d_print_comp_inner+0x12ae>
 8001d70:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001d74:	29ff      	cmp	r1, #255	; 0xff
 8001d76:	f001 8174 	beq.w	8003062 <d_print_comp_inner+0x257e>
 8001d7a:	1c4b      	adds	r3, r1, #1
 8001d7c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8001d80:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8001d84:	5465      	strb	r5, [r4, r1]
 8001d86:	4620      	mov	r0, r4
 8001d88:	4641      	mov	r1, r8
 8001d8a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8001d8e:	f001 fad3 	bl	8003338 <d_print_mod>
 8001d92:	f1a9 0910 	sub.w	r9, r9, #16
 8001d96:	2e00      	cmp	r6, #0
 8001d98:	d1e6      	bne.n	8001d68 <d_print_comp_inner+0x1284>
 8001d9a:	9b00      	ldr	r3, [sp, #0]
 8001d9c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001da0:	f7fe bf62 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001da4:	686a      	ldr	r2, [r5, #4]
 8001da6:	f001 fab7 	bl	8003318 <d_print_comp>
 8001daa:	f017 0904 	ands.w	r9, r7, #4
 8001dae:	f000 8477 	beq.w	80026a0 <d_print_comp_inner+0x1bbc>
 8001db2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001db6:	29ff      	cmp	r1, #255	; 0xff
 8001db8:	f000 87d5 	beq.w	8002d66 <d_print_comp_inner+0x2282>
 8001dbc:	1c4a      	adds	r2, r1, #1
 8001dbe:	232e      	movs	r3, #46	; 0x2e
 8001dc0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001dc4:	5463      	strb	r3, [r4, r1]
 8001dc6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001dca:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8001dce:	f898 3000 	ldrb.w	r3, [r8]
 8001dd2:	2b45      	cmp	r3, #69	; 0x45
 8001dd4:	f000 862e 	beq.w	8002a34 <d_print_comp_inner+0x1f50>
 8001dd8:	4642      	mov	r2, r8
 8001dda:	4639      	mov	r1, r7
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f001 fa9b 	bl	8003318 <d_print_comp>
 8001de2:	f7fe bf41 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001de6:	f011 0704 	ands.w	r7, r1, #4
 8001dea:	f040 832d 	bne.w	8002448 <d_print_comp_inner+0x1964>
 8001dee:	68ab      	ldr	r3, [r5, #8]
 8001df0:	686d      	ldr	r5, [r5, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f43e af38 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8001df8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001dfc:	eb05 0803 	add.w	r8, r5, r3
 8001e00:	e009      	b.n	8001e16 <d_print_comp_inner+0x1332>
 8001e02:	460b      	mov	r3, r1
 8001e04:	3101      	adds	r1, #1
 8001e06:	45a8      	cmp	r8, r5
 8001e08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001e0c:	54e6      	strb	r6, [r4, r3]
 8001e0e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001e12:	f43e af29 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8001e16:	29ff      	cmp	r1, #255	; 0xff
 8001e18:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001e1c:	d1f1      	bne.n	8001e02 <d_print_comp_inner+0x131e>
 8001e1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001e22:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8001e26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4798      	blx	r3
 8001e2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001e32:	3301      	adds	r3, #1
 8001e34:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e7e3      	b.n	8001e06 <d_print_comp_inner+0x1322>
 8001e3e:	bf00      	nop
 8001e40:	08016270 	.word	0x08016270
 8001e44:	0801624b 	.word	0x0801624b
 8001e48:	0801623f 	.word	0x0801623f
 8001e4c:	08016234 	.word	0x08016234
 8001e50:	686f      	ldr	r7, [r5, #4]
 8001e52:	2f00      	cmp	r7, #0
 8001e54:	f000 8375 	beq.w	8002542 <d_print_comp_inner+0x1a5e>
 8001e58:	4ddb      	ldr	r5, [pc, #876]	; (80021c8 <d_print_comp_inner+0x16e4>)
 8001e5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001e5e:	f105 0906 	add.w	r9, r5, #6
 8001e62:	f04f 0800 	mov.w	r8, #0
 8001e66:	e009      	b.n	8001e7c <d_print_comp_inner+0x1398>
 8001e68:	460b      	mov	r3, r1
 8001e6a:	3101      	adds	r1, #1
 8001e6c:	454d      	cmp	r5, r9
 8001e6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001e72:	54e6      	strb	r6, [r4, r3]
 8001e74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001e78:	f000 8281 	beq.w	800237e <d_print_comp_inner+0x189a>
 8001e7c:	29ff      	cmp	r1, #255	; 0xff
 8001e7e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001e82:	d1f1      	bne.n	8001e68 <d_print_comp_inner+0x1384>
 8001e84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001e88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001e8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001e90:	4620      	mov	r0, r4
 8001e92:	4798      	blx	r3
 8001e94:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e7e3      	b.n	8001e6c <d_print_comp_inner+0x1388>
 8001ea4:	1d29      	adds	r1, r5, #4
 8001ea6:	f7fe fd77 	bl	8000998 <d_lookup_template_argument.isra.6>
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	f43e aee4 	beq.w	8000c78 <d_print_comp_inner+0x194>
 8001eb0:	7803      	ldrb	r3, [r0, #0]
 8001eb2:	2b2f      	cmp	r3, #47	; 0x2f
 8001eb4:	f000 84fd 	beq.w	80028b2 <d_print_comp_inner+0x1dce>
 8001eb8:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4639      	mov	r1, r7
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f001 fa26 	bl	8003318 <d_print_comp>
 8001ecc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8001ed0:	f7fe beca 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001ed4:	68aa      	ldr	r2, [r5, #8]
 8001ed6:	f001 fa1f 	bl	8003318 <d_print_comp>
 8001eda:	f7fe bec5 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8001ee4:	f7fe bec0 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001ee8:	f10b 0b01 	add.w	fp, fp, #1
 8001eec:	45cb      	cmp	fp, r9
 8001eee:	f47e af3a 	bne.w	8000d66 <d_print_comp_inner+0x282>
 8001ef2:	f7fe beb9 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001ef6:	6876      	ldr	r6, [r6, #4]
 8001ef8:	46c6      	mov	lr, r8
 8001efa:	b11e      	cbz	r6, 8001f04 <d_print_comp_inner+0x1420>
 8001efc:	f1be 0f04 	cmp.w	lr, #4
 8001f00:	f47f aed4 	bne.w	8001cac <d_print_comp_inner+0x11c8>
 8001f04:	2301      	movs	r3, #1
 8001f06:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8001f0a:	f7fe bead 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f0e:	686a      	ldr	r2, [r5, #4]
 8001f10:	4639      	mov	r1, r7
 8001f12:	4620      	mov	r0, r4
 8001f14:	f001 fa00 	bl	8003318 <d_print_comp>
 8001f18:	f7fe bea6 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f1c:	686a      	ldr	r2, [r5, #4]
 8001f1e:	4639      	mov	r1, r7
 8001f20:	4620      	mov	r0, r4
 8001f22:	f001 f9f9 	bl	8003318 <d_print_comp>
 8001f26:	f7fe be9f 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f2a:	686a      	ldr	r2, [r5, #4]
 8001f2c:	4639      	mov	r1, r7
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f001 f9f2 	bl	8003318 <d_print_comp>
 8001f34:	f7fe be98 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f38:	686a      	ldr	r2, [r5, #4]
 8001f3a:	4639      	mov	r1, r7
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f001 f9eb 	bl	8003318 <d_print_comp>
 8001f42:	f7fe be91 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f46:	686a      	ldr	r2, [r5, #4]
 8001f48:	4639      	mov	r1, r7
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f001 f9e4 	bl	8003318 <d_print_comp>
 8001f50:	f7fe be8a 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f54:	686a      	ldr	r2, [r5, #4]
 8001f56:	4639      	mov	r1, r7
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f001 f9dd 	bl	8003318 <d_print_comp>
 8001f5e:	f7fe be83 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f62:	4639      	mov	r1, r7
 8001f64:	686a      	ldr	r2, [r5, #4]
 8001f66:	4620      	mov	r0, r4
 8001f68:	f001 f9d6 	bl	8003318 <d_print_comp>
 8001f6c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001f70:	29ff      	cmp	r1, #255	; 0xff
 8001f72:	f000 84d2 	beq.w	800291a <d_print_comp_inner+0x1e36>
 8001f76:	1c4a      	adds	r2, r1, #1
 8001f78:	2329      	movs	r3, #41	; 0x29
 8001f7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001f7e:	5463      	strb	r3, [r4, r1]
 8001f80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001f84:	f7fe be70 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f88:	686a      	ldr	r2, [r5, #4]
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f001 f9c3 	bl	8003318 <d_print_comp>
 8001f92:	f7fe be69 	b.w	8000c68 <d_print_comp_inner+0x184>
 8001f96:	686a      	ldr	r2, [r5, #4]
 8001f98:	498c      	ldr	r1, [pc, #560]	; (80021cc <d_print_comp_inner+0x16e8>)
 8001f9a:	3201      	adds	r2, #1
 8001f9c:	a804      	add	r0, sp, #16
 8001f9e:	f00f fd1f 	bl	80119e0 <sprintf>
 8001fa2:	a804      	add	r0, sp, #16
 8001fa4:	f008 f9bc 	bl	800a320 <strlen>
 8001fa8:	b318      	cbz	r0, 8001ff2 <d_print_comp_inner+0x150e>
 8001faa:	ad04      	add	r5, sp, #16
 8001fac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001fb0:	182f      	adds	r7, r5, r0
 8001fb2:	f04f 0800 	mov.w	r8, #0
 8001fb6:	e008      	b.n	8001fca <d_print_comp_inner+0x14e6>
 8001fb8:	460b      	mov	r3, r1
 8001fba:	3101      	adds	r1, #1
 8001fbc:	42af      	cmp	r7, r5
 8001fbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001fc2:	54e6      	strb	r6, [r4, r3]
 8001fc4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001fc8:	d015      	beq.n	8001ff6 <d_print_comp_inner+0x1512>
 8001fca:	29ff      	cmp	r1, #255	; 0xff
 8001fcc:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001fd0:	d1f2      	bne.n	8001fb8 <d_print_comp_inner+0x14d4>
 8001fd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001fd6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001fda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001fde:	4620      	mov	r0, r4
 8001fe0:	4798      	blx	r3
 8001fe2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001fec:	2101      	movs	r1, #1
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e7e4      	b.n	8001fbc <d_print_comp_inner+0x14d8>
 8001ff2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001ff6:	29ff      	cmp	r1, #255	; 0xff
 8001ff8:	f000 84d0 	beq.w	800299c <d_print_comp_inner+0x1eb8>
 8001ffc:	1c4a      	adds	r2, r1, #1
 8001ffe:	237d      	movs	r3, #125	; 0x7d
 8002000:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002004:	5463      	strb	r3, [r4, r1]
 8002006:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800200a:	f7fe be2d 	b.w	8000c68 <d_print_comp_inner+0x184>
 800200e:	4e70      	ldr	r6, [pc, #448]	; (80021d0 <d_print_comp_inner+0x16ec>)
 8002010:	686a      	ldr	r2, [r5, #4]
 8002012:	4639      	mov	r1, r7
 8002014:	4620      	mov	r0, r4
 8002016:	f001 f97f 	bl	8003318 <d_print_comp>
 800201a:	f106 0902 	add.w	r9, r6, #2
 800201e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002022:	f04f 0800 	mov.w	r8, #0
 8002026:	e008      	b.n	800203a <d_print_comp_inner+0x1556>
 8002028:	460b      	mov	r3, r1
 800202a:	3101      	adds	r1, #1
 800202c:	45b1      	cmp	r9, r6
 800202e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002032:	54e7      	strb	r7, [r4, r3]
 8002034:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002038:	d068      	beq.n	800210c <d_print_comp_inner+0x1628>
 800203a:	29ff      	cmp	r1, #255	; 0xff
 800203c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8002040:	d1f2      	bne.n	8002028 <d_print_comp_inner+0x1544>
 8002042:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002046:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800204a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800204e:	4620      	mov	r0, r4
 8002050:	4798      	blx	r3
 8002052:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002056:	3301      	adds	r3, #1
 8002058:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800205c:	2101      	movs	r1, #1
 800205e:	2300      	movs	r3, #0
 8002060:	e7e4      	b.n	800202c <d_print_comp_inner+0x1548>
 8002062:	686a      	ldr	r2, [r5, #4]
 8002064:	4639      	mov	r1, r7
 8002066:	4620      	mov	r0, r4
 8002068:	f001 f956 	bl	8003318 <d_print_comp>
 800206c:	f7fe bdfc 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002070:	f8da 5004 	ldr.w	r5, [sl, #4]
 8002074:	782b      	ldrb	r3, [r5, #0]
 8002076:	3b61      	subs	r3, #97	; 0x61
 8002078:	2b19      	cmp	r3, #25
 800207a:	d80b      	bhi.n	8002094 <d_print_comp_inner+0x15b0>
 800207c:	29ff      	cmp	r1, #255	; 0xff
 800207e:	f000 8729 	beq.w	8002ed4 <d_print_comp_inner+0x23f0>
 8002082:	2320      	movs	r3, #32
 8002084:	1c4a      	adds	r2, r1, #1
 8002086:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800208a:	5463      	strb	r3, [r4, r1]
 800208c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002090:	f8da 5004 	ldr.w	r5, [sl, #4]
 8002094:	19eb      	adds	r3, r5, r7
 8002096:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800209a:	2b20      	cmp	r3, #32
 800209c:	bf08      	it	eq
 800209e:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80020a2:	2f00      	cmp	r7, #0
 80020a4:	f43e ade0 	beq.w	8000c68 <d_print_comp_inner+0x184>
 80020a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80020ac:	442f      	add	r7, r5
 80020ae:	f04f 0800 	mov.w	r8, #0
 80020b2:	e009      	b.n	80020c8 <d_print_comp_inner+0x15e4>
 80020b4:	460b      	mov	r3, r1
 80020b6:	3101      	adds	r1, #1
 80020b8:	42af      	cmp	r7, r5
 80020ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80020be:	54e6      	strb	r6, [r4, r3]
 80020c0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80020c4:	f43e add0 	beq.w	8000c68 <d_print_comp_inner+0x184>
 80020c8:	29ff      	cmp	r1, #255	; 0xff
 80020ca:	f815 6b01 	ldrb.w	r6, [r5], #1
 80020ce:	d1f1      	bne.n	80020b4 <d_print_comp_inner+0x15d0>
 80020d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80020d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80020d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80020dc:	4620      	mov	r0, r4
 80020de:	4798      	blx	r3
 80020e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80020e4:	3301      	adds	r3, #1
 80020e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80020ea:	2101      	movs	r1, #1
 80020ec:	2300      	movs	r3, #0
 80020ee:	e7e3      	b.n	80020b8 <d_print_comp_inner+0x15d4>
 80020f0:	686a      	ldr	r2, [r5, #4]
 80020f2:	4639      	mov	r1, r7
 80020f4:	4620      	mov	r0, r4
 80020f6:	f001 f90f 	bl	8003318 <d_print_comp>
 80020fa:	f7fe bdb5 	b.w	8000c68 <d_print_comp_inner+0x184>
 80020fe:	686a      	ldr	r2, [r5, #4]
 8002100:	4639      	mov	r1, r7
 8002102:	4620      	mov	r0, r4
 8002104:	f001 f908 	bl	8003318 <d_print_comp>
 8002108:	f7fe bdae 	b.w	8000c68 <d_print_comp_inner+0x184>
 800210c:	68aa      	ldr	r2, [r5, #8]
 800210e:	492f      	ldr	r1, [pc, #188]	; (80021cc <d_print_comp_inner+0x16e8>)
 8002110:	3201      	adds	r2, #1
 8002112:	a804      	add	r0, sp, #16
 8002114:	f00f fc64 	bl	80119e0 <sprintf>
 8002118:	a804      	add	r0, sp, #16
 800211a:	f008 f901 	bl	800a320 <strlen>
 800211e:	b318      	cbz	r0, 8002168 <d_print_comp_inner+0x1684>
 8002120:	ad04      	add	r5, sp, #16
 8002122:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002126:	182f      	adds	r7, r5, r0
 8002128:	f04f 0800 	mov.w	r8, #0
 800212c:	e008      	b.n	8002140 <d_print_comp_inner+0x165c>
 800212e:	460b      	mov	r3, r1
 8002130:	3101      	adds	r1, #1
 8002132:	42af      	cmp	r7, r5
 8002134:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002138:	54e6      	strb	r6, [r4, r3]
 800213a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800213e:	d015      	beq.n	800216c <d_print_comp_inner+0x1688>
 8002140:	29ff      	cmp	r1, #255	; 0xff
 8002142:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002146:	d1f2      	bne.n	800212e <d_print_comp_inner+0x164a>
 8002148:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800214c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002150:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002154:	4620      	mov	r0, r4
 8002156:	4798      	blx	r3
 8002158:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800215c:	3301      	adds	r3, #1
 800215e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002162:	2101      	movs	r1, #1
 8002164:	2300      	movs	r3, #0
 8002166:	e7e4      	b.n	8002132 <d_print_comp_inner+0x164e>
 8002168:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800216c:	29ff      	cmp	r1, #255	; 0xff
 800216e:	f000 844a 	beq.w	8002a06 <d_print_comp_inner+0x1f22>
 8002172:	1c4a      	adds	r2, r1, #1
 8002174:	237d      	movs	r3, #125	; 0x7d
 8002176:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800217a:	5463      	strb	r3, [r4, r1]
 800217c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002180:	f7fe bd72 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002184:	1d2a      	adds	r2, r5, #4
 8002186:	4639      	mov	r1, r7
 8002188:	4620      	mov	r0, r4
 800218a:	f001 fe5f 	bl	8003e4c <d_print_cast.isra.12>
 800218e:	f7fe bd6b 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002192:	4639      	mov	r1, r7
 8002194:	68aa      	ldr	r2, [r5, #8]
 8002196:	4620      	mov	r0, r4
 8002198:	f001 f8be 	bl	8003318 <d_print_comp>
 800219c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80021a0:	29ff      	cmp	r1, #255	; 0xff
 80021a2:	f000 841e 	beq.w	80029e2 <d_print_comp_inner+0x1efe>
 80021a6:	1c4a      	adds	r2, r1, #1
 80021a8:	235d      	movs	r3, #93	; 0x5d
 80021aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80021ae:	5463      	strb	r3, [r4, r1]
 80021b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80021b4:	f7fe bd58 	b.w	8000c68 <d_print_comp_inner+0x184>
 80021b8:	686a      	ldr	r2, [r5, #4]
 80021ba:	4639      	mov	r1, r7
 80021bc:	4620      	mov	r0, r4
 80021be:	f001 f8ab 	bl	8003318 <d_print_comp>
 80021c2:	f7fe bd51 	b.w	8000c68 <d_print_comp_inner+0x184>
 80021c6:	bf00      	nop
 80021c8:	08016418 	.word	0x08016418
 80021cc:	08016220 	.word	0x08016220
 80021d0:	0801646c 	.word	0x0801646c
 80021d4:	68aa      	ldr	r2, [r5, #8]
 80021d6:	4639      	mov	r1, r7
 80021d8:	4620      	mov	r0, r4
 80021da:	f001 f89d 	bl	8003318 <d_print_comp>
 80021de:	f7fe bd43 	b.w	8000c68 <d_print_comp_inner+0x184>
 80021e2:	4639      	mov	r1, r7
 80021e4:	68aa      	ldr	r2, [r5, #8]
 80021e6:	4620      	mov	r0, r4
 80021e8:	f001 f896 	bl	8003318 <d_print_comp>
 80021ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80021f0:	29ff      	cmp	r1, #255	; 0xff
 80021f2:	f000 83e5 	beq.w	80029c0 <d_print_comp_inner+0x1edc>
 80021f6:	1c4a      	adds	r2, r1, #1
 80021f8:	235d      	movs	r3, #93	; 0x5d
 80021fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80021fe:	5463      	strb	r3, [r4, r1]
 8002200:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002204:	f7fe bd30 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002208:	686a      	ldr	r2, [r5, #4]
 800220a:	4639      	mov	r1, r7
 800220c:	4620      	mov	r0, r4
 800220e:	f001 f883 	bl	8003318 <d_print_comp>
 8002212:	f7fe bd29 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002216:	686a      	ldr	r2, [r5, #4]
 8002218:	4639      	mov	r1, r7
 800221a:	4620      	mov	r0, r4
 800221c:	f001 f87c 	bl	8003318 <d_print_comp>
 8002220:	f7fe bd22 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002224:	686a      	ldr	r2, [r5, #4]
 8002226:	4639      	mov	r1, r7
 8002228:	4620      	mov	r0, r4
 800222a:	f001 f875 	bl	8003318 <d_print_comp>
 800222e:	f7fe bd1b 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002232:	4ed6      	ldr	r6, [pc, #856]	; (800258c <d_print_comp_inner+0x1aa8>)
 8002234:	68aa      	ldr	r2, [r5, #8]
 8002236:	4639      	mov	r1, r7
 8002238:	4620      	mov	r0, r4
 800223a:	f001 f86d 	bl	8003318 <d_print_comp>
 800223e:	f106 0a05 	add.w	sl, r6, #5
 8002242:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002246:	f04f 0900 	mov.w	r9, #0
 800224a:	e009      	b.n	8002260 <d_print_comp_inner+0x177c>
 800224c:	460b      	mov	r3, r1
 800224e:	3101      	adds	r1, #1
 8002250:	45b2      	cmp	sl, r6
 8002252:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002256:	f804 8003 	strb.w	r8, [r4, r3]
 800225a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800225e:	d028      	beq.n	80022b2 <d_print_comp_inner+0x17ce>
 8002260:	29ff      	cmp	r1, #255	; 0xff
 8002262:	f816 8b01 	ldrb.w	r8, [r6], #1
 8002266:	d1f1      	bne.n	800224c <d_print_comp_inner+0x1768>
 8002268:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800226c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002270:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002274:	4620      	mov	r0, r4
 8002276:	4798      	blx	r3
 8002278:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800227c:	3301      	adds	r3, #1
 800227e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002282:	2101      	movs	r1, #1
 8002284:	2300      	movs	r3, #0
 8002286:	e7e3      	b.n	8002250 <d_print_comp_inner+0x176c>
 8002288:	686a      	ldr	r2, [r5, #4]
 800228a:	4639      	mov	r1, r7
 800228c:	4620      	mov	r0, r4
 800228e:	f001 f843 	bl	8003318 <d_print_comp>
 8002292:	f7fe bce9 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002296:	686a      	ldr	r2, [r5, #4]
 8002298:	4639      	mov	r1, r7
 800229a:	4620      	mov	r0, r4
 800229c:	f001 f83c 	bl	8003318 <d_print_comp>
 80022a0:	f7fe bce2 	b.w	8000c68 <d_print_comp_inner+0x184>
 80022a4:	686a      	ldr	r2, [r5, #4]
 80022a6:	4639      	mov	r1, r7
 80022a8:	4620      	mov	r0, r4
 80022aa:	f001 f835 	bl	8003318 <d_print_comp>
 80022ae:	f7fe bcdb 	b.w	8000c68 <d_print_comp_inner+0x184>
 80022b2:	686a      	ldr	r2, [r5, #4]
 80022b4:	4639      	mov	r1, r7
 80022b6:	4620      	mov	r0, r4
 80022b8:	f001 f82e 	bl	8003318 <d_print_comp>
 80022bc:	f7fe bcd4 	b.w	8000c68 <d_print_comp_inner+0x184>
 80022c0:	686a      	ldr	r2, [r5, #4]
 80022c2:	4639      	mov	r1, r7
 80022c4:	4620      	mov	r0, r4
 80022c6:	f001 f827 	bl	8003318 <d_print_comp>
 80022ca:	f7fe bccd 	b.w	8000c68 <d_print_comp_inner+0x184>
 80022ce:	4eb0      	ldr	r6, [pc, #704]	; (8002590 <d_print_comp_inner+0x1aac>)
 80022d0:	686a      	ldr	r2, [r5, #4]
 80022d2:	4639      	mov	r1, r7
 80022d4:	4620      	mov	r0, r4
 80022d6:	f001 f81f 	bl	8003318 <d_print_comp>
 80022da:	f106 0a04 	add.w	sl, r6, #4
 80022de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80022e2:	f04f 0900 	mov.w	r9, #0
 80022e6:	e009      	b.n	80022fc <d_print_comp_inner+0x1818>
 80022e8:	460b      	mov	r3, r1
 80022ea:	3101      	adds	r1, #1
 80022ec:	4556      	cmp	r6, sl
 80022ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80022f2:	f804 8003 	strb.w	r8, [r4, r3]
 80022f6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80022fa:	d013      	beq.n	8002324 <d_print_comp_inner+0x1840>
 80022fc:	29ff      	cmp	r1, #255	; 0xff
 80022fe:	f816 8b01 	ldrb.w	r8, [r6], #1
 8002302:	d1f1      	bne.n	80022e8 <d_print_comp_inner+0x1804>
 8002304:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002308:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800230c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002310:	4620      	mov	r0, r4
 8002312:	4798      	blx	r3
 8002314:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002318:	3301      	adds	r3, #1
 800231a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800231e:	2101      	movs	r1, #1
 8002320:	2300      	movs	r3, #0
 8002322:	e7e3      	b.n	80022ec <d_print_comp_inner+0x1808>
 8002324:	68aa      	ldr	r2, [r5, #8]
 8002326:	4639      	mov	r1, r7
 8002328:	4620      	mov	r0, r4
 800232a:	f000 fff5 	bl	8003318 <d_print_comp>
 800232e:	f7fe bc9b 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002332:	68aa      	ldr	r2, [r5, #8]
 8002334:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8002338:	460e      	mov	r6, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4639      	mov	r1, r7
 800233e:	f000 ffeb 	bl	8003318 <d_print_comp>
 8002342:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002346:	429d      	cmp	r5, r3
 8002348:	f47e ac8e 	bne.w	8000c68 <d_print_comp_inner+0x184>
 800234c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002350:	42b3      	cmp	r3, r6
 8002352:	f47e ac89 	bne.w	8000c68 <d_print_comp_inner+0x184>
 8002356:	3e02      	subs	r6, #2
 8002358:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800235c:	f7fe bc84 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002360:	462a      	mov	r2, r5
 8002362:	4639      	mov	r1, r7
 8002364:	4620      	mov	r0, r4
 8002366:	f000 ffe7 	bl	8003338 <d_print_mod>
 800236a:	f7ff bb6c 	b.w	8001a46 <d_print_comp_inner+0xf62>
 800236e:	686b      	ldr	r3, [r5, #4]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f1b9 0f00 	cmp.w	r9, #0
 8002376:	f47e acf0 	bne.w	8000d5a <d_print_comp_inner+0x276>
 800237a:	f7fe bc75 	b.w	8000c68 <d_print_comp_inner+0x184>
 800237e:	463a      	mov	r2, r7
 8002380:	a804      	add	r0, sp, #16
 8002382:	4984      	ldr	r1, [pc, #528]	; (8002594 <d_print_comp_inner+0x1ab0>)
 8002384:	f00f fb2c 	bl	80119e0 <sprintf>
 8002388:	a804      	add	r0, sp, #16
 800238a:	f007 ffc9 	bl	800a320 <strlen>
 800238e:	b318      	cbz	r0, 80023d8 <d_print_comp_inner+0x18f4>
 8002390:	ad04      	add	r5, sp, #16
 8002392:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002396:	182f      	adds	r7, r5, r0
 8002398:	f04f 0800 	mov.w	r8, #0
 800239c:	e008      	b.n	80023b0 <d_print_comp_inner+0x18cc>
 800239e:	460b      	mov	r3, r1
 80023a0:	3101      	adds	r1, #1
 80023a2:	42bd      	cmp	r5, r7
 80023a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80023a8:	54e6      	strb	r6, [r4, r3]
 80023aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80023ae:	d015      	beq.n	80023dc <d_print_comp_inner+0x18f8>
 80023b0:	29ff      	cmp	r1, #255	; 0xff
 80023b2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80023b6:	d1f2      	bne.n	800239e <d_print_comp_inner+0x18ba>
 80023b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80023bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80023c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80023c4:	4620      	mov	r0, r4
 80023c6:	4798      	blx	r3
 80023c8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80023cc:	3301      	adds	r3, #1
 80023ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80023d2:	2101      	movs	r1, #1
 80023d4:	2300      	movs	r3, #0
 80023d6:	e7e4      	b.n	80023a2 <d_print_comp_inner+0x18be>
 80023d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80023dc:	29ff      	cmp	r1, #255	; 0xff
 80023de:	f000 841f 	beq.w	8002c20 <d_print_comp_inner+0x213c>
 80023e2:	1c4a      	adds	r2, r1, #1
 80023e4:	237d      	movs	r3, #125	; 0x7d
 80023e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80023ea:	5463      	strb	r3, [r4, r1]
 80023ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80023f0:	f7fe bc3a 	b.w	8000c68 <d_print_comp_inner+0x184>
 80023f4:	686b      	ldr	r3, [r5, #4]
 80023f6:	68df      	ldr	r7, [r3, #12]
 80023f8:	689d      	ldr	r5, [r3, #8]
 80023fa:	2f00      	cmp	r7, #0
 80023fc:	f43e ac34 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8002400:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002404:	442f      	add	r7, r5
 8002406:	f04f 0800 	mov.w	r8, #0
 800240a:	e009      	b.n	8002420 <d_print_comp_inner+0x193c>
 800240c:	460b      	mov	r3, r1
 800240e:	3101      	adds	r1, #1
 8002410:	42af      	cmp	r7, r5
 8002412:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002416:	54e6      	strb	r6, [r4, r3]
 8002418:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800241c:	f43e ac24 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8002420:	29ff      	cmp	r1, #255	; 0xff
 8002422:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002426:	d1f1      	bne.n	800240c <d_print_comp_inner+0x1928>
 8002428:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800242c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002430:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002434:	4620      	mov	r0, r4
 8002436:	4798      	blx	r3
 8002438:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800243c:	3301      	adds	r3, #1
 800243e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002442:	2101      	movs	r1, #1
 8002444:	2300      	movs	r3, #0
 8002446:	e7e3      	b.n	8002410 <d_print_comp_inner+0x192c>
 8002448:	686e      	ldr	r6, [r5, #4]
 800244a:	68af      	ldr	r7, [r5, #8]
 800244c:	4437      	add	r7, r6
 800244e:	42be      	cmp	r6, r7
 8002450:	f4be ac0a 	bcs.w	8000c68 <d_print_comp_inner+0x184>
 8002454:	f04f 0800 	mov.w	r8, #0
 8002458:	e00d      	b.n	8002476 <d_print_comp_inner+0x1992>
 800245a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800245e:	29ff      	cmp	r1, #255	; 0xff
 8002460:	d038      	beq.n	80024d4 <d_print_comp_inner+0x19f0>
 8002462:	1c4b      	adds	r3, r1, #1
 8002464:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002468:	5465      	strb	r5, [r4, r1]
 800246a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800246e:	3601      	adds	r6, #1
 8002470:	42b7      	cmp	r7, r6
 8002472:	f67e abf9 	bls.w	8000c68 <d_print_comp_inner+0x184>
 8002476:	1bbb      	subs	r3, r7, r6
 8002478:	2b03      	cmp	r3, #3
 800247a:	7835      	ldrb	r5, [r6, #0]
 800247c:	dded      	ble.n	800245a <d_print_comp_inner+0x1976>
 800247e:	2d5f      	cmp	r5, #95	; 0x5f
 8002480:	d1eb      	bne.n	800245a <d_print_comp_inner+0x1976>
 8002482:	7872      	ldrb	r2, [r6, #1]
 8002484:	2a5f      	cmp	r2, #95	; 0x5f
 8002486:	d1e8      	bne.n	800245a <d_print_comp_inner+0x1976>
 8002488:	78b3      	ldrb	r3, [r6, #2]
 800248a:	2b55      	cmp	r3, #85	; 0x55
 800248c:	d001      	beq.n	8002492 <d_print_comp_inner+0x19ae>
 800248e:	4615      	mov	r5, r2
 8002490:	e7e3      	b.n	800245a <d_print_comp_inner+0x1976>
 8002492:	1cf3      	adds	r3, r6, #3
 8002494:	429f      	cmp	r7, r3
 8002496:	d9fa      	bls.n	800248e <d_print_comp_inner+0x19aa>
 8002498:	2000      	movs	r0, #0
 800249a:	e006      	b.n	80024aa <d_print_comp_inner+0x19c6>
 800249c:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 80024a0:	42bb      	cmp	r3, r7
 80024a2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80024a6:	f000 855a 	beq.w	8002f5e <d_print_comp_inner+0x247a>
 80024aa:	4699      	mov	r9, r3
 80024ac:	f813 5b01 	ldrb.w	r5, [r3], #1
 80024b0:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 80024b4:	b2d1      	uxtb	r1, r2
 80024b6:	2909      	cmp	r1, #9
 80024b8:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 80024bc:	d9f0      	bls.n	80024a0 <d_print_comp_inner+0x19bc>
 80024be:	f1be 0f05 	cmp.w	lr, #5
 80024c2:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 80024c6:	d9e9      	bls.n	800249c <d_print_comp_inner+0x19b8>
 80024c8:	2a05      	cmp	r2, #5
 80024ca:	f200 869c 	bhi.w	8003206 <d_print_comp_inner+0x2722>
 80024ce:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 80024d2:	e7e5      	b.n	80024a0 <d_print_comp_inner+0x19bc>
 80024d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80024d8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80024dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80024e0:	4620      	mov	r0, r4
 80024e2:	4798      	blx	r3
 80024e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80024e8:	3301      	adds	r3, #1
 80024ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80024ee:	2100      	movs	r1, #0
 80024f0:	2301      	movs	r3, #1
 80024f2:	e7b7      	b.n	8002464 <d_print_comp_inner+0x1980>
 80024f4:	4d28      	ldr	r5, [pc, #160]	; (8002598 <d_print_comp_inner+0x1ab4>)
 80024f6:	4698      	mov	r8, r3
 80024f8:	1daf      	adds	r7, r5, #6
 80024fa:	e009      	b.n	8002510 <d_print_comp_inner+0x1a2c>
 80024fc:	460b      	mov	r3, r1
 80024fe:	3101      	adds	r1, #1
 8002500:	42af      	cmp	r7, r5
 8002502:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002506:	54e6      	strb	r6, [r4, r3]
 8002508:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800250c:	f43e abac 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8002510:	29ff      	cmp	r1, #255	; 0xff
 8002512:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002516:	d1f1      	bne.n	80024fc <d_print_comp_inner+0x1a18>
 8002518:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800251c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002520:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002524:	4620      	mov	r0, r4
 8002526:	4798      	blx	r3
 8002528:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800252c:	3301      	adds	r3, #1
 800252e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002532:	2101      	movs	r1, #1
 8002534:	2300      	movs	r3, #0
 8002536:	e7e3      	b.n	8002500 <d_print_comp_inner+0x1a1c>
 8002538:	4605      	mov	r5, r0
 800253a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800253e:	f7ff ba6e 	b.w	8001a1e <d_print_comp_inner+0xf3a>
 8002542:	4d16      	ldr	r5, [pc, #88]	; (800259c <d_print_comp_inner+0x1ab8>)
 8002544:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002548:	f105 0804 	add.w	r8, r5, #4
 800254c:	e009      	b.n	8002562 <d_print_comp_inner+0x1a7e>
 800254e:	460b      	mov	r3, r1
 8002550:	3101      	adds	r1, #1
 8002552:	4545      	cmp	r5, r8
 8002554:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002558:	54e6      	strb	r6, [r4, r3]
 800255a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800255e:	f43e ab83 	beq.w	8000c68 <d_print_comp_inner+0x184>
 8002562:	29ff      	cmp	r1, #255	; 0xff
 8002564:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002568:	d1f1      	bne.n	800254e <d_print_comp_inner+0x1a6a>
 800256a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800256e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8002572:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002576:	4620      	mov	r0, r4
 8002578:	4798      	blx	r3
 800257a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800257e:	3301      	adds	r3, #1
 8002580:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002584:	2101      	movs	r1, #1
 8002586:	2300      	movs	r3, #0
 8002588:	e7e3      	b.n	8002552 <d_print_comp_inner+0x1a6e>
 800258a:	bf00      	nop
 800258c:	0801632c 	.word	0x0801632c
 8002590:	08016268 	.word	0x08016268
 8002594:	08016220 	.word	0x08016220
 8002598:	0801638c 	.word	0x0801638c
 800259c:	08016410 	.word	0x08016410
 80025a0:	f021 0760 	bic.w	r7, r1, #96	; 0x60
 80025a4:	f105 0208 	add.w	r2, r5, #8
 80025a8:	4639      	mov	r1, r7
 80025aa:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80025ae:	f001 fb59 	bl	8003c64 <d_print_function_type.isra.11>
 80025b2:	686a      	ldr	r2, [r5, #4]
 80025b4:	2a00      	cmp	r2, #0
 80025b6:	f43e ab57 	beq.w	8000c68 <d_print_comp_inner+0x184>
 80025ba:	4639      	mov	r1, r7
 80025bc:	4620      	mov	r0, r4
 80025be:	f000 feab 	bl	8003318 <d_print_comp>
 80025c2:	f7fe bb51 	b.w	8000c68 <d_print_comp_inner+0x184>
 80025c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80025ca:	f7fe be8e 	b.w	80012ea <d_print_comp_inner+0x806>
 80025ce:	4edc      	ldr	r6, [pc, #880]	; (8002940 <d_print_comp_inner+0x1e5c>)
 80025d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80025d4:	f106 0a05 	add.w	sl, r6, #5
 80025d8:	f04f 0900 	mov.w	r9, #0
 80025dc:	e00a      	b.n	80025f4 <d_print_comp_inner+0x1b10>
 80025de:	460b      	mov	r3, r1
 80025e0:	3101      	adds	r1, #1
 80025e2:	4556      	cmp	r6, sl
 80025e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80025e8:	f804 8003 	strb.w	r8, [r4, r3]
 80025ec:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80025f0:	f43e ae65 	beq.w	80012be <d_print_comp_inner+0x7da>
 80025f4:	29ff      	cmp	r1, #255	; 0xff
 80025f6:	f816 8b01 	ldrb.w	r8, [r6], #1
 80025fa:	d1f0      	bne.n	80025de <d_print_comp_inner+0x1afa>
 80025fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002600:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002604:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002608:	4620      	mov	r0, r4
 800260a:	4798      	blx	r3
 800260c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002610:	3301      	adds	r3, #1
 8002612:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002616:	2101      	movs	r1, #1
 8002618:	2300      	movs	r3, #0
 800261a:	e7e2      	b.n	80025e2 <d_print_comp_inner+0x1afe>
 800261c:	6873      	ldr	r3, [r6, #4]
 800261e:	49c9      	ldr	r1, [pc, #804]	; (8002944 <d_print_comp_inner+0x1e60>)
 8002620:	f8d3 8000 	ldr.w	r8, [r3]
 8002624:	4640      	mov	r0, r8
 8002626:	f007 fd0f 	bl	800a048 <strcmp>
 800262a:	782b      	ldrb	r3, [r5, #0]
 800262c:	b910      	cbnz	r0, 8002634 <d_print_comp_inner+0x1b50>
 800262e:	2b03      	cmp	r3, #3
 8002630:	f000 84db 	beq.w	8002fea <d_print_comp_inner+0x2506>
 8002634:	2b37      	cmp	r3, #55	; 0x37
 8002636:	f000 8585 	beq.w	8003144 <d_print_comp_inner+0x2660>
 800263a:	4639      	mov	r1, r7
 800263c:	4620      	mov	r0, r4
 800263e:	4632      	mov	r2, r6
 8002640:	f001 fcd8 	bl	8003ff4 <d_print_expr_op>
 8002644:	49c0      	ldr	r1, [pc, #768]	; (8002948 <d_print_comp_inner+0x1e64>)
 8002646:	4640      	mov	r0, r8
 8002648:	f007 fcfe 	bl	800a048 <strcmp>
 800264c:	2800      	cmp	r0, #0
 800264e:	f000 8257 	beq.w	8002b00 <d_print_comp_inner+0x201c>
 8002652:	4640      	mov	r0, r8
 8002654:	49bd      	ldr	r1, [pc, #756]	; (800294c <d_print_comp_inner+0x1e68>)
 8002656:	f007 fcf7 	bl	800a048 <strcmp>
 800265a:	4606      	mov	r6, r0
 800265c:	2800      	cmp	r0, #0
 800265e:	f47e ad44 	bne.w	80010ea <d_print_comp_inner+0x606>
 8002662:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002666:	2bff      	cmp	r3, #255	; 0xff
 8002668:	f000 8468 	beq.w	8002f3c <d_print_comp_inner+0x2458>
 800266c:	1c58      	adds	r0, r3, #1
 800266e:	2628      	movs	r6, #40	; 0x28
 8002670:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8002674:	4639      	mov	r1, r7
 8002676:	54e6      	strb	r6, [r4, r3]
 8002678:	462a      	mov	r2, r5
 800267a:	4620      	mov	r0, r4
 800267c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002680:	f000 fe4a 	bl	8003318 <d_print_comp>
 8002684:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002688:	29ff      	cmp	r1, #255	; 0xff
 800268a:	f000 83d6 	beq.w	8002e3a <d_print_comp_inner+0x2356>
 800268e:	1c4a      	adds	r2, r1, #1
 8002690:	2329      	movs	r3, #41	; 0x29
 8002692:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002696:	5463      	strb	r3, [r4, r1]
 8002698:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800269c:	f7fe bae4 	b.w	8000c68 <d_print_comp_inner+0x184>
 80026a0:	4eab      	ldr	r6, [pc, #684]	; (8002950 <d_print_comp_inner+0x1e6c>)
 80026a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80026a6:	f106 0a02 	add.w	sl, r6, #2
 80026aa:	e00a      	b.n	80026c2 <d_print_comp_inner+0x1bde>
 80026ac:	460b      	mov	r3, r1
 80026ae:	3101      	adds	r1, #1
 80026b0:	4556      	cmp	r6, sl
 80026b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80026b6:	f804 8003 	strb.w	r8, [r4, r3]
 80026ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80026be:	f43f ab84 	beq.w	8001dca <d_print_comp_inner+0x12e6>
 80026c2:	29ff      	cmp	r1, #255	; 0xff
 80026c4:	f816 8b01 	ldrb.w	r8, [r6], #1
 80026c8:	d1f0      	bne.n	80026ac <d_print_comp_inner+0x1bc8>
 80026ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80026ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80026d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80026d6:	4620      	mov	r0, r4
 80026d8:	4798      	blx	r3
 80026da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80026de:	3301      	adds	r3, #1
 80026e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80026e4:	2101      	movs	r1, #1
 80026e6:	2300      	movs	r3, #0
 80026e8:	e7e2      	b.n	80026b0 <d_print_comp_inner+0x1bcc>
 80026ea:	6852      	ldr	r2, [r2, #4]
 80026ec:	7c16      	ldrb	r6, [r2, #16]
 80026ee:	2e00      	cmp	r6, #0
 80026f0:	f43e ae54 	beq.w	800139c <d_print_comp_inner+0x8b8>
 80026f4:	2e06      	cmp	r6, #6
 80026f6:	f240 8357 	bls.w	8002da8 <d_print_comp_inner+0x22c4>
 80026fa:	2e07      	cmp	r6, #7
 80026fc:	f47e ae4e 	bne.w	800139c <d_print_comp_inner+0x8b8>
 8002700:	68aa      	ldr	r2, [r5, #8]
 8002702:	7811      	ldrb	r1, [r2, #0]
 8002704:	2900      	cmp	r1, #0
 8002706:	f47e ae49 	bne.w	800139c <d_print_comp_inner+0x8b8>
 800270a:	6891      	ldr	r1, [r2, #8]
 800270c:	2901      	cmp	r1, #1
 800270e:	f47e ae45 	bne.w	800139c <d_print_comp_inner+0x8b8>
 8002712:	2b3b      	cmp	r3, #59	; 0x3b
 8002714:	f47e ae42 	bne.w	800139c <d_print_comp_inner+0x8b8>
 8002718:	6853      	ldr	r3, [r2, #4]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b30      	cmp	r3, #48	; 0x30
 800271e:	f000 85bb 	beq.w	8003298 <d_print_comp_inner+0x27b4>
 8002722:	2b31      	cmp	r3, #49	; 0x31
 8002724:	f47e ae3a 	bne.w	800139c <d_print_comp_inner+0x8b8>
 8002728:	2204      	movs	r2, #4
 800272a:	498a      	ldr	r1, [pc, #552]	; (8002954 <d_print_comp_inner+0x1e70>)
 800272c:	f7fd ff1c 	bl	8000568 <d_append_buffer>
 8002730:	f7fe ba9a 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002734:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 8002738:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 800273c:	f1bc 0f00 	cmp.w	ip, #0
 8002740:	dd14      	ble.n	800276c <d_print_comp_inner+0x1c88>
 8002742:	680b      	ldr	r3, [r1, #0]
 8002744:	4298      	cmp	r0, r3
 8002746:	f000 855c 	beq.w	8003202 <d_print_comp_inner+0x271e>
 800274a:	f101 0208 	add.w	r2, r1, #8
 800274e:	2300      	movs	r3, #0
 8002750:	46a6      	mov	lr, r4
 8002752:	e004      	b.n	800275e <d_print_comp_inner+0x1c7a>
 8002754:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8002758:	42a0      	cmp	r0, r4
 800275a:	f000 8273 	beq.w	8002c44 <d_print_comp_inner+0x2160>
 800275e:	3301      	adds	r3, #1
 8002760:	459c      	cmp	ip, r3
 8002762:	4690      	mov	r8, r2
 8002764:	f102 0208 	add.w	r2, r2, #8
 8002768:	d1f4      	bne.n	8002754 <d_print_comp_inner+0x1c70>
 800276a:	4674      	mov	r4, lr
 800276c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8002770:	459c      	cmp	ip, r3
 8002772:	f280 84f5 	bge.w	8003160 <d_print_comp_inner+0x267c>
 8002776:	f10c 0301 	add.w	r3, ip, #1
 800277a:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 800277e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8002782:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 8002786:	f841 003c 	str.w	r0, [r1, ip, lsl #3]
 800278a:	f103 0e04 	add.w	lr, r3, #4
 800278e:	f1b8 0f00 	cmp.w	r8, #0
 8002792:	d021      	beq.n	80027d8 <d_print_comp_inner+0x1cf4>
 8002794:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8002798:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800279c:	4299      	cmp	r1, r3
 800279e:	f340 84df 	ble.w	8003160 <d_print_comp_inner+0x267c>
 80027a2:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80027a6:	4681      	mov	r9, r0
 80027a8:	e002      	b.n	80027b0 <d_print_comp_inner+0x1ccc>
 80027aa:	4299      	cmp	r1, r3
 80027ac:	f000 84d6 	beq.w	800315c <d_print_comp_inner+0x2678>
 80027b0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 80027b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80027b8:	4462      	add	r2, ip
 80027ba:	3301      	adds	r3, #1
 80027bc:	6050      	str	r0, [r2, #4]
 80027be:	f8ce 2000 	str.w	r2, [lr]
 80027c2:	f8d8 8000 	ldr.w	r8, [r8]
 80027c6:	f10c 0c08 	add.w	ip, ip, #8
 80027ca:	4696      	mov	lr, r2
 80027cc:	f1b8 0f00 	cmp.w	r8, #0
 80027d0:	d1eb      	bne.n	80027aa <d_print_comp_inner+0x1cc6>
 80027d2:	4648      	mov	r0, r9
 80027d4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 80027d8:	f04f 0800 	mov.w	r8, #0
 80027dc:	1d01      	adds	r1, r0, #4
 80027de:	f8ce 8000 	str.w	r8, [lr]
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7fe f8d8 	bl	8000998 <d_lookup_template_argument.isra.6>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	f040 8246 	bne.w	8002c7a <d_print_comp_inner+0x2196>
 80027ee:	f7fe ba43 	b.w	8000c78 <d_print_comp_inner+0x194>
 80027f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80027f6:	29ff      	cmp	r1, #255	; 0xff
 80027f8:	f000 8411 	beq.w	800301e <d_print_comp_inner+0x253a>
 80027fc:	2220      	movs	r2, #32
 80027fe:	1c4b      	adds	r3, r1, #1
 8002800:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002804:	5462      	strb	r2, [r4, r1]
 8002806:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800280a:	f7ff ba2e 	b.w	8001c6a <d_print_comp_inner+0x1186>
 800280e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002812:	29ff      	cmp	r1, #255	; 0xff
 8002814:	f000 843d 	beq.w	8003092 <d_print_comp_inner+0x25ae>
 8002818:	2220      	movs	r2, #32
 800281a:	1c4b      	adds	r3, r1, #1
 800281c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002820:	5462      	strb	r2, [r4, r1]
 8002822:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8002826:	f7ff ba0a 	b.w	8001c3e <d_print_comp_inner+0x115a>
 800282a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800282e:	29ff      	cmp	r1, #255	; 0xff
 8002830:	f000 8444 	beq.w	80030bc <d_print_comp_inner+0x25d8>
 8002834:	1c4a      	adds	r2, r1, #1
 8002836:	235b      	movs	r3, #91	; 0x5b
 8002838:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800283c:	5463      	strb	r3, [r4, r1]
 800283e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002842:	4639      	mov	r1, r7
 8002844:	68aa      	ldr	r2, [r5, #8]
 8002846:	4620      	mov	r0, r4
 8002848:	f000 fd66 	bl	8003318 <d_print_comp>
 800284c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002850:	29ff      	cmp	r1, #255	; 0xff
 8002852:	f000 832f 	beq.w	8002eb4 <d_print_comp_inner+0x23d0>
 8002856:	235d      	movs	r3, #93	; 0x5d
 8002858:	1c4a      	adds	r2, r1, #1
 800285a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800285e:	5463      	strb	r3, [r4, r1]
 8002860:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002864:	f7fe ba00 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002868:	f04f 0800 	mov.w	r8, #0
 800286c:	f804 8006 	strb.w	r8, [r4, r6]
 8002870:	4631      	mov	r1, r6
 8002872:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002876:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800287a:	4620      	mov	r0, r4
 800287c:	4798      	blx	r3
 800287e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002882:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8002886:	3301      	adds	r3, #1
 8002888:	4646      	mov	r6, r8
 800288a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800288e:	f7fe bcde 	b.w	800124e <d_print_comp_inner+0x76a>
 8002892:	4660      	mov	r0, ip
 8002894:	4688      	mov	r8, r1
 8002896:	f7ff b8c2 	b.w	8001a1e <d_print_comp_inner+0xf3a>
 800289a:	686a      	ldr	r2, [r5, #4]
 800289c:	4639      	mov	r1, r7
 800289e:	4620      	mov	r0, r4
 80028a0:	f000 fd3a 	bl	8003318 <d_print_comp>
 80028a4:	f7fe b9e0 	b.w	8000c68 <d_print_comp_inner+0x184>
 80028a8:	4632      	mov	r2, r6
 80028aa:	f001 fba3 	bl	8003ff4 <d_print_expr_op>
 80028ae:	f7fe bc1c 	b.w	80010ea <d_print_comp_inner+0x606>
 80028b2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80028b6:	e008      	b.n	80028ca <d_print_comp_inner+0x1de6>
 80028b8:	6880      	ldr	r0, [r0, #8]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	2800      	cmp	r0, #0
 80028be:	f43e a9db 	beq.w	8000c78 <d_print_comp_inner+0x194>
 80028c2:	7802      	ldrb	r2, [r0, #0]
 80028c4:	2a2f      	cmp	r2, #47	; 0x2f
 80028c6:	f47e a9d7 	bne.w	8000c78 <d_print_comp_inner+0x194>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dcf4      	bgt.n	80028b8 <d_print_comp_inner+0x1dd4>
 80028ce:	f47e a9d3 	bne.w	8000c78 <d_print_comp_inner+0x194>
 80028d2:	6840      	ldr	r0, [r0, #4]
 80028d4:	2800      	cmp	r0, #0
 80028d6:	f47f aaef 	bne.w	8001eb8 <d_print_comp_inner+0x13d4>
 80028da:	f7fe b9cd 	b.w	8000c78 <d_print_comp_inner+0x194>
 80028de:	29ff      	cmp	r1, #255	; 0xff
 80028e0:	f000 83ae 	beq.w	8003040 <d_print_comp_inner+0x255c>
 80028e4:	232d      	movs	r3, #45	; 0x2d
 80028e6:	1c4a      	adds	r2, r1, #1
 80028e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80028ec:	5463      	strb	r3, [r4, r1]
 80028ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80028f2:	f7fe bd74 	b.w	80013de <d_print_comp_inner+0x8fa>
 80028f6:	2500      	movs	r5, #0
 80028f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80028fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002900:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002904:	4620      	mov	r0, r4
 8002906:	4798      	blx	r3
 8002908:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800290c:	3301      	adds	r3, #1
 800290e:	4629      	mov	r1, r5
 8002910:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002914:	2201      	movs	r2, #1
 8002916:	f7fe bc86 	b.w	8001226 <d_print_comp_inner+0x742>
 800291a:	2500      	movs	r5, #0
 800291c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002920:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002924:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002928:	4620      	mov	r0, r4
 800292a:	4798      	blx	r3
 800292c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002930:	3301      	adds	r3, #1
 8002932:	4629      	mov	r1, r5
 8002934:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002938:	2201      	movs	r2, #1
 800293a:	f7ff bb1d 	b.w	8001f78 <d_print_comp_inner+0x1494>
 800293e:	bf00      	nop
 8002940:	0801637c 	.word	0x0801637c
 8002944:	080163b0 	.word	0x080163b0
 8002948:	080163b4 	.word	0x080163b4
 800294c:	080166cc 	.word	0x080166cc
 8002950:	0801620c 	.word	0x0801620c
 8002954:	080163e8 	.word	0x080163e8
 8002958:	2600      	movs	r6, #0
 800295a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800295e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8002962:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8002966:	4798      	blx	r3
 8002968:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800296c:	3301      	adds	r3, #1
 800296e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002972:	4631      	mov	r1, r6
 8002974:	2301      	movs	r3, #1
 8002976:	f7fe bb81 	b.w	800107c <d_print_comp_inner+0x598>
 800297a:	2600      	movs	r6, #0
 800297c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8002980:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8002984:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8002988:	4798      	blx	r3
 800298a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800298e:	3301      	adds	r3, #1
 8002990:	4631      	mov	r1, r6
 8002992:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002996:	2201      	movs	r2, #1
 8002998:	f7ff b885 	b.w	8001aa6 <d_print_comp_inner+0xfc2>
 800299c:	2500      	movs	r5, #0
 800299e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80029a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80029a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80029aa:	4620      	mov	r0, r4
 80029ac:	4798      	blx	r3
 80029ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80029b2:	3301      	adds	r3, #1
 80029b4:	4629      	mov	r1, r5
 80029b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80029ba:	2201      	movs	r2, #1
 80029bc:	f7ff bb1f 	b.w	8001ffe <d_print_comp_inner+0x151a>
 80029c0:	2500      	movs	r5, #0
 80029c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80029c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80029ca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80029ce:	4620      	mov	r0, r4
 80029d0:	4798      	blx	r3
 80029d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80029d6:	3301      	adds	r3, #1
 80029d8:	4629      	mov	r1, r5
 80029da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80029de:	2201      	movs	r2, #1
 80029e0:	e40a      	b.n	80021f8 <d_print_comp_inner+0x1714>
 80029e2:	2500      	movs	r5, #0
 80029e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80029e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80029ec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80029f0:	4620      	mov	r0, r4
 80029f2:	4798      	blx	r3
 80029f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80029f8:	3301      	adds	r3, #1
 80029fa:	4629      	mov	r1, r5
 80029fc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002a00:	2201      	movs	r2, #1
 8002a02:	f7ff bbd1 	b.w	80021a8 <d_print_comp_inner+0x16c4>
 8002a06:	2500      	movs	r5, #0
 8002a08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002a0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002a10:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002a14:	4620      	mov	r0, r4
 8002a16:	4798      	blx	r3
 8002a18:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002a24:	2201      	movs	r2, #1
 8002a26:	f7ff bba5 	b.w	8002174 <d_print_comp_inner+0x1690>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002a30:	f7fe b91a 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002a34:	220d      	movs	r2, #13
 8002a36:	49d5      	ldr	r1, [pc, #852]	; (8002d8c <d_print_comp_inner+0x22a8>)
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7fd fd95 	bl	8000568 <d_append_buffer>
 8002a3e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002a42:	49d3      	ldr	r1, [pc, #844]	; (8002d90 <d_print_comp_inner+0x22ac>)
 8002a44:	3201      	adds	r2, #1
 8002a46:	a804      	add	r0, sp, #16
 8002a48:	f00e ffca 	bl	80119e0 <sprintf>
 8002a4c:	a804      	add	r0, sp, #16
 8002a4e:	f007 fc67 	bl	800a320 <strlen>
 8002a52:	b320      	cbz	r0, 8002a9e <d_print_comp_inner+0x1fba>
 8002a54:	ad04      	add	r5, sp, #16
 8002a56:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002a5a:	eb05 0a00 	add.w	sl, r5, r0
 8002a5e:	f04f 0900 	mov.w	r9, #0
 8002a62:	e008      	b.n	8002a76 <d_print_comp_inner+0x1f92>
 8002a64:	460b      	mov	r3, r1
 8002a66:	3101      	adds	r1, #1
 8002a68:	45aa      	cmp	sl, r5
 8002a6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002a6e:	54e6      	strb	r6, [r4, r3]
 8002a70:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002a74:	d013      	beq.n	8002a9e <d_print_comp_inner+0x1fba>
 8002a76:	29ff      	cmp	r1, #255	; 0xff
 8002a78:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002a7c:	d1f2      	bne.n	8002a64 <d_print_comp_inner+0x1f80>
 8002a7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002a82:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002a86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4798      	blx	r3
 8002a8e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a92:	3301      	adds	r3, #1
 8002a94:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002a98:	2101      	movs	r1, #1
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e7e4      	b.n	8002a68 <d_print_comp_inner+0x1f84>
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	49bc      	ldr	r1, [pc, #752]	; (8002d94 <d_print_comp_inner+0x22b0>)
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7fd fd60 	bl	8000568 <d_append_buffer>
 8002aa8:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8002aac:	f7ff b994 	b.w	8001dd8 <d_print_comp_inner+0x12f4>
 8002ab0:	aa14      	add	r2, sp, #80	; 0x50
 8002ab2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002ab6:	f842 1d40 	str.w	r1, [r2, #-64]!
 8002aba:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 8002abe:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8002ac2:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8002ac6:	686a      	ldr	r2, [r5, #4]
 8002ac8:	9306      	str	r3, [sp, #24]
 8002aca:	4639      	mov	r1, r7
 8002acc:	4620      	mov	r0, r4
 8002ace:	9607      	str	r6, [sp, #28]
 8002ad0:	9505      	str	r5, [sp, #20]
 8002ad2:	f000 fc21 	bl	8003318 <d_print_comp>
 8002ad6:	9e06      	ldr	r6, [sp, #24]
 8002ad8:	9b04      	ldr	r3, [sp, #16]
 8002ada:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002ade:	2e00      	cmp	r6, #0
 8002ae0:	f47e a8c2 	bne.w	8000c68 <d_print_comp_inner+0x184>
 8002ae4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002ae8:	29ff      	cmp	r1, #255	; 0xff
 8002aea:	f000 8349 	beq.w	8003180 <d_print_comp_inner+0x269c>
 8002aee:	2320      	movs	r3, #32
 8002af0:	1c4a      	adds	r2, r1, #1
 8002af2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002af6:	5463      	strb	r3, [r4, r1]
 8002af8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002afc:	f7fe bd0e 	b.w	800151c <d_print_comp_inner+0xa38>
 8002b00:	462a      	mov	r2, r5
 8002b02:	4639      	mov	r1, r7
 8002b04:	4620      	mov	r0, r4
 8002b06:	f000 fc07 	bl	8003318 <d_print_comp>
 8002b0a:	f7fe b8ad 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002b0e:	2500      	movs	r5, #0
 8002b10:	4619      	mov	r1, r3
 8002b12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002b16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002b1a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4798      	blx	r3
 8002b22:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f7fe bb68 	b.w	8001204 <d_print_comp_inner+0x720>
 8002b34:	ab14      	add	r3, sp, #80	; 0x50
 8002b36:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002b3a:	6842      	ldr	r2, [r0, #4]
 8002b3c:	f843 1d40 	str.w	r1, [r3, #-64]!
 8002b40:	2000      	movs	r0, #0
 8002b42:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8002b46:	9505      	str	r5, [sp, #20]
 8002b48:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002b4c:	9006      	str	r0, [sp, #24]
 8002b4e:	9107      	str	r1, [sp, #28]
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	f47e af70 	bne.w	8001a36 <d_print_comp_inner+0xf52>
 8002b56:	f7fe bf6d 	b.w	8001a34 <d_print_comp_inner+0xf50>
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002b62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002b66:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	4798      	blx	r3
 8002b6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002b78:	462b      	mov	r3, r5
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	f7ff b879 	b.w	8001c72 <d_print_comp_inner+0x118e>
 8002b80:	2600      	movs	r6, #0
 8002b82:	4619      	mov	r1, r3
 8002b84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002b88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002b8c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002b90:	4620      	mov	r0, r4
 8002b92:	4798      	blx	r3
 8002b94:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002b9e:	4633      	mov	r3, r6
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	f7ff b850 	b.w	8001c46 <d_print_comp_inner+0x1162>
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8002bae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002bb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	4798      	blx	r3
 8002bba:	2329      	movs	r3, #41	; 0x29
 8002bbc:	7023      	strb	r3, [r4, #0]
 8002bbe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002bc2:	782a      	ldrb	r2, [r5, #0]
 8002bc4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002bc8:	2101      	movs	r1, #1
 8002bca:	3301      	adds	r3, #1
 8002bcc:	2a3c      	cmp	r2, #60	; 0x3c
 8002bce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002bd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002bd6:	f47e ac02 	bne.w	80013de <d_print_comp_inner+0x8fa>
 8002bda:	e683      	b.n	80028e4 <d_print_comp_inner+0x1e00>
 8002bdc:	4648      	mov	r0, r9
 8002bde:	496e      	ldr	r1, [pc, #440]	; (8002d98 <d_print_comp_inner+0x22b4>)
 8002be0:	f007 fa32 	bl	800a048 <strcmp>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	f040 8214 	bne.w	8003012 <d_print_comp_inner+0x252e>
 8002bea:	68ab      	ldr	r3, [r5, #8]
 8002bec:	4639      	mov	r1, r7
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f001 fa3d 	bl	8004070 <d_print_subexpr>
 8002bf6:	f7fe b81f 	b.w	8000c38 <d_print_comp_inner+0x154>
 8002bfa:	f04f 0800 	mov.w	r8, #0
 8002bfe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c06:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	4798      	blx	r3
 8002c0e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002c12:	3301      	adds	r3, #1
 8002c14:	4641      	mov	r1, r8
 8002c16:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f7fe bbc4 	b.w	80013a8 <d_print_comp_inner+0x8c4>
 8002c20:	2500      	movs	r5, #0
 8002c22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c2a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4798      	blx	r3
 8002c32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002c36:	3301      	adds	r3, #1
 8002c38:	4629      	mov	r1, r5
 8002c3a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f7ff bbd0 	b.w	80023e4 <d_print_comp_inner+0x1900>
 8002c44:	4674      	mov	r4, lr
 8002c46:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8002c4a:	b389      	cbz	r1, 8002cb0 <d_print_comp_inner+0x21cc>
 8002c4c:	680a      	ldr	r2, [r1, #0]
 8002c4e:	4290      	cmp	r0, r2
 8002c50:	d00a      	beq.n	8002c68 <d_print_comp_inner+0x2184>
 8002c52:	460b      	mov	r3, r1
 8002c54:	e004      	b.n	8002c60 <d_print_comp_inner+0x217c>
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	b353      	cbz	r3, 8002cb0 <d_print_comp_inner+0x21cc>
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4290      	cmp	r0, r2
 8002c5e:	d003      	beq.n	8002c68 <d_print_comp_inner+0x2184>
 8002c60:	4295      	cmp	r5, r2
 8002c62:	d1f8      	bne.n	8002c56 <d_print_comp_inner+0x2172>
 8002c64:	4299      	cmp	r1, r3
 8002c66:	d0f6      	beq.n	8002c56 <d_print_comp_inner+0x2172>
 8002c68:	1d01      	adds	r1, r0, #4
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7fd fe94 	bl	8000998 <d_lookup_template_argument.isra.6>
 8002c70:	f04f 0800 	mov.w	r8, #0
 8002c74:	2800      	cmp	r0, #0
 8002c76:	f43d afff 	beq.w	8000c78 <d_print_comp_inner+0x194>
 8002c7a:	7803      	ldrb	r3, [r0, #0]
 8002c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8002c7e:	f47e aec2 	bne.w	8001a06 <d_print_comp_inner+0xf22>
 8002c82:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002c86:	e008      	b.n	8002c9a <d_print_comp_inner+0x21b6>
 8002c88:	6880      	ldr	r0, [r0, #8]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	f43d afee 	beq.w	8000c6e <d_print_comp_inner+0x18a>
 8002c92:	7802      	ldrb	r2, [r0, #0]
 8002c94:	2a2f      	cmp	r2, #47	; 0x2f
 8002c96:	f47d afea 	bne.w	8000c6e <d_print_comp_inner+0x18a>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	dcf4      	bgt.n	8002c88 <d_print_comp_inner+0x21a4>
 8002c9e:	f47d afe6 	bne.w	8000c6e <d_print_comp_inner+0x18a>
 8002ca2:	6840      	ldr	r0, [r0, #4]
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	f43d afe2 	beq.w	8000c6e <d_print_comp_inner+0x18a>
 8002caa:	7803      	ldrb	r3, [r0, #0]
 8002cac:	f7fe beab 	b.w	8001a06 <d_print_comp_inner+0xf22>
 8002cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002cb4:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8002cb8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8002cbc:	1d01      	adds	r1, r0, #4
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7fd fe6a 	bl	8000998 <d_lookup_template_argument.isra.6>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	f43d afd5 	beq.w	8000c74 <d_print_comp_inner+0x190>
 8002cca:	f04f 0801 	mov.w	r8, #1
 8002cce:	e7d4      	b.n	8002c7a <d_print_comp_inner+0x2196>
 8002cd0:	7809      	ldrb	r1, [r1, #0]
 8002cd2:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 8002cd6:	2801      	cmp	r0, #1
 8002cd8:	d903      	bls.n	8002ce2 <d_print_comp_inner+0x21fe>
 8002cda:	3972      	subs	r1, #114	; 0x72
 8002cdc:	2901      	cmp	r1, #1
 8002cde:	f63d af6c 	bhi.w	8000bba <d_print_comp_inner+0xd6>
 8002ce2:	4639      	mov	r1, r7
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f001 f985 	bl	8003ff4 <d_print_expr_op>
 8002cea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cee:	29ff      	cmp	r1, #255	; 0xff
 8002cf0:	f000 8263 	beq.w	80031ba <d_print_comp_inner+0x26d6>
 8002cf4:	1c4a      	adds	r2, r1, #1
 8002cf6:	233c      	movs	r3, #60	; 0x3c
 8002cf8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002cfc:	5463      	strb	r3, [r4, r1]
 8002cfe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d02:	68ab      	ldr	r3, [r5, #8]
 8002d04:	4639      	mov	r1, r7
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f000 fb05 	bl	8003318 <d_print_comp>
 8002d0e:	2202      	movs	r2, #2
 8002d10:	4922      	ldr	r1, [pc, #136]	; (8002d9c <d_print_comp_inner+0x22b8>)
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7fd fc28 	bl	8000568 <d_append_buffer>
 8002d18:	68ab      	ldr	r3, [r5, #8]
 8002d1a:	4639      	mov	r1, r7
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f000 fafa 	bl	8003318 <d_print_comp>
 8002d24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002d28:	29ff      	cmp	r1, #255	; 0xff
 8002d2a:	f000 81d8 	beq.w	80030de <d_print_comp_inner+0x25fa>
 8002d2e:	2329      	movs	r3, #41	; 0x29
 8002d30:	1c4a      	adds	r2, r1, #1
 8002d32:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d36:	5463      	strb	r3, [r4, r1]
 8002d38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d3c:	f7fd bf94 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002d40:	4917      	ldr	r1, [pc, #92]	; (8002da0 <d_print_comp_inner+0x22bc>)
 8002d42:	6870      	ldr	r0, [r6, #4]
 8002d44:	f00e fe74 	bl	8011a30 <strncmp>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f47e af6c 	bne.w	8001c26 <d_print_comp_inner+0x1142>
 8002d4e:	68aa      	ldr	r2, [r5, #8]
 8002d50:	4639      	mov	r1, r7
 8002d52:	4620      	mov	r0, r4
 8002d54:	f000 fae0 	bl	8003318 <d_print_comp>
 8002d58:	2202      	movs	r2, #2
 8002d5a:	4912      	ldr	r1, [pc, #72]	; (8002da4 <d_print_comp_inner+0x22c0>)
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7fd fc03 	bl	8000568 <d_append_buffer>
 8002d62:	f7fe bf8c 	b.w	8001c7e <d_print_comp_inner+0x119a>
 8002d66:	2600      	movs	r6, #0
 8002d68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d70:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d74:	4620      	mov	r0, r4
 8002d76:	4798      	blx	r3
 8002d78:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4631      	mov	r1, r6
 8002d80:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002d84:	2201      	movs	r2, #1
 8002d86:	f7ff b81a 	b.w	8001dbe <d_print_comp_inner+0x12da>
 8002d8a:	bf00      	nop
 8002d8c:	08016210 	.word	0x08016210
 8002d90:	08016220 	.word	0x08016220
 8002d94:	08016224 	.word	0x08016224
 8002d98:	080163bc 	.word	0x080163bc
 8002d9c:	080163b8 	.word	0x080163b8
 8002da0:	08016228 	.word	0x08016228
 8002da4:	08016230 	.word	0x08016230
 8002da8:	68aa      	ldr	r2, [r5, #8]
 8002daa:	f892 8000 	ldrb.w	r8, [r2]
 8002dae:	f1b8 0f00 	cmp.w	r8, #0
 8002db2:	f47e aaf3 	bne.w	800139c <d_print_comp_inner+0x8b8>
 8002db6:	2b3c      	cmp	r3, #60	; 0x3c
 8002db8:	f000 81f3 	beq.w	80031a2 <d_print_comp_inner+0x26be>
 8002dbc:	68aa      	ldr	r2, [r5, #8]
 8002dbe:	4639      	mov	r1, r7
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	3e02      	subs	r6, #2
 8002dc4:	f000 faa8 	bl	8003318 <d_print_comp>
 8002dc8:	2e04      	cmp	r6, #4
 8002dca:	f63d af4d 	bhi.w	8000c68 <d_print_comp_inner+0x184>
 8002dce:	e8df f006 	tbb	[pc, r6]
 8002dd2:	1826      	.short	0x1826
 8002dd4:	0a11      	.short	0x0a11
 8002dd6:	03          	.byte	0x03
 8002dd7:	00          	.byte	0x00
 8002dd8:	4620      	mov	r0, r4
 8002dda:	2203      	movs	r2, #3
 8002ddc:	49e3      	ldr	r1, [pc, #908]	; (800316c <d_print_comp_inner+0x2688>)
 8002dde:	f7fd fbc3 	bl	8000568 <d_append_buffer>
 8002de2:	f7fd bf41 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002de6:	4620      	mov	r0, r4
 8002de8:	2202      	movs	r2, #2
 8002dea:	49e1      	ldr	r1, [pc, #900]	; (8003170 <d_print_comp_inner+0x268c>)
 8002dec:	f7fd fbbc 	bl	8000568 <d_append_buffer>
 8002df0:	f7fd bf3a 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002df4:	4620      	mov	r0, r4
 8002df6:	2202      	movs	r2, #2
 8002df8:	49de      	ldr	r1, [pc, #888]	; (8003174 <d_print_comp_inner+0x2690>)
 8002dfa:	f7fd fbb5 	bl	8000568 <d_append_buffer>
 8002dfe:	f7fd bf33 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002e02:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002e06:	29ff      	cmp	r1, #255	; 0xff
 8002e08:	f000 825f 	beq.w	80032ca <d_print_comp_inner+0x27e6>
 8002e0c:	236c      	movs	r3, #108	; 0x6c
 8002e0e:	1c4a      	adds	r2, r1, #1
 8002e10:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002e14:	5463      	strb	r3, [r4, r1]
 8002e16:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002e1a:	f7fd bf25 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002e1e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002e22:	29ff      	cmp	r1, #255	; 0xff
 8002e24:	f000 8263 	beq.w	80032ee <d_print_comp_inner+0x280a>
 8002e28:	2375      	movs	r3, #117	; 0x75
 8002e2a:	1c4a      	adds	r2, r1, #1
 8002e2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002e30:	5463      	strb	r3, [r4, r1]
 8002e32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002e36:	f7fd bf17 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e44:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002e48:	4620      	mov	r0, r4
 8002e4a:	4798      	blx	r3
 8002e4c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002e50:	3301      	adds	r3, #1
 8002e52:	4629      	mov	r1, r5
 8002e54:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002e58:	2201      	movs	r2, #1
 8002e5a:	e419      	b.n	8002690 <d_print_comp_inner+0x1bac>
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e68:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4798      	blx	r3
 8002e70:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002e7a:	4633      	mov	r3, r6
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	f7fe ba2e 	b.w	80012de <d_print_comp_inner+0x7fa>
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	2901      	cmp	r1, #1
 8002e86:	f47d ae9c 	bne.w	8000bc2 <d_print_comp_inner+0xde>
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e90:	f47d ae97 	bne.w	8000bc2 <d_print_comp_inner+0xde>
 8002e94:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002e98:	29ff      	cmp	r1, #255	; 0xff
 8002e9a:	f000 81eb 	beq.w	8003274 <d_print_comp_inner+0x2790>
 8002e9e:	1c4a      	adds	r2, r1, #1
 8002ea0:	2328      	movs	r3, #40	; 0x28
 8002ea2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002ea6:	5463      	strb	r3, [r4, r1]
 8002ea8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002eac:	686a      	ldr	r2, [r5, #4]
 8002eae:	68ae      	ldr	r6, [r5, #8]
 8002eb0:	f7fd be87 	b.w	8000bc2 <d_print_comp_inner+0xde>
 8002eb4:	2500      	movs	r5, #0
 8002eb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002eba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002ebe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4798      	blx	r3
 8002ec6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4629      	mov	r1, r5
 8002ece:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002ed2:	e4c0      	b.n	8002856 <d_print_comp_inner+0x1d72>
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002eda:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002ede:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4798      	blx	r3
 8002ee6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002eea:	3301      	adds	r3, #1
 8002eec:	4629      	mov	r1, r5
 8002eee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002ef2:	f7ff b8c6 	b.w	8002082 <d_print_comp_inner+0x159e>
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002efc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002f00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f04:	4620      	mov	r0, r4
 8002f06:	4798      	blx	r3
 8002f08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4631      	mov	r1, r6
 8002f10:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002f14:	f7fe b8e2 	b.w	80010dc <d_print_comp_inner+0x5f8>
 8002f18:	f04f 0800 	mov.w	r8, #0
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8002f22:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8002f26:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8002f2a:	4798      	blx	r3
 8002f2c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002f36:	4643      	mov	r3, r8
 8002f38:	f7fe b8bd 	b.w	80010b6 <d_print_comp_inner+0x5d2>
 8002f3c:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002f40:	4619      	mov	r1, r3
 8002f42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	4798      	blx	r3
 8002f4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002f58:	4633      	mov	r3, r6
 8002f5a:	f7ff bb87 	b.w	800266c <d_print_comp_inner+0x1b88>
 8002f5e:	255f      	movs	r5, #95	; 0x5f
 8002f60:	f7ff ba7b 	b.w	800245a <d_print_comp_inner+0x1976>
 8002f64:	68aa      	ldr	r2, [r5, #8]
 8002f66:	4639      	mov	r1, r7
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f000 f9d5 	bl	8003318 <d_print_comp>
 8002f6e:	9b06      	ldr	r3, [sp, #24]
 8002f70:	9a00      	ldr	r2, [sp, #0]
 8002f72:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f43e aabc 	beq.w	80014f4 <d_print_comp_inner+0xa10>
 8002f7c:	f7fd be74 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002f80:	4642      	mov	r2, r8
 8002f82:	4639      	mov	r1, r7
 8002f84:	4620      	mov	r0, r4
 8002f86:	f001 f873 	bl	8004070 <d_print_subexpr>
 8002f8a:	464a      	mov	r2, r9
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f001 f830 	bl	8003ff4 <d_print_expr_op>
 8002f94:	4632      	mov	r2, r6
 8002f96:	4639      	mov	r1, r7
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f001 f869 	bl	8004070 <d_print_subexpr>
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	4975      	ldr	r1, [pc, #468]	; (8003178 <d_print_comp_inner+0x2694>)
 8002fa4:	f7fd fae0 	bl	8000568 <d_append_buffer>
 8002fa8:	462a      	mov	r2, r5
 8002faa:	4639      	mov	r1, r7
 8002fac:	4620      	mov	r0, r4
 8002fae:	f001 f85f 	bl	8004070 <d_print_subexpr>
 8002fb2:	f7fd be59 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002fb6:	6893      	ldr	r3, [r2, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b29      	cmp	r3, #41	; 0x29
 8002fbc:	bf1c      	itt	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8002fc4:	6852      	ldr	r2, [r2, #4]
 8002fc6:	4639      	mov	r1, r7
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f001 f851 	bl	8004070 <d_print_subexpr>
 8002fce:	f7fd be07 	b.w	8000be0 <d_print_comp_inner+0xfc>
 8002fd2:	686a      	ldr	r2, [r5, #4]
 8002fd4:	4639      	mov	r1, r7
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f001 f84a 	bl	8004070 <d_print_subexpr>
 8002fdc:	4620      	mov	r0, r4
 8002fde:	2203      	movs	r2, #3
 8002fe0:	4966      	ldr	r1, [pc, #408]	; (800317c <d_print_comp_inner+0x2698>)
 8002fe2:	f7fd fac1 	bl	8000568 <d_append_buffer>
 8002fe6:	f7fd be3f 	b.w	8000c68 <d_print_comp_inner+0x184>
 8002fea:	686b      	ldr	r3, [r5, #4]
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	2a01      	cmp	r2, #1
 8002ff0:	f47f ab23 	bne.w	800263a <d_print_comp_inner+0x1b56>
 8002ff4:	68aa      	ldr	r2, [r5, #8]
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	2a29      	cmp	r2, #41	; 0x29
 8002ffa:	bf08      	it	eq
 8002ffc:	461d      	moveq	r5, r3
 8002ffe:	f7ff bb1c 	b.w	800263a <d_print_comp_inner+0x1b56>
 8003002:	ab14      	add	r3, sp, #80	; 0x50
 8003004:	9603      	str	r6, [sp, #12]
 8003006:	f843 cd48 	str.w	ip, [r3, #-72]!
 800300a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800300e:	f7fe be9d 	b.w	8001d4c <d_print_comp_inner+0x1268>
 8003012:	4642      	mov	r2, r8
 8003014:	4639      	mov	r1, r7
 8003016:	4620      	mov	r0, r4
 8003018:	f000 ffec 	bl	8003ff4 <d_print_expr_op>
 800301c:	e5e5      	b.n	8002bea <d_print_comp_inner+0x2106>
 800301e:	2500      	movs	r5, #0
 8003020:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003024:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003028:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800302c:	4620      	mov	r0, r4
 800302e:	4798      	blx	r3
 8003030:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003034:	3301      	adds	r3, #1
 8003036:	4629      	mov	r1, r5
 8003038:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800303c:	f7ff bbde 	b.w	80027fc <d_print_comp_inner+0x1d18>
 8003040:	f04f 0800 	mov.w	r8, #0
 8003044:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003048:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800304c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003050:	4620      	mov	r0, r4
 8003052:	4798      	blx	r3
 8003054:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003058:	3301      	adds	r3, #1
 800305a:	4641      	mov	r1, r8
 800305c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003060:	e440      	b.n	80028e4 <d_print_comp_inner+0x1e00>
 8003062:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003066:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800306a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800306e:	4620      	mov	r0, r4
 8003070:	4798      	blx	r3
 8003072:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003076:	3301      	adds	r3, #1
 8003078:	4639      	mov	r1, r7
 800307a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800307e:	f7fe be7c 	b.w	8001d7a <d_print_comp_inner+0x1296>
 8003082:	9b02      	ldr	r3, [sp, #8]
 8003084:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003088:	f7fe be69 	b.w	8001d5e <d_print_comp_inner+0x127a>
 800308c:	4664      	mov	r4, ip
 800308e:	f7fe bf39 	b.w	8001f04 <d_print_comp_inner+0x1420>
 8003092:	2600      	movs	r6, #0
 8003094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003098:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800309c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030a0:	4620      	mov	r0, r4
 80030a2:	4798      	blx	r3
 80030a4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80030a8:	3301      	adds	r3, #1
 80030aa:	4631      	mov	r1, r6
 80030ac:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80030b0:	f7ff bbb2 	b.w	8002818 <d_print_comp_inner+0x1d34>
 80030b4:	4660      	mov	r0, ip
 80030b6:	46e0      	mov	r8, ip
 80030b8:	f7fe bcb1 	b.w	8001a1e <d_print_comp_inner+0xf3a>
 80030bc:	2600      	movs	r6, #0
 80030be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030c2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80030c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030ca:	4620      	mov	r0, r4
 80030cc:	4798      	blx	r3
 80030ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80030d2:	3301      	adds	r3, #1
 80030d4:	4631      	mov	r1, r6
 80030d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80030da:	f7ff bbab 	b.w	8002834 <d_print_comp_inner+0x1d50>
 80030de:	2500      	movs	r5, #0
 80030e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030e4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80030e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030ec:	4620      	mov	r0, r4
 80030ee:	4798      	blx	r3
 80030f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80030f4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80030f8:	3301      	adds	r3, #1
 80030fa:	4629      	mov	r1, r5
 80030fc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003100:	e615      	b.n	8002d2e <d_print_comp_inner+0x224a>
 8003102:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8003106:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800310a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800310e:	4620      	mov	r0, r4
 8003110:	4798      	blx	r3
 8003112:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003116:	3301      	adds	r3, #1
 8003118:	4631      	mov	r1, r6
 800311a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800311e:	f7fd bd72 	b.w	8000c06 <d_print_comp_inner+0x122>
 8003122:	2600      	movs	r6, #0
 8003124:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003128:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800312c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003130:	4620      	mov	r0, r4
 8003132:	4798      	blx	r3
 8003134:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003138:	3301      	adds	r3, #1
 800313a:	4631      	mov	r1, r6
 800313c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003140:	f7fd bd73 	b.w	8000c2a <d_print_comp_inner+0x146>
 8003144:	686a      	ldr	r2, [r5, #4]
 8003146:	4639      	mov	r1, r7
 8003148:	4620      	mov	r0, r4
 800314a:	f000 ff91 	bl	8004070 <d_print_subexpr>
 800314e:	4632      	mov	r2, r6
 8003150:	4639      	mov	r1, r7
 8003152:	4620      	mov	r0, r4
 8003154:	f000 ff4e 	bl	8003ff4 <d_print_expr_op>
 8003158:	f7fd bd86 	b.w	8000c68 <d_print_comp_inner+0x184>
 800315c:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 8003160:	2301      	movs	r3, #1
 8003162:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003166:	f7fd bd7f 	b.w	8000c68 <d_print_comp_inner+0x184>
 800316a:	bf00      	nop
 800316c:	080163dc 	.word	0x080163dc
 8003170:	080163d8 	.word	0x080163d8
 8003174:	080163d4 	.word	0x080163d4
 8003178:	080163c8 	.word	0x080163c8
 800317c:	0801640c 	.word	0x0801640c
 8003180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003184:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003188:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800318c:	4620      	mov	r0, r4
 800318e:	4798      	blx	r3
 8003190:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003194:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003198:	3301      	adds	r3, #1
 800319a:	4631      	mov	r1, r6
 800319c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80031a0:	e4a5      	b.n	8002aee <d_print_comp_inner+0x200a>
 80031a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80031a6:	29ff      	cmp	r1, #255	; 0xff
 80031a8:	d054      	beq.n	8003254 <d_print_comp_inner+0x2770>
 80031aa:	232d      	movs	r3, #45	; 0x2d
 80031ac:	1c4a      	adds	r2, r1, #1
 80031ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80031b2:	5463      	strb	r3, [r4, r1]
 80031b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80031b8:	e600      	b.n	8002dbc <d_print_comp_inner+0x22d8>
 80031ba:	2600      	movs	r6, #0
 80031bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031c0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80031c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031c8:	4620      	mov	r0, r4
 80031ca:	4798      	blx	r3
 80031cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80031d0:	3301      	adds	r3, #1
 80031d2:	4631      	mov	r1, r6
 80031d4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80031d8:	e58c      	b.n	8002cf4 <d_print_comp_inner+0x2210>
 80031da:	f04f 0800 	mov.w	r8, #0
 80031de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80031e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031ea:	4620      	mov	r0, r4
 80031ec:	4798      	blx	r3
 80031ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80031f2:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80031f6:	3301      	adds	r3, #1
 80031f8:	4641      	mov	r1, r8
 80031fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80031fe:	f7fe b9c2 	b.w	8001586 <d_print_comp_inner+0xaa2>
 8003202:	4688      	mov	r8, r1
 8003204:	e51f      	b.n	8002c46 <d_print_comp_inner+0x2162>
 8003206:	454f      	cmp	r7, r9
 8003208:	f67f aea9 	bls.w	8002f5e <d_print_comp_inner+0x247a>
 800320c:	2d5f      	cmp	r5, #95	; 0x5f
 800320e:	f47f aea6 	bne.w	8002f5e <d_print_comp_inner+0x247a>
 8003212:	28ff      	cmp	r0, #255	; 0xff
 8003214:	f63f a921 	bhi.w	800245a <d_print_comp_inner+0x1976>
 8003218:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800321c:	29ff      	cmp	r1, #255	; 0xff
 800321e:	b2c5      	uxtb	r5, r0
 8003220:	d10f      	bne.n	8003242 <d_print_comp_inner+0x275e>
 8003222:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003226:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800322a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800322e:	4620      	mov	r0, r4
 8003230:	4798      	blx	r3
 8003232:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003236:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800323a:	3301      	adds	r3, #1
 800323c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003240:	2100      	movs	r1, #0
 8003242:	1c4b      	adds	r3, r1, #1
 8003244:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003248:	464e      	mov	r6, r9
 800324a:	5465      	strb	r5, [r4, r1]
 800324c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003250:	f7ff b90d 	b.w	800246e <d_print_comp_inner+0x198a>
 8003254:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003258:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800325c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003260:	4798      	blx	r3
 8003262:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003266:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800326a:	3301      	adds	r3, #1
 800326c:	4641      	mov	r1, r8
 800326e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003272:	e79a      	b.n	80031aa <d_print_comp_inner+0x26c6>
 8003274:	2600      	movs	r6, #0
 8003276:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800327a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800327e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003282:	4620      	mov	r0, r4
 8003284:	4798      	blx	r3
 8003286:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800328a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800328e:	3301      	adds	r3, #1
 8003290:	4631      	mov	r1, r6
 8003292:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003296:	e602      	b.n	8002e9e <d_print_comp_inner+0x23ba>
 8003298:	2205      	movs	r2, #5
 800329a:	491e      	ldr	r1, [pc, #120]	; (8003314 <d_print_comp_inner+0x2830>)
 800329c:	f7fd f964 	bl	8000568 <d_append_buffer>
 80032a0:	f7fd bce2 	b.w	8000c68 <d_print_comp_inner+0x184>
 80032a4:	2500      	movs	r5, #0
 80032a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032aa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80032ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032b2:	4620      	mov	r0, r4
 80032b4:	4798      	blx	r3
 80032b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80032ba:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80032be:	3301      	adds	r3, #1
 80032c0:	4629      	mov	r1, r5
 80032c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80032c6:	f7fd bcc8 	b.w	8000c5a <d_print_comp_inner+0x176>
 80032ca:	2500      	movs	r5, #0
 80032cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032d0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80032d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032d8:	4620      	mov	r0, r4
 80032da:	4798      	blx	r3
 80032dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80032e0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80032e4:	3301      	adds	r3, #1
 80032e6:	4629      	mov	r1, r5
 80032e8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80032ec:	e58e      	b.n	8002e0c <d_print_comp_inner+0x2328>
 80032ee:	2500      	movs	r5, #0
 80032f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80032f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032fc:	4620      	mov	r0, r4
 80032fe:	4798      	blx	r3
 8003300:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003304:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8003308:	3301      	adds	r3, #1
 800330a:	4629      	mov	r1, r5
 800330c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003310:	e58a      	b.n	8002e28 <d_print_comp_inner+0x2344>
 8003312:	bf00      	nop
 8003314:	080163e0 	.word	0x080163e0

08003318 <d_print_comp>:
 8003318:	b510      	push	{r4, lr}
 800331a:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 800331e:	b082      	sub	sp, #8
 8003320:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8003324:	4604      	mov	r4, r0
 8003326:	e88d 000c 	stmia.w	sp, {r2, r3}
 800332a:	f7fd fbdb 	bl	8000ae4 <d_print_comp_inner>
 800332e:	9b01      	ldr	r3, [sp, #4]
 8003330:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003334:	b002      	add	sp, #8
 8003336:	bd10      	pop	{r4, pc}

08003338 <d_print_mod>:
 8003338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	7813      	ldrb	r3, [r2, #0]
 800333e:	3b03      	subs	r3, #3
 8003340:	b082      	sub	sp, #8
 8003342:	4615      	mov	r5, r2
 8003344:	4604      	mov	r4, r0
 8003346:	4688      	mov	r8, r1
 8003348:	2b2a      	cmp	r3, #42	; 0x2a
 800334a:	f200 81cd 	bhi.w	80036e8 <d_print_mod+0x3b0>
 800334e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003352:	0051      	.short	0x0051
 8003354:	01cb01cb 	.word	0x01cb01cb
 8003358:	01cb01cb 	.word	0x01cb01cb
 800335c:	01cb01cb 	.word	0x01cb01cb
 8003360:	01cb01cb 	.word	0x01cb01cb
 8003364:	01cb01cb 	.word	0x01cb01cb
 8003368:	01cb01cb 	.word	0x01cb01cb
 800336c:	01cb01cb 	.word	0x01cb01cb
 8003370:	01cb01cb 	.word	0x01cb01cb
 8003374:	01cb01cb 	.word	0x01cb01cb
 8003378:	01cb01cb 	.word	0x01cb01cb
 800337c:	006201cb 	.word	0x006201cb
 8003380:	00ac0087 	.word	0x00ac0087
 8003384:	00870062 	.word	0x00870062
 8003388:	00d000ac 	.word	0x00d000ac
 800338c:	011800e9 	.word	0x011800e9
 8003390:	01370126 	.word	0x01370126
 8003394:	013d013a 	.word	0x013d013a
 8003398:	01cb0163 	.word	0x01cb0163
 800339c:	01cb01cb 	.word	0x01cb01cb
 80033a0:	018901cb 	.word	0x018901cb
 80033a4:	002b01cb 	.word	0x002b01cb
 80033a8:	4ed6      	ldr	r6, [pc, #856]	; (8003704 <d_print_mod+0x3cc>)
 80033aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033ae:	f106 0a0a 	add.w	sl, r6, #10
 80033b2:	f04f 0900 	mov.w	r9, #0
 80033b6:	e009      	b.n	80033cc <d_print_mod+0x94>
 80033b8:	460b      	mov	r3, r1
 80033ba:	3101      	adds	r1, #1
 80033bc:	45b2      	cmp	sl, r6
 80033be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033c2:	54e7      	strb	r7, [r4, r3]
 80033c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80033c8:	f000 81ac 	beq.w	8003724 <d_print_mod+0x3ec>
 80033cc:	29ff      	cmp	r1, #255	; 0xff
 80033ce:	f816 7b01 	ldrb.w	r7, [r6], #1
 80033d2:	d1f1      	bne.n	80033b8 <d_print_mod+0x80>
 80033d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033e0:	4620      	mov	r0, r4
 80033e2:	4798      	blx	r3
 80033e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80033e8:	3301      	adds	r3, #1
 80033ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80033ee:	2101      	movs	r1, #1
 80033f0:	2300      	movs	r3, #0
 80033f2:	e7e3      	b.n	80033bc <d_print_mod+0x84>
 80033f4:	686a      	ldr	r2, [r5, #4]
 80033f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033fa:	9200      	str	r2, [sp, #0]
 80033fc:	4641      	mov	r1, r8
 80033fe:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8003402:	4620      	mov	r0, r4
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	f7fd fb6d 	bl	8000ae4 <d_print_comp_inner>
 800340a:	9b01      	ldr	r3, [sp, #4]
 800340c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003410:	b002      	add	sp, #8
 8003412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003416:	4dbc      	ldr	r5, [pc, #752]	; (8003708 <d_print_mod+0x3d0>)
 8003418:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800341c:	f105 0709 	add.w	r7, r5, #9
 8003420:	f04f 0800 	mov.w	r8, #0
 8003424:	e008      	b.n	8003438 <d_print_mod+0x100>
 8003426:	460b      	mov	r3, r1
 8003428:	3101      	adds	r1, #1
 800342a:	42af      	cmp	r7, r5
 800342c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003430:	54e6      	strb	r6, [r4, r3]
 8003432:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003436:	d0eb      	beq.n	8003410 <d_print_mod+0xd8>
 8003438:	29ff      	cmp	r1, #255	; 0xff
 800343a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800343e:	d1f2      	bne.n	8003426 <d_print_mod+0xee>
 8003440:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003444:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003448:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800344c:	4620      	mov	r0, r4
 800344e:	4798      	blx	r3
 8003450:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003454:	3301      	adds	r3, #1
 8003456:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800345a:	2101      	movs	r1, #1
 800345c:	2300      	movs	r3, #0
 800345e:	e7e4      	b.n	800342a <d_print_mod+0xf2>
 8003460:	4daa      	ldr	r5, [pc, #680]	; (800370c <d_print_mod+0x3d4>)
 8003462:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003466:	f105 0709 	add.w	r7, r5, #9
 800346a:	f04f 0800 	mov.w	r8, #0
 800346e:	e008      	b.n	8003482 <d_print_mod+0x14a>
 8003470:	460b      	mov	r3, r1
 8003472:	3101      	adds	r1, #1
 8003474:	42af      	cmp	r7, r5
 8003476:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800347a:	54e6      	strb	r6, [r4, r3]
 800347c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003480:	d0c6      	beq.n	8003410 <d_print_mod+0xd8>
 8003482:	29ff      	cmp	r1, #255	; 0xff
 8003484:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003488:	d1f2      	bne.n	8003470 <d_print_mod+0x138>
 800348a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800348e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003492:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003496:	4620      	mov	r0, r4
 8003498:	4798      	blx	r3
 800349a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800349e:	3301      	adds	r3, #1
 80034a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80034a4:	2101      	movs	r1, #1
 80034a6:	2300      	movs	r3, #0
 80034a8:	e7e4      	b.n	8003474 <d_print_mod+0x13c>
 80034aa:	4d99      	ldr	r5, [pc, #612]	; (8003710 <d_print_mod+0x3d8>)
 80034ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80034b0:	1daf      	adds	r7, r5, #6
 80034b2:	f04f 0800 	mov.w	r8, #0
 80034b6:	e008      	b.n	80034ca <d_print_mod+0x192>
 80034b8:	460b      	mov	r3, r1
 80034ba:	3101      	adds	r1, #1
 80034bc:	42af      	cmp	r7, r5
 80034be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034c2:	54e6      	strb	r6, [r4, r3]
 80034c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80034c8:	d0a2      	beq.n	8003410 <d_print_mod+0xd8>
 80034ca:	29ff      	cmp	r1, #255	; 0xff
 80034cc:	f815 6b01 	ldrb.w	r6, [r5], #1
 80034d0:	d1f2      	bne.n	80034b8 <d_print_mod+0x180>
 80034d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80034da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034de:	4620      	mov	r0, r4
 80034e0:	4798      	blx	r3
 80034e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80034e6:	3301      	adds	r3, #1
 80034e8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80034ec:	2101      	movs	r1, #1
 80034ee:	2300      	movs	r3, #0
 80034f0:	e7e4      	b.n	80034bc <d_print_mod+0x184>
 80034f2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80034f6:	2bff      	cmp	r3, #255	; 0xff
 80034f8:	f000 8170 	beq.w	80037dc <d_print_mod+0x4a4>
 80034fc:	1c59      	adds	r1, r3, #1
 80034fe:	2220      	movs	r2, #32
 8003500:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003504:	54e2      	strb	r2, [r4, r3]
 8003506:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800350a:	29ff      	cmp	r1, #255	; 0xff
 800350c:	f000 8134 	beq.w	8003778 <d_print_mod+0x440>
 8003510:	1c4a      	adds	r2, r1, #1
 8003512:	2326      	movs	r3, #38	; 0x26
 8003514:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003518:	5463      	strb	r3, [r4, r1]
 800351a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800351e:	b002      	add	sp, #8
 8003520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003524:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8003528:	2bff      	cmp	r3, #255	; 0xff
 800352a:	f000 8168 	beq.w	80037fe <d_print_mod+0x4c6>
 800352e:	1c59      	adds	r1, r3, #1
 8003530:	2220      	movs	r2, #32
 8003532:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003536:	54e2      	strb	r2, [r4, r3]
 8003538:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800353c:	4d75      	ldr	r5, [pc, #468]	; (8003714 <d_print_mod+0x3dc>)
 800353e:	f04f 0800 	mov.w	r8, #0
 8003542:	1caf      	adds	r7, r5, #2
 8003544:	e009      	b.n	800355a <d_print_mod+0x222>
 8003546:	460b      	mov	r3, r1
 8003548:	3101      	adds	r1, #1
 800354a:	42af      	cmp	r7, r5
 800354c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003550:	54e6      	strb	r6, [r4, r3]
 8003552:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003556:	f43f af5b 	beq.w	8003410 <d_print_mod+0xd8>
 800355a:	29ff      	cmp	r1, #255	; 0xff
 800355c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003560:	d1f1      	bne.n	8003546 <d_print_mod+0x20e>
 8003562:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003566:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800356a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800356e:	4620      	mov	r0, r4
 8003570:	4798      	blx	r3
 8003572:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003576:	3301      	adds	r3, #1
 8003578:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800357c:	2101      	movs	r1, #1
 800357e:	2300      	movs	r3, #0
 8003580:	e7e3      	b.n	800354a <d_print_mod+0x212>
 8003582:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003586:	29ff      	cmp	r1, #255	; 0xff
 8003588:	f000 8107 	beq.w	800379a <d_print_mod+0x462>
 800358c:	1c4a      	adds	r2, r1, #1
 800358e:	2320      	movs	r3, #32
 8003590:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003594:	5463      	strb	r3, [r4, r1]
 8003596:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800359a:	68aa      	ldr	r2, [r5, #8]
 800359c:	e72b      	b.n	80033f6 <d_print_mod+0xbe>
 800359e:	f011 0804 	ands.w	r8, r1, #4
 80035a2:	f47f af35 	bne.w	8003410 <d_print_mod+0xd8>
 80035a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035aa:	29ff      	cmp	r1, #255	; 0xff
 80035ac:	f000 8138 	beq.w	8003820 <d_print_mod+0x4e8>
 80035b0:	1c4a      	adds	r2, r1, #1
 80035b2:	232a      	movs	r3, #42	; 0x2a
 80035b4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80035b8:	5463      	strb	r3, [r4, r1]
 80035ba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80035be:	e727      	b.n	8003410 <d_print_mod+0xd8>
 80035c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035c4:	e7a1      	b.n	800350a <d_print_mod+0x1d2>
 80035c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035ca:	e7b7      	b.n	800353c <d_print_mod+0x204>
 80035cc:	4d52      	ldr	r5, [pc, #328]	; (8003718 <d_print_mod+0x3e0>)
 80035ce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035d2:	f105 0708 	add.w	r7, r5, #8
 80035d6:	f04f 0800 	mov.w	r8, #0
 80035da:	e009      	b.n	80035f0 <d_print_mod+0x2b8>
 80035dc:	460b      	mov	r3, r1
 80035de:	3101      	adds	r1, #1
 80035e0:	42af      	cmp	r7, r5
 80035e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035e6:	54e6      	strb	r6, [r4, r3]
 80035e8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80035ec:	f43f af10 	beq.w	8003410 <d_print_mod+0xd8>
 80035f0:	29ff      	cmp	r1, #255	; 0xff
 80035f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80035f6:	d1f1      	bne.n	80035dc <d_print_mod+0x2a4>
 80035f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003600:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003604:	4620      	mov	r0, r4
 8003606:	4798      	blx	r3
 8003608:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800360c:	3301      	adds	r3, #1
 800360e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003612:	2101      	movs	r1, #1
 8003614:	2300      	movs	r3, #0
 8003616:	e7e3      	b.n	80035e0 <d_print_mod+0x2a8>
 8003618:	4d40      	ldr	r5, [pc, #256]	; (800371c <d_print_mod+0x3e4>)
 800361a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800361e:	f105 070a 	add.w	r7, r5, #10
 8003622:	f04f 0800 	mov.w	r8, #0
 8003626:	e009      	b.n	800363c <d_print_mod+0x304>
 8003628:	460b      	mov	r3, r1
 800362a:	3101      	adds	r1, #1
 800362c:	42af      	cmp	r7, r5
 800362e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003632:	54e6      	strb	r6, [r4, r3]
 8003634:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003638:	f43f aeea 	beq.w	8003410 <d_print_mod+0xd8>
 800363c:	29ff      	cmp	r1, #255	; 0xff
 800363e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003642:	d1f1      	bne.n	8003628 <d_print_mod+0x2f0>
 8003644:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003648:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800364c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003650:	4620      	mov	r0, r4
 8003652:	4798      	blx	r3
 8003654:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003658:	3301      	adds	r3, #1
 800365a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800365e:	2101      	movs	r1, #1
 8003660:	2300      	movs	r3, #0
 8003662:	e7e3      	b.n	800362c <d_print_mod+0x2f4>
 8003664:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8003668:	2b28      	cmp	r3, #40	; 0x28
 800366a:	d00a      	beq.n	8003682 <d_print_mod+0x34a>
 800366c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003670:	29ff      	cmp	r1, #255	; 0xff
 8003672:	d071      	beq.n	8003758 <d_print_mod+0x420>
 8003674:	1c4a      	adds	r2, r1, #1
 8003676:	2320      	movs	r3, #32
 8003678:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800367c:	5463      	strb	r3, [r4, r1]
 800367e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003682:	686a      	ldr	r2, [r5, #4]
 8003684:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003688:	4d25      	ldr	r5, [pc, #148]	; (8003720 <d_print_mod+0x3e8>)
 800368a:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800368e:	4641      	mov	r1, r8
 8003690:	4620      	mov	r0, r4
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	9200      	str	r2, [sp, #0]
 8003696:	f7fd fa25 	bl	8000ae4 <d_print_comp_inner>
 800369a:	9b01      	ldr	r3, [sp, #4]
 800369c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80036a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036a4:	1cef      	adds	r7, r5, #3
 80036a6:	f04f 0800 	mov.w	r8, #0
 80036aa:	e009      	b.n	80036c0 <d_print_mod+0x388>
 80036ac:	460b      	mov	r3, r1
 80036ae:	3101      	adds	r1, #1
 80036b0:	42af      	cmp	r7, r5
 80036b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80036b6:	54e6      	strb	r6, [r4, r3]
 80036b8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80036bc:	f43f aea8 	beq.w	8003410 <d_print_mod+0xd8>
 80036c0:	29ff      	cmp	r1, #255	; 0xff
 80036c2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80036c6:	d1f1      	bne.n	80036ac <d_print_mod+0x374>
 80036c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80036cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80036d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036d4:	4620      	mov	r0, r4
 80036d6:	4798      	blx	r3
 80036d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80036dc:	3301      	adds	r3, #1
 80036de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80036e2:	2101      	movs	r1, #1
 80036e4:	2300      	movs	r3, #0
 80036e6:	e7e3      	b.n	80036b0 <d_print_mod+0x378>
 80036e8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80036ec:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 80036f0:	462a      	mov	r2, r5
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	9500      	str	r5, [sp, #0]
 80036f6:	f7fd f9f5 	bl	8000ae4 <d_print_comp_inner>
 80036fa:	9b01      	ldr	r3, [sp, #4]
 80036fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003700:	e686      	b.n	8003410 <d_print_mod+0xd8>
 8003702:	bf00      	nop
 8003704:	080164cc 	.word	0x080164cc
 8003708:	0801648b 	.word	0x0801648b
 800370c:	08016497 	.word	0x08016497
 8003710:	080164a4 	.word	0x080164a4
 8003714:	080164ac 	.word	0x080164ac
 8003718:	080164af 	.word	0x080164af
 800371c:	080164bc 	.word	0x080164bc
 8003720:	080164c8 	.word	0x080164c8
 8003724:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003728:	686a      	ldr	r2, [r5, #4]
 800372a:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800372e:	4641      	mov	r1, r8
 8003730:	4620      	mov	r0, r4
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	9200      	str	r2, [sp, #0]
 8003736:	f7fd f9d5 	bl	8000ae4 <d_print_comp_inner>
 800373a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800373e:	9b01      	ldr	r3, [sp, #4]
 8003740:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003744:	29ff      	cmp	r1, #255	; 0xff
 8003746:	d038      	beq.n	80037ba <d_print_mod+0x482>
 8003748:	1c4a      	adds	r2, r1, #1
 800374a:	2329      	movs	r3, #41	; 0x29
 800374c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003750:	5463      	strb	r3, [r4, r1]
 8003752:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003756:	e65b      	b.n	8003410 <d_print_mod+0xd8>
 8003758:	2600      	movs	r6, #0
 800375a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800375e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003762:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8003766:	4798      	blx	r3
 8003768:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800376c:	3301      	adds	r3, #1
 800376e:	4631      	mov	r1, r6
 8003770:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003774:	2201      	movs	r2, #1
 8003776:	e77e      	b.n	8003676 <d_print_mod+0x33e>
 8003778:	2500      	movs	r5, #0
 800377a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800377e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003782:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003786:	4620      	mov	r0, r4
 8003788:	4798      	blx	r3
 800378a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800378e:	3301      	adds	r3, #1
 8003790:	4629      	mov	r1, r5
 8003792:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003796:	2201      	movs	r2, #1
 8003798:	e6bb      	b.n	8003512 <d_print_mod+0x1da>
 800379a:	2600      	movs	r6, #0
 800379c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80037a0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80037a4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80037a8:	4798      	blx	r3
 80037aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80037ae:	3301      	adds	r3, #1
 80037b0:	4631      	mov	r1, r6
 80037b2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80037b6:	2201      	movs	r2, #1
 80037b8:	e6e9      	b.n	800358e <d_print_mod+0x256>
 80037ba:	2500      	movs	r5, #0
 80037bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80037c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80037c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80037c8:	4620      	mov	r0, r4
 80037ca:	4798      	blx	r3
 80037cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80037d0:	3301      	adds	r3, #1
 80037d2:	4629      	mov	r1, r5
 80037d4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80037d8:	2201      	movs	r2, #1
 80037da:	e7b6      	b.n	800374a <d_print_mod+0x412>
 80037dc:	2500      	movs	r5, #0
 80037de:	4619      	mov	r1, r3
 80037e0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80037e4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80037e8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80037ec:	4798      	blx	r3
 80037ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80037f8:	462b      	mov	r3, r5
 80037fa:	2101      	movs	r1, #1
 80037fc:	e67f      	b.n	80034fe <d_print_mod+0x1c6>
 80037fe:	2500      	movs	r5, #0
 8003800:	4619      	mov	r1, r3
 8003802:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003806:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800380a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800380e:	4798      	blx	r3
 8003810:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800381a:	462b      	mov	r3, r5
 800381c:	2101      	movs	r1, #1
 800381e:	e687      	b.n	8003530 <d_print_mod+0x1f8>
 8003820:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003824:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003828:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800382c:	4798      	blx	r3
 800382e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003832:	3301      	adds	r3, #1
 8003834:	4641      	mov	r1, r8
 8003836:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800383a:	2201      	movs	r2, #1
 800383c:	e6b9      	b.n	80035b2 <d_print_mod+0x27a>
 800383e:	bf00      	nop

08003840 <d_print_mod_list>:
 8003840:	2a00      	cmp	r2, #0
 8003842:	f000 809c 	beq.w	800397e <d_print_mod_list+0x13e>
 8003846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384a:	461e      	mov	r6, r3
 800384c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8003850:	b089      	sub	sp, #36	; 0x24
 8003852:	4605      	mov	r5, r0
 8003854:	bb33      	cbnz	r3, 80038a4 <d_print_mod_list+0x64>
 8003856:	460f      	mov	r7, r1
 8003858:	4614      	mov	r4, r2
 800385a:	f04f 0801 	mov.w	r8, #1
 800385e:	e002      	b.n	8003866 <d_print_mod_list+0x26>
 8003860:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003864:	b9f3      	cbnz	r3, 80038a4 <d_print_mod_list+0x64>
 8003866:	68a3      	ldr	r3, [r4, #8]
 8003868:	b9cb      	cbnz	r3, 800389e <d_print_mod_list+0x5e>
 800386a:	6862      	ldr	r2, [r4, #4]
 800386c:	7813      	ldrb	r3, [r2, #0]
 800386e:	b91e      	cbnz	r6, 8003878 <d_print_mod_list+0x38>
 8003870:	f1a3 011c 	sub.w	r1, r3, #28
 8003874:	2904      	cmp	r1, #4
 8003876:	d912      	bls.n	800389e <d_print_mod_list+0x5e>
 8003878:	68e1      	ldr	r1, [r4, #12]
 800387a:	f8c4 8008 	str.w	r8, [r4, #8]
 800387e:	2b29      	cmp	r3, #41	; 0x29
 8003880:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8003884:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8003888:	d00f      	beq.n	80038aa <d_print_mod_list+0x6a>
 800388a:	2b2a      	cmp	r3, #42	; 0x2a
 800388c:	d018      	beq.n	80038c0 <d_print_mod_list+0x80>
 800388e:	2b02      	cmp	r3, #2
 8003890:	d021      	beq.n	80038d6 <d_print_mod_list+0x96>
 8003892:	4639      	mov	r1, r7
 8003894:	4628      	mov	r0, r5
 8003896:	f7ff fd4f 	bl	8003338 <d_print_mod>
 800389a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800389e:	6824      	ldr	r4, [r4, #0]
 80038a0:	2c00      	cmp	r4, #0
 80038a2:	d1dd      	bne.n	8003860 <d_print_mod_list+0x20>
 80038a4:	b009      	add	sp, #36	; 0x24
 80038a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	3208      	adds	r2, #8
 80038ae:	4639      	mov	r1, r7
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 f9d7 	bl	8003c64 <d_print_function_type.isra.11>
 80038b6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 80038ba:	b009      	add	sp, #36	; 0x24
 80038bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	3204      	adds	r2, #4
 80038c4:	4639      	mov	r1, r7
 80038c6:	4628      	mov	r0, r5
 80038c8:	f000 f8f0 	bl	8003aac <d_print_array_type.isra.10>
 80038cc:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 80038d0:	b009      	add	sp, #36	; 0x24
 80038d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d6:	2600      	movs	r6, #0
 80038d8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 80038dc:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80038e0:	6852      	ldr	r2, [r2, #4]
 80038e2:	4639      	mov	r1, r7
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7ff fd17 	bl	8003318 <d_print_comp>
 80038ea:	f017 0b04 	ands.w	fp, r7, #4
 80038ee:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 80038f2:	d020      	beq.n	8003936 <d_print_mod_list+0xf6>
 80038f4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80038f8:	29ff      	cmp	r1, #255	; 0xff
 80038fa:	f000 80be 	beq.w	8003a7a <d_print_mod_list+0x23a>
 80038fe:	1c4a      	adds	r2, r1, #1
 8003900:	232e      	movs	r3, #46	; 0x2e
 8003902:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8003906:	546b      	strb	r3, [r5, r1]
 8003908:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	689c      	ldr	r4, [r3, #8]
 8003910:	7823      	ldrb	r3, [r4, #0]
 8003912:	2b45      	cmp	r3, #69	; 0x45
 8003914:	d102      	bne.n	800391c <d_print_mod_list+0xdc>
 8003916:	e033      	b.n	8003980 <d_print_mod_list+0x140>
 8003918:	6864      	ldr	r4, [r4, #4]
 800391a:	7823      	ldrb	r3, [r4, #0]
 800391c:	3b1c      	subs	r3, #28
 800391e:	2b04      	cmp	r3, #4
 8003920:	d9fa      	bls.n	8003918 <d_print_mod_list+0xd8>
 8003922:	4622      	mov	r2, r4
 8003924:	4639      	mov	r1, r7
 8003926:	4628      	mov	r0, r5
 8003928:	f7ff fcf6 	bl	8003318 <d_print_comp>
 800392c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8003930:	b009      	add	sp, #36	; 0x24
 8003932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003936:	4e59      	ldr	r6, [pc, #356]	; (8003a9c <d_print_mod_list+0x25c>)
 8003938:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800393c:	f106 0a02 	add.w	sl, r6, #2
 8003940:	e009      	b.n	8003956 <d_print_mod_list+0x116>
 8003942:	460b      	mov	r3, r1
 8003944:	3101      	adds	r1, #1
 8003946:	45b2      	cmp	sl, r6
 8003948:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800394c:	f805 8003 	strb.w	r8, [r5, r3]
 8003950:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8003954:	d0da      	beq.n	800390c <d_print_mod_list+0xcc>
 8003956:	29ff      	cmp	r1, #255	; 0xff
 8003958:	f816 8b01 	ldrb.w	r8, [r6], #1
 800395c:	d1f1      	bne.n	8003942 <d_print_mod_list+0x102>
 800395e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8003962:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8003966:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800396a:	4628      	mov	r0, r5
 800396c:	4798      	blx	r3
 800396e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8003972:	3301      	adds	r3, #1
 8003974:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003978:	2101      	movs	r1, #1
 800397a:	2300      	movs	r3, #0
 800397c:	e7e3      	b.n	8003946 <d_print_mod_list+0x106>
 800397e:	4770      	bx	lr
 8003980:	4e47      	ldr	r6, [pc, #284]	; (8003aa0 <d_print_mod_list+0x260>)
 8003982:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8003986:	f106 0a0d 	add.w	sl, r6, #13
 800398a:	f04f 0b00 	mov.w	fp, #0
 800398e:	e009      	b.n	80039a4 <d_print_mod_list+0x164>
 8003990:	460b      	mov	r3, r1
 8003992:	3101      	adds	r1, #1
 8003994:	45b2      	cmp	sl, r6
 8003996:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800399a:	f805 8003 	strb.w	r8, [r5, r3]
 800399e:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 80039a2:	d013      	beq.n	80039cc <d_print_mod_list+0x18c>
 80039a4:	29ff      	cmp	r1, #255	; 0xff
 80039a6:	f816 8b01 	ldrb.w	r8, [r6], #1
 80039aa:	d1f1      	bne.n	8003990 <d_print_mod_list+0x150>
 80039ac:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80039b0:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 80039b4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80039b8:	4628      	mov	r0, r5
 80039ba:	4798      	blx	r3
 80039bc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80039c0:	3301      	adds	r3, #1
 80039c2:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80039c6:	2101      	movs	r1, #1
 80039c8:	2300      	movs	r3, #0
 80039ca:	e7e3      	b.n	8003994 <d_print_mod_list+0x154>
 80039cc:	68a2      	ldr	r2, [r4, #8]
 80039ce:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <d_print_mod_list+0x264>)
 80039d0:	3201      	adds	r2, #1
 80039d2:	a801      	add	r0, sp, #4
 80039d4:	f00e f804 	bl	80119e0 <sprintf>
 80039d8:	a801      	add	r0, sp, #4
 80039da:	f006 fca1 	bl	800a320 <strlen>
 80039de:	b328      	cbz	r0, 8003a2c <d_print_mod_list+0x1ec>
 80039e0:	ae01      	add	r6, sp, #4
 80039e2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80039e6:	eb06 0a00 	add.w	sl, r6, r0
 80039ea:	f04f 0b00 	mov.w	fp, #0
 80039ee:	e009      	b.n	8003a04 <d_print_mod_list+0x1c4>
 80039f0:	460b      	mov	r3, r1
 80039f2:	3101      	adds	r1, #1
 80039f4:	45b2      	cmp	sl, r6
 80039f6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80039fa:	f805 8003 	strb.w	r8, [r5, r3]
 80039fe:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8003a02:	d015      	beq.n	8003a30 <d_print_mod_list+0x1f0>
 8003a04:	29ff      	cmp	r1, #255	; 0xff
 8003a06:	f816 8b01 	ldrb.w	r8, [r6], #1
 8003a0a:	d1f1      	bne.n	80039f0 <d_print_mod_list+0x1b0>
 8003a0c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8003a10:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8003a14:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8003a18:	4628      	mov	r0, r5
 8003a1a:	4798      	blx	r3
 8003a1c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8003a20:	3301      	adds	r3, #1
 8003a22:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003a26:	2101      	movs	r1, #1
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e7e3      	b.n	80039f4 <d_print_mod_list+0x1b4>
 8003a2c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8003a30:	4e1d      	ldr	r6, [pc, #116]	; (8003aa8 <d_print_mod_list+0x268>)
 8003a32:	f04f 0b00 	mov.w	fp, #0
 8003a36:	f106 0a03 	add.w	sl, r6, #3
 8003a3a:	e00a      	b.n	8003a52 <d_print_mod_list+0x212>
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	3101      	adds	r1, #1
 8003a40:	4556      	cmp	r6, sl
 8003a42:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8003a46:	f805 8003 	strb.w	r8, [r5, r3]
 8003a4a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8003a4e:	f43f af63 	beq.w	8003918 <d_print_mod_list+0xd8>
 8003a52:	29ff      	cmp	r1, #255	; 0xff
 8003a54:	f816 8b01 	ldrb.w	r8, [r6], #1
 8003a58:	d1f0      	bne.n	8003a3c <d_print_mod_list+0x1fc>
 8003a5a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8003a5e:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8003a62:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8003a66:	4628      	mov	r0, r5
 8003a68:	4798      	blx	r3
 8003a6a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003a74:	2101      	movs	r1, #1
 8003a76:	2300      	movs	r3, #0
 8003a78:	e7e2      	b.n	8003a40 <d_print_mod_list+0x200>
 8003a7a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8003a7e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8003a82:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8003a86:	4628      	mov	r0, r5
 8003a88:	4798      	blx	r3
 8003a8a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4631      	mov	r1, r6
 8003a92:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003a96:	2201      	movs	r2, #1
 8003a98:	e732      	b.n	8003900 <d_print_mod_list+0xc0>
 8003a9a:	bf00      	nop
 8003a9c:	0801620c 	.word	0x0801620c
 8003aa0:	08016210 	.word	0x08016210
 8003aa4:	08016220 	.word	0x08016220
 8003aa8:	08016224 	.word	0x08016224

08003aac <d_print_array_type.isra.10>:
 8003aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460f      	mov	r7, r1
 8003ab4:	4690      	mov	r8, r2
 8003ab6:	b163      	cbz	r3, 8003ad2 <d_print_array_type.isra.10+0x26>
 8003ab8:	461e      	mov	r6, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	6893      	ldr	r3, [r2, #8]
 8003abe:	b393      	cbz	r3, 8003b26 <d_print_array_type.isra.10+0x7a>
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d1fa      	bne.n	8003abc <d_print_array_type.isra.10+0x10>
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	4639      	mov	r1, r7
 8003aca:	4632      	mov	r2, r6
 8003acc:	4620      	mov	r0, r4
 8003ace:	f7ff feb7 	bl	8003840 <d_print_mod_list>
 8003ad2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ad6:	29ff      	cmp	r1, #255	; 0xff
 8003ad8:	f000 808d 	beq.w	8003bf6 <d_print_array_type.isra.10+0x14a>
 8003adc:	1c4b      	adds	r3, r1, #1
 8003ade:	2220      	movs	r2, #32
 8003ae0:	2bff      	cmp	r3, #255	; 0xff
 8003ae2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ae6:	5462      	strb	r2, [r4, r1]
 8003ae8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003aec:	d068      	beq.n	8003bc0 <d_print_array_type.isra.10+0x114>
 8003aee:	225b      	movs	r2, #91	; 0x5b
 8003af0:	1c59      	adds	r1, r3, #1
 8003af2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003af6:	54e2      	strb	r2, [r4, r3]
 8003af8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003afc:	f8d8 2000 	ldr.w	r2, [r8]
 8003b00:	b12a      	cbz	r2, 8003b0e <d_print_array_type.isra.10+0x62>
 8003b02:	4639      	mov	r1, r7
 8003b04:	4620      	mov	r0, r4
 8003b06:	f7ff fc07 	bl	8003318 <d_print_comp>
 8003b0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b0e:	29ff      	cmp	r1, #255	; 0xff
 8003b10:	f000 8082 	beq.w	8003c18 <d_print_array_type.isra.10+0x16c>
 8003b14:	1c4a      	adds	r2, r1, #1
 8003b16:	235d      	movs	r3, #93	; 0x5d
 8003b18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003b1c:	5463      	strb	r3, [r4, r1]
 8003b1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	7812      	ldrb	r2, [r2, #0]
 8003b2a:	2a2a      	cmp	r2, #42	; 0x2a
 8003b2c:	d03f      	beq.n	8003bae <d_print_array_type.isra.10+0x102>
 8003b2e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8003c60 <d_print_array_type.isra.10+0x1b4>
 8003b32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b36:	461d      	mov	r5, r3
 8003b38:	f109 0b02 	add.w	fp, r9, #2
 8003b3c:	e00a      	b.n	8003b54 <d_print_array_type.isra.10+0xa8>
 8003b3e:	460b      	mov	r3, r1
 8003b40:	45cb      	cmp	fp, r9
 8003b42:	f101 0101 	add.w	r1, r1, #1
 8003b46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b4a:	f804 a003 	strb.w	sl, [r4, r3]
 8003b4e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003b52:	d01a      	beq.n	8003b8a <d_print_array_type.isra.10+0xde>
 8003b54:	29ff      	cmp	r1, #255	; 0xff
 8003b56:	f819 ab01 	ldrb.w	sl, [r9], #1
 8003b5a:	d1f0      	bne.n	8003b3e <d_print_array_type.isra.10+0x92>
 8003b5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b60:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003b64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b68:	4620      	mov	r0, r4
 8003b6a:	4798      	blx	r3
 8003b6c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003b70:	3301      	adds	r3, #1
 8003b72:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003b76:	2300      	movs	r3, #0
 8003b78:	2101      	movs	r1, #1
 8003b7a:	45cb      	cmp	fp, r9
 8003b7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b80:	f804 a003 	strb.w	sl, [r4, r3]
 8003b84:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003b88:	d1e4      	bne.n	8003b54 <d_print_array_type.isra.10+0xa8>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	4639      	mov	r1, r7
 8003b90:	4620      	mov	r0, r4
 8003b92:	f7ff fe55 	bl	8003840 <d_print_mod_list>
 8003b96:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b9a:	2bff      	cmp	r3, #255	; 0xff
 8003b9c:	d04d      	beq.n	8003c3a <d_print_array_type.isra.10+0x18e>
 8003b9e:	1c59      	adds	r1, r3, #1
 8003ba0:	2229      	movs	r2, #41	; 0x29
 8003ba2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ba6:	54e2      	strb	r2, [r4, r3]
 8003ba8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003bac:	e793      	b.n	8003ad6 <d_print_array_type.isra.10+0x2a>
 8003bae:	4632      	mov	r2, r6
 8003bb0:	4639      	mov	r1, r7
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7ff fe44 	bl	8003840 <d_print_mod_list>
 8003bb8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003bbc:	2bff      	cmp	r3, #255	; 0xff
 8003bbe:	d196      	bne.n	8003aee <d_print_array_type.isra.10+0x42>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8003bc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	4798      	blx	r3
 8003bd4:	235b      	movs	r3, #91	; 0x5b
 8003bd6:	7023      	strb	r3, [r4, #0]
 8003bd8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bdc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003be0:	f8d8 2000 	ldr.w	r2, [r8]
 8003be4:	3301      	adds	r3, #1
 8003be6:	2101      	movs	r1, #1
 8003be8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003bec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	d186      	bne.n	8003b02 <d_print_array_type.isra.10+0x56>
 8003bf4:	e78e      	b.n	8003b14 <d_print_array_type.isra.10+0x68>
 8003bf6:	2500      	movs	r5, #0
 8003bf8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bfc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003c00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c04:	4620      	mov	r0, r4
 8003c06:	4798      	blx	r3
 8003c08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003c12:	4629      	mov	r1, r5
 8003c14:	2301      	movs	r3, #1
 8003c16:	e762      	b.n	8003ade <d_print_array_type.isra.10+0x32>
 8003c18:	2500      	movs	r5, #0
 8003c1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c22:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003c26:	4620      	mov	r0, r4
 8003c28:	4798      	blx	r3
 8003c2a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4629      	mov	r1, r5
 8003c32:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003c36:	2201      	movs	r2, #1
 8003c38:	e76d      	b.n	8003b16 <d_print_array_type.isra.10+0x6a>
 8003c3a:	2500      	movs	r5, #0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c46:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	4798      	blx	r3
 8003c4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003c58:	462b      	mov	r3, r5
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	e7a0      	b.n	8003ba0 <d_print_array_type.isra.10+0xf4>
 8003c5e:	bf00      	nop
 8003c60:	08016408 	.word	0x08016408

08003c64 <d_print_function_type.isra.11>:
 8003c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c68:	4604      	mov	r4, r0
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	460e      	mov	r6, r1
 8003c6e:	4617      	mov	r7, r2
 8003c70:	461d      	mov	r5, r3
 8003c72:	b353      	cbz	r3, 8003cca <d_print_function_type.isra.11+0x66>
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	bb43      	cbnz	r3, 8003cca <d_print_function_type.isra.11+0x66>
 8003c78:	462a      	mov	r2, r5
 8003c7a:	f04f 0e01 	mov.w	lr, #1
 8003c7e:	e006      	b.n	8003c8e <d_print_function_type.isra.11+0x2a>
 8003c80:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 8003c84:	d15c      	bne.n	8003d40 <d_print_function_type.isra.11+0xdc>
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	b1fa      	cbz	r2, 8003cca <d_print_function_type.isra.11+0x66>
 8003c8a:	6893      	ldr	r3, [r2, #8]
 8003c8c:	b9eb      	cbnz	r3, 8003cca <d_print_function_type.isra.11+0x66>
 8003c8e:	6853      	ldr	r3, [r2, #4]
 8003c90:	496d      	ldr	r1, [pc, #436]	; (8003e48 <d_print_function_type.isra.11+0x1e4>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	3b19      	subs	r3, #25
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	fa0e f003 	lsl.w	r0, lr, r3
 8003c9c:	2b12      	cmp	r3, #18
 8003c9e:	ea01 0100 	and.w	r1, r1, r0
 8003ca2:	d8f0      	bhi.n	8003c86 <d_print_function_type.isra.11+0x22>
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d0eb      	beq.n	8003c80 <d_print_function_type.isra.11+0x1c>
 8003ca8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d04d      	beq.n	8003d4c <d_print_function_type.isra.11+0xe8>
 8003cb0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cb4:	2bff      	cmp	r3, #255	; 0xff
 8003cb6:	f000 80b4 	beq.w	8003e22 <d_print_function_type.isra.11+0x1be>
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003cc2:	54e2      	strb	r2, [r4, r3]
 8003cc4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003cc8:	e042      	b.n	8003d50 <d_print_function_type.isra.11+0xec>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8003cd0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	462a      	mov	r2, r5
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff fdb1 	bl	8003840 <d_print_mod_list>
 8003cde:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ce2:	29ff      	cmp	r1, #255	; 0xff
 8003ce4:	d056      	beq.n	8003d94 <d_print_function_type.isra.11+0x130>
 8003ce6:	1c4b      	adds	r3, r1, #1
 8003ce8:	2228      	movs	r2, #40	; 0x28
 8003cea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003cee:	5462      	strb	r2, [r4, r1]
 8003cf0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	b178      	cbz	r0, 8003d18 <d_print_function_type.isra.11+0xb4>
 8003cf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cfc:	9000      	str	r0, [sp, #0]
 8003cfe:	4602      	mov	r2, r0
 8003d00:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8003d04:	4631      	mov	r1, r6
 8003d06:	4620      	mov	r0, r4
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	f7fc feeb 	bl	8000ae4 <d_print_comp_inner>
 8003d0e:	9a01      	ldr	r2, [sp, #4]
 8003d10:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d14:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003d18:	2bff      	cmp	r3, #255	; 0xff
 8003d1a:	d04d      	beq.n	8003db8 <d_print_function_type.isra.11+0x154>
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	2029      	movs	r0, #41	; 0x29
 8003d20:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003d24:	4631      	mov	r1, r6
 8003d26:	54e0      	strb	r0, [r4, r3]
 8003d28:	462a      	mov	r2, r5
 8003d2a:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8003d2e:	2301      	movs	r3, #1
 8003d30:	4620      	mov	r0, r4
 8003d32:	f7ff fd85 	bl	8003840 <d_print_mod_list>
 8003d36:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8003d3a:	b003      	add	sp, #12
 8003d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d40:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003d44:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8003d48:	2a28      	cmp	r2, #40	; 0x28
 8003d4a:	d1af      	bne.n	8003cac <d_print_function_type.isra.11+0x48>
 8003d4c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003d50:	29ff      	cmp	r1, #255	; 0xff
 8003d52:	d054      	beq.n	8003dfe <d_print_function_type.isra.11+0x19a>
 8003d54:	1c4a      	adds	r2, r1, #1
 8003d56:	2328      	movs	r3, #40	; 0x28
 8003d58:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003d5c:	5463      	strb	r3, [r4, r1]
 8003d5e:	f04f 0900 	mov.w	r9, #0
 8003d62:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003d66:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8003d6a:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003d6e:	464b      	mov	r3, r9
 8003d70:	462a      	mov	r2, r5
 8003d72:	4631      	mov	r1, r6
 8003d74:	4620      	mov	r0, r4
 8003d76:	f7ff fd63 	bl	8003840 <d_print_mod_list>
 8003d7a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d7e:	2bff      	cmp	r3, #255	; 0xff
 8003d80:	d02c      	beq.n	8003ddc <d_print_function_type.isra.11+0x178>
 8003d82:	1c59      	adds	r1, r3, #1
 8003d84:	2229      	movs	r2, #41	; 0x29
 8003d86:	29ff      	cmp	r1, #255	; 0xff
 8003d88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d8c:	54e2      	strb	r2, [r4, r3]
 8003d8e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003d92:	d1a8      	bne.n	8003ce6 <d_print_function_type.isra.11+0x82>
 8003d94:	f04f 0900 	mov.w	r9, #0
 8003d98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d9c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003da0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003da4:	4620      	mov	r0, r4
 8003da6:	4798      	blx	r3
 8003da8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003dac:	3301      	adds	r3, #1
 8003dae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003db2:	4649      	mov	r1, r9
 8003db4:	2301      	movs	r3, #1
 8003db6:	e797      	b.n	8003ce8 <d_print_function_type.isra.11+0x84>
 8003db8:	2700      	movs	r7, #0
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dc4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8003dc8:	4620      	mov	r0, r4
 8003dca:	4798      	blx	r3
 8003dcc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003dd6:	463b      	mov	r3, r7
 8003dd8:	2201      	movs	r2, #1
 8003dda:	e7a0      	b.n	8003d1e <d_print_function_type.isra.11+0xba>
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003de2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003de6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003dea:	4620      	mov	r0, r4
 8003dec:	4798      	blx	r3
 8003dee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003df8:	464b      	mov	r3, r9
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	e7c2      	b.n	8003d84 <d_print_function_type.isra.11+0x120>
 8003dfe:	f04f 0800 	mov.w	r8, #0
 8003e02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e0a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4798      	blx	r3
 8003e12:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003e16:	3301      	adds	r3, #1
 8003e18:	4641      	mov	r1, r8
 8003e1a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003e1e:	2201      	movs	r2, #1
 8003e20:	e799      	b.n	8003d56 <d_print_function_type.isra.11+0xf2>
 8003e22:	f04f 0800 	mov.w	r8, #0
 8003e26:	4619      	mov	r1, r3
 8003e28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003e34:	4620      	mov	r0, r4
 8003e36:	4798      	blx	r3
 8003e38:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003e42:	4643      	mov	r3, r8
 8003e44:	2101      	movs	r1, #1
 8003e46:	e739      	b.n	8003cbc <d_print_function_type.isra.11+0x58>
 8003e48:	00043107 	.word	0x00043107

08003e4c <d_print_cast.isra.12>:
 8003e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e50:	460e      	mov	r6, r1
 8003e52:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
 8003e56:	b084      	sub	sp, #16
 8003e58:	4604      	mov	r4, r0
 8003e5a:	4615      	mov	r5, r2
 8003e5c:	b139      	cbz	r1, 8003e6e <d_print_cast.isra.12+0x22>
 8003e5e:	ab04      	add	r3, sp, #16
 8003e60:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003e64:	f843 2d10 	str.w	r2, [r3, #-16]!
 8003e68:	9101      	str	r1, [sp, #4]
 8003e6a:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8003e6e:	682b      	ldr	r3, [r5, #0]
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	2a04      	cmp	r2, #4
 8003e74:	d017      	beq.n	8003ea6 <d_print_cast.isra.12+0x5a>
 8003e76:	a802      	add	r0, sp, #8
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8003e7e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8003e82:	4631      	mov	r1, r6
 8003e84:	4620      	mov	r0, r4
 8003e86:	9302      	str	r3, [sp, #8]
 8003e88:	9503      	str	r5, [sp, #12]
 8003e8a:	f7fc fe2b 	bl	8000ae4 <d_print_comp_inner>
 8003e8e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003e92:	9a03      	ldr	r2, [sp, #12]
 8003e94:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003e98:	b113      	cbz	r3, 8003ea0 <d_print_cast.isra.12+0x54>
 8003e9a:	9b00      	ldr	r3, [sp, #0]
 8003e9c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003ea0:	b004      	add	sp, #16
 8003ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea6:	af02      	add	r7, sp, #8
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003eae:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	9202      	str	r2, [sp, #8]
 8003eb8:	9303      	str	r3, [sp, #12]
 8003eba:	f7fc fe13 	bl	8000ae4 <d_print_comp_inner>
 8003ebe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003ec2:	9a03      	ldr	r2, [sp, #12]
 8003ec4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003ec8:	b113      	cbz	r3, 8003ed0 <d_print_cast.isra.12+0x84>
 8003eca:	9b00      	ldr	r3, [sp, #0]
 8003ecc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003ed0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003ed4:	2b3c      	cmp	r3, #60	; 0x3c
 8003ed6:	d02c      	beq.n	8003f32 <d_print_cast.isra.12+0xe6>
 8003ed8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003edc:	29ff      	cmp	r1, #255	; 0xff
 8003ede:	d051      	beq.n	8003f84 <d_print_cast.isra.12+0x138>
 8003ee0:	1c4a      	adds	r2, r1, #1
 8003ee2:	233c      	movs	r3, #60	; 0x3c
 8003ee4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ee8:	5463      	strb	r3, [r4, r1]
 8003eea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 8003efa:	461a      	mov	r2, r3
 8003efc:	4631      	mov	r1, r6
 8003efe:	4620      	mov	r0, r4
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	9503      	str	r5, [sp, #12]
 8003f04:	f7fc fdee 	bl	8000ae4 <d_print_comp_inner>
 8003f08:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003f0c:	9a03      	ldr	r2, [sp, #12]
 8003f0e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003f12:	2b3e      	cmp	r3, #62	; 0x3e
 8003f14:	d019      	beq.n	8003f4a <d_print_cast.isra.12+0xfe>
 8003f16:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f1a:	29ff      	cmp	r1, #255	; 0xff
 8003f1c:	d021      	beq.n	8003f62 <d_print_cast.isra.12+0x116>
 8003f1e:	1c4a      	adds	r2, r1, #1
 8003f20:	233e      	movs	r3, #62	; 0x3e
 8003f22:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f26:	5463      	strb	r3, [r4, r1]
 8003f28:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003f2c:	b004      	add	sp, #16
 8003f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f32:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003f36:	2bff      	cmp	r3, #255	; 0xff
 8003f38:	d048      	beq.n	8003fcc <d_print_cast.isra.12+0x180>
 8003f3a:	1c59      	adds	r1, r3, #1
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f42:	54e2      	strb	r2, [r4, r3]
 8003f44:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003f48:	e7c8      	b.n	8003edc <d_print_cast.isra.12+0x90>
 8003f4a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003f4e:	2bff      	cmp	r3, #255	; 0xff
 8003f50:	d02a      	beq.n	8003fa8 <d_print_cast.isra.12+0x15c>
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	2220      	movs	r2, #32
 8003f56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f5a:	54e2      	strb	r2, [r4, r3]
 8003f5c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003f60:	e7db      	b.n	8003f1a <d_print_cast.isra.12+0xce>
 8003f62:	2500      	movs	r5, #0
 8003f64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f6c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003f70:	4620      	mov	r0, r4
 8003f72:	4798      	blx	r3
 8003f74:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f78:	3301      	adds	r3, #1
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003f80:	2201      	movs	r2, #1
 8003f82:	e7cd      	b.n	8003f20 <d_print_cast.isra.12+0xd4>
 8003f84:	f04f 0800 	mov.w	r8, #0
 8003f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f90:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f94:	4620      	mov	r0, r4
 8003f96:	4798      	blx	r3
 8003f98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	e79c      	b.n	8003ee2 <d_print_cast.isra.12+0x96>
 8003fa8:	2500      	movs	r5, #0
 8003faa:	4619      	mov	r1, r3
 8003fac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fb4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4798      	blx	r3
 8003fbc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	2101      	movs	r1, #1
 8003fca:	e7c3      	b.n	8003f54 <d_print_cast.isra.12+0x108>
 8003fcc:	f04f 0800 	mov.w	r8, #0
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fde:	4620      	mov	r0, r4
 8003fe0:	4798      	blx	r3
 8003fe2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003fec:	4643      	mov	r3, r8
 8003fee:	2101      	movs	r1, #1
 8003ff0:	e7a4      	b.n	8003f3c <d_print_cast.isra.12+0xf0>
 8003ff2:	bf00      	nop

08003ff4 <d_print_expr_op>:
 8003ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff8:	7815      	ldrb	r5, [r2, #0]
 8003ffa:	2d31      	cmp	r5, #49	; 0x31
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	4613      	mov	r3, r2
 8004000:	4604      	mov	r4, r0
 8004002:	d00d      	beq.n	8004020 <d_print_expr_op+0x2c>
 8004004:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 8004008:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 800400c:	e88d 0028 	stmia.w	sp, {r3, r5}
 8004010:	f7fc fd68 	bl	8000ae4 <d_print_comp_inner>
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800401a:	b002      	add	sp, #8
 800401c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004020:	6853      	ldr	r3, [r2, #4]
 8004022:	689f      	ldr	r7, [r3, #8]
 8004024:	685d      	ldr	r5, [r3, #4]
 8004026:	2f00      	cmp	r7, #0
 8004028:	d0f7      	beq.n	800401a <d_print_expr_op+0x26>
 800402a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800402e:	442f      	add	r7, r5
 8004030:	f04f 0800 	mov.w	r8, #0
 8004034:	e008      	b.n	8004048 <d_print_expr_op+0x54>
 8004036:	460b      	mov	r3, r1
 8004038:	3101      	adds	r1, #1
 800403a:	42bd      	cmp	r5, r7
 800403c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004040:	54e6      	strb	r6, [r4, r3]
 8004042:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004046:	d0e8      	beq.n	800401a <d_print_expr_op+0x26>
 8004048:	29ff      	cmp	r1, #255	; 0xff
 800404a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800404e:	d1f2      	bne.n	8004036 <d_print_expr_op+0x42>
 8004050:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004054:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004058:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800405c:	4620      	mov	r0, r4
 800405e:	4798      	blx	r3
 8004060:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004064:	3301      	adds	r3, #1
 8004066:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800406a:	2101      	movs	r1, #1
 800406c:	2300      	movs	r3, #0
 800406e:	e7e4      	b.n	800403a <d_print_expr_op+0x46>

08004070 <d_print_subexpr>:
 8004070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004072:	7813      	ldrb	r3, [r2, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	b083      	sub	sp, #12
 8004078:	4615      	mov	r5, r2
 800407a:	460e      	mov	r6, r1
 800407c:	4604      	mov	r4, r0
 800407e:	d929      	bls.n	80040d4 <d_print_subexpr+0x64>
 8004080:	2b30      	cmp	r3, #48	; 0x30
 8004082:	d027      	beq.n	80040d4 <d_print_subexpr+0x64>
 8004084:	2b06      	cmp	r3, #6
 8004086:	d025      	beq.n	80040d4 <d_print_subexpr+0x64>
 8004088:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800408c:	29ff      	cmp	r1, #255	; 0xff
 800408e:	d031      	beq.n	80040f4 <d_print_subexpr+0x84>
 8004090:	1c4a      	adds	r2, r1, #1
 8004092:	2328      	movs	r3, #40	; 0x28
 8004094:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004098:	5463      	strb	r3, [r4, r1]
 800409a:	462a      	mov	r2, r5
 800409c:	4631      	mov	r1, r6
 800409e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80040a2:	4620      	mov	r0, r4
 80040a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80040a8:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	9500      	str	r5, [sp, #0]
 80040b0:	f7fc fd18 	bl	8000ae4 <d_print_comp_inner>
 80040b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80040b8:	9b01      	ldr	r3, [sp, #4]
 80040ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80040be:	29ff      	cmp	r1, #255	; 0xff
 80040c0:	d028      	beq.n	8004114 <d_print_subexpr+0xa4>
 80040c2:	1c4a      	adds	r2, r1, #1
 80040c4:	2329      	movs	r3, #41	; 0x29
 80040c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80040ca:	5463      	strb	r3, [r4, r1]
 80040cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80040d0:	b003      	add	sp, #12
 80040d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80040d8:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 80040dc:	4631      	mov	r1, r6
 80040de:	462a      	mov	r2, r5
 80040e0:	4620      	mov	r0, r4
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	9500      	str	r5, [sp, #0]
 80040e6:	f7fc fcfd 	bl	8000ae4 <d_print_comp_inner>
 80040ea:	9b01      	ldr	r3, [sp, #4]
 80040ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80040f0:	b003      	add	sp, #12
 80040f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f4:	2700      	movs	r7, #0
 80040f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040fe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004102:	4798      	blx	r3
 8004104:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004108:	3301      	adds	r3, #1
 800410a:	4639      	mov	r1, r7
 800410c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004110:	2201      	movs	r2, #1
 8004112:	e7be      	b.n	8004092 <d_print_subexpr+0x22>
 8004114:	2500      	movs	r5, #0
 8004116:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800411a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800411e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004122:	4620      	mov	r0, r4
 8004124:	4798      	blx	r3
 8004126:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800412a:	3301      	adds	r3, #1
 800412c:	4629      	mov	r1, r5
 800412e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004132:	2201      	movs	r2, #1
 8004134:	e7c6      	b.n	80040c4 <d_print_subexpr+0x54>
 8004136:	bf00      	nop

08004138 <d_template_args>:
 8004138:	68c1      	ldr	r1, [r0, #12]
 800413a:	780b      	ldrb	r3, [r1, #0]
 800413c:	3b49      	subs	r3, #73	; 0x49
 800413e:	2b01      	cmp	r3, #1
 8004140:	f200 80ac 	bhi.w	800429c <d_template_args+0x164>
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	1c4a      	adds	r2, r1, #1
 800414a:	60c2      	str	r2, [r0, #12]
 800414c:	784b      	ldrb	r3, [r1, #1]
 800414e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8004152:	2b45      	cmp	r3, #69	; 0x45
 8004154:	b085      	sub	sp, #20
 8004156:	4604      	mov	r4, r0
 8004158:	f000 8166 	beq.w	8004428 <d_template_args+0x2f0>
 800415c:	ae04      	add	r6, sp, #16
 800415e:	2100      	movs	r1, #0
 8004160:	f846 1d04 	str.w	r1, [r6, #-4]!
 8004164:	3b49      	subs	r3, #73	; 0x49
 8004166:	2b0f      	cmp	r3, #15
 8004168:	d854      	bhi.n	8004214 <d_template_args+0xdc>
 800416a:	e8df f003 	tbb	[pc, r3]
 800416e:	4e4e      	.short	0x4e4e
 8004170:	53533253 	.word	0x53533253
 8004174:	53535353 	.word	0x53535353
 8004178:	53535353 	.word	0x53535353
 800417c:	0853      	.short	0x0853
 800417e:	1c53      	adds	r3, r2, #1
 8004180:	2501      	movs	r5, #1
 8004182:	60e3      	str	r3, [r4, #12]
 8004184:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004186:	6365      	str	r5, [r4, #52]	; 0x34
 8004188:	7853      	ldrb	r3, [r2, #1]
 800418a:	2b4c      	cmp	r3, #76	; 0x4c
 800418c:	f000 8088 	beq.w	80042a0 <d_template_args+0x168>
 8004190:	2b54      	cmp	r3, #84	; 0x54
 8004192:	f000 808b 	beq.w	80042ac <d_template_args+0x174>
 8004196:	2b73      	cmp	r3, #115	; 0x73
 8004198:	d044      	beq.n	8004224 <d_template_args+0xec>
 800419a:	2b66      	cmp	r3, #102	; 0x66
 800419c:	d060      	beq.n	8004260 <d_template_args+0x128>
 800419e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80041a2:	2909      	cmp	r1, #9
 80041a4:	f200 81b1 	bhi.w	800450a <d_template_args+0x3d2>
 80041a8:	4620      	mov	r0, r4
 80041aa:	f003 f91f 	bl	80073ec <d_unqualified_name>
 80041ae:	4605      	mov	r5, r0
 80041b0:	2800      	cmp	r0, #0
 80041b2:	f000 8229 	beq.w	8004608 <d_template_args+0x4d0>
 80041b6:	68e3      	ldr	r3, [r4, #12]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	2a49      	cmp	r2, #73	; 0x49
 80041bc:	f000 8128 	beq.w	8004410 <d_template_args+0x2d8>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6367      	str	r7, [r4, #52]	; 0x34
 80041c4:	7819      	ldrb	r1, [r3, #0]
 80041c6:	2945      	cmp	r1, #69	; 0x45
 80041c8:	d029      	beq.n	800421e <d_template_args+0xe6>
 80041ca:	2000      	movs	r0, #0
 80041cc:	b005      	add	sp, #20
 80041ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d2:	4620      	mov	r0, r4
 80041d4:	f003 ff80 	bl	80080d8 <d_expr_primary>
 80041d8:	4602      	mov	r2, r0
 80041da:	2a00      	cmp	r2, #0
 80041dc:	d0f5      	beq.n	80041ca <d_template_args+0x92>
 80041de:	2300      	movs	r3, #0
 80041e0:	212f      	movs	r1, #47	; 0x2f
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7fc f8ac 	bl	8000340 <d_make_comp>
 80041e8:	6030      	str	r0, [r6, #0]
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d0ed      	beq.n	80041ca <d_template_args+0x92>
 80041ee:	68e2      	ldr	r2, [r4, #12]
 80041f0:	7813      	ldrb	r3, [r2, #0]
 80041f2:	2b45      	cmp	r3, #69	; 0x45
 80041f4:	f100 0608 	add.w	r6, r0, #8
 80041f8:	d1b4      	bne.n	8004164 <d_template_args+0x2c>
 80041fa:	9803      	ldr	r0, [sp, #12]
 80041fc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8004200:	3201      	adds	r2, #1
 8004202:	60e2      	str	r2, [r4, #12]
 8004204:	b005      	add	sp, #20
 8004206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420a:	4620      	mov	r0, r4
 800420c:	f7ff ff94 	bl	8004138 <d_template_args>
 8004210:	4602      	mov	r2, r0
 8004212:	e7e2      	b.n	80041da <d_template_args+0xa2>
 8004214:	4620      	mov	r0, r4
 8004216:	f002 fc6b 	bl	8006af0 <d_type>
 800421a:	4602      	mov	r2, r0
 800421c:	e7dd      	b.n	80041da <d_template_args+0xa2>
 800421e:	3301      	adds	r3, #1
 8004220:	60e3      	str	r3, [r4, #12]
 8004222:	e7da      	b.n	80041da <d_template_args+0xa2>
 8004224:	7893      	ldrb	r3, [r2, #2]
 8004226:	2b72      	cmp	r3, #114	; 0x72
 8004228:	f000 8149 	beq.w	80044be <d_template_args+0x386>
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	f000 81aa 	beq.w	8004586 <d_template_args+0x44e>
 8004232:	4620      	mov	r0, r4
 8004234:	f003 f81a 	bl	800726c <d_operator_name>
 8004238:	4605      	mov	r5, r0
 800423a:	2800      	cmp	r0, #0
 800423c:	f000 81e4 	beq.w	8004608 <d_template_args+0x4d0>
 8004240:	f890 9000 	ldrb.w	r9, [r0]
 8004244:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 8004248:	d036      	beq.n	80042b8 <d_template_args+0x180>
 800424a:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 800424e:	f000 80cf 	beq.w	80043f0 <d_template_args+0x2b8>
 8004252:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 8004256:	f000 8172 	beq.w	800453e <d_template_args+0x406>
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	e7b0      	b.n	80041c2 <d_template_args+0x8a>
 8004260:	7893      	ldrb	r3, [r2, #2]
 8004262:	2b70      	cmp	r3, #112	; 0x70
 8004264:	d1e5      	bne.n	8004232 <d_template_args+0xfa>
 8004266:	1cd3      	adds	r3, r2, #3
 8004268:	60e3      	str	r3, [r4, #12]
 800426a:	78d3      	ldrb	r3, [r2, #3]
 800426c:	2b54      	cmp	r3, #84	; 0x54
 800426e:	f040 813c 	bne.w	80044ea <d_template_args+0x3b2>
 8004272:	3204      	adds	r2, #4
 8004274:	60e2      	str	r2, [r4, #12]
 8004276:	2000      	movs	r0, #0
 8004278:	6963      	ldr	r3, [r4, #20]
 800427a:	69a1      	ldr	r1, [r4, #24]
 800427c:	428b      	cmp	r3, r1
 800427e:	daec      	bge.n	800425a <d_template_args+0x122>
 8004280:	6921      	ldr	r1, [r4, #16]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004288:	6162      	str	r2, [r4, #20]
 800428a:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800428e:	d06d      	beq.n	800436c <d_template_args+0x234>
 8004290:	2506      	movs	r5, #6
 8004292:	f801 5023 	strb.w	r5, [r1, r3, lsl #2]
 8004296:	6050      	str	r0, [r2, #4]
 8004298:	68e3      	ldr	r3, [r4, #12]
 800429a:	e792      	b.n	80041c2 <d_template_args+0x8a>
 800429c:	2000      	movs	r0, #0
 800429e:	4770      	bx	lr
 80042a0:	4620      	mov	r0, r4
 80042a2:	f003 ff19 	bl	80080d8 <d_expr_primary>
 80042a6:	68e3      	ldr	r3, [r4, #12]
 80042a8:	4602      	mov	r2, r0
 80042aa:	e78a      	b.n	80041c2 <d_template_args+0x8a>
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7fc f9eb 	bl	8000688 <d_template_param>
 80042b2:	68e3      	ldr	r3, [r4, #12]
 80042b4:	4602      	mov	r2, r0
 80042b6:	e784      	b.n	80041c2 <d_template_args+0x8a>
 80042b8:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80042bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042be:	f8db 3008 	ldr.w	r3, [fp, #8]
 80042c2:	f8db a000 	ldr.w	sl, [fp]
 80042c6:	49cb      	ldr	r1, [pc, #812]	; (80045f4 <d_template_args+0x4bc>)
 80042c8:	3b02      	subs	r3, #2
 80042ca:	441a      	add	r2, r3
 80042cc:	6322      	str	r2, [r4, #48]	; 0x30
 80042ce:	4650      	mov	r0, sl
 80042d0:	f005 feba 	bl	800a048 <strcmp>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	f000 8188 	beq.w	80045ea <d_template_args+0x4b2>
 80042da:	f8db 300c 	ldr.w	r3, [fp, #12]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d8bb      	bhi.n	800425a <d_template_args+0x122>
 80042e2:	e8df f003 	tbb	[pc, r3]
 80042e6:	ab7c      	.short	0xab7c
 80042e8:	0447      	.short	0x0447
 80042ea:	f04f 0a00 	mov.w	sl, #0
 80042ee:	49c2      	ldr	r1, [pc, #776]	; (80045f8 <d_template_args+0x4c0>)
 80042f0:	4650      	mov	r0, sl
 80042f2:	f005 fea9 	bl	800a048 <strcmp>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	f000 819d 	beq.w	8004636 <d_template_args+0x4fe>
 80042fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004300:	2b6e      	cmp	r3, #110	; 0x6e
 8004302:	d1aa      	bne.n	800425a <d_template_args+0x122>
 8004304:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004308:	2b77      	cmp	r3, #119	; 0x77
 800430a:	d001      	beq.n	8004310 <d_template_args+0x1d8>
 800430c:	2b61      	cmp	r3, #97	; 0x61
 800430e:	d1a4      	bne.n	800425a <d_template_args+0x122>
 8004310:	215f      	movs	r1, #95	; 0x5f
 8004312:	4620      	mov	r0, r4
 8004314:	f000 fd82 	bl	8004e1c <d_exprlist>
 8004318:	4681      	mov	r9, r0
 800431a:	4620      	mov	r0, r4
 800431c:	f002 fbe8 	bl	8006af0 <d_type>
 8004320:	68e3      	ldr	r3, [r4, #12]
 8004322:	7819      	ldrb	r1, [r3, #0]
 8004324:	2945      	cmp	r1, #69	; 0x45
 8004326:	4682      	mov	sl, r0
 8004328:	f000 825d 	beq.w	80047e6 <d_template_args+0x6ae>
 800432c:	2970      	cmp	r1, #112	; 0x70
 800432e:	f000 8342 	beq.w	80049b6 <d_template_args+0x87e>
 8004332:	2969      	cmp	r1, #105	; 0x69
 8004334:	f040 824d 	bne.w	80047d2 <d_template_args+0x69a>
 8004338:	785a      	ldrb	r2, [r3, #1]
 800433a:	2a6c      	cmp	r2, #108	; 0x6c
 800433c:	f040 8249 	bne.w	80047d2 <d_template_args+0x69a>
 8004340:	4620      	mov	r0, r4
 8004342:	f002 fa03 	bl	800674c <d_expression_1>
 8004346:	4603      	mov	r3, r0
 8004348:	4652      	mov	r2, sl
 800434a:	213a      	movs	r1, #58	; 0x3a
 800434c:	4620      	mov	r0, r4
 800434e:	f7fb fff7 	bl	8000340 <d_make_comp>
 8004352:	464a      	mov	r2, r9
 8004354:	4603      	mov	r3, r0
 8004356:	2139      	movs	r1, #57	; 0x39
 8004358:	4620      	mov	r0, r4
 800435a:	f7fb fff1 	bl	8000340 <d_make_comp>
 800435e:	462a      	mov	r2, r5
 8004360:	4603      	mov	r3, r0
 8004362:	2138      	movs	r1, #56	; 0x38
 8004364:	4620      	mov	r0, r4
 8004366:	f7fb ffeb 	bl	8000340 <d_make_comp>
 800436a:	4602      	mov	r2, r0
 800436c:	68e3      	ldr	r3, [r4, #12]
 800436e:	e728      	b.n	80041c2 <d_template_args+0x8a>
 8004370:	f04f 0a00 	mov.w	sl, #0
 8004374:	686b      	ldr	r3, [r5, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	785a      	ldrb	r2, [r3, #1]
 800437a:	2a63      	cmp	r2, #99	; 0x63
 800437c:	f000 814d 	beq.w	800461a <d_template_args+0x4e2>
 8004380:	4620      	mov	r0, r4
 8004382:	f002 f9e3 	bl	800674c <d_expression_1>
 8004386:	4681      	mov	r9, r0
 8004388:	499c      	ldr	r1, [pc, #624]	; (80045fc <d_template_args+0x4c4>)
 800438a:	4650      	mov	r0, sl
 800438c:	f005 fe5c 	bl	800a048 <strcmp>
 8004390:	2800      	cmp	r0, #0
 8004392:	f000 813c 	beq.w	800460e <d_template_args+0x4d6>
 8004396:	499a      	ldr	r1, [pc, #616]	; (8004600 <d_template_args+0x4c8>)
 8004398:	4650      	mov	r0, sl
 800439a:	f005 fe55 	bl	800a048 <strcmp>
 800439e:	b130      	cbz	r0, 80043ae <d_template_args+0x276>
 80043a0:	4650      	mov	r0, sl
 80043a2:	4998      	ldr	r1, [pc, #608]	; (8004604 <d_template_args+0x4cc>)
 80043a4:	f005 fe50 	bl	800a048 <strcmp>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	f040 8214 	bne.w	80047d6 <d_template_args+0x69e>
 80043ae:	4620      	mov	r0, r4
 80043b0:	f003 f81c 	bl	80073ec <d_unqualified_name>
 80043b4:	68e3      	ldr	r3, [r4, #12]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b49      	cmp	r3, #73	; 0x49
 80043ba:	4682      	mov	sl, r0
 80043bc:	f000 82d2 	beq.w	8004964 <d_template_args+0x82c>
 80043c0:	4653      	mov	r3, sl
 80043c2:	464a      	mov	r2, r9
 80043c4:	2137      	movs	r1, #55	; 0x37
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7fb ffba 	bl	8000340 <d_make_comp>
 80043cc:	462a      	mov	r2, r5
 80043ce:	4603      	mov	r3, r0
 80043d0:	2136      	movs	r1, #54	; 0x36
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7fb ffb4 	bl	8000340 <d_make_comp>
 80043d8:	68e3      	ldr	r3, [r4, #12]
 80043da:	4602      	mov	r2, r0
 80043dc:	e6f1      	b.n	80041c2 <d_template_args+0x8a>
 80043de:	462a      	mov	r2, r5
 80043e0:	2300      	movs	r3, #0
 80043e2:	2134      	movs	r1, #52	; 0x34
 80043e4:	4620      	mov	r0, r4
 80043e6:	f7fb ffab 	bl	8000340 <d_make_comp>
 80043ea:	68e3      	ldr	r3, [r4, #12]
 80043ec:	4602      	mov	r2, r0
 80043ee:	e6e8      	b.n	80041c2 <d_template_args+0x8a>
 80043f0:	686b      	ldr	r3, [r5, #4]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	f63f af31 	bhi.w	800425a <d_template_args+0x122>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <d_template_args+0x2c8>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	080043df 	.word	0x080043df
 8004404:	080044fb 	.word	0x080044fb
 8004408:	08004371 	.word	0x08004371
 800440c:	080042eb 	.word	0x080042eb
 8004410:	4620      	mov	r0, r4
 8004412:	f7ff fe91 	bl	8004138 <d_template_args>
 8004416:	462a      	mov	r2, r5
 8004418:	4603      	mov	r3, r0
 800441a:	2104      	movs	r1, #4
 800441c:	4620      	mov	r0, r4
 800441e:	f7fb ff8f 	bl	8000340 <d_make_comp>
 8004422:	68e3      	ldr	r3, [r4, #12]
 8004424:	4602      	mov	r2, r0
 8004426:	e6cc      	b.n	80041c2 <d_template_args+0x8a>
 8004428:	3102      	adds	r1, #2
 800442a:	2300      	movs	r3, #0
 800442c:	60c1      	str	r1, [r0, #12]
 800442e:	461a      	mov	r2, r3
 8004430:	212f      	movs	r1, #47	; 0x2f
 8004432:	b005      	add	sp, #20
 8004434:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004438:	f7fb bf82 	b.w	8000340 <d_make_comp>
 800443c:	f1ba 0f00 	cmp.w	sl, #0
 8004440:	d05b      	beq.n	80044fa <d_template_args+0x3c2>
 8004442:	f89a 3000 	ldrb.w	r3, [sl]
 8004446:	2b70      	cmp	r3, #112	; 0x70
 8004448:	d001      	beq.n	800444e <d_template_args+0x316>
 800444a:	2b6d      	cmp	r3, #109	; 0x6d
 800444c:	d155      	bne.n	80044fa <d_template_args+0x3c2>
 800444e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8004452:	429a      	cmp	r2, r3
 8004454:	d151      	bne.n	80044fa <d_template_args+0x3c2>
 8004456:	68e2      	ldr	r2, [r4, #12]
 8004458:	7813      	ldrb	r3, [r2, #0]
 800445a:	2b5f      	cmp	r3, #95	; 0x5f
 800445c:	f000 8334 	beq.w	8004ac8 <d_template_args+0x990>
 8004460:	f04f 0a01 	mov.w	sl, #1
 8004464:	2b4c      	cmp	r3, #76	; 0x4c
 8004466:	f000 82bf 	beq.w	80049e8 <d_template_args+0x8b0>
 800446a:	2b54      	cmp	r3, #84	; 0x54
 800446c:	f000 82af 	beq.w	80049ce <d_template_args+0x896>
 8004470:	2b73      	cmp	r3, #115	; 0x73
 8004472:	f000 80ed 	beq.w	8004650 <d_template_args+0x518>
 8004476:	2b66      	cmp	r3, #102	; 0x66
 8004478:	f000 818b 	beq.w	8004792 <d_template_args+0x65a>
 800447c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004480:	2909      	cmp	r1, #9
 8004482:	f200 8400 	bhi.w	8004c86 <d_template_args+0xb4e>
 8004486:	4620      	mov	r0, r4
 8004488:	f002 ffb0 	bl	80073ec <d_unqualified_name>
 800448c:	4681      	mov	r9, r0
 800448e:	b118      	cbz	r0, 8004498 <d_template_args+0x360>
 8004490:	68e3      	ldr	r3, [r4, #12]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b49      	cmp	r3, #73	; 0x49
 8004496:	d064      	beq.n	8004562 <d_template_args+0x42a>
 8004498:	f1ba 0f00 	cmp.w	sl, #0
 800449c:	f000 80a3 	beq.w	80045e6 <d_template_args+0x4ae>
 80044a0:	464b      	mov	r3, r9
 80044a2:	464a      	mov	r2, r9
 80044a4:	2137      	movs	r1, #55	; 0x37
 80044a6:	4620      	mov	r0, r4
 80044a8:	f7fb ff4a 	bl	8000340 <d_make_comp>
 80044ac:	4603      	mov	r3, r0
 80044ae:	462a      	mov	r2, r5
 80044b0:	2135      	movs	r1, #53	; 0x35
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7fb ff44 	bl	8000340 <d_make_comp>
 80044b8:	68e3      	ldr	r3, [r4, #12]
 80044ba:	4602      	mov	r2, r0
 80044bc:	e681      	b.n	80041c2 <d_template_args+0x8a>
 80044be:	3203      	adds	r2, #3
 80044c0:	60e2      	str	r2, [r4, #12]
 80044c2:	4620      	mov	r0, r4
 80044c4:	f002 fb14 	bl	8006af0 <d_type>
 80044c8:	4681      	mov	r9, r0
 80044ca:	4620      	mov	r0, r4
 80044cc:	f002 ff8e 	bl	80073ec <d_unqualified_name>
 80044d0:	68e3      	ldr	r3, [r4, #12]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b49      	cmp	r3, #73	; 0x49
 80044d6:	4682      	mov	sl, r0
 80044d8:	d038      	beq.n	800454c <d_template_args+0x414>
 80044da:	4603      	mov	r3, r0
 80044dc:	464a      	mov	r2, r9
 80044de:	4629      	mov	r1, r5
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7fb ff2d 	bl	8000340 <d_make_comp>
 80044e6:	4602      	mov	r2, r0
 80044e8:	e740      	b.n	800436c <d_template_args+0x234>
 80044ea:	4620      	mov	r0, r4
 80044ec:	f7fc f8b4 	bl	8000658 <d_compact_number>
 80044f0:	3001      	adds	r0, #1
 80044f2:	f47f aec1 	bne.w	8004278 <d_template_args+0x140>
 80044f6:	4602      	mov	r2, r0
 80044f8:	e738      	b.n	800436c <d_template_args+0x234>
 80044fa:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 80044fe:	68e2      	ldr	r2, [r4, #12]
 8004500:	d01e      	beq.n	8004540 <d_template_args+0x408>
 8004502:	7813      	ldrb	r3, [r2, #0]
 8004504:	f04f 0a00 	mov.w	sl, #0
 8004508:	e7ac      	b.n	8004464 <d_template_args+0x32c>
 800450a:	2b6f      	cmp	r3, #111	; 0x6f
 800450c:	d034      	beq.n	8004578 <d_template_args+0x440>
 800450e:	2b69      	cmp	r3, #105	; 0x69
 8004510:	f040 8421 	bne.w	8004d56 <d_template_args+0xc1e>
 8004514:	7893      	ldrb	r3, [r2, #2]
 8004516:	2b6c      	cmp	r3, #108	; 0x6c
 8004518:	f47f ae8b 	bne.w	8004232 <d_template_args+0xfa>
 800451c:	2500      	movs	r5, #0
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	3302      	adds	r3, #2
 8004522:	60e3      	str	r3, [r4, #12]
 8004524:	2145      	movs	r1, #69	; 0x45
 8004526:	4620      	mov	r0, r4
 8004528:	f000 fc78 	bl	8004e1c <d_exprlist>
 800452c:	462a      	mov	r2, r5
 800452e:	4603      	mov	r3, r0
 8004530:	2130      	movs	r1, #48	; 0x30
 8004532:	4620      	mov	r0, r4
 8004534:	f7fb ff04 	bl	8000340 <d_make_comp>
 8004538:	68e3      	ldr	r3, [r4, #12]
 800453a:	4602      	mov	r2, r0
 800453c:	e641      	b.n	80041c2 <d_template_args+0x8a>
 800453e:	68e2      	ldr	r2, [r4, #12]
 8004540:	7813      	ldrb	r3, [r2, #0]
 8004542:	2b5f      	cmp	r3, #95	; 0x5f
 8004544:	d048      	beq.n	80045d8 <d_template_args+0x4a0>
 8004546:	f04f 0a00 	mov.w	sl, #0
 800454a:	e78b      	b.n	8004464 <d_template_args+0x32c>
 800454c:	4620      	mov	r0, r4
 800454e:	f7ff fdf3 	bl	8004138 <d_template_args>
 8004552:	4652      	mov	r2, sl
 8004554:	4603      	mov	r3, r0
 8004556:	2104      	movs	r1, #4
 8004558:	4620      	mov	r0, r4
 800455a:	f7fb fef1 	bl	8000340 <d_make_comp>
 800455e:	4603      	mov	r3, r0
 8004560:	e7bc      	b.n	80044dc <d_template_args+0x3a4>
 8004562:	4620      	mov	r0, r4
 8004564:	f7ff fde8 	bl	8004138 <d_template_args>
 8004568:	464a      	mov	r2, r9
 800456a:	4603      	mov	r3, r0
 800456c:	2104      	movs	r1, #4
 800456e:	4620      	mov	r0, r4
 8004570:	f7fb fee6 	bl	8000340 <d_make_comp>
 8004574:	4681      	mov	r9, r0
 8004576:	e78f      	b.n	8004498 <d_template_args+0x360>
 8004578:	7893      	ldrb	r3, [r2, #2]
 800457a:	2b6e      	cmp	r3, #110	; 0x6e
 800457c:	f47f ae59 	bne.w	8004232 <d_template_args+0xfa>
 8004580:	3203      	adds	r2, #3
 8004582:	60e2      	str	r2, [r4, #12]
 8004584:	e610      	b.n	80041a8 <d_template_args+0x70>
 8004586:	1cd3      	adds	r3, r2, #3
 8004588:	60e3      	str	r3, [r4, #12]
 800458a:	78d3      	ldrb	r3, [r2, #3]
 800458c:	2b4c      	cmp	r3, #76	; 0x4c
 800458e:	f000 8259 	beq.w	8004a44 <d_template_args+0x90c>
 8004592:	2b54      	cmp	r3, #84	; 0x54
 8004594:	f000 8273 	beq.w	8004a7e <d_template_args+0x946>
 8004598:	2b73      	cmp	r3, #115	; 0x73
 800459a:	f000 8128 	beq.w	80047ee <d_template_args+0x6b6>
 800459e:	2b66      	cmp	r3, #102	; 0x66
 80045a0:	f000 81c1 	beq.w	8004926 <d_template_args+0x7ee>
 80045a4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80045a8:	2909      	cmp	r1, #9
 80045aa:	f200 83e1 	bhi.w	8004d70 <d_template_args+0xc38>
 80045ae:	4620      	mov	r0, r4
 80045b0:	f002 ff1c 	bl	80073ec <d_unqualified_name>
 80045b4:	4605      	mov	r5, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f000 8242 	beq.w	8004a40 <d_template_args+0x908>
 80045bc:	68e3      	ldr	r3, [r4, #12]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b49      	cmp	r3, #73	; 0x49
 80045c2:	f000 8284 	beq.w	8004ace <d_template_args+0x996>
 80045c6:	4602      	mov	r2, r0
 80045c8:	2300      	movs	r3, #0
 80045ca:	2149      	movs	r1, #73	; 0x49
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7fb feb7 	bl	8000340 <d_make_comp>
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	4602      	mov	r2, r0
 80045d6:	e5f4      	b.n	80041c2 <d_template_args+0x8a>
 80045d8:	3201      	adds	r2, #1
 80045da:	60e2      	str	r2, [r4, #12]
 80045dc:	2145      	movs	r1, #69	; 0x45
 80045de:	4620      	mov	r0, r4
 80045e0:	f000 fc1c 	bl	8004e1c <d_exprlist>
 80045e4:	4681      	mov	r9, r0
 80045e6:	464b      	mov	r3, r9
 80045e8:	e761      	b.n	80044ae <d_template_args+0x376>
 80045ea:	4620      	mov	r0, r4
 80045ec:	f002 fa80 	bl	8006af0 <d_type>
 80045f0:	4603      	mov	r3, r0
 80045f2:	e75c      	b.n	80044ae <d_template_args+0x376>
 80045f4:	080166cc 	.word	0x080166cc
 80045f8:	080163c4 	.word	0x080163c4
 80045fc:	080163bc 	.word	0x080163bc
 8004600:	080164d8 	.word	0x080164d8
 8004604:	080164dc 	.word	0x080164dc
 8004608:	462a      	mov	r2, r5
 800460a:	68e3      	ldr	r3, [r4, #12]
 800460c:	e5d9      	b.n	80041c2 <d_template_args+0x8a>
 800460e:	2145      	movs	r1, #69	; 0x45
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fc03 	bl	8004e1c <d_exprlist>
 8004616:	4682      	mov	sl, r0
 8004618:	e6d2      	b.n	80043c0 <d_template_args+0x288>
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8004620:	2a01      	cmp	r2, #1
 8004622:	d903      	bls.n	800462c <d_template_args+0x4f4>
 8004624:	3b72      	subs	r3, #114	; 0x72
 8004626:	2b01      	cmp	r3, #1
 8004628:	f63f aeaa 	bhi.w	8004380 <d_template_args+0x248>
 800462c:	4620      	mov	r0, r4
 800462e:	f002 fa5f 	bl	8006af0 <d_type>
 8004632:	4681      	mov	r9, r0
 8004634:	e6a8      	b.n	8004388 <d_template_args+0x250>
 8004636:	4620      	mov	r0, r4
 8004638:	f002 f888 	bl	800674c <d_expression_1>
 800463c:	4681      	mov	r9, r0
 800463e:	4620      	mov	r0, r4
 8004640:	f002 f884 	bl	800674c <d_expression_1>
 8004644:	4682      	mov	sl, r0
 8004646:	4620      	mov	r0, r4
 8004648:	f002 f880 	bl	800674c <d_expression_1>
 800464c:	4603      	mov	r3, r0
 800464e:	e67b      	b.n	8004348 <d_template_args+0x210>
 8004650:	7853      	ldrb	r3, [r2, #1]
 8004652:	2b72      	cmp	r3, #114	; 0x72
 8004654:	f000 8265 	beq.w	8004b22 <d_template_args+0x9ea>
 8004658:	2b70      	cmp	r3, #112	; 0x70
 800465a:	f000 82a2 	beq.w	8004ba2 <d_template_args+0xa6a>
 800465e:	4620      	mov	r0, r4
 8004660:	f002 fe04 	bl	800726c <d_operator_name>
 8004664:	4681      	mov	r9, r0
 8004666:	2800      	cmp	r0, #0
 8004668:	f43f af16 	beq.w	8004498 <d_template_args+0x360>
 800466c:	7803      	ldrb	r3, [r0, #0]
 800466e:	2b31      	cmp	r3, #49	; 0x31
 8004670:	f000 81bf 	beq.w	80049f2 <d_template_args+0x8ba>
 8004674:	2b32      	cmp	r3, #50	; 0x32
 8004676:	f040 8180 	bne.w	800497a <d_template_args+0x842>
 800467a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800467e:	2b03      	cmp	r3, #3
 8004680:	f200 80ae 	bhi.w	80047e0 <d_template_args+0x6a8>
 8004684:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004688:	01810004 	.word	0x01810004
 800468c:	000c004e 	.word	0x000c004e
 8004690:	464a      	mov	r2, r9
 8004692:	2300      	movs	r3, #0
 8004694:	2134      	movs	r1, #52	; 0x34
 8004696:	4620      	mov	r0, r4
 8004698:	f7fb fe52 	bl	8000340 <d_make_comp>
 800469c:	4681      	mov	r9, r0
 800469e:	e6fb      	b.n	8004498 <d_template_args+0x360>
 80046a0:	f04f 0b00 	mov.w	fp, #0
 80046a4:	49cc      	ldr	r1, [pc, #816]	; (80049d8 <d_template_args+0x8a0>)
 80046a6:	4658      	mov	r0, fp
 80046a8:	f005 fcce 	bl	800a048 <strcmp>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	f000 82a2 	beq.w	8004bf6 <d_template_args+0xabe>
 80046b2:	f89b 3000 	ldrb.w	r3, [fp]
 80046b6:	2b6e      	cmp	r3, #110	; 0x6e
 80046b8:	f040 8092 	bne.w	80047e0 <d_template_args+0x6a8>
 80046bc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80046c0:	2b77      	cmp	r3, #119	; 0x77
 80046c2:	d002      	beq.n	80046ca <d_template_args+0x592>
 80046c4:	2b61      	cmp	r3, #97	; 0x61
 80046c6:	f040 808b 	bne.w	80047e0 <d_template_args+0x6a8>
 80046ca:	215f      	movs	r1, #95	; 0x5f
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 fba5 	bl	8004e1c <d_exprlist>
 80046d2:	9001      	str	r0, [sp, #4]
 80046d4:	4620      	mov	r0, r4
 80046d6:	f002 fa0b 	bl	8006af0 <d_type>
 80046da:	68e3      	ldr	r3, [r4, #12]
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	2a45      	cmp	r2, #69	; 0x45
 80046e0:	4683      	mov	fp, r0
 80046e2:	f000 8316 	beq.w	8004d12 <d_template_args+0xbda>
 80046e6:	2a70      	cmp	r2, #112	; 0x70
 80046e8:	f000 8308 	beq.w	8004cfc <d_template_args+0xbc4>
 80046ec:	2a69      	cmp	r2, #105	; 0x69
 80046ee:	d177      	bne.n	80047e0 <d_template_args+0x6a8>
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	2b6c      	cmp	r3, #108	; 0x6c
 80046f4:	d174      	bne.n	80047e0 <d_template_args+0x6a8>
 80046f6:	4620      	mov	r0, r4
 80046f8:	f002 f828 	bl	800674c <d_expression_1>
 80046fc:	4603      	mov	r3, r0
 80046fe:	465a      	mov	r2, fp
 8004700:	213a      	movs	r1, #58	; 0x3a
 8004702:	4620      	mov	r0, r4
 8004704:	f7fb fe1c 	bl	8000340 <d_make_comp>
 8004708:	9a01      	ldr	r2, [sp, #4]
 800470a:	4603      	mov	r3, r0
 800470c:	2139      	movs	r1, #57	; 0x39
 800470e:	4620      	mov	r0, r4
 8004710:	f7fb fe16 	bl	8000340 <d_make_comp>
 8004714:	464a      	mov	r2, r9
 8004716:	4603      	mov	r3, r0
 8004718:	2138      	movs	r1, #56	; 0x38
 800471a:	4620      	mov	r0, r4
 800471c:	f7fb fe10 	bl	8000340 <d_make_comp>
 8004720:	4681      	mov	r9, r0
 8004722:	e6b9      	b.n	8004498 <d_template_args+0x360>
 8004724:	f04f 0b00 	mov.w	fp, #0
 8004728:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	785a      	ldrb	r2, [r3, #1]
 8004730:	2a63      	cmp	r2, #99	; 0x63
 8004732:	f000 8295 	beq.w	8004c60 <d_template_args+0xb28>
 8004736:	4620      	mov	r0, r4
 8004738:	f002 f808 	bl	800674c <d_expression_1>
 800473c:	9001      	str	r0, [sp, #4]
 800473e:	49a7      	ldr	r1, [pc, #668]	; (80049dc <d_template_args+0x8a4>)
 8004740:	4658      	mov	r0, fp
 8004742:	f005 fc81 	bl	800a048 <strcmp>
 8004746:	2800      	cmp	r0, #0
 8004748:	f000 8243 	beq.w	8004bd2 <d_template_args+0xa9a>
 800474c:	49a4      	ldr	r1, [pc, #656]	; (80049e0 <d_template_args+0x8a8>)
 800474e:	4658      	mov	r0, fp
 8004750:	f005 fc7a 	bl	800a048 <strcmp>
 8004754:	b130      	cbz	r0, 8004764 <d_template_args+0x62c>
 8004756:	4658      	mov	r0, fp
 8004758:	49a2      	ldr	r1, [pc, #648]	; (80049e4 <d_template_args+0x8ac>)
 800475a:	f005 fc75 	bl	800a048 <strcmp>
 800475e:	2800      	cmp	r0, #0
 8004760:	f040 828c 	bne.w	8004c7c <d_template_args+0xb44>
 8004764:	4620      	mov	r0, r4
 8004766:	f002 fe41 	bl	80073ec <d_unqualified_name>
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b49      	cmp	r3, #73	; 0x49
 8004770:	4683      	mov	fp, r0
 8004772:	f000 833c 	beq.w	8004dee <d_template_args+0xcb6>
 8004776:	465b      	mov	r3, fp
 8004778:	9a01      	ldr	r2, [sp, #4]
 800477a:	2137      	movs	r1, #55	; 0x37
 800477c:	4620      	mov	r0, r4
 800477e:	f7fb fddf 	bl	8000340 <d_make_comp>
 8004782:	464a      	mov	r2, r9
 8004784:	4603      	mov	r3, r0
 8004786:	2136      	movs	r1, #54	; 0x36
 8004788:	4620      	mov	r0, r4
 800478a:	f7fb fdd9 	bl	8000340 <d_make_comp>
 800478e:	4681      	mov	r9, r0
 8004790:	e682      	b.n	8004498 <d_template_args+0x360>
 8004792:	7853      	ldrb	r3, [r2, #1]
 8004794:	2b70      	cmp	r3, #112	; 0x70
 8004796:	f47f af62 	bne.w	800465e <d_template_args+0x526>
 800479a:	1c93      	adds	r3, r2, #2
 800479c:	60e3      	str	r3, [r4, #12]
 800479e:	7893      	ldrb	r3, [r2, #2]
 80047a0:	2b54      	cmp	r3, #84	; 0x54
 80047a2:	f040 81b6 	bne.w	8004b12 <d_template_args+0x9da>
 80047a6:	3203      	adds	r2, #3
 80047a8:	60e2      	str	r2, [r4, #12]
 80047aa:	2000      	movs	r0, #0
 80047ac:	6963      	ldr	r3, [r4, #20]
 80047ae:	69a2      	ldr	r2, [r4, #24]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	da15      	bge.n	80047e0 <d_template_args+0x6a8>
 80047b4:	6922      	ldr	r2, [r4, #16]
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80047bc:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 80047c0:	6161      	str	r1, [r4, #20]
 80047c2:	f43f ae69 	beq.w	8004498 <d_template_args+0x360>
 80047c6:	2106      	movs	r1, #6
 80047c8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 80047cc:	f8c9 0004 	str.w	r0, [r9, #4]
 80047d0:	e662      	b.n	8004498 <d_template_args+0x360>
 80047d2:	2200      	movs	r2, #0
 80047d4:	e4f5      	b.n	80041c2 <d_template_args+0x8a>
 80047d6:	4620      	mov	r0, r4
 80047d8:	f001 ffb8 	bl	800674c <d_expression_1>
 80047dc:	4682      	mov	sl, r0
 80047de:	e5ef      	b.n	80043c0 <d_template_args+0x288>
 80047e0:	f04f 0900 	mov.w	r9, #0
 80047e4:	e658      	b.n	8004498 <d_template_args+0x360>
 80047e6:	3301      	adds	r3, #1
 80047e8:	60e3      	str	r3, [r4, #12]
 80047ea:	2300      	movs	r3, #0
 80047ec:	e5ac      	b.n	8004348 <d_template_args+0x210>
 80047ee:	7913      	ldrb	r3, [r2, #4]
 80047f0:	2b72      	cmp	r3, #114	; 0x72
 80047f2:	f000 81ac 	beq.w	8004b4e <d_template_args+0xa16>
 80047f6:	2b70      	cmp	r3, #112	; 0x70
 80047f8:	f000 8222 	beq.w	8004c40 <d_template_args+0xb08>
 80047fc:	4620      	mov	r0, r4
 80047fe:	f002 fd35 	bl	800726c <d_operator_name>
 8004802:	4681      	mov	r9, r0
 8004804:	2800      	cmp	r0, #0
 8004806:	f000 811b 	beq.w	8004a40 <d_template_args+0x908>
 800480a:	7803      	ldrb	r3, [r0, #0]
 800480c:	2b31      	cmp	r3, #49	; 0x31
 800480e:	f000 813a 	beq.w	8004a86 <d_template_args+0x94e>
 8004812:	2b32      	cmp	r3, #50	; 0x32
 8004814:	f040 811a 	bne.w	8004a4c <d_template_args+0x914>
 8004818:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800481c:	2b03      	cmp	r3, #3
 800481e:	f200 810f 	bhi.w	8004a40 <d_template_args+0x908>
 8004822:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004826:	0004      	.short	0x0004
 8004828:	004b011a 	.word	0x004b011a
 800482c:	000b      	.short	0x000b
 800482e:	464a      	mov	r2, r9
 8004830:	2300      	movs	r3, #0
 8004832:	2134      	movs	r1, #52	; 0x34
 8004834:	4620      	mov	r0, r4
 8004836:	f7fb fd83 	bl	8000340 <d_make_comp>
 800483a:	e6c4      	b.n	80045c6 <d_template_args+0x48e>
 800483c:	2500      	movs	r5, #0
 800483e:	4966      	ldr	r1, [pc, #408]	; (80049d8 <d_template_args+0x8a0>)
 8004840:	4628      	mov	r0, r5
 8004842:	f005 fc01 	bl	800a048 <strcmp>
 8004846:	2800      	cmp	r0, #0
 8004848:	f000 81c9 	beq.w	8004bde <d_template_args+0xaa6>
 800484c:	782b      	ldrb	r3, [r5, #0]
 800484e:	2b6e      	cmp	r3, #110	; 0x6e
 8004850:	f040 80f6 	bne.w	8004a40 <d_template_args+0x908>
 8004854:	786b      	ldrb	r3, [r5, #1]
 8004856:	2b77      	cmp	r3, #119	; 0x77
 8004858:	d002      	beq.n	8004860 <d_template_args+0x728>
 800485a:	2b61      	cmp	r3, #97	; 0x61
 800485c:	f040 80f0 	bne.w	8004a40 <d_template_args+0x908>
 8004860:	215f      	movs	r1, #95	; 0x5f
 8004862:	4620      	mov	r0, r4
 8004864:	f000 fada 	bl	8004e1c <d_exprlist>
 8004868:	4605      	mov	r5, r0
 800486a:	4620      	mov	r0, r4
 800486c:	f002 f940 	bl	8006af0 <d_type>
 8004870:	68e3      	ldr	r3, [r4, #12]
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	2a45      	cmp	r2, #69	; 0x45
 8004876:	4682      	mov	sl, r0
 8004878:	f000 82b5 	beq.w	8004de6 <d_template_args+0xcae>
 800487c:	2a70      	cmp	r2, #112	; 0x70
 800487e:	f000 82a7 	beq.w	8004dd0 <d_template_args+0xc98>
 8004882:	2a69      	cmp	r2, #105	; 0x69
 8004884:	f040 80dc 	bne.w	8004a40 <d_template_args+0x908>
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	2b6c      	cmp	r3, #108	; 0x6c
 800488c:	f040 80d8 	bne.w	8004a40 <d_template_args+0x908>
 8004890:	4620      	mov	r0, r4
 8004892:	f001 ff5b 	bl	800674c <d_expression_1>
 8004896:	4603      	mov	r3, r0
 8004898:	4652      	mov	r2, sl
 800489a:	213a      	movs	r1, #58	; 0x3a
 800489c:	4620      	mov	r0, r4
 800489e:	f7fb fd4f 	bl	8000340 <d_make_comp>
 80048a2:	462a      	mov	r2, r5
 80048a4:	4603      	mov	r3, r0
 80048a6:	2139      	movs	r1, #57	; 0x39
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7fb fd49 	bl	8000340 <d_make_comp>
 80048ae:	464a      	mov	r2, r9
 80048b0:	4603      	mov	r3, r0
 80048b2:	2138      	movs	r1, #56	; 0x38
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7fb fd43 	bl	8000340 <d_make_comp>
 80048ba:	e684      	b.n	80045c6 <d_template_args+0x48e>
 80048bc:	2500      	movs	r5, #0
 80048be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	785a      	ldrb	r2, [r3, #1]
 80048c6:	2a63      	cmp	r2, #99	; 0x63
 80048c8:	f000 81a7 	beq.w	8004c1a <d_template_args+0xae2>
 80048cc:	4620      	mov	r0, r4
 80048ce:	f001 ff3d 	bl	800674c <d_expression_1>
 80048d2:	4682      	mov	sl, r0
 80048d4:	4941      	ldr	r1, [pc, #260]	; (80049dc <d_template_args+0x8a4>)
 80048d6:	4628      	mov	r0, r5
 80048d8:	f005 fbb6 	bl	800a048 <strcmp>
 80048dc:	2800      	cmp	r0, #0
 80048de:	f000 8196 	beq.w	8004c0e <d_template_args+0xad6>
 80048e2:	493f      	ldr	r1, [pc, #252]	; (80049e0 <d_template_args+0x8a8>)
 80048e4:	4628      	mov	r0, r5
 80048e6:	f005 fbaf 	bl	800a048 <strcmp>
 80048ea:	b130      	cbz	r0, 80048fa <d_template_args+0x7c2>
 80048ec:	4628      	mov	r0, r5
 80048ee:	493d      	ldr	r1, [pc, #244]	; (80049e4 <d_template_args+0x8ac>)
 80048f0:	f005 fbaa 	bl	800a048 <strcmp>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	f040 8229 	bne.w	8004d4c <d_template_args+0xc14>
 80048fa:	4620      	mov	r0, r4
 80048fc:	f002 fd76 	bl	80073ec <d_unqualified_name>
 8004900:	68e3      	ldr	r3, [r4, #12]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b49      	cmp	r3, #73	; 0x49
 8004906:	4605      	mov	r5, r0
 8004908:	f000 820a 	beq.w	8004d20 <d_template_args+0xbe8>
 800490c:	462b      	mov	r3, r5
 800490e:	4652      	mov	r2, sl
 8004910:	2137      	movs	r1, #55	; 0x37
 8004912:	4620      	mov	r0, r4
 8004914:	f7fb fd14 	bl	8000340 <d_make_comp>
 8004918:	464a      	mov	r2, r9
 800491a:	4603      	mov	r3, r0
 800491c:	2136      	movs	r1, #54	; 0x36
 800491e:	4620      	mov	r0, r4
 8004920:	f7fb fd0e 	bl	8000340 <d_make_comp>
 8004924:	e64f      	b.n	80045c6 <d_template_args+0x48e>
 8004926:	7913      	ldrb	r3, [r2, #4]
 8004928:	2b70      	cmp	r3, #112	; 0x70
 800492a:	f47f af67 	bne.w	80047fc <d_template_args+0x6c4>
 800492e:	1d53      	adds	r3, r2, #5
 8004930:	60e3      	str	r3, [r4, #12]
 8004932:	7953      	ldrb	r3, [r2, #5]
 8004934:	2b54      	cmp	r3, #84	; 0x54
 8004936:	d17d      	bne.n	8004a34 <d_template_args+0x8fc>
 8004938:	3206      	adds	r2, #6
 800493a:	60e2      	str	r2, [r4, #12]
 800493c:	2500      	movs	r5, #0
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	69a2      	ldr	r2, [r4, #24]
 8004942:	4293      	cmp	r3, r2
 8004944:	da7c      	bge.n	8004a40 <d_template_args+0x908>
 8004946:	6921      	ldr	r1, [r4, #16]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800494e:	6162      	str	r2, [r4, #20]
 8004950:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 8004954:	f000 8236 	beq.w	8004dc4 <d_template_args+0xc8c>
 8004958:	2006      	movs	r0, #6
 800495a:	f801 0023 	strb.w	r0, [r1, r3, lsl #2]
 800495e:	4610      	mov	r0, r2
 8004960:	6055      	str	r5, [r2, #4]
 8004962:	e630      	b.n	80045c6 <d_template_args+0x48e>
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff fbe7 	bl	8004138 <d_template_args>
 800496a:	4652      	mov	r2, sl
 800496c:	4603      	mov	r3, r0
 800496e:	2104      	movs	r1, #4
 8004970:	4620      	mov	r0, r4
 8004972:	f7fb fce5 	bl	8000340 <d_make_comp>
 8004976:	4682      	mov	sl, r0
 8004978:	e522      	b.n	80043c0 <d_template_args+0x288>
 800497a:	2b33      	cmp	r3, #51	; 0x33
 800497c:	f47f af30 	bne.w	80047e0 <d_template_args+0x6a8>
 8004980:	68e3      	ldr	r3, [r4, #12]
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	2a5f      	cmp	r2, #95	; 0x5f
 8004986:	f000 81a1 	beq.w	8004ccc <d_template_args+0xb94>
 800498a:	f04f 0b00 	mov.w	fp, #0
 800498e:	4620      	mov	r0, r4
 8004990:	f001 fedc 	bl	800674c <d_expression_1>
 8004994:	4603      	mov	r3, r0
 8004996:	f1bb 0f00 	cmp.w	fp, #0
 800499a:	d005      	beq.n	80049a8 <d_template_args+0x870>
 800499c:	4602      	mov	r2, r0
 800499e:	2137      	movs	r1, #55	; 0x37
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7fb fccd 	bl	8000340 <d_make_comp>
 80049a6:	4603      	mov	r3, r0
 80049a8:	464a      	mov	r2, r9
 80049aa:	2135      	movs	r1, #53	; 0x35
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7fb fcc7 	bl	8000340 <d_make_comp>
 80049b2:	4681      	mov	r9, r0
 80049b4:	e570      	b.n	8004498 <d_template_args+0x360>
 80049b6:	785a      	ldrb	r2, [r3, #1]
 80049b8:	2a69      	cmp	r2, #105	; 0x69
 80049ba:	f47f af0a 	bne.w	80047d2 <d_template_args+0x69a>
 80049be:	3302      	adds	r3, #2
 80049c0:	60e3      	str	r3, [r4, #12]
 80049c2:	2145      	movs	r1, #69	; 0x45
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 fa29 	bl	8004e1c <d_exprlist>
 80049ca:	4603      	mov	r3, r0
 80049cc:	e4bc      	b.n	8004348 <d_template_args+0x210>
 80049ce:	4620      	mov	r0, r4
 80049d0:	f7fb fe5a 	bl	8000688 <d_template_param>
 80049d4:	4681      	mov	r9, r0
 80049d6:	e55f      	b.n	8004498 <d_template_args+0x360>
 80049d8:	080163c4 	.word	0x080163c4
 80049dc:	080163bc 	.word	0x080163bc
 80049e0:	080164d8 	.word	0x080164d8
 80049e4:	080164dc 	.word	0x080164dc
 80049e8:	4620      	mov	r0, r4
 80049ea:	f003 fb75 	bl	80080d8 <d_expr_primary>
 80049ee:	4681      	mov	r9, r0
 80049f0:	e552      	b.n	8004498 <d_template_args+0x360>
 80049f2:	6843      	ldr	r3, [r0, #4]
 80049f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	f8d3 b000 	ldr.w	fp, [r3]
 80049fc:	49ce      	ldr	r1, [pc, #824]	; (8004d38 <d_template_args+0xc00>)
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	3a02      	subs	r2, #2
 8004a02:	4402      	add	r2, r0
 8004a04:	6322      	str	r2, [r4, #48]	; 0x30
 8004a06:	4658      	mov	r0, fp
 8004a08:	f005 fb1e 	bl	800a048 <strcmp>
 8004a0c:	9b01      	ldr	r3, [sp, #4]
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f000 8111 	beq.w	8004c36 <d_template_args+0xafe>
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	f63f aee2 	bhi.w	80047e0 <d_template_args+0x6a8>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <d_template_args+0x8ec>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004691 	.word	0x08004691
 8004a28:	08004ae3 	.word	0x08004ae3
 8004a2c:	08004729 	.word	0x08004729
 8004a30:	080046a5 	.word	0x080046a5
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7fb fe0f 	bl	8000658 <d_compact_number>
 8004a3a:	1c45      	adds	r5, r0, #1
 8004a3c:	f47f af7f 	bne.w	800493e <d_template_args+0x806>
 8004a40:	2000      	movs	r0, #0
 8004a42:	e5c0      	b.n	80045c6 <d_template_args+0x48e>
 8004a44:	4620      	mov	r0, r4
 8004a46:	f003 fb47 	bl	80080d8 <d_expr_primary>
 8004a4a:	e5bc      	b.n	80045c6 <d_template_args+0x48e>
 8004a4c:	2b33      	cmp	r3, #51	; 0x33
 8004a4e:	d1f7      	bne.n	8004a40 <d_template_args+0x908>
 8004a50:	68e3      	ldr	r3, [r4, #12]
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	2a5f      	cmp	r2, #95	; 0x5f
 8004a56:	f000 8171 	beq.w	8004d3c <d_template_args+0xc04>
 8004a5a:	2500      	movs	r5, #0
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f001 fe75 	bl	800674c <d_expression_1>
 8004a62:	4603      	mov	r3, r0
 8004a64:	b12d      	cbz	r5, 8004a72 <d_template_args+0x93a>
 8004a66:	4602      	mov	r2, r0
 8004a68:	2137      	movs	r1, #55	; 0x37
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7fb fc68 	bl	8000340 <d_make_comp>
 8004a70:	4603      	mov	r3, r0
 8004a72:	464a      	mov	r2, r9
 8004a74:	2135      	movs	r1, #53	; 0x35
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7fb fc62 	bl	8000340 <d_make_comp>
 8004a7c:	e5a3      	b.n	80045c6 <d_template_args+0x48e>
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f7fb fe02 	bl	8000688 <d_template_param>
 8004a84:	e59f      	b.n	80045c6 <d_template_args+0x48e>
 8004a86:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8004a8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a8c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004a90:	f8da 5000 	ldr.w	r5, [sl]
 8004a94:	49a8      	ldr	r1, [pc, #672]	; (8004d38 <d_template_args+0xc00>)
 8004a96:	3b02      	subs	r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f005 fad3 	bl	800a048 <strcmp>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	f000 80d8 	beq.w	8004c58 <d_template_args+0xb20>
 8004aa8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d8c7      	bhi.n	8004a40 <d_template_args+0x908>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <d_template_args+0x980>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	0800482f 	.word	0x0800482f
 8004abc:	08004b7b 	.word	0x08004b7b
 8004ac0:	080048bf 	.word	0x080048bf
 8004ac4:	0800483f 	.word	0x0800483f
 8004ac8:	3201      	adds	r2, #1
 8004aca:	60e2      	str	r2, [r4, #12]
 8004acc:	e519      	b.n	8004502 <d_template_args+0x3ca>
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff fb32 	bl	8004138 <d_template_args>
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2104      	movs	r1, #4
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7fb fc30 	bl	8000340 <d_make_comp>
 8004ae0:	e571      	b.n	80045c6 <d_template_args+0x48e>
 8004ae2:	f1bb 0f00 	cmp.w	fp, #0
 8004ae6:	f43f af50 	beq.w	800498a <d_template_args+0x852>
 8004aea:	f89b 3000 	ldrb.w	r3, [fp]
 8004aee:	2b70      	cmp	r3, #112	; 0x70
 8004af0:	d002      	beq.n	8004af8 <d_template_args+0x9c0>
 8004af2:	2b6d      	cmp	r3, #109	; 0x6d
 8004af4:	f47f af49 	bne.w	800498a <d_template_args+0x852>
 8004af8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	f47f af44 	bne.w	800498a <d_template_args+0x852>
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	2a5f      	cmp	r2, #95	; 0x5f
 8004b08:	f000 8107 	beq.w	8004d1a <d_template_args+0xbe2>
 8004b0c:	f04f 0b01 	mov.w	fp, #1
 8004b10:	e73d      	b.n	800498e <d_template_args+0x856>
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7fb fda0 	bl	8000658 <d_compact_number>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f47f ae47 	bne.w	80047ac <d_template_args+0x674>
 8004b1e:	4681      	mov	r9, r0
 8004b20:	e4ba      	b.n	8004498 <d_template_args+0x360>
 8004b22:	3202      	adds	r2, #2
 8004b24:	60e2      	str	r2, [r4, #12]
 8004b26:	4620      	mov	r0, r4
 8004b28:	f001 ffe2 	bl	8006af0 <d_type>
 8004b2c:	4681      	mov	r9, r0
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f002 fc5c 	bl	80073ec <d_unqualified_name>
 8004b34:	68e3      	ldr	r3, [r4, #12]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b49      	cmp	r3, #73	; 0x49
 8004b3a:	4683      	mov	fp, r0
 8004b3c:	d03e      	beq.n	8004bbc <d_template_args+0xa84>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	464a      	mov	r2, r9
 8004b42:	2101      	movs	r1, #1
 8004b44:	4620      	mov	r0, r4
 8004b46:	f7fb fbfb 	bl	8000340 <d_make_comp>
 8004b4a:	4681      	mov	r9, r0
 8004b4c:	e4a4      	b.n	8004498 <d_template_args+0x360>
 8004b4e:	3205      	adds	r2, #5
 8004b50:	60e2      	str	r2, [r4, #12]
 8004b52:	4620      	mov	r0, r4
 8004b54:	f001 ffcc 	bl	8006af0 <d_type>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f002 fc46 	bl	80073ec <d_unqualified_name>
 8004b60:	68e3      	ldr	r3, [r4, #12]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b49      	cmp	r3, #73	; 0x49
 8004b66:	4681      	mov	r9, r0
 8004b68:	f000 80b8 	beq.w	8004cdc <d_template_args+0xba4>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	462a      	mov	r2, r5
 8004b70:	2101      	movs	r1, #1
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7fb fbe4 	bl	8000340 <d_make_comp>
 8004b78:	e525      	b.n	80045c6 <d_template_args+0x48e>
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	f43f af6d 	beq.w	8004a5a <d_template_args+0x922>
 8004b80:	782b      	ldrb	r3, [r5, #0]
 8004b82:	2b70      	cmp	r3, #112	; 0x70
 8004b84:	d002      	beq.n	8004b8c <d_template_args+0xa54>
 8004b86:	2b6d      	cmp	r3, #109	; 0x6d
 8004b88:	f47f af67 	bne.w	8004a5a <d_template_args+0x922>
 8004b8c:	786a      	ldrb	r2, [r5, #1]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	f47f af63 	bne.w	8004a5a <d_template_args+0x922>
 8004b94:	68e3      	ldr	r3, [r4, #12]
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	2a5f      	cmp	r2, #95	; 0x5f
 8004b9a:	f000 8116 	beq.w	8004dca <d_template_args+0xc92>
 8004b9e:	2501      	movs	r5, #1
 8004ba0:	e75c      	b.n	8004a5c <d_template_args+0x924>
 8004ba2:	3202      	adds	r2, #2
 8004ba4:	60e2      	str	r2, [r4, #12]
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f001 fdd0 	bl	800674c <d_expression_1>
 8004bac:	2300      	movs	r3, #0
 8004bae:	4602      	mov	r2, r0
 8004bb0:	2149      	movs	r1, #73	; 0x49
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f7fb fbc4 	bl	8000340 <d_make_comp>
 8004bb8:	4681      	mov	r9, r0
 8004bba:	e46d      	b.n	8004498 <d_template_args+0x360>
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7ff fabb 	bl	8004138 <d_template_args>
 8004bc2:	465a      	mov	r2, fp
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2104      	movs	r1, #4
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7fb fbb9 	bl	8000340 <d_make_comp>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	e7b6      	b.n	8004b40 <d_template_args+0xa08>
 8004bd2:	2145      	movs	r1, #69	; 0x45
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f000 f921 	bl	8004e1c <d_exprlist>
 8004bda:	4683      	mov	fp, r0
 8004bdc:	e5cb      	b.n	8004776 <d_template_args+0x63e>
 8004bde:	4620      	mov	r0, r4
 8004be0:	f001 fdb4 	bl	800674c <d_expression_1>
 8004be4:	4605      	mov	r5, r0
 8004be6:	4620      	mov	r0, r4
 8004be8:	f001 fdb0 	bl	800674c <d_expression_1>
 8004bec:	4682      	mov	sl, r0
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f001 fdac 	bl	800674c <d_expression_1>
 8004bf4:	e64f      	b.n	8004896 <d_template_args+0x75e>
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f001 fda8 	bl	800674c <d_expression_1>
 8004bfc:	9001      	str	r0, [sp, #4]
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f001 fda4 	bl	800674c <d_expression_1>
 8004c04:	4683      	mov	fp, r0
 8004c06:	4620      	mov	r0, r4
 8004c08:	f001 fda0 	bl	800674c <d_expression_1>
 8004c0c:	e576      	b.n	80046fc <d_template_args+0x5c4>
 8004c0e:	2145      	movs	r1, #69	; 0x45
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 f903 	bl	8004e1c <d_exprlist>
 8004c16:	4605      	mov	r5, r0
 8004c18:	e678      	b.n	800490c <d_template_args+0x7d4>
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8004c20:	2a01      	cmp	r2, #1
 8004c22:	d903      	bls.n	8004c2c <d_template_args+0xaf4>
 8004c24:	3b72      	subs	r3, #114	; 0x72
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f63f ae50 	bhi.w	80048cc <d_template_args+0x794>
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f001 ff5f 	bl	8006af0 <d_type>
 8004c32:	4682      	mov	sl, r0
 8004c34:	e64e      	b.n	80048d4 <d_template_args+0x79c>
 8004c36:	4620      	mov	r0, r4
 8004c38:	f001 ff5a 	bl	8006af0 <d_type>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	e6b3      	b.n	80049a8 <d_template_args+0x870>
 8004c40:	3205      	adds	r2, #5
 8004c42:	60e2      	str	r2, [r4, #12]
 8004c44:	4620      	mov	r0, r4
 8004c46:	f001 fd81 	bl	800674c <d_expression_1>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	2149      	movs	r1, #73	; 0x49
 8004c50:	4620      	mov	r0, r4
 8004c52:	f7fb fb75 	bl	8000340 <d_make_comp>
 8004c56:	e4b6      	b.n	80045c6 <d_template_args+0x48e>
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f001 ff49 	bl	8006af0 <d_type>
 8004c5e:	e707      	b.n	8004a70 <d_template_args+0x938>
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8004c66:	2a01      	cmp	r2, #1
 8004c68:	d903      	bls.n	8004c72 <d_template_args+0xb3a>
 8004c6a:	3b72      	subs	r3, #114	; 0x72
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	f63f ad62 	bhi.w	8004736 <d_template_args+0x5fe>
 8004c72:	4620      	mov	r0, r4
 8004c74:	f001 ff3c 	bl	8006af0 <d_type>
 8004c78:	9001      	str	r0, [sp, #4]
 8004c7a:	e560      	b.n	800473e <d_template_args+0x606>
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f001 fd65 	bl	800674c <d_expression_1>
 8004c82:	4683      	mov	fp, r0
 8004c84:	e577      	b.n	8004776 <d_template_args+0x63e>
 8004c86:	2b6f      	cmp	r3, #111	; 0x6f
 8004c88:	d018      	beq.n	8004cbc <d_template_args+0xb84>
 8004c8a:	2b69      	cmp	r3, #105	; 0x69
 8004c8c:	f040 80ba 	bne.w	8004e04 <d_template_args+0xccc>
 8004c90:	7853      	ldrb	r3, [r2, #1]
 8004c92:	2b6c      	cmp	r3, #108	; 0x6c
 8004c94:	f47f ace3 	bne.w	800465e <d_template_args+0x526>
 8004c98:	f04f 0900 	mov.w	r9, #0
 8004c9c:	68e3      	ldr	r3, [r4, #12]
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	60e3      	str	r3, [r4, #12]
 8004ca2:	2145      	movs	r1, #69	; 0x45
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 f8b9 	bl	8004e1c <d_exprlist>
 8004caa:	464a      	mov	r2, r9
 8004cac:	4603      	mov	r3, r0
 8004cae:	2130      	movs	r1, #48	; 0x30
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7fb fb45 	bl	8000340 <d_make_comp>
 8004cb6:	4681      	mov	r9, r0
 8004cb8:	f7ff bbee 	b.w	8004498 <d_template_args+0x360>
 8004cbc:	7853      	ldrb	r3, [r2, #1]
 8004cbe:	2b6e      	cmp	r3, #110	; 0x6e
 8004cc0:	f47f accd 	bne.w	800465e <d_template_args+0x526>
 8004cc4:	3202      	adds	r2, #2
 8004cc6:	60e2      	str	r2, [r4, #12]
 8004cc8:	f7ff bbdd 	b.w	8004486 <d_template_args+0x34e>
 8004ccc:	3301      	adds	r3, #1
 8004cce:	60e3      	str	r3, [r4, #12]
 8004cd0:	2145      	movs	r1, #69	; 0x45
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f8a2 	bl	8004e1c <d_exprlist>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	e665      	b.n	80049a8 <d_template_args+0x870>
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff fa2b 	bl	8004138 <d_template_args>
 8004ce2:	464a      	mov	r2, r9
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7fb fb29 	bl	8000340 <d_make_comp>
 8004cee:	462a      	mov	r2, r5
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f7fb fb23 	bl	8000340 <d_make_comp>
 8004cfa:	e464      	b.n	80045c6 <d_template_args+0x48e>
 8004cfc:	785a      	ldrb	r2, [r3, #1]
 8004cfe:	2a69      	cmp	r2, #105	; 0x69
 8004d00:	f47f ad6e 	bne.w	80047e0 <d_template_args+0x6a8>
 8004d04:	3302      	adds	r3, #2
 8004d06:	60e3      	str	r3, [r4, #12]
 8004d08:	2145      	movs	r1, #69	; 0x45
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f000 f886 	bl	8004e1c <d_exprlist>
 8004d10:	e4f4      	b.n	80046fc <d_template_args+0x5c4>
 8004d12:	3301      	adds	r3, #1
 8004d14:	60e3      	str	r3, [r4, #12]
 8004d16:	2000      	movs	r0, #0
 8004d18:	e4f0      	b.n	80046fc <d_template_args+0x5c4>
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60e3      	str	r3, [r4, #12]
 8004d1e:	e634      	b.n	800498a <d_template_args+0x852>
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7ff fa09 	bl	8004138 <d_template_args>
 8004d26:	462a      	mov	r2, r5
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7fb fb07 	bl	8000340 <d_make_comp>
 8004d32:	4605      	mov	r5, r0
 8004d34:	e5ea      	b.n	800490c <d_template_args+0x7d4>
 8004d36:	bf00      	nop
 8004d38:	080166cc 	.word	0x080166cc
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60e3      	str	r3, [r4, #12]
 8004d40:	2145      	movs	r1, #69	; 0x45
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 f86a 	bl	8004e1c <d_exprlist>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e692      	b.n	8004a72 <d_template_args+0x93a>
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f001 fcfd 	bl	800674c <d_expression_1>
 8004d52:	4605      	mov	r5, r0
 8004d54:	e5da      	b.n	800490c <d_template_args+0x7d4>
 8004d56:	2b74      	cmp	r3, #116	; 0x74
 8004d58:	f47f aa6b 	bne.w	8004232 <d_template_args+0xfa>
 8004d5c:	7893      	ldrb	r3, [r2, #2]
 8004d5e:	2b6c      	cmp	r3, #108	; 0x6c
 8004d60:	f47f aa67 	bne.w	8004232 <d_template_args+0xfa>
 8004d64:	4620      	mov	r0, r4
 8004d66:	f001 fec3 	bl	8006af0 <d_type>
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	f7ff bbd7 	b.w	800451e <d_template_args+0x3e6>
 8004d70:	2b6f      	cmp	r3, #111	; 0x6f
 8004d72:	d014      	beq.n	8004d9e <d_template_args+0xc66>
 8004d74:	2b69      	cmp	r3, #105	; 0x69
 8004d76:	d119      	bne.n	8004dac <d_template_args+0xc74>
 8004d78:	7913      	ldrb	r3, [r2, #4]
 8004d7a:	2b6c      	cmp	r3, #108	; 0x6c
 8004d7c:	f47f ad3e 	bne.w	80047fc <d_template_args+0x6c4>
 8004d80:	2500      	movs	r5, #0
 8004d82:	68e3      	ldr	r3, [r4, #12]
 8004d84:	3302      	adds	r3, #2
 8004d86:	60e3      	str	r3, [r4, #12]
 8004d88:	2145      	movs	r1, #69	; 0x45
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f000 f846 	bl	8004e1c <d_exprlist>
 8004d90:	462a      	mov	r2, r5
 8004d92:	4603      	mov	r3, r0
 8004d94:	2130      	movs	r1, #48	; 0x30
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7fb fad2 	bl	8000340 <d_make_comp>
 8004d9c:	e413      	b.n	80045c6 <d_template_args+0x48e>
 8004d9e:	7913      	ldrb	r3, [r2, #4]
 8004da0:	2b6e      	cmp	r3, #110	; 0x6e
 8004da2:	f47f ad2b 	bne.w	80047fc <d_template_args+0x6c4>
 8004da6:	3205      	adds	r2, #5
 8004da8:	60e2      	str	r2, [r4, #12]
 8004daa:	e400      	b.n	80045ae <d_template_args+0x476>
 8004dac:	2b74      	cmp	r3, #116	; 0x74
 8004dae:	f47f ad25 	bne.w	80047fc <d_template_args+0x6c4>
 8004db2:	7913      	ldrb	r3, [r2, #4]
 8004db4:	2b6c      	cmp	r3, #108	; 0x6c
 8004db6:	f47f ad21 	bne.w	80047fc <d_template_args+0x6c4>
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f001 fe98 	bl	8006af0 <d_type>
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	e7de      	b.n	8004d82 <d_template_args+0xc4a>
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7ff bbfe 	b.w	80045c6 <d_template_args+0x48e>
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60e3      	str	r3, [r4, #12]
 8004dce:	e644      	b.n	8004a5a <d_template_args+0x922>
 8004dd0:	785a      	ldrb	r2, [r3, #1]
 8004dd2:	2a69      	cmp	r2, #105	; 0x69
 8004dd4:	f47f ae34 	bne.w	8004a40 <d_template_args+0x908>
 8004dd8:	3302      	adds	r3, #2
 8004dda:	60e3      	str	r3, [r4, #12]
 8004ddc:	2145      	movs	r1, #69	; 0x45
 8004dde:	4620      	mov	r0, r4
 8004de0:	f000 f81c 	bl	8004e1c <d_exprlist>
 8004de4:	e557      	b.n	8004896 <d_template_args+0x75e>
 8004de6:	3301      	adds	r3, #1
 8004de8:	60e3      	str	r3, [r4, #12]
 8004dea:	2000      	movs	r0, #0
 8004dec:	e553      	b.n	8004896 <d_template_args+0x75e>
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff f9a2 	bl	8004138 <d_template_args>
 8004df4:	465a      	mov	r2, fp
 8004df6:	4603      	mov	r3, r0
 8004df8:	2104      	movs	r1, #4
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7fb faa0 	bl	8000340 <d_make_comp>
 8004e00:	4683      	mov	fp, r0
 8004e02:	e4b8      	b.n	8004776 <d_template_args+0x63e>
 8004e04:	2b74      	cmp	r3, #116	; 0x74
 8004e06:	f47f ac2a 	bne.w	800465e <d_template_args+0x526>
 8004e0a:	7853      	ldrb	r3, [r2, #1]
 8004e0c:	2b6c      	cmp	r3, #108	; 0x6c
 8004e0e:	f47f ac26 	bne.w	800465e <d_template_args+0x526>
 8004e12:	4620      	mov	r0, r4
 8004e14:	f001 fe6c 	bl	8006af0 <d_type>
 8004e18:	4681      	mov	r9, r0
 8004e1a:	e73f      	b.n	8004c9c <d_template_args+0xb64>

08004e1c <d_exprlist>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	68c2      	ldr	r2, [r0, #12]
 8004e22:	7815      	ldrb	r5, [r2, #0]
 8004e24:	b085      	sub	sp, #20
 8004e26:	2300      	movs	r3, #0
 8004e28:	428d      	cmp	r5, r1
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	f000 8261 	beq.w	80052f4 <d_exprlist+0x4d8>
 8004e32:	460f      	mov	r7, r1
 8004e34:	ae03      	add	r6, sp, #12
 8004e36:	e022      	b.n	8004e7e <d_exprlist+0x62>
 8004e38:	2b66      	cmp	r3, #102	; 0x66
 8004e3a:	d04b      	beq.n	8004ed4 <d_exprlist+0xb8>
 8004e3c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e40:	2909      	cmp	r1, #9
 8004e42:	f201 844e 	bhi.w	80066e2 <d_exprlist+0x18c6>
 8004e46:	4620      	mov	r0, r4
 8004e48:	f002 fad0 	bl	80073ec <d_unqualified_name>
 8004e4c:	4680      	mov	r8, r0
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d064      	beq.n	8004f1c <d_exprlist+0x100>
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b49      	cmp	r3, #73	; 0x49
 8004e58:	f000 808b 	beq.w	8004f72 <d_exprlist+0x156>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6365      	str	r5, [r4, #52]	; 0x34
 8004e60:	2300      	movs	r3, #0
 8004e62:	212e      	movs	r1, #46	; 0x2e
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7fb fa6b 	bl	8000340 <d_make_comp>
 8004e6a:	6030      	str	r0, [r6, #0]
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d056      	beq.n	8004f1e <d_exprlist+0x102>
 8004e70:	68e2      	ldr	r2, [r4, #12]
 8004e72:	7813      	ldrb	r3, [r2, #0]
 8004e74:	42bb      	cmp	r3, r7
 8004e76:	f100 0608 	add.w	r6, r0, #8
 8004e7a:	f000 8179 	beq.w	8005170 <d_exprlist+0x354>
 8004e7e:	f04f 0801 	mov.w	r8, #1
 8004e82:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004e84:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 8004e88:	7813      	ldrb	r3, [r2, #0]
 8004e8a:	2b4c      	cmp	r3, #76	; 0x4c
 8004e8c:	d04b      	beq.n	8004f26 <d_exprlist+0x10a>
 8004e8e:	2b54      	cmp	r3, #84	; 0x54
 8004e90:	d051      	beq.n	8004f36 <d_exprlist+0x11a>
 8004e92:	2b73      	cmp	r3, #115	; 0x73
 8004e94:	d1d0      	bne.n	8004e38 <d_exprlist+0x1c>
 8004e96:	7853      	ldrb	r3, [r2, #1]
 8004e98:	2b72      	cmp	r3, #114	; 0x72
 8004e9a:	f000 8152 	beq.w	8005142 <d_exprlist+0x326>
 8004e9e:	2b70      	cmp	r3, #112	; 0x70
 8004ea0:	f000 816c 	beq.w	800517c <d_exprlist+0x360>
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f002 f9e1 	bl	800726c <d_operator_name>
 8004eaa:	4680      	mov	r8, r0
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d035      	beq.n	8004f1c <d_exprlist+0x100>
 8004eb0:	f890 a000 	ldrb.w	sl, [r0]
 8004eb4:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8004eb8:	d042      	beq.n	8004f40 <d_exprlist+0x124>
 8004eba:	f1ba 0f32 	cmp.w	sl, #50	; 0x32
 8004ebe:	d129      	bne.n	8004f14 <d_exprlist+0xf8>
 8004ec0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d829      	bhi.n	8004f1c <d_exprlist+0x100>
 8004ec8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ecc:	01080062 	.word	0x01080062
 8004ed0:	006a00ac 	.word	0x006a00ac
 8004ed4:	7853      	ldrb	r3, [r2, #1]
 8004ed6:	2b70      	cmp	r3, #112	; 0x70
 8004ed8:	d1e4      	bne.n	8004ea4 <d_exprlist+0x88>
 8004eda:	1c93      	adds	r3, r2, #2
 8004edc:	60e3      	str	r3, [r4, #12]
 8004ede:	7893      	ldrb	r3, [r2, #2]
 8004ee0:	2b54      	cmp	r3, #84	; 0x54
 8004ee2:	d051      	beq.n	8004f88 <d_exprlist+0x16c>
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7fb fbb7 	bl	8000658 <d_compact_number>
 8004eea:	3001      	adds	r0, #1
 8004eec:	d016      	beq.n	8004f1c <d_exprlist+0x100>
 8004eee:	6963      	ldr	r3, [r4, #20]
 8004ef0:	69a2      	ldr	r2, [r4, #24]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	da12      	bge.n	8004f1c <d_exprlist+0x100>
 8004ef6:	6922      	ldr	r2, [r4, #16]
 8004ef8:	1c59      	adds	r1, r3, #1
 8004efa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004efe:	6161      	str	r1, [r4, #20]
 8004f00:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 8004f04:	d00a      	beq.n	8004f1c <d_exprlist+0x100>
 8004f06:	f04f 0e06 	mov.w	lr, #6
 8004f0a:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 8004f0e:	460a      	mov	r2, r1
 8004f10:	6048      	str	r0, [r1, #4]
 8004f12:	e7a4      	b.n	8004e5e <d_exprlist+0x42>
 8004f14:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 8004f18:	f000 8158 	beq.w	80051cc <d_exprlist+0x3b0>
 8004f1c:	6365      	str	r5, [r4, #52]	; 0x34
 8004f1e:	2000      	movs	r0, #0
 8004f20:	b005      	add	sp, #20
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	4620      	mov	r0, r4
 8004f28:	f003 f8d6 	bl	80080d8 <d_expr_primary>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6365      	str	r5, [r4, #52]	; 0x34
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d195      	bne.n	8004e60 <d_exprlist+0x44>
 8004f34:	e7f3      	b.n	8004f1e <d_exprlist+0x102>
 8004f36:	4620      	mov	r0, r4
 8004f38:	f7fb fba6 	bl	8000688 <d_template_param>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	e7f6      	b.n	8004f2e <d_exprlist+0x112>
 8004f40:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8004f44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f46:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004f4a:	f8db 9000 	ldr.w	r9, [fp]
 8004f4e:	49b0      	ldr	r1, [pc, #704]	; (8005210 <d_exprlist+0x3f4>)
 8004f50:	3b02      	subs	r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	6322      	str	r2, [r4, #48]	; 0x30
 8004f56:	4648      	mov	r0, r9
 8004f58:	f005 f876 	bl	800a048 <strcmp>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f000 8152 	beq.w	8005206 <d_exprlist+0x3ea>
 8004f62:	f8db 300c 	ldr.w	r3, [fp, #12]
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d8d8      	bhi.n	8004f1c <d_exprlist+0x100>
 8004f6a:	e8df f003 	tbb	[pc, r3]
 8004f6e:	ad11      	.short	0xad11
 8004f70:	1b5d      	.short	0x1b5d
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7ff f8e0 	bl	8004138 <d_template_args>
 8004f78:	4642      	mov	r2, r8
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f7fb f9de 	bl	8000340 <d_make_comp>
 8004f84:	4602      	mov	r2, r0
 8004f86:	e7d2      	b.n	8004f2e <d_exprlist+0x112>
 8004f88:	3203      	adds	r2, #3
 8004f8a:	60e2      	str	r2, [r4, #12]
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e7ae      	b.n	8004eee <d_exprlist+0xd2>
 8004f90:	4642      	mov	r2, r8
 8004f92:	2300      	movs	r3, #0
 8004f94:	2134      	movs	r1, #52	; 0x34
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7fb f9d2 	bl	8000340 <d_make_comp>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	e7c6      	b.n	8004f2e <d_exprlist+0x112>
 8004fa0:	f04f 0900 	mov.w	r9, #0
 8004fa4:	499b      	ldr	r1, [pc, #620]	; (8005214 <d_exprlist+0x3f8>)
 8004fa6:	4648      	mov	r0, r9
 8004fa8:	f005 f84e 	bl	800a048 <strcmp>
 8004fac:	4683      	mov	fp, r0
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f000 8138 	beq.w	8005224 <d_exprlist+0x408>
 8004fb4:	f899 3000 	ldrb.w	r3, [r9]
 8004fb8:	2b6e      	cmp	r3, #110	; 0x6e
 8004fba:	d1af      	bne.n	8004f1c <d_exprlist+0x100>
 8004fbc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004fc0:	2b77      	cmp	r3, #119	; 0x77
 8004fc2:	d001      	beq.n	8004fc8 <d_exprlist+0x1ac>
 8004fc4:	2b61      	cmp	r3, #97	; 0x61
 8004fc6:	d1a9      	bne.n	8004f1c <d_exprlist+0x100>
 8004fc8:	215f      	movs	r1, #95	; 0x5f
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f7ff ff26 	bl	8004e1c <d_exprlist>
 8004fd0:	4682      	mov	sl, r0
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f001 fd8c 	bl	8006af0 <d_type>
 8004fd8:	68e3      	ldr	r3, [r4, #12]
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	2a45      	cmp	r2, #69	; 0x45
 8004fde:	4681      	mov	r9, r0
 8004fe0:	f000 81cf 	beq.w	8005382 <d_exprlist+0x566>
 8004fe4:	2a70      	cmp	r2, #112	; 0x70
 8004fe6:	f000 84c9 	beq.w	800597c <d_exprlist+0xb60>
 8004fea:	2a69      	cmp	r2, #105	; 0x69
 8004fec:	d196      	bne.n	8004f1c <d_exprlist+0x100>
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b6c      	cmp	r3, #108	; 0x6c
 8004ff2:	d193      	bne.n	8004f1c <d_exprlist+0x100>
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f001 fba9 	bl	800674c <d_expression_1>
 8004ffa:	4683      	mov	fp, r0
 8004ffc:	465b      	mov	r3, fp
 8004ffe:	464a      	mov	r2, r9
 8005000:	213a      	movs	r1, #58	; 0x3a
 8005002:	4620      	mov	r0, r4
 8005004:	f7fb f99c 	bl	8000340 <d_make_comp>
 8005008:	4652      	mov	r2, sl
 800500a:	4603      	mov	r3, r0
 800500c:	2139      	movs	r1, #57	; 0x39
 800500e:	4620      	mov	r0, r4
 8005010:	f7fb f996 	bl	8000340 <d_make_comp>
 8005014:	4642      	mov	r2, r8
 8005016:	4603      	mov	r3, r0
 8005018:	2138      	movs	r1, #56	; 0x38
 800501a:	4620      	mov	r0, r4
 800501c:	f7fb f990 	bl	8000340 <d_make_comp>
 8005020:	4602      	mov	r2, r0
 8005022:	e784      	b.n	8004f2e <d_exprlist+0x112>
 8005024:	f04f 0900 	mov.w	r9, #0
 8005028:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	785a      	ldrb	r2, [r3, #1]
 8005030:	2a63      	cmp	r2, #99	; 0x63
 8005032:	f000 8146 	beq.w	80052c2 <d_exprlist+0x4a6>
 8005036:	68e1      	ldr	r1, [r4, #12]
 8005038:	780b      	ldrb	r3, [r1, #0]
 800503a:	2b4c      	cmp	r3, #76	; 0x4c
 800503c:	f000 8619 	beq.w	8005c72 <d_exprlist+0xe56>
 8005040:	2b54      	cmp	r3, #84	; 0x54
 8005042:	f000 81fd 	beq.w	8005440 <d_exprlist+0x624>
 8005046:	2b73      	cmp	r3, #115	; 0x73
 8005048:	f000 8437 	beq.w	80058ba <d_exprlist+0xa9e>
 800504c:	2b66      	cmp	r3, #102	; 0x66
 800504e:	f000 8475 	beq.w	800593c <d_exprlist+0xb20>
 8005052:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005056:	2a09      	cmp	r2, #9
 8005058:	f200 81bf 	bhi.w	80053da <d_exprlist+0x5be>
 800505c:	4620      	mov	r0, r4
 800505e:	f002 f9c5 	bl	80073ec <d_unqualified_name>
 8005062:	4682      	mov	sl, r0
 8005064:	2800      	cmp	r0, #0
 8005066:	f000 84a8 	beq.w	80059ba <d_exprlist+0xb9e>
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b49      	cmp	r3, #73	; 0x49
 8005070:	f000 8708 	beq.w	8005e84 <d_exprlist+0x1068>
 8005074:	4968      	ldr	r1, [pc, #416]	; (8005218 <d_exprlist+0x3fc>)
 8005076:	4648      	mov	r0, r9
 8005078:	f004 ffe6 	bl	800a048 <strcmp>
 800507c:	2800      	cmp	r0, #0
 800507e:	f000 811a 	beq.w	80052b6 <d_exprlist+0x49a>
 8005082:	4966      	ldr	r1, [pc, #408]	; (800521c <d_exprlist+0x400>)
 8005084:	4648      	mov	r0, r9
 8005086:	f004 ffdf 	bl	800a048 <strcmp>
 800508a:	b130      	cbz	r0, 800509a <d_exprlist+0x27e>
 800508c:	4648      	mov	r0, r9
 800508e:	4964      	ldr	r1, [pc, #400]	; (8005220 <d_exprlist+0x404>)
 8005090:	f004 ffda 	bl	800a048 <strcmp>
 8005094:	2800      	cmp	r0, #0
 8005096:	f040 816f 	bne.w	8005378 <d_exprlist+0x55c>
 800509a:	4620      	mov	r0, r4
 800509c:	f002 f9a6 	bl	80073ec <d_unqualified_name>
 80050a0:	68e3      	ldr	r3, [r4, #12]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b49      	cmp	r3, #73	; 0x49
 80050a6:	4681      	mov	r9, r0
 80050a8:	f000 843c 	beq.w	8005924 <d_exprlist+0xb08>
 80050ac:	464b      	mov	r3, r9
 80050ae:	4652      	mov	r2, sl
 80050b0:	2137      	movs	r1, #55	; 0x37
 80050b2:	4620      	mov	r0, r4
 80050b4:	f7fb f944 	bl	8000340 <d_make_comp>
 80050b8:	4642      	mov	r2, r8
 80050ba:	4603      	mov	r3, r0
 80050bc:	2136      	movs	r1, #54	; 0x36
 80050be:	4620      	mov	r0, r4
 80050c0:	f7fb f93e 	bl	8000340 <d_make_comp>
 80050c4:	4602      	mov	r2, r0
 80050c6:	e732      	b.n	8004f2e <d_exprlist+0x112>
 80050c8:	f1b9 0f00 	cmp.w	r9, #0
 80050cc:	d006      	beq.n	80050dc <d_exprlist+0x2c0>
 80050ce:	f899 3000 	ldrb.w	r3, [r9]
 80050d2:	2b70      	cmp	r3, #112	; 0x70
 80050d4:	f000 8081 	beq.w	80051da <d_exprlist+0x3be>
 80050d8:	2b6d      	cmp	r3, #109	; 0x6d
 80050da:	d07e      	beq.n	80051da <d_exprlist+0x3be>
 80050dc:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 80050e0:	68e1      	ldr	r1, [r4, #12]
 80050e2:	d074      	beq.n	80051ce <d_exprlist+0x3b2>
 80050e4:	780b      	ldrb	r3, [r1, #0]
 80050e6:	f04f 0a00 	mov.w	sl, #0
 80050ea:	2b4c      	cmp	r3, #76	; 0x4c
 80050ec:	f000 8453 	beq.w	8005996 <d_exprlist+0xb7a>
 80050f0:	2b54      	cmp	r3, #84	; 0x54
 80050f2:	f000 8466 	beq.w	80059c2 <d_exprlist+0xba6>
 80050f6:	2b73      	cmp	r3, #115	; 0x73
 80050f8:	f000 8105 	beq.w	8005306 <d_exprlist+0x4ea>
 80050fc:	2b66      	cmp	r3, #102	; 0x66
 80050fe:	f000 811c 	beq.w	800533a <d_exprlist+0x51e>
 8005102:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005106:	2a09      	cmp	r2, #9
 8005108:	f201 82ac 	bhi.w	8006664 <d_exprlist+0x1848>
 800510c:	4620      	mov	r0, r4
 800510e:	f002 f96d 	bl	80073ec <d_unqualified_name>
 8005112:	4681      	mov	r9, r0
 8005114:	b120      	cbz	r0, 8005120 <d_exprlist+0x304>
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b49      	cmp	r3, #73	; 0x49
 800511c:	f000 8185 	beq.w	800542a <d_exprlist+0x60e>
 8005120:	f1ba 0f00 	cmp.w	sl, #0
 8005124:	d06d      	beq.n	8005202 <d_exprlist+0x3e6>
 8005126:	464b      	mov	r3, r9
 8005128:	464a      	mov	r2, r9
 800512a:	2137      	movs	r1, #55	; 0x37
 800512c:	4620      	mov	r0, r4
 800512e:	f7fb f907 	bl	8000340 <d_make_comp>
 8005132:	4603      	mov	r3, r0
 8005134:	4642      	mov	r2, r8
 8005136:	2135      	movs	r1, #53	; 0x35
 8005138:	4620      	mov	r0, r4
 800513a:	f7fb f901 	bl	8000340 <d_make_comp>
 800513e:	4602      	mov	r2, r0
 8005140:	e6f5      	b.n	8004f2e <d_exprlist+0x112>
 8005142:	3202      	adds	r2, #2
 8005144:	60e2      	str	r2, [r4, #12]
 8005146:	4620      	mov	r0, r4
 8005148:	f001 fcd2 	bl	8006af0 <d_type>
 800514c:	4681      	mov	r9, r0
 800514e:	4620      	mov	r0, r4
 8005150:	f002 f94c 	bl	80073ec <d_unqualified_name>
 8005154:	68e3      	ldr	r3, [r4, #12]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b49      	cmp	r3, #73	; 0x49
 800515a:	4682      	mov	sl, r0
 800515c:	f000 80bf 	beq.w	80052de <d_exprlist+0x4c2>
 8005160:	4603      	mov	r3, r0
 8005162:	464a      	mov	r2, r9
 8005164:	4641      	mov	r1, r8
 8005166:	4620      	mov	r0, r4
 8005168:	f7fb f8ea 	bl	8000340 <d_make_comp>
 800516c:	4602      	mov	r2, r0
 800516e:	e6de      	b.n	8004f2e <d_exprlist+0x112>
 8005170:	9803      	ldr	r0, [sp, #12]
 8005172:	3201      	adds	r2, #1
 8005174:	60e2      	str	r2, [r4, #12]
 8005176:	b005      	add	sp, #20
 8005178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517c:	1c91      	adds	r1, r2, #2
 800517e:	60e1      	str	r1, [r4, #12]
 8005180:	7893      	ldrb	r3, [r2, #2]
 8005182:	2b4c      	cmp	r3, #76	; 0x4c
 8005184:	f000 814c 	beq.w	8005420 <d_exprlist+0x604>
 8005188:	2b54      	cmp	r3, #84	; 0x54
 800518a:	f000 8578 	beq.w	8005c7e <d_exprlist+0xe62>
 800518e:	2b73      	cmp	r3, #115	; 0x73
 8005190:	f000 82e7 	beq.w	8005762 <d_exprlist+0x946>
 8005194:	2b66      	cmp	r3, #102	; 0x66
 8005196:	f000 83a5 	beq.w	80058e4 <d_exprlist+0xac8>
 800519a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800519e:	2809      	cmp	r0, #9
 80051a0:	f201 8206 	bhi.w	80065b0 <d_exprlist+0x1794>
 80051a4:	4620      	mov	r0, r4
 80051a6:	f002 f921 	bl	80073ec <d_unqualified_name>
 80051aa:	4680      	mov	r8, r0
 80051ac:	2800      	cmp	r0, #0
 80051ae:	f000 83fd 	beq.w	80059ac <d_exprlist+0xb90>
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b49      	cmp	r3, #73	; 0x49
 80051b8:	f000 8633 	beq.w	8005e22 <d_exprlist+0x1006>
 80051bc:	4602      	mov	r2, r0
 80051be:	2300      	movs	r3, #0
 80051c0:	2149      	movs	r1, #73	; 0x49
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7fb f8bc 	bl	8000340 <d_make_comp>
 80051c8:	4602      	mov	r2, r0
 80051ca:	e6b0      	b.n	8004f2e <d_exprlist+0x112>
 80051cc:	68e1      	ldr	r1, [r4, #12]
 80051ce:	780b      	ldrb	r3, [r1, #0]
 80051d0:	2b5f      	cmp	r3, #95	; 0x5f
 80051d2:	d00f      	beq.n	80051f4 <d_exprlist+0x3d8>
 80051d4:	f04f 0a00 	mov.w	sl, #0
 80051d8:	e787      	b.n	80050ea <d_exprlist+0x2ce>
 80051da:	f899 2001 	ldrb.w	r2, [r9, #1]
 80051de:	429a      	cmp	r2, r3
 80051e0:	f47f af7c 	bne.w	80050dc <d_exprlist+0x2c0>
 80051e4:	68e1      	ldr	r1, [r4, #12]
 80051e6:	780b      	ldrb	r3, [r1, #0]
 80051e8:	2b5f      	cmp	r3, #95	; 0x5f
 80051ea:	f000 85b2 	beq.w	8005d52 <d_exprlist+0xf36>
 80051ee:	f04f 0a01 	mov.w	sl, #1
 80051f2:	e77a      	b.n	80050ea <d_exprlist+0x2ce>
 80051f4:	3101      	adds	r1, #1
 80051f6:	60e1      	str	r1, [r4, #12]
 80051f8:	4620      	mov	r0, r4
 80051fa:	2145      	movs	r1, #69	; 0x45
 80051fc:	f7ff fe0e 	bl	8004e1c <d_exprlist>
 8005200:	4681      	mov	r9, r0
 8005202:	464b      	mov	r3, r9
 8005204:	e796      	b.n	8005134 <d_exprlist+0x318>
 8005206:	4620      	mov	r0, r4
 8005208:	f001 fc72 	bl	8006af0 <d_type>
 800520c:	4603      	mov	r3, r0
 800520e:	e791      	b.n	8005134 <d_exprlist+0x318>
 8005210:	080166cc 	.word	0x080166cc
 8005214:	080163c4 	.word	0x080163c4
 8005218:	080163bc 	.word	0x080163bc
 800521c:	080164d8 	.word	0x080164d8
 8005220:	080164dc 	.word	0x080164dc
 8005224:	4620      	mov	r0, r4
 8005226:	f001 fa91 	bl	800674c <d_expression_1>
 800522a:	4682      	mov	sl, r0
 800522c:	68e0      	ldr	r0, [r4, #12]
 800522e:	7803      	ldrb	r3, [r0, #0]
 8005230:	2b4c      	cmp	r3, #76	; 0x4c
 8005232:	f000 8611 	beq.w	8005e58 <d_exprlist+0x103c>
 8005236:	2b54      	cmp	r3, #84	; 0x54
 8005238:	f000 8630 	beq.w	8005e9c <d_exprlist+0x1080>
 800523c:	2b73      	cmp	r3, #115	; 0x73
 800523e:	f000 84a1 	beq.w	8005b84 <d_exprlist+0xd68>
 8005242:	2b66      	cmp	r3, #102	; 0x66
 8005244:	f000 80ac 	beq.w	80053a0 <d_exprlist+0x584>
 8005248:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800524c:	2909      	cmp	r1, #9
 800524e:	f201 8194 	bhi.w	800657a <d_exprlist+0x175e>
 8005252:	4620      	mov	r0, r4
 8005254:	f002 f8ca 	bl	80073ec <d_unqualified_name>
 8005258:	68e2      	ldr	r2, [r4, #12]
 800525a:	4681      	mov	r9, r0
 800525c:	7813      	ldrb	r3, [r2, #0]
 800525e:	b110      	cbz	r0, 8005266 <d_exprlist+0x44a>
 8005260:	2b49      	cmp	r3, #73	; 0x49
 8005262:	f000 86ef 	beq.w	8006044 <d_exprlist+0x1228>
 8005266:	2b4c      	cmp	r3, #76	; 0x4c
 8005268:	f000 85e7 	beq.w	8005e3a <d_exprlist+0x101e>
 800526c:	2b54      	cmp	r3, #84	; 0x54
 800526e:	f000 8603 	beq.w	8005e78 <d_exprlist+0x105c>
 8005272:	2b73      	cmp	r3, #115	; 0x73
 8005274:	f000 83cc 	beq.w	8005a10 <d_exprlist+0xbf4>
 8005278:	2b66      	cmp	r3, #102	; 0x66
 800527a:	f000 8493 	beq.w	8005ba4 <d_exprlist+0xd88>
 800527e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005282:	2909      	cmp	r1, #9
 8005284:	f201 8129 	bhi.w	80064da <d_exprlist+0x16be>
 8005288:	4620      	mov	r0, r4
 800528a:	f002 f8af 	bl	80073ec <d_unqualified_name>
 800528e:	4683      	mov	fp, r0
 8005290:	2800      	cmp	r0, #0
 8005292:	f43f aeb3 	beq.w	8004ffc <d_exprlist+0x1e0>
 8005296:	68e3      	ldr	r3, [r4, #12]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b49      	cmp	r3, #73	; 0x49
 800529c:	f47f aeae 	bne.w	8004ffc <d_exprlist+0x1e0>
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7fe ff49 	bl	8004138 <d_template_args>
 80052a6:	465a      	mov	r2, fp
 80052a8:	4603      	mov	r3, r0
 80052aa:	2104      	movs	r1, #4
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7fb f847 	bl	8000340 <d_make_comp>
 80052b2:	4683      	mov	fp, r0
 80052b4:	e6a2      	b.n	8004ffc <d_exprlist+0x1e0>
 80052b6:	2145      	movs	r1, #69	; 0x45
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff fdaf 	bl	8004e1c <d_exprlist>
 80052be:	4681      	mov	r9, r0
 80052c0:	e6f4      	b.n	80050ac <d_exprlist+0x290>
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80052c8:	2a01      	cmp	r2, #1
 80052ca:	d903      	bls.n	80052d4 <d_exprlist+0x4b8>
 80052cc:	3b72      	subs	r3, #114	; 0x72
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f63f aeb1 	bhi.w	8005036 <d_exprlist+0x21a>
 80052d4:	4620      	mov	r0, r4
 80052d6:	f001 fc0b 	bl	8006af0 <d_type>
 80052da:	4682      	mov	sl, r0
 80052dc:	e6ca      	b.n	8005074 <d_exprlist+0x258>
 80052de:	4620      	mov	r0, r4
 80052e0:	f7fe ff2a 	bl	8004138 <d_template_args>
 80052e4:	4652      	mov	r2, sl
 80052e6:	4603      	mov	r3, r0
 80052e8:	2104      	movs	r1, #4
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7fb f828 	bl	8000340 <d_make_comp>
 80052f0:	4603      	mov	r3, r0
 80052f2:	e736      	b.n	8005162 <d_exprlist+0x346>
 80052f4:	3201      	adds	r2, #1
 80052f6:	60c2      	str	r2, [r0, #12]
 80052f8:	212e      	movs	r1, #46	; 0x2e
 80052fa:	461a      	mov	r2, r3
 80052fc:	b005      	add	sp, #20
 80052fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005302:	f7fb b81d 	b.w	8000340 <d_make_comp>
 8005306:	784b      	ldrb	r3, [r1, #1]
 8005308:	2b72      	cmp	r3, #114	; 0x72
 800530a:	f000 8540 	beq.w	8005d8e <d_exprlist+0xf72>
 800530e:	2b70      	cmp	r3, #112	; 0x70
 8005310:	f000 860e 	beq.w	8005f30 <d_exprlist+0x1114>
 8005314:	4620      	mov	r0, r4
 8005316:	f001 ffa9 	bl	800726c <d_operator_name>
 800531a:	4681      	mov	r9, r0
 800531c:	2800      	cmp	r0, #0
 800531e:	f43f aeff 	beq.w	8005120 <d_exprlist+0x304>
 8005322:	7803      	ldrb	r3, [r0, #0]
 8005324:	2b31      	cmp	r3, #49	; 0x31
 8005326:	f000 8352 	beq.w	80059ce <d_exprlist+0xbb2>
 800532a:	2b32      	cmp	r3, #50	; 0x32
 800532c:	d02e      	beq.n	800538c <d_exprlist+0x570>
 800532e:	2b33      	cmp	r3, #51	; 0x33
 8005330:	f000 8646 	beq.w	8005fc0 <d_exprlist+0x11a4>
 8005334:	f04f 0900 	mov.w	r9, #0
 8005338:	e6f2      	b.n	8005120 <d_exprlist+0x304>
 800533a:	784b      	ldrb	r3, [r1, #1]
 800533c:	2b70      	cmp	r3, #112	; 0x70
 800533e:	d1e9      	bne.n	8005314 <d_exprlist+0x4f8>
 8005340:	1c8b      	adds	r3, r1, #2
 8005342:	60e3      	str	r3, [r4, #12]
 8005344:	788b      	ldrb	r3, [r1, #2]
 8005346:	2b54      	cmp	r3, #84	; 0x54
 8005348:	f040 857d 	bne.w	8005e46 <d_exprlist+0x102a>
 800534c:	3103      	adds	r1, #3
 800534e:	60e1      	str	r1, [r4, #12]
 8005350:	2000      	movs	r0, #0
 8005352:	6963      	ldr	r3, [r4, #20]
 8005354:	69a2      	ldr	r2, [r4, #24]
 8005356:	4293      	cmp	r3, r2
 8005358:	daec      	bge.n	8005334 <d_exprlist+0x518>
 800535a:	6922      	ldr	r2, [r4, #16]
 800535c:	1c59      	adds	r1, r3, #1
 800535e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005362:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 8005366:	6161      	str	r1, [r4, #20]
 8005368:	f43f aeda 	beq.w	8005120 <d_exprlist+0x304>
 800536c:	2106      	movs	r1, #6
 800536e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8005372:	f8c9 0004 	str.w	r0, [r9, #4]
 8005376:	e6d3      	b.n	8005120 <d_exprlist+0x304>
 8005378:	4620      	mov	r0, r4
 800537a:	f001 f9e7 	bl	800674c <d_expression_1>
 800537e:	4681      	mov	r9, r0
 8005380:	e694      	b.n	80050ac <d_exprlist+0x290>
 8005382:	3301      	adds	r3, #1
 8005384:	60e3      	str	r3, [r4, #12]
 8005386:	f04f 0b00 	mov.w	fp, #0
 800538a:	e637      	b.n	8004ffc <d_exprlist+0x1e0>
 800538c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d8cf      	bhi.n	8005334 <d_exprlist+0x518>
 8005394:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005398:	04c60059 	.word	0x04c60059
 800539c:	006100a5 	.word	0x006100a5
 80053a0:	7843      	ldrb	r3, [r0, #1]
 80053a2:	2b70      	cmp	r3, #112	; 0x70
 80053a4:	f000 85d2 	beq.w	8005f4c <d_exprlist+0x1130>
 80053a8:	4620      	mov	r0, r4
 80053aa:	f001 ff5f 	bl	800726c <d_operator_name>
 80053ae:	4681      	mov	r9, r0
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f000 8157 	beq.w	8005664 <d_exprlist+0x848>
 80053b6:	7803      	ldrb	r3, [r0, #0]
 80053b8:	2b31      	cmp	r3, #49	; 0x31
 80053ba:	f000 8599 	beq.w	8005ef0 <d_exprlist+0x10d4>
 80053be:	2b32      	cmp	r3, #50	; 0x32
 80053c0:	f040 84cb 	bne.w	8005d5a <d_exprlist+0xf3e>
 80053c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	f200 8483 	bhi.w	8005cd4 <d_exprlist+0xeb8>
 80053ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80053d2:	0142      	.short	0x0142
 80053d4:	018c04cb 	.word	0x018c04cb
 80053d8:	014c      	.short	0x014c
 80053da:	2b6f      	cmp	r3, #111	; 0x6f
 80053dc:	f000 8441 	beq.w	8005c62 <d_exprlist+0xe46>
 80053e0:	2b69      	cmp	r3, #105	; 0x69
 80053e2:	f041 8171 	bne.w	80066c8 <d_exprlist+0x18ac>
 80053e6:	784b      	ldrb	r3, [r1, #1]
 80053e8:	2b6c      	cmp	r3, #108	; 0x6c
 80053ea:	f001 80b5 	beq.w	8006558 <d_exprlist+0x173c>
 80053ee:	4620      	mov	r0, r4
 80053f0:	f001 ff3c 	bl	800726c <d_operator_name>
 80053f4:	4682      	mov	sl, r0
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f000 82df 	beq.w	80059ba <d_exprlist+0xb9e>
 80053fc:	7803      	ldrb	r3, [r0, #0]
 80053fe:	2b31      	cmp	r3, #49	; 0x31
 8005400:	f000 846e 	beq.w	8005ce0 <d_exprlist+0xec4>
 8005404:	2b32      	cmp	r3, #50	; 0x32
 8005406:	f040 840d 	bne.w	8005c24 <d_exprlist+0xe08>
 800540a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800540e:	2b03      	cmp	r3, #3
 8005410:	f200 82d3 	bhi.w	80059ba <d_exprlist+0xb9e>
 8005414:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005418:	040e009c 	.word	0x040e009c
 800541c:	00a400e8 	.word	0x00a400e8
 8005420:	4620      	mov	r0, r4
 8005422:	f002 fe59 	bl	80080d8 <d_expr_primary>
 8005426:	4602      	mov	r2, r0
 8005428:	e6c9      	b.n	80051be <d_exprlist+0x3a2>
 800542a:	4620      	mov	r0, r4
 800542c:	f7fe fe84 	bl	8004138 <d_template_args>
 8005430:	464a      	mov	r2, r9
 8005432:	4603      	mov	r3, r0
 8005434:	2104      	movs	r1, #4
 8005436:	4620      	mov	r0, r4
 8005438:	f7fa ff82 	bl	8000340 <d_make_comp>
 800543c:	4681      	mov	r9, r0
 800543e:	e66f      	b.n	8005120 <d_exprlist+0x304>
 8005440:	4620      	mov	r0, r4
 8005442:	f7fb f921 	bl	8000688 <d_template_param>
 8005446:	4682      	mov	sl, r0
 8005448:	e614      	b.n	8005074 <d_exprlist+0x258>
 800544a:	464a      	mov	r2, r9
 800544c:	2300      	movs	r3, #0
 800544e:	2134      	movs	r1, #52	; 0x34
 8005450:	4620      	mov	r0, r4
 8005452:	f7fa ff75 	bl	8000340 <d_make_comp>
 8005456:	4681      	mov	r9, r0
 8005458:	e662      	b.n	8005120 <d_exprlist+0x304>
 800545a:	f04f 0b00 	mov.w	fp, #0
 800545e:	49d1      	ldr	r1, [pc, #836]	; (80057a4 <d_exprlist+0x988>)
 8005460:	4658      	mov	r0, fp
 8005462:	f004 fdf1 	bl	800a048 <strcmp>
 8005466:	2800      	cmp	r0, #0
 8005468:	f000 861b 	beq.w	80060a2 <d_exprlist+0x1286>
 800546c:	f89b 3000 	ldrb.w	r3, [fp]
 8005470:	2b6e      	cmp	r3, #110	; 0x6e
 8005472:	f47f af5f 	bne.w	8005334 <d_exprlist+0x518>
 8005476:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800547a:	2b77      	cmp	r3, #119	; 0x77
 800547c:	d002      	beq.n	8005484 <d_exprlist+0x668>
 800547e:	2b61      	cmp	r3, #97	; 0x61
 8005480:	f47f af58 	bne.w	8005334 <d_exprlist+0x518>
 8005484:	215f      	movs	r1, #95	; 0x5f
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff fcc8 	bl	8004e1c <d_exprlist>
 800548c:	9000      	str	r0, [sp, #0]
 800548e:	4620      	mov	r0, r4
 8005490:	f001 fb2e 	bl	8006af0 <d_type>
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	2a45      	cmp	r2, #69	; 0x45
 800549a:	4683      	mov	fp, r0
 800549c:	f000 8740 	beq.w	8006320 <d_exprlist+0x1504>
 80054a0:	2a70      	cmp	r2, #112	; 0x70
 80054a2:	f000 8794 	beq.w	80063ce <d_exprlist+0x15b2>
 80054a6:	2a69      	cmp	r2, #105	; 0x69
 80054a8:	f47f af44 	bne.w	8005334 <d_exprlist+0x518>
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	2b6c      	cmp	r3, #108	; 0x6c
 80054b0:	f47f af40 	bne.w	8005334 <d_exprlist+0x518>
 80054b4:	4620      	mov	r0, r4
 80054b6:	f001 f949 	bl	800674c <d_expression_1>
 80054ba:	4603      	mov	r3, r0
 80054bc:	465a      	mov	r2, fp
 80054be:	213a      	movs	r1, #58	; 0x3a
 80054c0:	4620      	mov	r0, r4
 80054c2:	f7fa ff3d 	bl	8000340 <d_make_comp>
 80054c6:	9a00      	ldr	r2, [sp, #0]
 80054c8:	4603      	mov	r3, r0
 80054ca:	2139      	movs	r1, #57	; 0x39
 80054cc:	4620      	mov	r0, r4
 80054ce:	f7fa ff37 	bl	8000340 <d_make_comp>
 80054d2:	464a      	mov	r2, r9
 80054d4:	4603      	mov	r3, r0
 80054d6:	2138      	movs	r1, #56	; 0x38
 80054d8:	4620      	mov	r0, r4
 80054da:	f7fa ff31 	bl	8000340 <d_make_comp>
 80054de:	4681      	mov	r9, r0
 80054e0:	e61e      	b.n	8005120 <d_exprlist+0x304>
 80054e2:	f04f 0b00 	mov.w	fp, #0
 80054e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	785a      	ldrb	r2, [r3, #1]
 80054ee:	2a63      	cmp	r2, #99	; 0x63
 80054f0:	f000 85c8 	beq.w	8006084 <d_exprlist+0x1268>
 80054f4:	4620      	mov	r0, r4
 80054f6:	f001 f929 	bl	800674c <d_expression_1>
 80054fa:	9000      	str	r0, [sp, #0]
 80054fc:	49aa      	ldr	r1, [pc, #680]	; (80057a8 <d_exprlist+0x98c>)
 80054fe:	4658      	mov	r0, fp
 8005500:	f004 fda2 	bl	800a048 <strcmp>
 8005504:	2800      	cmp	r0, #0
 8005506:	f000 862b 	beq.w	8006160 <d_exprlist+0x1344>
 800550a:	49a8      	ldr	r1, [pc, #672]	; (80057ac <d_exprlist+0x990>)
 800550c:	4658      	mov	r0, fp
 800550e:	f004 fd9b 	bl	800a048 <strcmp>
 8005512:	b130      	cbz	r0, 8005522 <d_exprlist+0x706>
 8005514:	4658      	mov	r0, fp
 8005516:	49a6      	ldr	r1, [pc, #664]	; (80057b0 <d_exprlist+0x994>)
 8005518:	f004 fd96 	bl	800a048 <strcmp>
 800551c:	2800      	cmp	r0, #0
 800551e:	f040 86d8 	bne.w	80062d2 <d_exprlist+0x14b6>
 8005522:	4620      	mov	r0, r4
 8005524:	f001 ff62 	bl	80073ec <d_unqualified_name>
 8005528:	68e3      	ldr	r3, [r4, #12]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b49      	cmp	r3, #73	; 0x49
 800552e:	4683      	mov	fp, r0
 8005530:	f000 86d5 	beq.w	80062de <d_exprlist+0x14c2>
 8005534:	465b      	mov	r3, fp
 8005536:	9a00      	ldr	r2, [sp, #0]
 8005538:	2137      	movs	r1, #55	; 0x37
 800553a:	4620      	mov	r0, r4
 800553c:	f7fa ff00 	bl	8000340 <d_make_comp>
 8005540:	464a      	mov	r2, r9
 8005542:	4603      	mov	r3, r0
 8005544:	2136      	movs	r1, #54	; 0x36
 8005546:	4620      	mov	r0, r4
 8005548:	f7fa fefa 	bl	8000340 <d_make_comp>
 800554c:	4681      	mov	r9, r0
 800554e:	e5e7      	b.n	8005120 <d_exprlist+0x304>
 8005550:	4652      	mov	r2, sl
 8005552:	2300      	movs	r3, #0
 8005554:	2134      	movs	r1, #52	; 0x34
 8005556:	4620      	mov	r0, r4
 8005558:	f7fa fef2 	bl	8000340 <d_make_comp>
 800555c:	4682      	mov	sl, r0
 800555e:	e589      	b.n	8005074 <d_exprlist+0x258>
 8005560:	f04f 0b00 	mov.w	fp, #0
 8005564:	498f      	ldr	r1, [pc, #572]	; (80057a4 <d_exprlist+0x988>)
 8005566:	4658      	mov	r0, fp
 8005568:	f004 fd6e 	bl	800a048 <strcmp>
 800556c:	2800      	cmp	r0, #0
 800556e:	f000 86c2 	beq.w	80062f6 <d_exprlist+0x14da>
 8005572:	f89b 3000 	ldrb.w	r3, [fp]
 8005576:	2b6e      	cmp	r3, #110	; 0x6e
 8005578:	f040 821f 	bne.w	80059ba <d_exprlist+0xb9e>
 800557c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8005580:	2b77      	cmp	r3, #119	; 0x77
 8005582:	d002      	beq.n	800558a <d_exprlist+0x76e>
 8005584:	2b61      	cmp	r3, #97	; 0x61
 8005586:	f040 8218 	bne.w	80059ba <d_exprlist+0xb9e>
 800558a:	215f      	movs	r1, #95	; 0x5f
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff fc45 	bl	8004e1c <d_exprlist>
 8005592:	9000      	str	r0, [sp, #0]
 8005594:	4620      	mov	r0, r4
 8005596:	f001 faab 	bl	8006af0 <d_type>
 800559a:	68e3      	ldr	r3, [r4, #12]
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	2a45      	cmp	r2, #69	; 0x45
 80055a0:	4683      	mov	fp, r0
 80055a2:	f000 86ce 	beq.w	8006342 <d_exprlist+0x1526>
 80055a6:	2a70      	cmp	r2, #112	; 0x70
 80055a8:	f000 86bf 	beq.w	800632a <d_exprlist+0x150e>
 80055ac:	2a69      	cmp	r2, #105	; 0x69
 80055ae:	f040 8204 	bne.w	80059ba <d_exprlist+0xb9e>
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b6c      	cmp	r3, #108	; 0x6c
 80055b6:	f040 8200 	bne.w	80059ba <d_exprlist+0xb9e>
 80055ba:	4620      	mov	r0, r4
 80055bc:	f001 f8c6 	bl	800674c <d_expression_1>
 80055c0:	4603      	mov	r3, r0
 80055c2:	465a      	mov	r2, fp
 80055c4:	213a      	movs	r1, #58	; 0x3a
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7fa feba 	bl	8000340 <d_make_comp>
 80055cc:	9a00      	ldr	r2, [sp, #0]
 80055ce:	4603      	mov	r3, r0
 80055d0:	2139      	movs	r1, #57	; 0x39
 80055d2:	4620      	mov	r0, r4
 80055d4:	f7fa feb4 	bl	8000340 <d_make_comp>
 80055d8:	4652      	mov	r2, sl
 80055da:	4603      	mov	r3, r0
 80055dc:	2138      	movs	r1, #56	; 0x38
 80055de:	4620      	mov	r0, r4
 80055e0:	f7fa feae 	bl	8000340 <d_make_comp>
 80055e4:	4682      	mov	sl, r0
 80055e6:	e545      	b.n	8005074 <d_exprlist+0x258>
 80055e8:	f04f 0b00 	mov.w	fp, #0
 80055ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	785a      	ldrb	r2, [r3, #1]
 80055f4:	2a63      	cmp	r2, #99	; 0x63
 80055f6:	f000 8630 	beq.w	800625a <d_exprlist+0x143e>
 80055fa:	4620      	mov	r0, r4
 80055fc:	f001 f8a6 	bl	800674c <d_expression_1>
 8005600:	9000      	str	r0, [sp, #0]
 8005602:	4969      	ldr	r1, [pc, #420]	; (80057a8 <d_exprlist+0x98c>)
 8005604:	4658      	mov	r0, fp
 8005606:	f004 fd1f 	bl	800a048 <strcmp>
 800560a:	2800      	cmp	r0, #0
 800560c:	f000 863f 	beq.w	800628e <d_exprlist+0x1472>
 8005610:	4966      	ldr	r1, [pc, #408]	; (80057ac <d_exprlist+0x990>)
 8005612:	4658      	mov	r0, fp
 8005614:	f004 fd18 	bl	800a048 <strcmp>
 8005618:	b130      	cbz	r0, 8005628 <d_exprlist+0x80c>
 800561a:	4658      	mov	r0, fp
 800561c:	4964      	ldr	r1, [pc, #400]	; (80057b0 <d_exprlist+0x994>)
 800561e:	f004 fd13 	bl	800a048 <strcmp>
 8005622:	2800      	cmp	r0, #0
 8005624:	f040 8692 	bne.w	800634c <d_exprlist+0x1530>
 8005628:	4620      	mov	r0, r4
 800562a:	f001 fedf 	bl	80073ec <d_unqualified_name>
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b49      	cmp	r3, #73	; 0x49
 8005634:	4683      	mov	fp, r0
 8005636:	f000 86d6 	beq.w	80063e6 <d_exprlist+0x15ca>
 800563a:	465b      	mov	r3, fp
 800563c:	9a00      	ldr	r2, [sp, #0]
 800563e:	2137      	movs	r1, #55	; 0x37
 8005640:	4620      	mov	r0, r4
 8005642:	f7fa fe7d 	bl	8000340 <d_make_comp>
 8005646:	4652      	mov	r2, sl
 8005648:	4603      	mov	r3, r0
 800564a:	2136      	movs	r1, #54	; 0x36
 800564c:	4620      	mov	r0, r4
 800564e:	f7fa fe77 	bl	8000340 <d_make_comp>
 8005652:	4682      	mov	sl, r0
 8005654:	e50e      	b.n	8005074 <d_exprlist+0x258>
 8005656:	464a      	mov	r2, r9
 8005658:	2300      	movs	r3, #0
 800565a:	2134      	movs	r1, #52	; 0x34
 800565c:	4620      	mov	r0, r4
 800565e:	f7fa fe6f 	bl	8000340 <d_make_comp>
 8005662:	4681      	mov	r9, r0
 8005664:	68e2      	ldr	r2, [r4, #12]
 8005666:	7813      	ldrb	r3, [r2, #0]
 8005668:	e5fd      	b.n	8005266 <d_exprlist+0x44a>
 800566a:	f04f 0b00 	mov.w	fp, #0
 800566e:	494d      	ldr	r1, [pc, #308]	; (80057a4 <d_exprlist+0x988>)
 8005670:	4658      	mov	r0, fp
 8005672:	f004 fce9 	bl	800a048 <strcmp>
 8005676:	2800      	cmp	r0, #0
 8005678:	f000 86e3 	beq.w	8006442 <d_exprlist+0x1626>
 800567c:	f89b 3000 	ldrb.w	r3, [fp]
 8005680:	2b6e      	cmp	r3, #110	; 0x6e
 8005682:	f040 8327 	bne.w	8005cd4 <d_exprlist+0xeb8>
 8005686:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800568a:	2b77      	cmp	r3, #119	; 0x77
 800568c:	d002      	beq.n	8005694 <d_exprlist+0x878>
 800568e:	2b61      	cmp	r3, #97	; 0x61
 8005690:	f040 8320 	bne.w	8005cd4 <d_exprlist+0xeb8>
 8005694:	215f      	movs	r1, #95	; 0x5f
 8005696:	4620      	mov	r0, r4
 8005698:	f7ff fbc0 	bl	8004e1c <d_exprlist>
 800569c:	9000      	str	r0, [sp, #0]
 800569e:	4620      	mov	r0, r4
 80056a0:	f001 fa26 	bl	8006af0 <d_type>
 80056a4:	68e2      	ldr	r2, [r4, #12]
 80056a6:	7813      	ldrb	r3, [r2, #0]
 80056a8:	2b45      	cmp	r3, #69	; 0x45
 80056aa:	4683      	mov	fp, r0
 80056ac:	f000 86d6 	beq.w	800645c <d_exprlist+0x1640>
 80056b0:	2b70      	cmp	r3, #112	; 0x70
 80056b2:	f000 87bc 	beq.w	800662e <d_exprlist+0x1812>
 80056b6:	2b69      	cmp	r3, #105	; 0x69
 80056b8:	f041 8044 	bne.w	8006744 <d_exprlist+0x1928>
 80056bc:	7853      	ldrb	r3, [r2, #1]
 80056be:	2b6c      	cmp	r3, #108	; 0x6c
 80056c0:	f041 803d 	bne.w	800673e <d_exprlist+0x1922>
 80056c4:	4620      	mov	r0, r4
 80056c6:	f001 f841 	bl	800674c <d_expression_1>
 80056ca:	4603      	mov	r3, r0
 80056cc:	465a      	mov	r2, fp
 80056ce:	213a      	movs	r1, #58	; 0x3a
 80056d0:	4620      	mov	r0, r4
 80056d2:	f7fa fe35 	bl	8000340 <d_make_comp>
 80056d6:	9a00      	ldr	r2, [sp, #0]
 80056d8:	4603      	mov	r3, r0
 80056da:	2139      	movs	r1, #57	; 0x39
 80056dc:	4620      	mov	r0, r4
 80056de:	f7fa fe2f 	bl	8000340 <d_make_comp>
 80056e2:	464a      	mov	r2, r9
 80056e4:	4603      	mov	r3, r0
 80056e6:	2138      	movs	r1, #56	; 0x38
 80056e8:	e7b8      	b.n	800565c <d_exprlist+0x840>
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	785a      	ldrb	r2, [r3, #1]
 80056f6:	2a63      	cmp	r2, #99	; 0x63
 80056f8:	f000 865a 	beq.w	80063b0 <d_exprlist+0x1594>
 80056fc:	4620      	mov	r0, r4
 80056fe:	f001 f825 	bl	800674c <d_expression_1>
 8005702:	9000      	str	r0, [sp, #0]
 8005704:	4928      	ldr	r1, [pc, #160]	; (80057a8 <d_exprlist+0x98c>)
 8005706:	4658      	mov	r0, fp
 8005708:	f004 fc9e 	bl	800a048 <strcmp>
 800570c:	2800      	cmp	r0, #0
 800570e:	f000 8648 	beq.w	80063a2 <d_exprlist+0x1586>
 8005712:	4926      	ldr	r1, [pc, #152]	; (80057ac <d_exprlist+0x990>)
 8005714:	4658      	mov	r0, fp
 8005716:	f004 fc97 	bl	800a048 <strcmp>
 800571a:	b130      	cbz	r0, 800572a <d_exprlist+0x90e>
 800571c:	4658      	mov	r0, fp
 800571e:	4924      	ldr	r1, [pc, #144]	; (80057b0 <d_exprlist+0x994>)
 8005720:	f004 fc92 	bl	800a048 <strcmp>
 8005724:	2800      	cmp	r0, #0
 8005726:	f040 8617 	bne.w	8006358 <d_exprlist+0x153c>
 800572a:	4620      	mov	r0, r4
 800572c:	f001 fe5e 	bl	80073ec <d_unqualified_name>
 8005730:	68e3      	ldr	r3, [r4, #12]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b49      	cmp	r3, #73	; 0x49
 8005736:	4683      	mov	fp, r0
 8005738:	d109      	bne.n	800574e <d_exprlist+0x932>
 800573a:	4620      	mov	r0, r4
 800573c:	f7fe fcfc 	bl	8004138 <d_template_args>
 8005740:	465a      	mov	r2, fp
 8005742:	4603      	mov	r3, r0
 8005744:	2104      	movs	r1, #4
 8005746:	4620      	mov	r0, r4
 8005748:	f7fa fdfa 	bl	8000340 <d_make_comp>
 800574c:	4683      	mov	fp, r0
 800574e:	465b      	mov	r3, fp
 8005750:	9a00      	ldr	r2, [sp, #0]
 8005752:	2137      	movs	r1, #55	; 0x37
 8005754:	4620      	mov	r0, r4
 8005756:	f7fa fdf3 	bl	8000340 <d_make_comp>
 800575a:	464a      	mov	r2, r9
 800575c:	4603      	mov	r3, r0
 800575e:	2136      	movs	r1, #54	; 0x36
 8005760:	e77c      	b.n	800565c <d_exprlist+0x840>
 8005762:	78d3      	ldrb	r3, [r2, #3]
 8005764:	2b72      	cmp	r3, #114	; 0x72
 8005766:	f000 8450 	beq.w	800600a <d_exprlist+0x11ee>
 800576a:	2b70      	cmp	r3, #112	; 0x70
 800576c:	f000 84a6 	beq.w	80060bc <d_exprlist+0x12a0>
 8005770:	4620      	mov	r0, r4
 8005772:	f001 fd7b 	bl	800726c <d_operator_name>
 8005776:	4680      	mov	r8, r0
 8005778:	2800      	cmp	r0, #0
 800577a:	f000 8117 	beq.w	80059ac <d_exprlist+0xb90>
 800577e:	7803      	ldrb	r3, [r0, #0]
 8005780:	2b31      	cmp	r3, #49	; 0x31
 8005782:	f000 8286 	beq.w	8005c92 <d_exprlist+0xe76>
 8005786:	2b32      	cmp	r3, #50	; 0x32
 8005788:	f040 822d 	bne.w	8005be6 <d_exprlist+0xdca>
 800578c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005790:	2b03      	cmp	r3, #3
 8005792:	f200 810b 	bhi.w	80059ac <d_exprlist+0xb90>
 8005796:	e8df f013 	tbh	[pc, r3, lsl #1]
 800579a:	000d      	.short	0x000d
 800579c:	0059022e 	.word	0x0059022e
 80057a0:	0015      	.short	0x0015
 80057a2:	bf00      	nop
 80057a4:	080163c4 	.word	0x080163c4
 80057a8:	080163bc 	.word	0x080163bc
 80057ac:	080164d8 	.word	0x080164d8
 80057b0:	080164dc 	.word	0x080164dc
 80057b4:	4642      	mov	r2, r8
 80057b6:	2300      	movs	r3, #0
 80057b8:	2134      	movs	r1, #52	; 0x34
 80057ba:	4620      	mov	r0, r4
 80057bc:	f7fa fdc0 	bl	8000340 <d_make_comp>
 80057c0:	4602      	mov	r2, r0
 80057c2:	e4fc      	b.n	80051be <d_exprlist+0x3a2>
 80057c4:	f04f 0900 	mov.w	r9, #0
 80057c8:	49c8      	ldr	r1, [pc, #800]	; (8005aec <d_exprlist+0xcd0>)
 80057ca:	4648      	mov	r0, r9
 80057cc:	f004 fc3c 	bl	800a048 <strcmp>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	f000 8571 	beq.w	80062b8 <d_exprlist+0x149c>
 80057d6:	f899 3000 	ldrb.w	r3, [r9]
 80057da:	2b6e      	cmp	r3, #110	; 0x6e
 80057dc:	f040 80e6 	bne.w	80059ac <d_exprlist+0xb90>
 80057e0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80057e4:	2b77      	cmp	r3, #119	; 0x77
 80057e6:	d002      	beq.n	80057ee <d_exprlist+0x9d2>
 80057e8:	2b61      	cmp	r3, #97	; 0x61
 80057ea:	f040 80df 	bne.w	80059ac <d_exprlist+0xb90>
 80057ee:	215f      	movs	r1, #95	; 0x5f
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff fb13 	bl	8004e1c <d_exprlist>
 80057f6:	4681      	mov	r9, r0
 80057f8:	4620      	mov	r0, r4
 80057fa:	f001 f979 	bl	8006af0 <d_type>
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	2a45      	cmp	r2, #69	; 0x45
 8005804:	4682      	mov	sl, r0
 8005806:	f000 85c7 	beq.w	8006398 <d_exprlist+0x157c>
 800580a:	2a70      	cmp	r2, #112	; 0x70
 800580c:	f000 85b8 	beq.w	8006380 <d_exprlist+0x1564>
 8005810:	2a69      	cmp	r2, #105	; 0x69
 8005812:	f040 80cb 	bne.w	80059ac <d_exprlist+0xb90>
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b6c      	cmp	r3, #108	; 0x6c
 800581a:	f040 80c7 	bne.w	80059ac <d_exprlist+0xb90>
 800581e:	4620      	mov	r0, r4
 8005820:	f000 ff94 	bl	800674c <d_expression_1>
 8005824:	4603      	mov	r3, r0
 8005826:	4652      	mov	r2, sl
 8005828:	213a      	movs	r1, #58	; 0x3a
 800582a:	4620      	mov	r0, r4
 800582c:	f7fa fd88 	bl	8000340 <d_make_comp>
 8005830:	464a      	mov	r2, r9
 8005832:	4603      	mov	r3, r0
 8005834:	2139      	movs	r1, #57	; 0x39
 8005836:	4620      	mov	r0, r4
 8005838:	f7fa fd82 	bl	8000340 <d_make_comp>
 800583c:	4642      	mov	r2, r8
 800583e:	4603      	mov	r3, r0
 8005840:	2138      	movs	r1, #56	; 0x38
 8005842:	4620      	mov	r0, r4
 8005844:	f7fa fd7c 	bl	8000340 <d_make_comp>
 8005848:	4602      	mov	r2, r0
 800584a:	e4b8      	b.n	80051be <d_exprlist+0x3a2>
 800584c:	f04f 0900 	mov.w	r9, #0
 8005850:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	785a      	ldrb	r2, [r3, #1]
 8005858:	2a63      	cmp	r2, #99	; 0x63
 800585a:	f000 84d9 	beq.w	8006210 <d_exprlist+0x13f4>
 800585e:	4620      	mov	r0, r4
 8005860:	f000 ff74 	bl	800674c <d_expression_1>
 8005864:	4682      	mov	sl, r0
 8005866:	49a2      	ldr	r1, [pc, #648]	; (8005af0 <d_exprlist+0xcd4>)
 8005868:	4648      	mov	r0, r9
 800586a:	f004 fbed 	bl	800a048 <strcmp>
 800586e:	2800      	cmp	r0, #0
 8005870:	f000 84c5 	beq.w	80061fe <d_exprlist+0x13e2>
 8005874:	499f      	ldr	r1, [pc, #636]	; (8005af4 <d_exprlist+0xcd8>)
 8005876:	4648      	mov	r0, r9
 8005878:	f004 fbe6 	bl	800a048 <strcmp>
 800587c:	b130      	cbz	r0, 800588c <d_exprlist+0xa70>
 800587e:	4648      	mov	r0, r9
 8005880:	499d      	ldr	r1, [pc, #628]	; (8005af8 <d_exprlist+0xcdc>)
 8005882:	f004 fbe1 	bl	800a048 <strcmp>
 8005886:	2800      	cmp	r0, #0
 8005888:	f040 8574 	bne.w	8006374 <d_exprlist+0x1558>
 800588c:	4620      	mov	r0, r4
 800588e:	f001 fdad 	bl	80073ec <d_unqualified_name>
 8005892:	68e3      	ldr	r3, [r4, #12]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b49      	cmp	r3, #73	; 0x49
 8005898:	4681      	mov	r9, r0
 800589a:	f000 85c6 	beq.w	800642a <d_exprlist+0x160e>
 800589e:	464b      	mov	r3, r9
 80058a0:	4652      	mov	r2, sl
 80058a2:	2137      	movs	r1, #55	; 0x37
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7fa fd4b 	bl	8000340 <d_make_comp>
 80058aa:	4642      	mov	r2, r8
 80058ac:	4603      	mov	r3, r0
 80058ae:	2136      	movs	r1, #54	; 0x36
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7fa fd45 	bl	8000340 <d_make_comp>
 80058b6:	4602      	mov	r2, r0
 80058b8:	e481      	b.n	80051be <d_exprlist+0x3a2>
 80058ba:	784b      	ldrb	r3, [r1, #1]
 80058bc:	2b72      	cmp	r3, #114	; 0x72
 80058be:	f000 83c9 	beq.w	8006054 <d_exprlist+0x1238>
 80058c2:	2b70      	cmp	r3, #112	; 0x70
 80058c4:	f47f ad93 	bne.w	80053ee <d_exprlist+0x5d2>
 80058c8:	3102      	adds	r1, #2
 80058ca:	60e1      	str	r1, [r4, #12]
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 ff3d 	bl	800674c <d_expression_1>
 80058d2:	2300      	movs	r3, #0
 80058d4:	4602      	mov	r2, r0
 80058d6:	2149      	movs	r1, #73	; 0x49
 80058d8:	4620      	mov	r0, r4
 80058da:	f7fa fd31 	bl	8000340 <d_make_comp>
 80058de:	4682      	mov	sl, r0
 80058e0:	f7ff bbc8 	b.w	8005074 <d_exprlist+0x258>
 80058e4:	78d3      	ldrb	r3, [r2, #3]
 80058e6:	2b70      	cmp	r3, #112	; 0x70
 80058e8:	f47f af42 	bne.w	8005770 <d_exprlist+0x954>
 80058ec:	1d13      	adds	r3, r2, #4
 80058ee:	60e3      	str	r3, [r4, #12]
 80058f0:	7913      	ldrb	r3, [r2, #4]
 80058f2:	2b54      	cmp	r3, #84	; 0x54
 80058f4:	d155      	bne.n	80059a2 <d_exprlist+0xb86>
 80058f6:	3205      	adds	r2, #5
 80058f8:	60e2      	str	r2, [r4, #12]
 80058fa:	2000      	movs	r0, #0
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	69a2      	ldr	r2, [r4, #24]
 8005900:	4293      	cmp	r3, r2
 8005902:	da53      	bge.n	80059ac <d_exprlist+0xb90>
 8005904:	6922      	ldr	r2, [r4, #16]
 8005906:	1c59      	adds	r1, r3, #1
 8005908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800590c:	6161      	str	r1, [r4, #20]
 800590e:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 8005912:	f000 8610 	beq.w	8006536 <d_exprlist+0x171a>
 8005916:	f04f 0e06 	mov.w	lr, #6
 800591a:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800591e:	460a      	mov	r2, r1
 8005920:	6048      	str	r0, [r1, #4]
 8005922:	e44c      	b.n	80051be <d_exprlist+0x3a2>
 8005924:	4620      	mov	r0, r4
 8005926:	f7fe fc07 	bl	8004138 <d_template_args>
 800592a:	464a      	mov	r2, r9
 800592c:	4603      	mov	r3, r0
 800592e:	2104      	movs	r1, #4
 8005930:	4620      	mov	r0, r4
 8005932:	f7fa fd05 	bl	8000340 <d_make_comp>
 8005936:	4681      	mov	r9, r0
 8005938:	f7ff bbb8 	b.w	80050ac <d_exprlist+0x290>
 800593c:	784b      	ldrb	r3, [r1, #1]
 800593e:	2b70      	cmp	r3, #112	; 0x70
 8005940:	f47f ad55 	bne.w	80053ee <d_exprlist+0x5d2>
 8005944:	1c8b      	adds	r3, r1, #2
 8005946:	60e3      	str	r3, [r4, #12]
 8005948:	788b      	ldrb	r3, [r1, #2]
 800594a:	2b54      	cmp	r3, #84	; 0x54
 800594c:	d130      	bne.n	80059b0 <d_exprlist+0xb94>
 800594e:	3103      	adds	r1, #3
 8005950:	60e1      	str	r1, [r4, #12]
 8005952:	2000      	movs	r0, #0
 8005954:	6963      	ldr	r3, [r4, #20]
 8005956:	69a2      	ldr	r2, [r4, #24]
 8005958:	4293      	cmp	r3, r2
 800595a:	da2e      	bge.n	80059ba <d_exprlist+0xb9e>
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	1c59      	adds	r1, r3, #1
 8005960:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005964:	eb12 0a83 	adds.w	sl, r2, r3, lsl #2
 8005968:	6161      	str	r1, [r4, #20]
 800596a:	f43f ab83 	beq.w	8005074 <d_exprlist+0x258>
 800596e:	2106      	movs	r1, #6
 8005970:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8005974:	f8ca 0004 	str.w	r0, [sl, #4]
 8005978:	f7ff bb7c 	b.w	8005074 <d_exprlist+0x258>
 800597c:	785a      	ldrb	r2, [r3, #1]
 800597e:	2a69      	cmp	r2, #105	; 0x69
 8005980:	f47f aacc 	bne.w	8004f1c <d_exprlist+0x100>
 8005984:	3302      	adds	r3, #2
 8005986:	60e3      	str	r3, [r4, #12]
 8005988:	2145      	movs	r1, #69	; 0x45
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff fa46 	bl	8004e1c <d_exprlist>
 8005990:	4683      	mov	fp, r0
 8005992:	f7ff bb33 	b.w	8004ffc <d_exprlist+0x1e0>
 8005996:	4620      	mov	r0, r4
 8005998:	f002 fb9e 	bl	80080d8 <d_expr_primary>
 800599c:	4681      	mov	r9, r0
 800599e:	f7ff bbbf 	b.w	8005120 <d_exprlist+0x304>
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fa fe58 	bl	8000658 <d_compact_number>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d1a7      	bne.n	80058fc <d_exprlist+0xae0>
 80059ac:	2200      	movs	r2, #0
 80059ae:	e406      	b.n	80051be <d_exprlist+0x3a2>
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7fa fe51 	bl	8000658 <d_compact_number>
 80059b6:	3001      	adds	r0, #1
 80059b8:	d1cc      	bne.n	8005954 <d_exprlist+0xb38>
 80059ba:	f04f 0a00 	mov.w	sl, #0
 80059be:	f7ff bb59 	b.w	8005074 <d_exprlist+0x258>
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7fa fe60 	bl	8000688 <d_template_param>
 80059c8:	4681      	mov	r9, r0
 80059ca:	f7ff bba9 	b.w	8005120 <d_exprlist+0x304>
 80059ce:	6843      	ldr	r3, [r0, #4]
 80059d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	f8d3 b000 	ldr.w	fp, [r3]
 80059d8:	4948      	ldr	r1, [pc, #288]	; (8005afc <d_exprlist+0xce0>)
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	3a02      	subs	r2, #2
 80059de:	4402      	add	r2, r0
 80059e0:	6322      	str	r2, [r4, #48]	; 0x30
 80059e2:	4658      	mov	r0, fp
 80059e4:	f004 fb30 	bl	800a048 <strcmp>
 80059e8:	9b00      	ldr	r3, [sp, #0]
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f000 8325 	beq.w	800603a <d_exprlist+0x121e>
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	f63f ac9e 	bhi.w	8005334 <d_exprlist+0x518>
 80059f8:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <d_exprlist+0xbe4>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	0800544b 	.word	0x0800544b
 8005a04:	08005dfb 	.word	0x08005dfb
 8005a08:	080054e7 	.word	0x080054e7
 8005a0c:	0800545f 	.word	0x0800545f
 8005a10:	7853      	ldrb	r3, [r2, #1]
 8005a12:	2b72      	cmp	r3, #114	; 0x72
 8005a14:	f000 8384 	beq.w	8006120 <d_exprlist+0x1304>
 8005a18:	2b70      	cmp	r3, #112	; 0x70
 8005a1a:	f000 843f 	beq.w	800629c <d_exprlist+0x1480>
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f001 fc24 	bl	800726c <d_operator_name>
 8005a24:	4683      	mov	fp, r0
 8005a26:	2800      	cmp	r0, #0
 8005a28:	f43f aae8 	beq.w	8004ffc <d_exprlist+0x1e0>
 8005a2c:	7803      	ldrb	r3, [r0, #0]
 8005a2e:	2b31      	cmp	r3, #49	; 0x31
 8005a30:	f000 823c 	beq.w	8005eac <d_exprlist+0x1090>
 8005a34:	2b32      	cmp	r3, #50	; 0x32
 8005a36:	f040 81c2 	bne.w	8005dbe <d_exprlist+0xfa2>
 8005a3a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	f200 8123 	bhi.w	8005c8a <d_exprlist+0xe6e>
 8005a44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a48:	01c30004 	.word	0x01c30004
 8005a4c:	000d005c 	.word	0x000d005c
 8005a50:	465a      	mov	r2, fp
 8005a52:	2300      	movs	r3, #0
 8005a54:	2134      	movs	r1, #52	; 0x34
 8005a56:	4620      	mov	r0, r4
 8005a58:	f7fa fc72 	bl	8000340 <d_make_comp>
 8005a5c:	4683      	mov	fp, r0
 8005a5e:	f7ff bacd 	b.w	8004ffc <d_exprlist+0x1e0>
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4921      	ldr	r1, [pc, #132]	; (8005aec <d_exprlist+0xcd0>)
 8005a68:	9800      	ldr	r0, [sp, #0]
 8005a6a:	f004 faed 	bl	800a048 <strcmp>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f000 850a 	beq.w	8006488 <d_exprlist+0x166c>
 8005a74:	9900      	ldr	r1, [sp, #0]
 8005a76:	780a      	ldrb	r2, [r1, #0]
 8005a78:	2a6e      	cmp	r2, #110	; 0x6e
 8005a7a:	f040 8106 	bne.w	8005c8a <d_exprlist+0xe6e>
 8005a7e:	784b      	ldrb	r3, [r1, #1]
 8005a80:	2b77      	cmp	r3, #119	; 0x77
 8005a82:	d002      	beq.n	8005a8a <d_exprlist+0xc6e>
 8005a84:	2b61      	cmp	r3, #97	; 0x61
 8005a86:	f040 8100 	bne.w	8005c8a <d_exprlist+0xe6e>
 8005a8a:	215f      	movs	r1, #95	; 0x5f
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f7ff f9c5 	bl	8004e1c <d_exprlist>
 8005a92:	9000      	str	r0, [sp, #0]
 8005a94:	4620      	mov	r0, r4
 8005a96:	f001 f82b 	bl	8006af0 <d_type>
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	9001      	str	r0, [sp, #4]
 8005a9e:	781a      	ldrb	r2, [r3, #0]
 8005aa0:	2a45      	cmp	r2, #69	; 0x45
 8005aa2:	f000 84e0 	beq.w	8006466 <d_exprlist+0x164a>
 8005aa6:	2a70      	cmp	r2, #112	; 0x70
 8005aa8:	f000 85c8 	beq.w	800663c <d_exprlist+0x1820>
 8005aac:	2a69      	cmp	r2, #105	; 0x69
 8005aae:	f040 80ec 	bne.w	8005c8a <d_exprlist+0xe6e>
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b6c      	cmp	r3, #108	; 0x6c
 8005ab6:	f040 80e8 	bne.w	8005c8a <d_exprlist+0xe6e>
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 fe46 	bl	800674c <d_expression_1>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	9a01      	ldr	r2, [sp, #4]
 8005ac4:	213a      	movs	r1, #58	; 0x3a
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f7fa fc3a 	bl	8000340 <d_make_comp>
 8005acc:	9a00      	ldr	r2, [sp, #0]
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2139      	movs	r1, #57	; 0x39
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7fa fc34 	bl	8000340 <d_make_comp>
 8005ad8:	465a      	mov	r2, fp
 8005ada:	4603      	mov	r3, r0
 8005adc:	2138      	movs	r1, #56	; 0x38
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7fa fc2e 	bl	8000340 <d_make_comp>
 8005ae4:	4683      	mov	fp, r0
 8005ae6:	f7ff ba89 	b.w	8004ffc <d_exprlist+0x1e0>
 8005aea:	bf00      	nop
 8005aec:	080163c4 	.word	0x080163c4
 8005af0:	080163bc 	.word	0x080163bc
 8005af4:	080164d8 	.word	0x080164d8
 8005af8:	080164dc 	.word	0x080164dc
 8005afc:	080166cc 	.word	0x080166cc
 8005b00:	2300      	movs	r3, #0
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	7851      	ldrb	r1, [r2, #1]
 8005b0c:	2963      	cmp	r1, #99	; 0x63
 8005b0e:	f000 84cf 	beq.w	80064b0 <d_exprlist+0x1694>
 8005b12:	4620      	mov	r0, r4
 8005b14:	f000 fe1a 	bl	800674c <d_expression_1>
 8005b18:	9001      	str	r0, [sp, #4]
 8005b1a:	49d3      	ldr	r1, [pc, #844]	; (8005e68 <d_exprlist+0x104c>)
 8005b1c:	9800      	ldr	r0, [sp, #0]
 8005b1e:	f004 fa93 	bl	800a048 <strcmp>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	f000 84bd 	beq.w	80064a2 <d_exprlist+0x1686>
 8005b28:	49d0      	ldr	r1, [pc, #832]	; (8005e6c <d_exprlist+0x1050>)
 8005b2a:	9800      	ldr	r0, [sp, #0]
 8005b2c:	f004 fa8c 	bl	800a048 <strcmp>
 8005b30:	b130      	cbz	r0, 8005b40 <d_exprlist+0xd24>
 8005b32:	9800      	ldr	r0, [sp, #0]
 8005b34:	49ce      	ldr	r1, [pc, #824]	; (8005e70 <d_exprlist+0x1054>)
 8005b36:	f004 fa87 	bl	800a048 <strcmp>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	f040 84c7 	bne.w	80064ce <d_exprlist+0x16b2>
 8005b40:	4620      	mov	r0, r4
 8005b42:	f001 fc53 	bl	80073ec <d_unqualified_name>
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b49      	cmp	r3, #73	; 0x49
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	d10a      	bne.n	8005b66 <d_exprlist+0xd4a>
 8005b50:	9000      	str	r0, [sp, #0]
 8005b52:	4620      	mov	r0, r4
 8005b54:	f7fe faf0 	bl	8004138 <d_template_args>
 8005b58:	9a00      	ldr	r2, [sp, #0]
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2104      	movs	r1, #4
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7fa fbee 	bl	8000340 <d_make_comp>
 8005b64:	4602      	mov	r2, r0
 8005b66:	4613      	mov	r3, r2
 8005b68:	2137      	movs	r1, #55	; 0x37
 8005b6a:	9a01      	ldr	r2, [sp, #4]
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7fa fbe7 	bl	8000340 <d_make_comp>
 8005b72:	465a      	mov	r2, fp
 8005b74:	4603      	mov	r3, r0
 8005b76:	2136      	movs	r1, #54	; 0x36
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7fa fbe1 	bl	8000340 <d_make_comp>
 8005b7e:	4683      	mov	fp, r0
 8005b80:	f7ff ba3c 	b.w	8004ffc <d_exprlist+0x1e0>
 8005b84:	7843      	ldrb	r3, [r0, #1]
 8005b86:	2b72      	cmp	r3, #114	; 0x72
 8005b88:	f000 82a6 	beq.w	80060d8 <d_exprlist+0x12bc>
 8005b8c:	2b70      	cmp	r3, #112	; 0x70
 8005b8e:	f47f ac0b 	bne.w	80053a8 <d_exprlist+0x58c>
 8005b92:	1c82      	adds	r2, r0, #2
 8005b94:	60e2      	str	r2, [r4, #12]
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fdd8 	bl	800674c <d_expression_1>
 8005b9c:	465b      	mov	r3, fp
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	2149      	movs	r1, #73	; 0x49
 8005ba2:	e55b      	b.n	800565c <d_exprlist+0x840>
 8005ba4:	7853      	ldrb	r3, [r2, #1]
 8005ba6:	2b70      	cmp	r3, #112	; 0x70
 8005ba8:	f47f af39 	bne.w	8005a1e <d_exprlist+0xc02>
 8005bac:	1c93      	adds	r3, r2, #2
 8005bae:	60e3      	str	r3, [r4, #12]
 8005bb0:	7893      	ldrb	r3, [r2, #2]
 8005bb2:	2b54      	cmp	r3, #84	; 0x54
 8005bb4:	f040 82cb 	bne.w	800614e <d_exprlist+0x1332>
 8005bb8:	3203      	adds	r2, #3
 8005bba:	60e2      	str	r2, [r4, #12]
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	6963      	ldr	r3, [r4, #20]
 8005bc0:	69a2      	ldr	r2, [r4, #24]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	da61      	bge.n	8005c8a <d_exprlist+0xe6e>
 8005bc6:	6922      	ldr	r2, [r4, #16]
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005bce:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 8005bd2:	6161      	str	r1, [r4, #20]
 8005bd4:	f43f aa12 	beq.w	8004ffc <d_exprlist+0x1e0>
 8005bd8:	2106      	movs	r1, #6
 8005bda:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8005bde:	f8cb 0004 	str.w	r0, [fp, #4]
 8005be2:	f7ff ba0b 	b.w	8004ffc <d_exprlist+0x1e0>
 8005be6:	2b33      	cmp	r3, #51	; 0x33
 8005be8:	f47f aee0 	bne.w	80059ac <d_exprlist+0xb90>
 8005bec:	68e3      	ldr	r3, [r4, #12]
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	2a5f      	cmp	r2, #95	; 0x5f
 8005bf2:	f000 83b7 	beq.w	8006364 <d_exprlist+0x1548>
 8005bf6:	f04f 0900 	mov.w	r9, #0
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f000 fda6 	bl	800674c <d_expression_1>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f1b9 0f00 	cmp.w	r9, #0
 8005c06:	d005      	beq.n	8005c14 <d_exprlist+0xdf8>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	2137      	movs	r1, #55	; 0x37
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f7fa fb97 	bl	8000340 <d_make_comp>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4642      	mov	r2, r8
 8005c16:	2135      	movs	r1, #53	; 0x35
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7fa fb91 	bl	8000340 <d_make_comp>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	f7ff bacd 	b.w	80051be <d_exprlist+0x3a2>
 8005c24:	2b33      	cmp	r3, #51	; 0x33
 8005c26:	f47f aec8 	bne.w	80059ba <d_exprlist+0xb9e>
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	781a      	ldrb	r2, [r3, #0]
 8005c2e:	2a5f      	cmp	r2, #95	; 0x5f
 8005c30:	f000 83e5 	beq.w	80063fe <d_exprlist+0x15e2>
 8005c34:	f04f 0b00 	mov.w	fp, #0
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fd87 	bl	800674c <d_expression_1>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f1bb 0f00 	cmp.w	fp, #0
 8005c44:	d005      	beq.n	8005c52 <d_exprlist+0xe36>
 8005c46:	4602      	mov	r2, r0
 8005c48:	2137      	movs	r1, #55	; 0x37
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f7fa fb78 	bl	8000340 <d_make_comp>
 8005c50:	4603      	mov	r3, r0
 8005c52:	4652      	mov	r2, sl
 8005c54:	2135      	movs	r1, #53	; 0x35
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7fa fb72 	bl	8000340 <d_make_comp>
 8005c5c:	4682      	mov	sl, r0
 8005c5e:	f7ff ba09 	b.w	8005074 <d_exprlist+0x258>
 8005c62:	784b      	ldrb	r3, [r1, #1]
 8005c64:	2b6e      	cmp	r3, #110	; 0x6e
 8005c66:	f47f abc2 	bne.w	80053ee <d_exprlist+0x5d2>
 8005c6a:	3102      	adds	r1, #2
 8005c6c:	60e1      	str	r1, [r4, #12]
 8005c6e:	f7ff b9f5 	b.w	800505c <d_exprlist+0x240>
 8005c72:	4620      	mov	r0, r4
 8005c74:	f002 fa30 	bl	80080d8 <d_expr_primary>
 8005c78:	4682      	mov	sl, r0
 8005c7a:	f7ff b9fb 	b.w	8005074 <d_exprlist+0x258>
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f7fa fd02 	bl	8000688 <d_template_param>
 8005c84:	4602      	mov	r2, r0
 8005c86:	f7ff ba9a 	b.w	80051be <d_exprlist+0x3a2>
 8005c8a:	f04f 0b00 	mov.w	fp, #0
 8005c8e:	f7ff b9b5 	b.w	8004ffc <d_exprlist+0x1e0>
 8005c92:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8005c96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005c98:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005c9c:	f8da 9000 	ldr.w	r9, [sl]
 8005ca0:	4974      	ldr	r1, [pc, #464]	; (8005e74 <d_exprlist+0x1058>)
 8005ca2:	3b02      	subs	r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ca8:	4648      	mov	r0, r9
 8005caa:	f004 f9cd 	bl	800a048 <strcmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f000 8280 	beq.w	80061b4 <d_exprlist+0x1398>
 8005cb4:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	f63f ae77 	bhi.w	80059ac <d_exprlist+0xb90>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <d_exprlist+0xea8>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	080057b5 	.word	0x080057b5
 8005cc8:	08005f91 	.word	0x08005f91
 8005ccc:	08005851 	.word	0x08005851
 8005cd0:	080057c9 	.word	0x080057c9
 8005cd4:	68e2      	ldr	r2, [r4, #12]
 8005cd6:	f04f 0900 	mov.w	r9, #0
 8005cda:	7813      	ldrb	r3, [r2, #0]
 8005cdc:	f7ff bac3 	b.w	8005266 <d_exprlist+0x44a>
 8005ce0:	6843      	ldr	r3, [r0, #4]
 8005ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	f8d3 b000 	ldr.w	fp, [r3]
 8005cea:	4962      	ldr	r1, [pc, #392]	; (8005e74 <d_exprlist+0x1058>)
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	3a02      	subs	r2, #2
 8005cf0:	4402      	add	r2, r0
 8005cf2:	6322      	str	r2, [r4, #48]	; 0x30
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	f004 f9a7 	bl	800a048 <strcmp>
 8005cfa:	9b00      	ldr	r3, [sp, #0]
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f000 8274 	beq.w	80061ea <d_exprlist+0x13ce>
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	f63f ae58 	bhi.w	80059ba <d_exprlist+0xb9e>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <d_exprlist+0xef4>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005551 	.word	0x08005551
 8005d14:	08005fdb 	.word	0x08005fdb
 8005d18:	080055ed 	.word	0x080055ed
 8005d1c:	08005565 	.word	0x08005565
 8005d20:	3301      	adds	r3, #1
 8005d22:	60e3      	str	r3, [r4, #12]
 8005d24:	f04f 0b00 	mov.w	fp, #0
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fd0f 	bl	800674c <d_expression_1>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f1bb 0f00 	cmp.w	fp, #0
 8005d34:	d005      	beq.n	8005d42 <d_exprlist+0xf26>
 8005d36:	4602      	mov	r2, r0
 8005d38:	2137      	movs	r1, #55	; 0x37
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7fa fb00 	bl	8000340 <d_make_comp>
 8005d40:	4603      	mov	r3, r0
 8005d42:	464a      	mov	r2, r9
 8005d44:	2135      	movs	r1, #53	; 0x35
 8005d46:	4620      	mov	r0, r4
 8005d48:	f7fa fafa 	bl	8000340 <d_make_comp>
 8005d4c:	4681      	mov	r9, r0
 8005d4e:	f7ff b9e7 	b.w	8005120 <d_exprlist+0x304>
 8005d52:	3101      	adds	r1, #1
 8005d54:	60e1      	str	r1, [r4, #12]
 8005d56:	f7ff b9c5 	b.w	80050e4 <d_exprlist+0x2c8>
 8005d5a:	2b33      	cmp	r3, #51	; 0x33
 8005d5c:	d1ba      	bne.n	8005cd4 <d_exprlist+0xeb8>
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	2a5f      	cmp	r2, #95	; 0x5f
 8005d64:	f000 8288 	beq.w	8006278 <d_exprlist+0x145c>
 8005d68:	f04f 0b00 	mov.w	fp, #0
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fced 	bl	800674c <d_expression_1>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f1bb 0f00 	cmp.w	fp, #0
 8005d78:	f000 8285 	beq.w	8006286 <d_exprlist+0x146a>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	2137      	movs	r1, #55	; 0x37
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7fa fadd 	bl	8000340 <d_make_comp>
 8005d86:	464a      	mov	r2, r9
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2135      	movs	r1, #53	; 0x35
 8005d8c:	e466      	b.n	800565c <d_exprlist+0x840>
 8005d8e:	3102      	adds	r1, #2
 8005d90:	60e1      	str	r1, [r4, #12]
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 feac 	bl	8006af0 <d_type>
 8005d98:	4681      	mov	r9, r0
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f001 fb26 	bl	80073ec <d_unqualified_name>
 8005da0:	68e3      	ldr	r3, [r4, #12]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b49      	cmp	r3, #73	; 0x49
 8005da6:	4683      	mov	fp, r0
 8005da8:	f000 81e1 	beq.w	800616e <d_exprlist+0x1352>
 8005dac:	4603      	mov	r3, r0
 8005dae:	464a      	mov	r2, r9
 8005db0:	2101      	movs	r1, #1
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7fa fac4 	bl	8000340 <d_make_comp>
 8005db8:	4681      	mov	r9, r0
 8005dba:	f7ff b9b1 	b.w	8005120 <d_exprlist+0x304>
 8005dbe:	2b33      	cmp	r3, #51	; 0x33
 8005dc0:	f47f af63 	bne.w	8005c8a <d_exprlist+0xe6e>
 8005dc4:	68e3      	ldr	r3, [r4, #12]
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	2a5f      	cmp	r2, #95	; 0x5f
 8005dca:	f000 83b7 	beq.w	800653c <d_exprlist+0x1720>
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	9200      	str	r2, [sp, #0]
 8005dd4:	f000 fcba 	bl	800674c <d_expression_1>
 8005dd8:	9a00      	ldr	r2, [sp, #0]
 8005dda:	4603      	mov	r3, r0
 8005ddc:	b12a      	cbz	r2, 8005dea <d_exprlist+0xfce>
 8005dde:	4602      	mov	r2, r0
 8005de0:	2137      	movs	r1, #55	; 0x37
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7fa faac 	bl	8000340 <d_make_comp>
 8005de8:	4603      	mov	r3, r0
 8005dea:	465a      	mov	r2, fp
 8005dec:	2135      	movs	r1, #53	; 0x35
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7fa faa6 	bl	8000340 <d_make_comp>
 8005df4:	4683      	mov	fp, r0
 8005df6:	f7ff b901 	b.w	8004ffc <d_exprlist+0x1e0>
 8005dfa:	f1bb 0f00 	cmp.w	fp, #0
 8005dfe:	d091      	beq.n	8005d24 <d_exprlist+0xf08>
 8005e00:	f89b 3000 	ldrb.w	r3, [fp]
 8005e04:	2b70      	cmp	r3, #112	; 0x70
 8005e06:	d001      	beq.n	8005e0c <d_exprlist+0xff0>
 8005e08:	2b6d      	cmp	r3, #109	; 0x6d
 8005e0a:	d18b      	bne.n	8005d24 <d_exprlist+0xf08>
 8005e0c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d187      	bne.n	8005d24 <d_exprlist+0xf08>
 8005e14:	68e3      	ldr	r3, [r4, #12]
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	2a5f      	cmp	r2, #95	; 0x5f
 8005e1a:	d081      	beq.n	8005d20 <d_exprlist+0xf04>
 8005e1c:	f04f 0b01 	mov.w	fp, #1
 8005e20:	e782      	b.n	8005d28 <d_exprlist+0xf0c>
 8005e22:	4620      	mov	r0, r4
 8005e24:	f7fe f988 	bl	8004138 <d_template_args>
 8005e28:	4642      	mov	r2, r8
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2104      	movs	r1, #4
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7fa fa86 	bl	8000340 <d_make_comp>
 8005e34:	4602      	mov	r2, r0
 8005e36:	f7ff b9c2 	b.w	80051be <d_exprlist+0x3a2>
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f002 f94c 	bl	80080d8 <d_expr_primary>
 8005e40:	4683      	mov	fp, r0
 8005e42:	f7ff b8db 	b.w	8004ffc <d_exprlist+0x1e0>
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7fa fc06 	bl	8000658 <d_compact_number>
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f47f aa80 	bne.w	8005352 <d_exprlist+0x536>
 8005e52:	4681      	mov	r9, r0
 8005e54:	f7ff b964 	b.w	8005120 <d_exprlist+0x304>
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f002 f93d 	bl	80080d8 <d_expr_primary>
 8005e5e:	68e2      	ldr	r2, [r4, #12]
 8005e60:	4681      	mov	r9, r0
 8005e62:	7813      	ldrb	r3, [r2, #0]
 8005e64:	f7ff b9ff 	b.w	8005266 <d_exprlist+0x44a>
 8005e68:	080163bc 	.word	0x080163bc
 8005e6c:	080164d8 	.word	0x080164d8
 8005e70:	080164dc 	.word	0x080164dc
 8005e74:	080166cc 	.word	0x080166cc
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f7fa fc05 	bl	8000688 <d_template_param>
 8005e7e:	4683      	mov	fp, r0
 8005e80:	f7ff b8bc 	b.w	8004ffc <d_exprlist+0x1e0>
 8005e84:	4620      	mov	r0, r4
 8005e86:	f7fe f957 	bl	8004138 <d_template_args>
 8005e8a:	4652      	mov	r2, sl
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2104      	movs	r1, #4
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7fa fa55 	bl	8000340 <d_make_comp>
 8005e96:	4682      	mov	sl, r0
 8005e98:	f7ff b8ec 	b.w	8005074 <d_exprlist+0x258>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7fa fbf3 	bl	8000688 <d_template_param>
 8005ea2:	68e2      	ldr	r2, [r4, #12]
 8005ea4:	4681      	mov	r9, r0
 8005ea6:	7813      	ldrb	r3, [r2, #0]
 8005ea8:	f7ff b9dd 	b.w	8005266 <d_exprlist+0x44a>
 8005eac:	6843      	ldr	r3, [r0, #4]
 8005eae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	3a02      	subs	r2, #2
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4410      	add	r0, r2
 8005ebc:	9100      	str	r1, [sp, #0]
 8005ebe:	6320      	str	r0, [r4, #48]	; 0x30
 8005ec0:	49d2      	ldr	r1, [pc, #840]	; (800620c <d_exprlist+0x13f0>)
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f004 f8c0 	bl	800a048 <strcmp>
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f000 8192 	beq.w	80061f4 <d_exprlist+0x13d8>
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	2a03      	cmp	r2, #3
 8005ed4:	f63f aed9 	bhi.w	8005c8a <d_exprlist+0xe6e>
 8005ed8:	a301      	add	r3, pc, #4	; (adr r3, 8005ee0 <d_exprlist+0x10c4>)
 8005eda:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005a51 	.word	0x08005a51
 8005ee4:	080061bf 	.word	0x080061bf
 8005ee8:	08005b05 	.word	0x08005b05
 8005eec:	08005a67 	.word	0x08005a67
 8005ef0:	6843      	ldr	r3, [r0, #4]
 8005ef2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	f8d3 b000 	ldr.w	fp, [r3]
 8005efa:	49c4      	ldr	r1, [pc, #784]	; (800620c <d_exprlist+0x13f0>)
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	3a02      	subs	r2, #2
 8005f00:	4402      	add	r2, r0
 8005f02:	6322      	str	r2, [r4, #48]	; 0x30
 8005f04:	4658      	mov	r0, fp
 8005f06:	f004 f89f 	bl	800a048 <strcmp>
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f000 81ff 	beq.w	8006310 <d_exprlist+0x14f4>
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	f63f aedd 	bhi.w	8005cd4 <d_exprlist+0xeb8>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <d_exprlist+0x1104>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005657 	.word	0x08005657
 8005f24:	08006185 	.word	0x08006185
 8005f28:	080056ef 	.word	0x080056ef
 8005f2c:	0800566f 	.word	0x0800566f
 8005f30:	3102      	adds	r1, #2
 8005f32:	60e1      	str	r1, [r4, #12]
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fc09 	bl	800674c <d_expression_1>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	2149      	movs	r1, #73	; 0x49
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7fa f9fd 	bl	8000340 <d_make_comp>
 8005f46:	4681      	mov	r9, r0
 8005f48:	f7ff b8ea 	b.w	8005120 <d_exprlist+0x304>
 8005f4c:	1c83      	adds	r3, r0, #2
 8005f4e:	60e3      	str	r3, [r4, #12]
 8005f50:	7883      	ldrb	r3, [r0, #2]
 8005f52:	2b54      	cmp	r3, #84	; 0x54
 8005f54:	f040 80d9 	bne.w	800610a <d_exprlist+0x12ee>
 8005f58:	1cc2      	adds	r2, r0, #3
 8005f5a:	60e2      	str	r2, [r4, #12]
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	6963      	ldr	r3, [r4, #20]
 8005f60:	69a1      	ldr	r1, [r4, #24]
 8005f62:	428b      	cmp	r3, r1
 8005f64:	f280 80cc 	bge.w	8006100 <d_exprlist+0x12e4>
 8005f68:	6921      	ldr	r1, [r4, #16]
 8005f6a:	f103 0e01 	add.w	lr, r3, #1
 8005f6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005f72:	eb11 0983 	adds.w	r9, r1, r3, lsl #2
 8005f76:	f8c4 e014 	str.w	lr, [r4, #20]
 8005f7a:	f43f ab74 	beq.w	8005666 <d_exprlist+0x84a>
 8005f7e:	f04f 0e06 	mov.w	lr, #6
 8005f82:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 8005f86:	f8c9 0004 	str.w	r0, [r9, #4]
 8005f8a:	7813      	ldrb	r3, [r2, #0]
 8005f8c:	f7ff b96b 	b.w	8005266 <d_exprlist+0x44a>
 8005f90:	f1b9 0f00 	cmp.w	r9, #0
 8005f94:	f43f ae2f 	beq.w	8005bf6 <d_exprlist+0xdda>
 8005f98:	f899 3000 	ldrb.w	r3, [r9]
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d002      	beq.n	8005fa6 <d_exprlist+0x118a>
 8005fa0:	2b6d      	cmp	r3, #109	; 0x6d
 8005fa2:	f47f ae28 	bne.w	8005bf6 <d_exprlist+0xdda>
 8005fa6:	f899 2001 	ldrb.w	r2, [r9, #1]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f47f ae23 	bne.w	8005bf6 <d_exprlist+0xdda>
 8005fb0:	68e3      	ldr	r3, [r4, #12]
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	2a5f      	cmp	r2, #95	; 0x5f
 8005fb6:	f000 8376 	beq.w	80066a6 <d_exprlist+0x188a>
 8005fba:	f04f 0901 	mov.w	r9, #1
 8005fbe:	e61c      	b.n	8005bfa <d_exprlist+0xdde>
 8005fc0:	68e3      	ldr	r3, [r4, #12]
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	2a5f      	cmp	r2, #95	; 0x5f
 8005fc6:	f47f aead 	bne.w	8005d24 <d_exprlist+0xf08>
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60e3      	str	r3, [r4, #12]
 8005fce:	2145      	movs	r1, #69	; 0x45
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7fe ff23 	bl	8004e1c <d_exprlist>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	e6b3      	b.n	8005d42 <d_exprlist+0xf26>
 8005fda:	f1bb 0f00 	cmp.w	fp, #0
 8005fde:	f43f ae29 	beq.w	8005c34 <d_exprlist+0xe18>
 8005fe2:	f89b 3000 	ldrb.w	r3, [fp]
 8005fe6:	2b70      	cmp	r3, #112	; 0x70
 8005fe8:	d002      	beq.n	8005ff0 <d_exprlist+0x11d4>
 8005fea:	2b6d      	cmp	r3, #109	; 0x6d
 8005fec:	f47f ae22 	bne.w	8005c34 <d_exprlist+0xe18>
 8005ff0:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	f47f ae1d 	bne.w	8005c34 <d_exprlist+0xe18>
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	2a5f      	cmp	r2, #95	; 0x5f
 8006000:	f000 82f7 	beq.w	80065f2 <d_exprlist+0x17d6>
 8006004:	f04f 0b01 	mov.w	fp, #1
 8006008:	e616      	b.n	8005c38 <d_exprlist+0xe1c>
 800600a:	3204      	adds	r2, #4
 800600c:	60e2      	str	r2, [r4, #12]
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fd6e 	bl	8006af0 <d_type>
 8006014:	4680      	mov	r8, r0
 8006016:	4620      	mov	r0, r4
 8006018:	f001 f9e8 	bl	80073ec <d_unqualified_name>
 800601c:	68e3      	ldr	r3, [r4, #12]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b49      	cmp	r3, #73	; 0x49
 8006022:	4681      	mov	r9, r0
 8006024:	f000 810e 	beq.w	8006244 <d_exprlist+0x1428>
 8006028:	4603      	mov	r3, r0
 800602a:	4642      	mov	r2, r8
 800602c:	2101      	movs	r1, #1
 800602e:	4620      	mov	r0, r4
 8006030:	f7fa f986 	bl	8000340 <d_make_comp>
 8006034:	4602      	mov	r2, r0
 8006036:	f7ff b8c2 	b.w	80051be <d_exprlist+0x3a2>
 800603a:	4620      	mov	r0, r4
 800603c:	f000 fd58 	bl	8006af0 <d_type>
 8006040:	4603      	mov	r3, r0
 8006042:	e67e      	b.n	8005d42 <d_exprlist+0xf26>
 8006044:	4620      	mov	r0, r4
 8006046:	f7fe f877 	bl	8004138 <d_template_args>
 800604a:	464a      	mov	r2, r9
 800604c:	4603      	mov	r3, r0
 800604e:	2104      	movs	r1, #4
 8006050:	f7ff bb04 	b.w	800565c <d_exprlist+0x840>
 8006054:	3102      	adds	r1, #2
 8006056:	60e1      	str	r1, [r4, #12]
 8006058:	4620      	mov	r0, r4
 800605a:	f000 fd49 	bl	8006af0 <d_type>
 800605e:	4682      	mov	sl, r0
 8006060:	4620      	mov	r0, r4
 8006062:	f001 f9c3 	bl	80073ec <d_unqualified_name>
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b49      	cmp	r3, #73	; 0x49
 800606c:	4683      	mov	fp, r0
 800606e:	f000 80de 	beq.w	800622e <d_exprlist+0x1412>
 8006072:	4603      	mov	r3, r0
 8006074:	4652      	mov	r2, sl
 8006076:	2101      	movs	r1, #1
 8006078:	4620      	mov	r0, r4
 800607a:	f7fa f961 	bl	8000340 <d_make_comp>
 800607e:	4682      	mov	sl, r0
 8006080:	f7fe bff8 	b.w	8005074 <d_exprlist+0x258>
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800608a:	2a01      	cmp	r2, #1
 800608c:	d903      	bls.n	8006096 <d_exprlist+0x127a>
 800608e:	3b72      	subs	r3, #114	; 0x72
 8006090:	2b01      	cmp	r3, #1
 8006092:	f63f aa2f 	bhi.w	80054f4 <d_exprlist+0x6d8>
 8006096:	4620      	mov	r0, r4
 8006098:	f000 fd2a 	bl	8006af0 <d_type>
 800609c:	9000      	str	r0, [sp, #0]
 800609e:	f7ff ba2d 	b.w	80054fc <d_exprlist+0x6e0>
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 fb52 	bl	800674c <d_expression_1>
 80060a8:	9000      	str	r0, [sp, #0]
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fb4e 	bl	800674c <d_expression_1>
 80060b0:	4683      	mov	fp, r0
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fb4a 	bl	800674c <d_expression_1>
 80060b8:	f7ff b9ff 	b.w	80054ba <d_exprlist+0x69e>
 80060bc:	3204      	adds	r2, #4
 80060be:	60e2      	str	r2, [r4, #12]
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 fb43 	bl	800674c <d_expression_1>
 80060c6:	2300      	movs	r3, #0
 80060c8:	4602      	mov	r2, r0
 80060ca:	2149      	movs	r1, #73	; 0x49
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7fa f937 	bl	8000340 <d_make_comp>
 80060d2:	4602      	mov	r2, r0
 80060d4:	f7ff b873 	b.w	80051be <d_exprlist+0x3a2>
 80060d8:	1c82      	adds	r2, r0, #2
 80060da:	60e2      	str	r2, [r4, #12]
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 fd07 	bl	8006af0 <d_type>
 80060e2:	4681      	mov	r9, r0
 80060e4:	4620      	mov	r0, r4
 80060e6:	f001 f981 	bl	80073ec <d_unqualified_name>
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b49      	cmp	r3, #73	; 0x49
 80060f0:	4683      	mov	fp, r0
 80060f2:	f000 818c 	beq.w	800640e <d_exprlist+0x15f2>
 80060f6:	4603      	mov	r3, r0
 80060f8:	464a      	mov	r2, r9
 80060fa:	2101      	movs	r1, #1
 80060fc:	f7ff baae 	b.w	800565c <d_exprlist+0x840>
 8006100:	7813      	ldrb	r3, [r2, #0]
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	f7ff b8ae 	b.w	8005266 <d_exprlist+0x44a>
 800610a:	4620      	mov	r0, r4
 800610c:	f7fa faa4 	bl	8000658 <d_compact_number>
 8006110:	3001      	adds	r0, #1
 8006112:	68e2      	ldr	r2, [r4, #12]
 8006114:	f47f af23 	bne.w	8005f5e <d_exprlist+0x1142>
 8006118:	4681      	mov	r9, r0
 800611a:	7813      	ldrb	r3, [r2, #0]
 800611c:	f7ff b8a3 	b.w	8005266 <d_exprlist+0x44a>
 8006120:	3202      	adds	r2, #2
 8006122:	60e2      	str	r2, [r4, #12]
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fce3 	bl	8006af0 <d_type>
 800612a:	4683      	mov	fp, r0
 800612c:	4620      	mov	r0, r4
 800612e:	f001 f95d 	bl	80073ec <d_unqualified_name>
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b49      	cmp	r3, #73	; 0x49
 8006138:	f000 819a 	beq.w	8006470 <d_exprlist+0x1654>
 800613c:	4603      	mov	r3, r0
 800613e:	465a      	mov	r2, fp
 8006140:	2101      	movs	r1, #1
 8006142:	4620      	mov	r0, r4
 8006144:	f7fa f8fc 	bl	8000340 <d_make_comp>
 8006148:	4683      	mov	fp, r0
 800614a:	f7fe bf57 	b.w	8004ffc <d_exprlist+0x1e0>
 800614e:	4620      	mov	r0, r4
 8006150:	f7fa fa82 	bl	8000658 <d_compact_number>
 8006154:	3001      	adds	r0, #1
 8006156:	f47f ad32 	bne.w	8005bbe <d_exprlist+0xda2>
 800615a:	4683      	mov	fp, r0
 800615c:	f7fe bf4e 	b.w	8004ffc <d_exprlist+0x1e0>
 8006160:	2145      	movs	r1, #69	; 0x45
 8006162:	4620      	mov	r0, r4
 8006164:	f7fe fe5a 	bl	8004e1c <d_exprlist>
 8006168:	4683      	mov	fp, r0
 800616a:	f7ff b9e3 	b.w	8005534 <d_exprlist+0x718>
 800616e:	4620      	mov	r0, r4
 8006170:	f7fd ffe2 	bl	8004138 <d_template_args>
 8006174:	465a      	mov	r2, fp
 8006176:	4603      	mov	r3, r0
 8006178:	2104      	movs	r1, #4
 800617a:	4620      	mov	r0, r4
 800617c:	f7fa f8e0 	bl	8000340 <d_make_comp>
 8006180:	4603      	mov	r3, r0
 8006182:	e614      	b.n	8005dae <d_exprlist+0xf92>
 8006184:	f1bb 0f00 	cmp.w	fp, #0
 8006188:	f43f adee 	beq.w	8005d68 <d_exprlist+0xf4c>
 800618c:	f89b 3000 	ldrb.w	r3, [fp]
 8006190:	2b70      	cmp	r3, #112	; 0x70
 8006192:	d002      	beq.n	800619a <d_exprlist+0x137e>
 8006194:	2b6d      	cmp	r3, #109	; 0x6d
 8006196:	f47f ade7 	bne.w	8005d68 <d_exprlist+0xf4c>
 800619a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800619e:	429a      	cmp	r2, r3
 80061a0:	f47f ade2 	bne.w	8005d68 <d_exprlist+0xf4c>
 80061a4:	68e3      	ldr	r3, [r4, #12]
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	2a5f      	cmp	r2, #95	; 0x5f
 80061aa:	f000 81cf 	beq.w	800654c <d_exprlist+0x1730>
 80061ae:	f04f 0b01 	mov.w	fp, #1
 80061b2:	e5db      	b.n	8005d6c <d_exprlist+0xf50>
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fc9b 	bl	8006af0 <d_type>
 80061ba:	4603      	mov	r3, r0
 80061bc:	e52a      	b.n	8005c14 <d_exprlist+0xdf8>
 80061be:	9b00      	ldr	r3, [sp, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f43f ae04 	beq.w	8005dce <d_exprlist+0xfb2>
 80061c6:	781a      	ldrb	r2, [r3, #0]
 80061c8:	2a70      	cmp	r2, #112	; 0x70
 80061ca:	d002      	beq.n	80061d2 <d_exprlist+0x13b6>
 80061cc:	2a6d      	cmp	r2, #109	; 0x6d
 80061ce:	f47f adfe 	bne.w	8005dce <d_exprlist+0xfb2>
 80061d2:	9b00      	ldr	r3, [sp, #0]
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	4293      	cmp	r3, r2
 80061d8:	f47f adf9 	bne.w	8005dce <d_exprlist+0xfb2>
 80061dc:	68e3      	ldr	r3, [r4, #12]
 80061de:	781a      	ldrb	r2, [r3, #0]
 80061e0:	2a5f      	cmp	r2, #95	; 0x5f
 80061e2:	f000 81b6 	beq.w	8006552 <d_exprlist+0x1736>
 80061e6:	2201      	movs	r2, #1
 80061e8:	e5f2      	b.n	8005dd0 <d_exprlist+0xfb4>
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 fc80 	bl	8006af0 <d_type>
 80061f0:	4603      	mov	r3, r0
 80061f2:	e52e      	b.n	8005c52 <d_exprlist+0xe36>
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fc7b 	bl	8006af0 <d_type>
 80061fa:	4603      	mov	r3, r0
 80061fc:	e5f5      	b.n	8005dea <d_exprlist+0xfce>
 80061fe:	2145      	movs	r1, #69	; 0x45
 8006200:	4620      	mov	r0, r4
 8006202:	f7fe fe0b 	bl	8004e1c <d_exprlist>
 8006206:	4681      	mov	r9, r0
 8006208:	f7ff bb49 	b.w	800589e <d_exprlist+0xa82>
 800620c:	080166cc 	.word	0x080166cc
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8006216:	2a01      	cmp	r2, #1
 8006218:	d903      	bls.n	8006222 <d_exprlist+0x1406>
 800621a:	3b72      	subs	r3, #114	; 0x72
 800621c:	2b01      	cmp	r3, #1
 800621e:	f63f ab1e 	bhi.w	800585e <d_exprlist+0xa42>
 8006222:	4620      	mov	r0, r4
 8006224:	f000 fc64 	bl	8006af0 <d_type>
 8006228:	4682      	mov	sl, r0
 800622a:	f7ff bb1c 	b.w	8005866 <d_exprlist+0xa4a>
 800622e:	4620      	mov	r0, r4
 8006230:	f7fd ff82 	bl	8004138 <d_template_args>
 8006234:	465a      	mov	r2, fp
 8006236:	4603      	mov	r3, r0
 8006238:	2104      	movs	r1, #4
 800623a:	4620      	mov	r0, r4
 800623c:	f7fa f880 	bl	8000340 <d_make_comp>
 8006240:	4603      	mov	r3, r0
 8006242:	e717      	b.n	8006074 <d_exprlist+0x1258>
 8006244:	4620      	mov	r0, r4
 8006246:	f7fd ff77 	bl	8004138 <d_template_args>
 800624a:	464a      	mov	r2, r9
 800624c:	4603      	mov	r3, r0
 800624e:	2104      	movs	r1, #4
 8006250:	4620      	mov	r0, r4
 8006252:	f7fa f875 	bl	8000340 <d_make_comp>
 8006256:	4603      	mov	r3, r0
 8006258:	e6e7      	b.n	800602a <d_exprlist+0x120e>
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8006260:	2a01      	cmp	r2, #1
 8006262:	d903      	bls.n	800626c <d_exprlist+0x1450>
 8006264:	3b72      	subs	r3, #114	; 0x72
 8006266:	2b01      	cmp	r3, #1
 8006268:	f63f a9c7 	bhi.w	80055fa <d_exprlist+0x7de>
 800626c:	4620      	mov	r0, r4
 800626e:	f000 fc3f 	bl	8006af0 <d_type>
 8006272:	9000      	str	r0, [sp, #0]
 8006274:	f7ff b9c5 	b.w	8005602 <d_exprlist+0x7e6>
 8006278:	3301      	adds	r3, #1
 800627a:	60e3      	str	r3, [r4, #12]
 800627c:	2145      	movs	r1, #69	; 0x45
 800627e:	4620      	mov	r0, r4
 8006280:	f7fe fdcc 	bl	8004e1c <d_exprlist>
 8006284:	4603      	mov	r3, r0
 8006286:	464a      	mov	r2, r9
 8006288:	2135      	movs	r1, #53	; 0x35
 800628a:	f7ff b9e7 	b.w	800565c <d_exprlist+0x840>
 800628e:	2145      	movs	r1, #69	; 0x45
 8006290:	4620      	mov	r0, r4
 8006292:	f7fe fdc3 	bl	8004e1c <d_exprlist>
 8006296:	4683      	mov	fp, r0
 8006298:	f7ff b9cf 	b.w	800563a <d_exprlist+0x81e>
 800629c:	3202      	adds	r2, #2
 800629e:	60e2      	str	r2, [r4, #12]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fa53 	bl	800674c <d_expression_1>
 80062a6:	2300      	movs	r3, #0
 80062a8:	4602      	mov	r2, r0
 80062aa:	2149      	movs	r1, #73	; 0x49
 80062ac:	4620      	mov	r0, r4
 80062ae:	f7fa f847 	bl	8000340 <d_make_comp>
 80062b2:	4683      	mov	fp, r0
 80062b4:	f7fe bea2 	b.w	8004ffc <d_exprlist+0x1e0>
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fa47 	bl	800674c <d_expression_1>
 80062be:	4681      	mov	r9, r0
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 fa43 	bl	800674c <d_expression_1>
 80062c6:	4682      	mov	sl, r0
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fa3f 	bl	800674c <d_expression_1>
 80062ce:	f7ff baa9 	b.w	8005824 <d_exprlist+0xa08>
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fa3a 	bl	800674c <d_expression_1>
 80062d8:	4683      	mov	fp, r0
 80062da:	f7ff b92b 	b.w	8005534 <d_exprlist+0x718>
 80062de:	4620      	mov	r0, r4
 80062e0:	f7fd ff2a 	bl	8004138 <d_template_args>
 80062e4:	465a      	mov	r2, fp
 80062e6:	4603      	mov	r3, r0
 80062e8:	2104      	movs	r1, #4
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7fa f828 	bl	8000340 <d_make_comp>
 80062f0:	4683      	mov	fp, r0
 80062f2:	f7ff b91f 	b.w	8005534 <d_exprlist+0x718>
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 fa28 	bl	800674c <d_expression_1>
 80062fc:	9000      	str	r0, [sp, #0]
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 fa24 	bl	800674c <d_expression_1>
 8006304:	4683      	mov	fp, r0
 8006306:	4620      	mov	r0, r4
 8006308:	f000 fa20 	bl	800674c <d_expression_1>
 800630c:	f7ff b958 	b.w	80055c0 <d_exprlist+0x7a4>
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fbed 	bl	8006af0 <d_type>
 8006316:	464a      	mov	r2, r9
 8006318:	4603      	mov	r3, r0
 800631a:	2135      	movs	r1, #53	; 0x35
 800631c:	f7ff b99e 	b.w	800565c <d_exprlist+0x840>
 8006320:	3301      	adds	r3, #1
 8006322:	60e3      	str	r3, [r4, #12]
 8006324:	2000      	movs	r0, #0
 8006326:	f7ff b8c8 	b.w	80054ba <d_exprlist+0x69e>
 800632a:	785a      	ldrb	r2, [r3, #1]
 800632c:	2a69      	cmp	r2, #105	; 0x69
 800632e:	f47f ab44 	bne.w	80059ba <d_exprlist+0xb9e>
 8006332:	3302      	adds	r3, #2
 8006334:	60e3      	str	r3, [r4, #12]
 8006336:	2145      	movs	r1, #69	; 0x45
 8006338:	4620      	mov	r0, r4
 800633a:	f7fe fd6f 	bl	8004e1c <d_exprlist>
 800633e:	f7ff b93f 	b.w	80055c0 <d_exprlist+0x7a4>
 8006342:	3301      	adds	r3, #1
 8006344:	60e3      	str	r3, [r4, #12]
 8006346:	2000      	movs	r0, #0
 8006348:	f7ff b93a 	b.w	80055c0 <d_exprlist+0x7a4>
 800634c:	4620      	mov	r0, r4
 800634e:	f000 f9fd 	bl	800674c <d_expression_1>
 8006352:	4683      	mov	fp, r0
 8006354:	f7ff b971 	b.w	800563a <d_exprlist+0x81e>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f9f7 	bl	800674c <d_expression_1>
 800635e:	4683      	mov	fp, r0
 8006360:	f7ff b9f5 	b.w	800574e <d_exprlist+0x932>
 8006364:	3301      	adds	r3, #1
 8006366:	60e3      	str	r3, [r4, #12]
 8006368:	2145      	movs	r1, #69	; 0x45
 800636a:	4620      	mov	r0, r4
 800636c:	f7fe fd56 	bl	8004e1c <d_exprlist>
 8006370:	4603      	mov	r3, r0
 8006372:	e44f      	b.n	8005c14 <d_exprlist+0xdf8>
 8006374:	4620      	mov	r0, r4
 8006376:	f000 f9e9 	bl	800674c <d_expression_1>
 800637a:	4681      	mov	r9, r0
 800637c:	f7ff ba8f 	b.w	800589e <d_exprlist+0xa82>
 8006380:	785a      	ldrb	r2, [r3, #1]
 8006382:	2a69      	cmp	r2, #105	; 0x69
 8006384:	f47f ab12 	bne.w	80059ac <d_exprlist+0xb90>
 8006388:	3302      	adds	r3, #2
 800638a:	60e3      	str	r3, [r4, #12]
 800638c:	2145      	movs	r1, #69	; 0x45
 800638e:	4620      	mov	r0, r4
 8006390:	f7fe fd44 	bl	8004e1c <d_exprlist>
 8006394:	f7ff ba46 	b.w	8005824 <d_exprlist+0xa08>
 8006398:	3301      	adds	r3, #1
 800639a:	60e3      	str	r3, [r4, #12]
 800639c:	2000      	movs	r0, #0
 800639e:	f7ff ba41 	b.w	8005824 <d_exprlist+0xa08>
 80063a2:	2145      	movs	r1, #69	; 0x45
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7fe fd39 	bl	8004e1c <d_exprlist>
 80063aa:	4683      	mov	fp, r0
 80063ac:	f7ff b9cf 	b.w	800574e <d_exprlist+0x932>
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80063b6:	2a01      	cmp	r2, #1
 80063b8:	d903      	bls.n	80063c2 <d_exprlist+0x15a6>
 80063ba:	3b72      	subs	r3, #114	; 0x72
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f63f a99d 	bhi.w	80056fc <d_exprlist+0x8e0>
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fb94 	bl	8006af0 <d_type>
 80063c8:	9000      	str	r0, [sp, #0]
 80063ca:	f7ff b99b 	b.w	8005704 <d_exprlist+0x8e8>
 80063ce:	785a      	ldrb	r2, [r3, #1]
 80063d0:	2a69      	cmp	r2, #105	; 0x69
 80063d2:	f47e afaf 	bne.w	8005334 <d_exprlist+0x518>
 80063d6:	3302      	adds	r3, #2
 80063d8:	60e3      	str	r3, [r4, #12]
 80063da:	2145      	movs	r1, #69	; 0x45
 80063dc:	4620      	mov	r0, r4
 80063de:	f7fe fd1d 	bl	8004e1c <d_exprlist>
 80063e2:	f7ff b86a 	b.w	80054ba <d_exprlist+0x69e>
 80063e6:	4620      	mov	r0, r4
 80063e8:	f7fd fea6 	bl	8004138 <d_template_args>
 80063ec:	465a      	mov	r2, fp
 80063ee:	4603      	mov	r3, r0
 80063f0:	2104      	movs	r1, #4
 80063f2:	4620      	mov	r0, r4
 80063f4:	f7f9 ffa4 	bl	8000340 <d_make_comp>
 80063f8:	4683      	mov	fp, r0
 80063fa:	f7ff b91e 	b.w	800563a <d_exprlist+0x81e>
 80063fe:	3301      	adds	r3, #1
 8006400:	60e3      	str	r3, [r4, #12]
 8006402:	2145      	movs	r1, #69	; 0x45
 8006404:	4620      	mov	r0, r4
 8006406:	f7fe fd09 	bl	8004e1c <d_exprlist>
 800640a:	4603      	mov	r3, r0
 800640c:	e421      	b.n	8005c52 <d_exprlist+0xe36>
 800640e:	4620      	mov	r0, r4
 8006410:	f7fd fe92 	bl	8004138 <d_template_args>
 8006414:	465a      	mov	r2, fp
 8006416:	4603      	mov	r3, r0
 8006418:	2104      	movs	r1, #4
 800641a:	4620      	mov	r0, r4
 800641c:	f7f9 ff90 	bl	8000340 <d_make_comp>
 8006420:	464a      	mov	r2, r9
 8006422:	4603      	mov	r3, r0
 8006424:	2101      	movs	r1, #1
 8006426:	f7ff b919 	b.w	800565c <d_exprlist+0x840>
 800642a:	4620      	mov	r0, r4
 800642c:	f7fd fe84 	bl	8004138 <d_template_args>
 8006430:	464a      	mov	r2, r9
 8006432:	4603      	mov	r3, r0
 8006434:	2104      	movs	r1, #4
 8006436:	4620      	mov	r0, r4
 8006438:	f7f9 ff82 	bl	8000340 <d_make_comp>
 800643c:	4681      	mov	r9, r0
 800643e:	f7ff ba2e 	b.w	800589e <d_exprlist+0xa82>
 8006442:	4620      	mov	r0, r4
 8006444:	f000 f982 	bl	800674c <d_expression_1>
 8006448:	9000      	str	r0, [sp, #0]
 800644a:	4620      	mov	r0, r4
 800644c:	f000 f97e 	bl	800674c <d_expression_1>
 8006450:	4683      	mov	fp, r0
 8006452:	4620      	mov	r0, r4
 8006454:	f000 f97a 	bl	800674c <d_expression_1>
 8006458:	f7ff b937 	b.w	80056ca <d_exprlist+0x8ae>
 800645c:	3201      	adds	r2, #1
 800645e:	60e2      	str	r2, [r4, #12]
 8006460:	2000      	movs	r0, #0
 8006462:	f7ff b932 	b.w	80056ca <d_exprlist+0x8ae>
 8006466:	3301      	adds	r3, #1
 8006468:	60e3      	str	r3, [r4, #12]
 800646a:	2000      	movs	r0, #0
 800646c:	f7ff bb28 	b.w	8005ac0 <d_exprlist+0xca4>
 8006470:	9000      	str	r0, [sp, #0]
 8006472:	4620      	mov	r0, r4
 8006474:	f7fd fe60 	bl	8004138 <d_template_args>
 8006478:	9a00      	ldr	r2, [sp, #0]
 800647a:	4603      	mov	r3, r0
 800647c:	2104      	movs	r1, #4
 800647e:	4620      	mov	r0, r4
 8006480:	f7f9 ff5e 	bl	8000340 <d_make_comp>
 8006484:	4603      	mov	r3, r0
 8006486:	e65a      	b.n	800613e <d_exprlist+0x1322>
 8006488:	4620      	mov	r0, r4
 800648a:	f000 f95f 	bl	800674c <d_expression_1>
 800648e:	9000      	str	r0, [sp, #0]
 8006490:	4620      	mov	r0, r4
 8006492:	f000 f95b 	bl	800674c <d_expression_1>
 8006496:	9001      	str	r0, [sp, #4]
 8006498:	4620      	mov	r0, r4
 800649a:	f000 f957 	bl	800674c <d_expression_1>
 800649e:	f7ff bb0f 	b.w	8005ac0 <d_exprlist+0xca4>
 80064a2:	2145      	movs	r1, #69	; 0x45
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7fe fcb9 	bl	8004e1c <d_exprlist>
 80064aa:	4602      	mov	r2, r0
 80064ac:	f7ff bb5b 	b.w	8005b66 <d_exprlist+0xd4a>
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80064b6:	2901      	cmp	r1, #1
 80064b8:	d903      	bls.n	80064c2 <d_exprlist+0x16a6>
 80064ba:	3a72      	subs	r2, #114	; 0x72
 80064bc:	2a01      	cmp	r2, #1
 80064be:	f63f ab28 	bhi.w	8005b12 <d_exprlist+0xcf6>
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fb14 	bl	8006af0 <d_type>
 80064c8:	9001      	str	r0, [sp, #4]
 80064ca:	f7ff bb26 	b.w	8005b1a <d_exprlist+0xcfe>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f93c 	bl	800674c <d_expression_1>
 80064d4:	4602      	mov	r2, r0
 80064d6:	f7ff bb46 	b.w	8005b66 <d_exprlist+0xd4a>
 80064da:	2b6f      	cmp	r3, #111	; 0x6f
 80064dc:	d017      	beq.n	800650e <d_exprlist+0x16f2>
 80064de:	2b69      	cmp	r3, #105	; 0x69
 80064e0:	d11d      	bne.n	800651e <d_exprlist+0x1702>
 80064e2:	7853      	ldrb	r3, [r2, #1]
 80064e4:	2b6c      	cmp	r3, #108	; 0x6c
 80064e6:	f47f aa9a 	bne.w	8005a1e <d_exprlist+0xc02>
 80064ea:	f04f 0b00 	mov.w	fp, #0
 80064ee:	68e3      	ldr	r3, [r4, #12]
 80064f0:	3302      	adds	r3, #2
 80064f2:	60e3      	str	r3, [r4, #12]
 80064f4:	2145      	movs	r1, #69	; 0x45
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7fe fc90 	bl	8004e1c <d_exprlist>
 80064fc:	465a      	mov	r2, fp
 80064fe:	4603      	mov	r3, r0
 8006500:	2130      	movs	r1, #48	; 0x30
 8006502:	4620      	mov	r0, r4
 8006504:	f7f9 ff1c 	bl	8000340 <d_make_comp>
 8006508:	4683      	mov	fp, r0
 800650a:	f7fe bd77 	b.w	8004ffc <d_exprlist+0x1e0>
 800650e:	7853      	ldrb	r3, [r2, #1]
 8006510:	2b6e      	cmp	r3, #110	; 0x6e
 8006512:	f47f aa84 	bne.w	8005a1e <d_exprlist+0xc02>
 8006516:	3202      	adds	r2, #2
 8006518:	60e2      	str	r2, [r4, #12]
 800651a:	f7fe beb5 	b.w	8005288 <d_exprlist+0x46c>
 800651e:	2b74      	cmp	r3, #116	; 0x74
 8006520:	f47f aa7d 	bne.w	8005a1e <d_exprlist+0xc02>
 8006524:	7853      	ldrb	r3, [r2, #1]
 8006526:	2b6c      	cmp	r3, #108	; 0x6c
 8006528:	f47f aa79 	bne.w	8005a1e <d_exprlist+0xc02>
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fadf 	bl	8006af0 <d_type>
 8006532:	4683      	mov	fp, r0
 8006534:	e7db      	b.n	80064ee <d_exprlist+0x16d2>
 8006536:	460a      	mov	r2, r1
 8006538:	f7fe be41 	b.w	80051be <d_exprlist+0x3a2>
 800653c:	3301      	adds	r3, #1
 800653e:	60e3      	str	r3, [r4, #12]
 8006540:	2145      	movs	r1, #69	; 0x45
 8006542:	4620      	mov	r0, r4
 8006544:	f7fe fc6a 	bl	8004e1c <d_exprlist>
 8006548:	4603      	mov	r3, r0
 800654a:	e44e      	b.n	8005dea <d_exprlist+0xfce>
 800654c:	3301      	adds	r3, #1
 800654e:	60e3      	str	r3, [r4, #12]
 8006550:	e40a      	b.n	8005d68 <d_exprlist+0xf4c>
 8006552:	3301      	adds	r3, #1
 8006554:	60e3      	str	r3, [r4, #12]
 8006556:	e43a      	b.n	8005dce <d_exprlist+0xfb2>
 8006558:	f04f 0a00 	mov.w	sl, #0
 800655c:	3102      	adds	r1, #2
 800655e:	60e1      	str	r1, [r4, #12]
 8006560:	4620      	mov	r0, r4
 8006562:	2145      	movs	r1, #69	; 0x45
 8006564:	f7fe fc5a 	bl	8004e1c <d_exprlist>
 8006568:	4652      	mov	r2, sl
 800656a:	4603      	mov	r3, r0
 800656c:	2130      	movs	r1, #48	; 0x30
 800656e:	4620      	mov	r0, r4
 8006570:	f7f9 fee6 	bl	8000340 <d_make_comp>
 8006574:	4682      	mov	sl, r0
 8006576:	f7fe bd7d 	b.w	8005074 <d_exprlist+0x258>
 800657a:	2b6f      	cmp	r3, #111	; 0x6f
 800657c:	d010      	beq.n	80065a0 <d_exprlist+0x1784>
 800657e:	2b69      	cmp	r3, #105	; 0x69
 8006580:	d13b      	bne.n	80065fa <d_exprlist+0x17de>
 8006582:	7843      	ldrb	r3, [r0, #1]
 8006584:	2b6c      	cmp	r3, #108	; 0x6c
 8006586:	f47e af0f 	bne.w	80053a8 <d_exprlist+0x58c>
 800658a:	1c82      	adds	r2, r0, #2
 800658c:	60e2      	str	r2, [r4, #12]
 800658e:	2145      	movs	r1, #69	; 0x45
 8006590:	4620      	mov	r0, r4
 8006592:	f7fe fc43 	bl	8004e1c <d_exprlist>
 8006596:	465a      	mov	r2, fp
 8006598:	4603      	mov	r3, r0
 800659a:	2130      	movs	r1, #48	; 0x30
 800659c:	f7ff b85e 	b.w	800565c <d_exprlist+0x840>
 80065a0:	7843      	ldrb	r3, [r0, #1]
 80065a2:	2b6e      	cmp	r3, #110	; 0x6e
 80065a4:	f47e af00 	bne.w	80053a8 <d_exprlist+0x58c>
 80065a8:	1c82      	adds	r2, r0, #2
 80065aa:	60e2      	str	r2, [r4, #12]
 80065ac:	f7fe be51 	b.w	8005252 <d_exprlist+0x436>
 80065b0:	2b6f      	cmp	r3, #111	; 0x6f
 80065b2:	d016      	beq.n	80065e2 <d_exprlist+0x17c6>
 80065b4:	2b69      	cmp	r3, #105	; 0x69
 80065b6:	d12d      	bne.n	8006614 <d_exprlist+0x17f8>
 80065b8:	78d3      	ldrb	r3, [r2, #3]
 80065ba:	2b6c      	cmp	r3, #108	; 0x6c
 80065bc:	f47f a8d8 	bne.w	8005770 <d_exprlist+0x954>
 80065c0:	f04f 0800 	mov.w	r8, #0
 80065c4:	3102      	adds	r1, #2
 80065c6:	60e1      	str	r1, [r4, #12]
 80065c8:	4620      	mov	r0, r4
 80065ca:	2145      	movs	r1, #69	; 0x45
 80065cc:	f7fe fc26 	bl	8004e1c <d_exprlist>
 80065d0:	4642      	mov	r2, r8
 80065d2:	4603      	mov	r3, r0
 80065d4:	2130      	movs	r1, #48	; 0x30
 80065d6:	4620      	mov	r0, r4
 80065d8:	f7f9 feb2 	bl	8000340 <d_make_comp>
 80065dc:	4602      	mov	r2, r0
 80065de:	f7fe bdee 	b.w	80051be <d_exprlist+0x3a2>
 80065e2:	78d3      	ldrb	r3, [r2, #3]
 80065e4:	2b6e      	cmp	r3, #110	; 0x6e
 80065e6:	f47f a8c3 	bne.w	8005770 <d_exprlist+0x954>
 80065ea:	3204      	adds	r2, #4
 80065ec:	60e2      	str	r2, [r4, #12]
 80065ee:	f7fe bdd9 	b.w	80051a4 <d_exprlist+0x388>
 80065f2:	3301      	adds	r3, #1
 80065f4:	60e3      	str	r3, [r4, #12]
 80065f6:	f7ff bb1d 	b.w	8005c34 <d_exprlist+0xe18>
 80065fa:	2b74      	cmp	r3, #116	; 0x74
 80065fc:	f47e aed4 	bne.w	80053a8 <d_exprlist+0x58c>
 8006600:	7843      	ldrb	r3, [r0, #1]
 8006602:	2b6c      	cmp	r3, #108	; 0x6c
 8006604:	f47e aed0 	bne.w	80053a8 <d_exprlist+0x58c>
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fa71 	bl	8006af0 <d_type>
 800660e:	4683      	mov	fp, r0
 8006610:	68e0      	ldr	r0, [r4, #12]
 8006612:	e7ba      	b.n	800658a <d_exprlist+0x176e>
 8006614:	2b74      	cmp	r3, #116	; 0x74
 8006616:	f47f a8ab 	bne.w	8005770 <d_exprlist+0x954>
 800661a:	78d3      	ldrb	r3, [r2, #3]
 800661c:	2b6c      	cmp	r3, #108	; 0x6c
 800661e:	f47f a8a7 	bne.w	8005770 <d_exprlist+0x954>
 8006622:	4620      	mov	r0, r4
 8006624:	f000 fa64 	bl	8006af0 <d_type>
 8006628:	68e1      	ldr	r1, [r4, #12]
 800662a:	4680      	mov	r8, r0
 800662c:	e7ca      	b.n	80065c4 <d_exprlist+0x17a8>
 800662e:	7853      	ldrb	r3, [r2, #1]
 8006630:	2b69      	cmp	r3, #105	; 0x69
 8006632:	d00f      	beq.n	8006654 <d_exprlist+0x1838>
 8006634:	f04f 0900 	mov.w	r9, #0
 8006638:	f7ff b9f1 	b.w	8005a1e <d_exprlist+0xc02>
 800663c:	785a      	ldrb	r2, [r3, #1]
 800663e:	2a69      	cmp	r2, #105	; 0x69
 8006640:	f47f ab23 	bne.w	8005c8a <d_exprlist+0xe6e>
 8006644:	3302      	adds	r3, #2
 8006646:	60e3      	str	r3, [r4, #12]
 8006648:	2145      	movs	r1, #69	; 0x45
 800664a:	4620      	mov	r0, r4
 800664c:	f7fe fbe6 	bl	8004e1c <d_exprlist>
 8006650:	f7ff ba36 	b.w	8005ac0 <d_exprlist+0xca4>
 8006654:	3202      	adds	r2, #2
 8006656:	60e2      	str	r2, [r4, #12]
 8006658:	2145      	movs	r1, #69	; 0x45
 800665a:	4620      	mov	r0, r4
 800665c:	f7fe fbde 	bl	8004e1c <d_exprlist>
 8006660:	f7ff b833 	b.w	80056ca <d_exprlist+0x8ae>
 8006664:	2b6f      	cmp	r3, #111	; 0x6f
 8006666:	d016      	beq.n	8006696 <d_exprlist+0x187a>
 8006668:	2b69      	cmp	r3, #105	; 0x69
 800666a:	d120      	bne.n	80066ae <d_exprlist+0x1892>
 800666c:	784b      	ldrb	r3, [r1, #1]
 800666e:	2b6c      	cmp	r3, #108	; 0x6c
 8006670:	f47e ae50 	bne.w	8005314 <d_exprlist+0x4f8>
 8006674:	f04f 0900 	mov.w	r9, #0
 8006678:	3102      	adds	r1, #2
 800667a:	60e1      	str	r1, [r4, #12]
 800667c:	4620      	mov	r0, r4
 800667e:	2145      	movs	r1, #69	; 0x45
 8006680:	f7fe fbcc 	bl	8004e1c <d_exprlist>
 8006684:	464a      	mov	r2, r9
 8006686:	4603      	mov	r3, r0
 8006688:	2130      	movs	r1, #48	; 0x30
 800668a:	4620      	mov	r0, r4
 800668c:	f7f9 fe58 	bl	8000340 <d_make_comp>
 8006690:	4681      	mov	r9, r0
 8006692:	f7fe bd45 	b.w	8005120 <d_exprlist+0x304>
 8006696:	784b      	ldrb	r3, [r1, #1]
 8006698:	2b6e      	cmp	r3, #110	; 0x6e
 800669a:	f47e ae3b 	bne.w	8005314 <d_exprlist+0x4f8>
 800669e:	3102      	adds	r1, #2
 80066a0:	60e1      	str	r1, [r4, #12]
 80066a2:	f7fe bd33 	b.w	800510c <d_exprlist+0x2f0>
 80066a6:	3301      	adds	r3, #1
 80066a8:	60e3      	str	r3, [r4, #12]
 80066aa:	f7ff baa4 	b.w	8005bf6 <d_exprlist+0xdda>
 80066ae:	2b74      	cmp	r3, #116	; 0x74
 80066b0:	f47e ae30 	bne.w	8005314 <d_exprlist+0x4f8>
 80066b4:	784b      	ldrb	r3, [r1, #1]
 80066b6:	2b6c      	cmp	r3, #108	; 0x6c
 80066b8:	f47e ae2c 	bne.w	8005314 <d_exprlist+0x4f8>
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 fa17 	bl	8006af0 <d_type>
 80066c2:	68e1      	ldr	r1, [r4, #12]
 80066c4:	4681      	mov	r9, r0
 80066c6:	e7d7      	b.n	8006678 <d_exprlist+0x185c>
 80066c8:	2b74      	cmp	r3, #116	; 0x74
 80066ca:	f47e ae90 	bne.w	80053ee <d_exprlist+0x5d2>
 80066ce:	784b      	ldrb	r3, [r1, #1]
 80066d0:	2b6c      	cmp	r3, #108	; 0x6c
 80066d2:	f47e ae8c 	bne.w	80053ee <d_exprlist+0x5d2>
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 fa0a 	bl	8006af0 <d_type>
 80066dc:	68e1      	ldr	r1, [r4, #12]
 80066de:	4682      	mov	sl, r0
 80066e0:	e73c      	b.n	800655c <d_exprlist+0x1740>
 80066e2:	2b6f      	cmp	r3, #111	; 0x6f
 80066e4:	d016      	beq.n	8006714 <d_exprlist+0x18f8>
 80066e6:	2b69      	cmp	r3, #105	; 0x69
 80066e8:	d11c      	bne.n	8006724 <d_exprlist+0x1908>
 80066ea:	7853      	ldrb	r3, [r2, #1]
 80066ec:	2b6c      	cmp	r3, #108	; 0x6c
 80066ee:	f47e abd9 	bne.w	8004ea4 <d_exprlist+0x88>
 80066f2:	f04f 0800 	mov.w	r8, #0
 80066f6:	3202      	adds	r2, #2
 80066f8:	60e2      	str	r2, [r4, #12]
 80066fa:	2145      	movs	r1, #69	; 0x45
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7fe fb8d 	bl	8004e1c <d_exprlist>
 8006702:	4642      	mov	r2, r8
 8006704:	4603      	mov	r3, r0
 8006706:	2130      	movs	r1, #48	; 0x30
 8006708:	4620      	mov	r0, r4
 800670a:	f7f9 fe19 	bl	8000340 <d_make_comp>
 800670e:	4602      	mov	r2, r0
 8006710:	f7fe bc0d 	b.w	8004f2e <d_exprlist+0x112>
 8006714:	7853      	ldrb	r3, [r2, #1]
 8006716:	2b6e      	cmp	r3, #110	; 0x6e
 8006718:	f47e abc4 	bne.w	8004ea4 <d_exprlist+0x88>
 800671c:	3202      	adds	r2, #2
 800671e:	60e2      	str	r2, [r4, #12]
 8006720:	f7fe bb91 	b.w	8004e46 <d_exprlist+0x2a>
 8006724:	2b74      	cmp	r3, #116	; 0x74
 8006726:	f47e abbd 	bne.w	8004ea4 <d_exprlist+0x88>
 800672a:	7853      	ldrb	r3, [r2, #1]
 800672c:	2b6c      	cmp	r3, #108	; 0x6c
 800672e:	f47e abb9 	bne.w	8004ea4 <d_exprlist+0x88>
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f9dc 	bl	8006af0 <d_type>
 8006738:	68e2      	ldr	r2, [r4, #12]
 800673a:	4680      	mov	r8, r0
 800673c:	e7db      	b.n	80066f6 <d_exprlist+0x18da>
 800673e:	f04f 0900 	mov.w	r9, #0
 8006742:	e6ce      	b.n	80064e2 <d_exprlist+0x16c6>
 8006744:	f04f 0900 	mov.w	r9, #0
 8006748:	f7fe bd8d 	b.w	8005266 <d_exprlist+0x44a>

0800674c <d_expression_1>:
 800674c:	68c2      	ldr	r2, [r0, #12]
 800674e:	7813      	ldrb	r3, [r2, #0]
 8006750:	2b4c      	cmp	r3, #76	; 0x4c
 8006752:	d060      	beq.n	8006816 <d_expression_1+0xca>
 8006754:	2b54      	cmp	r3, #84	; 0x54
 8006756:	d060      	beq.n	800681a <d_expression_1+0xce>
 8006758:	2b73      	cmp	r3, #115	; 0x73
 800675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675e:	4604      	mov	r4, r0
 8006760:	d024      	beq.n	80067ac <d_expression_1+0x60>
 8006762:	2b66      	cmp	r3, #102	; 0x66
 8006764:	d00f      	beq.n	8006786 <d_expression_1+0x3a>
 8006766:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800676a:	2909      	cmp	r1, #9
 800676c:	f200 818b 	bhi.w	8006a86 <d_expression_1+0x33a>
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fe3b 	bl	80073ec <d_unqualified_name>
 8006776:	4605      	mov	r5, r0
 8006778:	b1a8      	cbz	r0, 80067a6 <d_expression_1+0x5a>
 800677a:	68e3      	ldr	r3, [r4, #12]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b49      	cmp	r3, #73	; 0x49
 8006780:	d062      	beq.n	8006848 <d_expression_1+0xfc>
 8006782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006786:	7853      	ldrb	r3, [r2, #1]
 8006788:	2b70      	cmp	r3, #112	; 0x70
 800678a:	d029      	beq.n	80067e0 <d_expression_1+0x94>
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fd6d 	bl	800726c <d_operator_name>
 8006792:	4605      	mov	r5, r0
 8006794:	b138      	cbz	r0, 80067a6 <d_expression_1+0x5a>
 8006796:	7803      	ldrb	r3, [r0, #0]
 8006798:	2b31      	cmp	r3, #49	; 0x31
 800679a:	d040      	beq.n	800681e <d_expression_1+0xd2>
 800679c:	2b32      	cmp	r3, #50	; 0x32
 800679e:	d016      	beq.n	80067ce <d_expression_1+0x82>
 80067a0:	2b33      	cmp	r3, #51	; 0x33
 80067a2:	f000 8115 	beq.w	80069d0 <d_expression_1+0x284>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ac:	7853      	ldrb	r3, [r2, #1]
 80067ae:	2b72      	cmp	r3, #114	; 0x72
 80067b0:	d055      	beq.n	800685e <d_expression_1+0x112>
 80067b2:	2b70      	cmp	r3, #112	; 0x70
 80067b4:	d1ea      	bne.n	800678c <d_expression_1+0x40>
 80067b6:	3202      	adds	r2, #2
 80067b8:	60c2      	str	r2, [r0, #12]
 80067ba:	f7ff ffc7 	bl	800674c <d_expression_1>
 80067be:	2300      	movs	r3, #0
 80067c0:	4602      	mov	r2, r0
 80067c2:	2149      	movs	r1, #73	; 0x49
 80067c4:	4620      	mov	r0, r4
 80067c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ca:	f7f9 bdb9 	b.w	8000340 <d_make_comp>
 80067ce:	686b      	ldr	r3, [r5, #4]
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d8e8      	bhi.n	80067a6 <d_expression_1+0x5a>
 80067d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80067d8:	00d9005d 	.word	0x00d9005d
 80067dc:	006500a6 	.word	0x006500a6
 80067e0:	1c93      	adds	r3, r2, #2
 80067e2:	60c3      	str	r3, [r0, #12]
 80067e4:	7893      	ldrb	r3, [r2, #2]
 80067e6:	2b54      	cmp	r3, #84	; 0x54
 80067e8:	d04f      	beq.n	800688a <d_expression_1+0x13e>
 80067ea:	f7f9 ff35 	bl	8000658 <d_compact_number>
 80067ee:	1c45      	adds	r5, r0, #1
 80067f0:	d0d9      	beq.n	80067a6 <d_expression_1+0x5a>
 80067f2:	6963      	ldr	r3, [r4, #20]
 80067f4:	69a2      	ldr	r2, [r4, #24]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	dad5      	bge.n	80067a6 <d_expression_1+0x5a>
 80067fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80067fe:	6921      	ldr	r1, [r4, #16]
 8006800:	3301      	adds	r3, #1
 8006802:	0092      	lsls	r2, r2, #2
 8006804:	6163      	str	r3, [r4, #20]
 8006806:	188b      	adds	r3, r1, r2
 8006808:	d0cd      	beq.n	80067a6 <d_expression_1+0x5a>
 800680a:	2006      	movs	r0, #6
 800680c:	5488      	strb	r0, [r1, r2]
 800680e:	605d      	str	r5, [r3, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	f001 bc5f 	b.w	80080d8 <d_expr_primary>
 800681a:	f7f9 bf35 	b.w	8000688 <d_template_param>
 800681e:	6847      	ldr	r7, [r0, #4]
 8006820:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	683e      	ldr	r6, [r7, #0]
 8006826:	49ad      	ldr	r1, [pc, #692]	; (8006adc <d_expression_1+0x390>)
 8006828:	3b02      	subs	r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	6323      	str	r3, [r4, #48]	; 0x30
 800682e:	4630      	mov	r0, r6
 8006830:	f003 fc0a 	bl	800a048 <strcmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	f000 80d7 	beq.w	80069e8 <d_expression_1+0x29c>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d8b2      	bhi.n	80067a6 <d_expression_1+0x5a>
 8006840:	e8df f003 	tbb	[pc, r3]
 8006844:	3071b627 	.word	0x3071b627
 8006848:	4620      	mov	r0, r4
 800684a:	f7fd fc75 	bl	8004138 <d_template_args>
 800684e:	462a      	mov	r2, r5
 8006850:	4603      	mov	r3, r0
 8006852:	2104      	movs	r1, #4
 8006854:	4620      	mov	r0, r4
 8006856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800685a:	f7f9 bd71 	b.w	8000340 <d_make_comp>
 800685e:	3202      	adds	r2, #2
 8006860:	60c2      	str	r2, [r0, #12]
 8006862:	f000 f945 	bl	8006af0 <d_type>
 8006866:	4605      	mov	r5, r0
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fdbf 	bl	80073ec <d_unqualified_name>
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b49      	cmp	r3, #73	; 0x49
 8006874:	4606      	mov	r6, r0
 8006876:	f000 80db 	beq.w	8006a30 <d_expression_1+0x2e4>
 800687a:	4603      	mov	r3, r0
 800687c:	462a      	mov	r2, r5
 800687e:	4620      	mov	r0, r4
 8006880:	2101      	movs	r1, #1
 8006882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	f7f9 bd5b 	b.w	8000340 <d_make_comp>
 800688a:	3203      	adds	r2, #3
 800688c:	60c2      	str	r2, [r0, #12]
 800688e:	2500      	movs	r5, #0
 8006890:	e7af      	b.n	80067f2 <d_expression_1+0xa6>
 8006892:	462a      	mov	r2, r5
 8006894:	4620      	mov	r0, r4
 8006896:	2300      	movs	r3, #0
 8006898:	2134      	movs	r1, #52	; 0x34
 800689a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	f7f9 bd4f 	b.w	8000340 <d_make_comp>
 80068a2:	2600      	movs	r6, #0
 80068a4:	498e      	ldr	r1, [pc, #568]	; (8006ae0 <d_expression_1+0x394>)
 80068a6:	4630      	mov	r0, r6
 80068a8:	f003 fbce 	bl	800a048 <strcmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	f000 809f 	beq.w	80069f0 <d_expression_1+0x2a4>
 80068b2:	7833      	ldrb	r3, [r6, #0]
 80068b4:	2b6e      	cmp	r3, #110	; 0x6e
 80068b6:	f47f af76 	bne.w	80067a6 <d_expression_1+0x5a>
 80068ba:	7873      	ldrb	r3, [r6, #1]
 80068bc:	2b77      	cmp	r3, #119	; 0x77
 80068be:	d002      	beq.n	80068c6 <d_expression_1+0x17a>
 80068c0:	2b61      	cmp	r3, #97	; 0x61
 80068c2:	f47f af70 	bne.w	80067a6 <d_expression_1+0x5a>
 80068c6:	215f      	movs	r1, #95	; 0x5f
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7fe faa7 	bl	8004e1c <d_exprlist>
 80068ce:	4606      	mov	r6, r0
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 f90d 	bl	8006af0 <d_type>
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	7819      	ldrb	r1, [r3, #0]
 80068da:	2945      	cmp	r1, #69	; 0x45
 80068dc:	4607      	mov	r7, r0
 80068de:	f000 80b7 	beq.w	8006a50 <d_expression_1+0x304>
 80068e2:	2970      	cmp	r1, #112	; 0x70
 80068e4:	f000 80c3 	beq.w	8006a6e <d_expression_1+0x322>
 80068e8:	2969      	cmp	r1, #105	; 0x69
 80068ea:	f47f af5c 	bne.w	80067a6 <d_expression_1+0x5a>
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b6c      	cmp	r3, #108	; 0x6c
 80068f2:	f47f af58 	bne.w	80067a6 <d_expression_1+0x5a>
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff ff28 	bl	800674c <d_expression_1>
 80068fc:	4603      	mov	r3, r0
 80068fe:	463a      	mov	r2, r7
 8006900:	213a      	movs	r1, #58	; 0x3a
 8006902:	4620      	mov	r0, r4
 8006904:	f7f9 fd1c 	bl	8000340 <d_make_comp>
 8006908:	4632      	mov	r2, r6
 800690a:	4603      	mov	r3, r0
 800690c:	2139      	movs	r1, #57	; 0x39
 800690e:	4620      	mov	r0, r4
 8006910:	f7f9 fd16 	bl	8000340 <d_make_comp>
 8006914:	462a      	mov	r2, r5
 8006916:	4603      	mov	r3, r0
 8006918:	2138      	movs	r1, #56	; 0x38
 800691a:	4620      	mov	r0, r4
 800691c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006920:	f7f9 bd0e 	b.w	8000340 <d_make_comp>
 8006924:	2600      	movs	r6, #0
 8006926:	686b      	ldr	r3, [r5, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	785a      	ldrb	r2, [r3, #1]
 800692c:	2a63      	cmp	r2, #99	; 0x63
 800692e:	d072      	beq.n	8006a16 <d_expression_1+0x2ca>
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff ff0b 	bl	800674c <d_expression_1>
 8006936:	4607      	mov	r7, r0
 8006938:	496a      	ldr	r1, [pc, #424]	; (8006ae4 <d_expression_1+0x398>)
 800693a:	4630      	mov	r0, r6
 800693c:	f003 fb84 	bl	800a048 <strcmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	d062      	beq.n	8006a0a <d_expression_1+0x2be>
 8006944:	4968      	ldr	r1, [pc, #416]	; (8006ae8 <d_expression_1+0x39c>)
 8006946:	4630      	mov	r0, r6
 8006948:	f003 fb7e 	bl	800a048 <strcmp>
 800694c:	b128      	cbz	r0, 800695a <d_expression_1+0x20e>
 800694e:	4630      	mov	r0, r6
 8006950:	4966      	ldr	r1, [pc, #408]	; (8006aec <d_expression_1+0x3a0>)
 8006952:	f003 fb79 	bl	800a048 <strcmp>
 8006956:	2800      	cmp	r0, #0
 8006958:	d175      	bne.n	8006a46 <d_expression_1+0x2fa>
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fd46 	bl	80073ec <d_unqualified_name>
 8006960:	68e3      	ldr	r3, [r4, #12]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b49      	cmp	r3, #73	; 0x49
 8006966:	4606      	mov	r6, r0
 8006968:	d076      	beq.n	8006a58 <d_expression_1+0x30c>
 800696a:	4633      	mov	r3, r6
 800696c:	463a      	mov	r2, r7
 800696e:	2137      	movs	r1, #55	; 0x37
 8006970:	4620      	mov	r0, r4
 8006972:	f7f9 fce5 	bl	8000340 <d_make_comp>
 8006976:	462a      	mov	r2, r5
 8006978:	4603      	mov	r3, r0
 800697a:	2136      	movs	r1, #54	; 0x36
 800697c:	4620      	mov	r0, r4
 800697e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006982:	f7f9 bcdd 	b.w	8000340 <d_make_comp>
 8006986:	3301      	adds	r3, #1
 8006988:	60e3      	str	r3, [r4, #12]
 800698a:	2600      	movs	r6, #0
 800698c:	4620      	mov	r0, r4
 800698e:	f7ff fedd 	bl	800674c <d_expression_1>
 8006992:	4603      	mov	r3, r0
 8006994:	b12e      	cbz	r6, 80069a2 <d_expression_1+0x256>
 8006996:	4602      	mov	r2, r0
 8006998:	2137      	movs	r1, #55	; 0x37
 800699a:	4620      	mov	r0, r4
 800699c:	f7f9 fcd0 	bl	8000340 <d_make_comp>
 80069a0:	4603      	mov	r3, r0
 80069a2:	462a      	mov	r2, r5
 80069a4:	4620      	mov	r0, r4
 80069a6:	2135      	movs	r1, #53	; 0x35
 80069a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ac:	f7f9 bcc8 	b.w	8000340 <d_make_comp>
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	d0ea      	beq.n	800698a <d_expression_1+0x23e>
 80069b4:	7833      	ldrb	r3, [r6, #0]
 80069b6:	2b70      	cmp	r3, #112	; 0x70
 80069b8:	d001      	beq.n	80069be <d_expression_1+0x272>
 80069ba:	2b6d      	cmp	r3, #109	; 0x6d
 80069bc:	d1e5      	bne.n	800698a <d_expression_1+0x23e>
 80069be:	7872      	ldrb	r2, [r6, #1]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d1e2      	bne.n	800698a <d_expression_1+0x23e>
 80069c4:	68e3      	ldr	r3, [r4, #12]
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	2a5f      	cmp	r2, #95	; 0x5f
 80069ca:	d0dc      	beq.n	8006986 <d_expression_1+0x23a>
 80069cc:	2601      	movs	r6, #1
 80069ce:	e7dd      	b.n	800698c <d_expression_1+0x240>
 80069d0:	68e3      	ldr	r3, [r4, #12]
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	2a5f      	cmp	r2, #95	; 0x5f
 80069d6:	d1d8      	bne.n	800698a <d_expression_1+0x23e>
 80069d8:	3301      	adds	r3, #1
 80069da:	60e3      	str	r3, [r4, #12]
 80069dc:	2145      	movs	r1, #69	; 0x45
 80069de:	4620      	mov	r0, r4
 80069e0:	f7fe fa1c 	bl	8004e1c <d_exprlist>
 80069e4:	4603      	mov	r3, r0
 80069e6:	e7dc      	b.n	80069a2 <d_expression_1+0x256>
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 f881 	bl	8006af0 <d_type>
 80069ee:	e7d7      	b.n	80069a0 <d_expression_1+0x254>
 80069f0:	4620      	mov	r0, r4
 80069f2:	f7ff feab 	bl	800674c <d_expression_1>
 80069f6:	4606      	mov	r6, r0
 80069f8:	4620      	mov	r0, r4
 80069fa:	f7ff fea7 	bl	800674c <d_expression_1>
 80069fe:	4607      	mov	r7, r0
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7ff fea3 	bl	800674c <d_expression_1>
 8006a06:	4603      	mov	r3, r0
 8006a08:	e779      	b.n	80068fe <d_expression_1+0x1b2>
 8006a0a:	2145      	movs	r1, #69	; 0x45
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7fe fa05 	bl	8004e1c <d_exprlist>
 8006a12:	4606      	mov	r6, r0
 8006a14:	e7a9      	b.n	800696a <d_expression_1+0x21e>
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8006a1c:	2a01      	cmp	r2, #1
 8006a1e:	d902      	bls.n	8006a26 <d_expression_1+0x2da>
 8006a20:	3b72      	subs	r3, #114	; 0x72
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d884      	bhi.n	8006930 <d_expression_1+0x1e4>
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 f862 	bl	8006af0 <d_type>
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	e783      	b.n	8006938 <d_expression_1+0x1ec>
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7fd fb81 	bl	8004138 <d_template_args>
 8006a36:	4632      	mov	r2, r6
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2104      	movs	r1, #4
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f7f9 fc7f 	bl	8000340 <d_make_comp>
 8006a42:	4603      	mov	r3, r0
 8006a44:	e71a      	b.n	800687c <d_expression_1+0x130>
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff fe80 	bl	800674c <d_expression_1>
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	e78c      	b.n	800696a <d_expression_1+0x21e>
 8006a50:	3301      	adds	r3, #1
 8006a52:	60e3      	str	r3, [r4, #12]
 8006a54:	2300      	movs	r3, #0
 8006a56:	e752      	b.n	80068fe <d_expression_1+0x1b2>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7fd fb6d 	bl	8004138 <d_template_args>
 8006a5e:	4632      	mov	r2, r6
 8006a60:	4603      	mov	r3, r0
 8006a62:	2104      	movs	r1, #4
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7f9 fc6b 	bl	8000340 <d_make_comp>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	e77d      	b.n	800696a <d_expression_1+0x21e>
 8006a6e:	785a      	ldrb	r2, [r3, #1]
 8006a70:	2a69      	cmp	r2, #105	; 0x69
 8006a72:	f47f ae98 	bne.w	80067a6 <d_expression_1+0x5a>
 8006a76:	3302      	adds	r3, #2
 8006a78:	60e3      	str	r3, [r4, #12]
 8006a7a:	2145      	movs	r1, #69	; 0x45
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7fe f9cd 	bl	8004e1c <d_exprlist>
 8006a82:	4603      	mov	r3, r0
 8006a84:	e73b      	b.n	80068fe <d_expression_1+0x1b2>
 8006a86:	2b6f      	cmp	r3, #111	; 0x6f
 8006a88:	d014      	beq.n	8006ab4 <d_expression_1+0x368>
 8006a8a:	2b69      	cmp	r3, #105	; 0x69
 8006a8c:	d119      	bne.n	8006ac2 <d_expression_1+0x376>
 8006a8e:	7853      	ldrb	r3, [r2, #1]
 8006a90:	2b6c      	cmp	r3, #108	; 0x6c
 8006a92:	f47f ae7b 	bne.w	800678c <d_expression_1+0x40>
 8006a96:	2500      	movs	r5, #0
 8006a98:	3202      	adds	r2, #2
 8006a9a:	60e2      	str	r2, [r4, #12]
 8006a9c:	2145      	movs	r1, #69	; 0x45
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f7fe f9bc 	bl	8004e1c <d_exprlist>
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2130      	movs	r1, #48	; 0x30
 8006aaa:	4620      	mov	r0, r4
 8006aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab0:	f7f9 bc46 	b.w	8000340 <d_make_comp>
 8006ab4:	7853      	ldrb	r3, [r2, #1]
 8006ab6:	2b6e      	cmp	r3, #110	; 0x6e
 8006ab8:	f47f ae68 	bne.w	800678c <d_expression_1+0x40>
 8006abc:	3202      	adds	r2, #2
 8006abe:	60c2      	str	r2, [r0, #12]
 8006ac0:	e656      	b.n	8006770 <d_expression_1+0x24>
 8006ac2:	2b74      	cmp	r3, #116	; 0x74
 8006ac4:	f47f ae62 	bne.w	800678c <d_expression_1+0x40>
 8006ac8:	7853      	ldrb	r3, [r2, #1]
 8006aca:	2b6c      	cmp	r3, #108	; 0x6c
 8006acc:	f47f ae5e 	bne.w	800678c <d_expression_1+0x40>
 8006ad0:	f000 f80e 	bl	8006af0 <d_type>
 8006ad4:	68e2      	ldr	r2, [r4, #12]
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	e7de      	b.n	8006a98 <d_expression_1+0x34c>
 8006ada:	bf00      	nop
 8006adc:	080166cc 	.word	0x080166cc
 8006ae0:	080163c4 	.word	0x080163c4
 8006ae4:	080163bc 	.word	0x080163bc
 8006ae8:	080164d8 	.word	0x080164d8
 8006aec:	080164dc 	.word	0x080164dc

08006af0 <d_type>:
 8006af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006af4:	68c1      	ldr	r1, [r0, #12]
 8006af6:	780b      	ldrb	r3, [r1, #0]
 8006af8:	2b72      	cmp	r3, #114	; 0x72
 8006afa:	b083      	sub	sp, #12
 8006afc:	4604      	mov	r4, r0
 8006afe:	d055      	beq.n	8006bac <d_type+0xbc>
 8006b00:	2b56      	cmp	r3, #86	; 0x56
 8006b02:	d053      	beq.n	8006bac <d_type+0xbc>
 8006b04:	2b4b      	cmp	r3, #75	; 0x4b
 8006b06:	d051      	beq.n	8006bac <d_type+0xbc>
 8006b08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b0c:	2a4a      	cmp	r2, #74	; 0x4a
 8006b0e:	f200 808a 	bhi.w	8006c26 <d_type+0x136>
 8006b12:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006b16:	00b2      	.short	0x00b2
 8006b18:	00b200b2 	.word	0x00b200b2
 8006b1c:	00b200b2 	.word	0x00b200b2
 8006b20:	00b200b2 	.word	0x00b200b2
 8006b24:	00b200b2 	.word	0x00b200b2
 8006b28:	008800b2 	.word	0x008800b2
 8006b2c:	00880088 	.word	0x00880088
 8006b30:	00880088 	.word	0x00880088
 8006b34:	00880088 	.word	0x00880088
 8006b38:	008800b8 	.word	0x008800b8
 8006b3c:	010300e1 	.word	0x010300e1
 8006b40:	00ef0088 	.word	0x00ef0088
 8006b44:	008800f5 	.word	0x008800f5
 8006b48:	00880088 	.word	0x00880088
 8006b4c:	00880088 	.word	0x00880088
 8006b50:	00b20175 	.word	0x00b20175
 8006b54:	019b018d 	.word	0x019b018d
 8006b58:	01a90088 	.word	0x01a90088
 8006b5c:	020f01b7 	.word	0x020f01b7
 8006b60:	008801d8 	.word	0x008801d8
 8006b64:	00880088 	.word	0x00880088
 8006b68:	00b20088 	.word	0x00b20088
 8006b6c:	00880088 	.word	0x00880088
 8006b70:	00880088 	.word	0x00880088
 8006b74:	00880088 	.word	0x00880088
 8006b78:	01ea01ea 	.word	0x01ea01ea
 8006b7c:	01ea01ea 	.word	0x01ea01ea
 8006b80:	01ea01ea 	.word	0x01ea01ea
 8006b84:	01ea01ea 	.word	0x01ea01ea
 8006b88:	01ea01ea 	.word	0x01ea01ea
 8006b8c:	01ea0088 	.word	0x01ea0088
 8006b90:	01ea01ea 	.word	0x01ea01ea
 8006b94:	008801ea 	.word	0x008801ea
 8006b98:	00880088 	.word	0x00880088
 8006b9c:	01ea01ea 	.word	0x01ea01ea
 8006ba0:	01ea0098 	.word	0x01ea0098
 8006ba4:	01ea01ea 	.word	0x01ea01ea
 8006ba8:	01ea01ea 	.word	0x01ea01ea
 8006bac:	2200      	movs	r2, #0
 8006bae:	a901      	add	r1, sp, #4
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7f9 fc11 	bl	80003d8 <d_cv_qualifiers>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d034      	beq.n	8006c26 <d_type+0x136>
 8006bbc:	68e3      	ldr	r3, [r4, #12]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b46      	cmp	r3, #70	; 0x46
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	d034      	beq.n	8006c30 <d_type+0x140>
 8006bc6:	f7ff ff93 	bl	8006af0 <d_type>
 8006bca:	6028      	str	r0, [r5, #0]
 8006bcc:	b358      	cbz	r0, 8006c26 <d_type+0x136>
 8006bce:	7803      	ldrb	r3, [r0, #0]
 8006bd0:	3b1f      	subs	r3, #31
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d930      	bls.n	8006c38 <d_type+0x148>
 8006bd6:	9a01      	ldr	r2, [sp, #4]
 8006bd8:	b32a      	cbz	r2, 8006c26 <d_type+0x136>
 8006bda:	6a23      	ldr	r3, [r4, #32]
 8006bdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006bde:	428b      	cmp	r3, r1
 8006be0:	da21      	bge.n	8006c26 <d_type+0x136>
 8006be2:	69e0      	ldr	r0, [r4, #28]
 8006be4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8006be8:	9d01      	ldr	r5, [sp, #4]
 8006bea:	1c59      	adds	r1, r3, #1
 8006bec:	4628      	mov	r0, r5
 8006bee:	6221      	str	r1, [r4, #32]
 8006bf0:	b003      	add	sp, #12
 8006bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006bfa:	6363      	str	r3, [r4, #52]	; 0x34
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7ff fda5 	bl	800674c <d_expression_1>
 8006c02:	6365      	str	r5, [r4, #52]	; 0x34
 8006c04:	4602      	mov	r2, r0
 8006c06:	2300      	movs	r3, #0
 8006c08:	2141      	movs	r1, #65	; 0x41
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f7f9 fb98 	bl	8000340 <d_make_comp>
 8006c10:	4605      	mov	r5, r0
 8006c12:	9001      	str	r0, [sp, #4]
 8006c14:	b138      	cbz	r0, 8006c26 <d_type+0x136>
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	781a      	ldrb	r2, [r3, #0]
 8006c1a:	b122      	cbz	r2, 8006c26 <d_type+0x136>
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	60e2      	str	r2, [r4, #12]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b45      	cmp	r3, #69	; 0x45
 8006c24:	d01e      	beq.n	8006c64 <d_type+0x174>
 8006c26:	2500      	movs	r5, #0
 8006c28:	4628      	mov	r0, r5
 8006c2a:	b003      	add	sp, #12
 8006c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c30:	f000 fd32 	bl	8007698 <d_function_type>
 8006c34:	6028      	str	r0, [r5, #0]
 8006c36:	e7c9      	b.n	8006bcc <d_type+0xdc>
 8006c38:	9a01      	ldr	r2, [sp, #4]
 8006c3a:	6843      	ldr	r3, [r0, #4]
 8006c3c:	6042      	str	r2, [r0, #4]
 8006c3e:	682a      	ldr	r2, [r5, #0]
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	e7c7      	b.n	8006bd6 <d_type+0xe6>
 8006c46:	3101      	adds	r1, #1
 8006c48:	60e1      	str	r1, [r4, #12]
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7f9 fd3e 	bl	80006cc <d_source_name>
 8006c50:	2300      	movs	r3, #0
 8006c52:	4602      	mov	r2, r0
 8006c54:	2128      	movs	r1, #40	; 0x28
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7f9 fb72 	bl	8000340 <d_make_comp>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	9001      	str	r0, [sp, #4]
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	d0e0      	beq.n	8006c26 <d_type+0x136>
 8006c64:	6a23      	ldr	r3, [r4, #32]
 8006c66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	dadc      	bge.n	8006c26 <d_type+0x136>
 8006c6c:	69e1      	ldr	r1, [r4, #28]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8006c74:	9d01      	ldr	r5, [sp, #4]
 8006c76:	6222      	str	r2, [r4, #32]
 8006c78:	e7d6      	b.n	8006c28 <d_type+0x138>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fd2c 	bl	80076d8 <d_name>
 8006c80:	4605      	mov	r5, r0
 8006c82:	9001      	str	r0, [sp, #4]
 8006c84:	e7ec      	b.n	8006c60 <d_type+0x170>
 8006c86:	1c48      	adds	r0, r1, #1
 8006c88:	60e0      	str	r0, [r4, #12]
 8006c8a:	784b      	ldrb	r3, [r1, #1]
 8006c8c:	2b5f      	cmp	r3, #95	; 0x5f
 8006c8e:	f000 8274 	beq.w	800717a <d_type+0x68a>
 8006c92:	3b30      	subs	r3, #48	; 0x30
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	f200 827e 	bhi.w	8007196 <d_type+0x6a6>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60e3      	str	r3, [r4, #12]
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	3a30      	subs	r2, #48	; 0x30
 8006ca4:	2a09      	cmp	r2, #9
 8006ca6:	d9f9      	bls.n	8006c9c <d_type+0x1ac>
 8006ca8:	6962      	ldr	r2, [r4, #20]
 8006caa:	69a1      	ldr	r1, [r4, #24]
 8006cac:	428a      	cmp	r2, r1
 8006cae:	da11      	bge.n	8006cd4 <d_type+0x1e4>
 8006cb0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006cb4:	6926      	ldr	r6, [r4, #16]
 8006cb6:	0089      	lsls	r1, r1, #2
 8006cb8:	3201      	adds	r2, #1
 8006cba:	1875      	adds	r5, r6, r1
 8006cbc:	6162      	str	r2, [r4, #20]
 8006cbe:	d009      	beq.n	8006cd4 <d_type+0x1e4>
 8006cc0:	1a1a      	subs	r2, r3, r0
 8006cc2:	d007      	beq.n	8006cd4 <d_type+0x1e4>
 8006cc4:	2700      	movs	r7, #0
 8006cc6:	5477      	strb	r7, [r6, r1]
 8006cc8:	6068      	str	r0, [r5, #4]
 8006cca:	60aa      	str	r2, [r5, #8]
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	2a5f      	cmp	r2, #95	; 0x5f
 8006cd0:	f000 82c9 	beq.w	8007266 <d_type+0x776>
 8006cd4:	2500      	movs	r5, #0
 8006cd6:	e0a9      	b.n	8006e2c <d_type+0x33c>
 8006cd8:	3101      	adds	r1, #1
 8006cda:	60e1      	str	r1, [r4, #12]
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff ff07 	bl	8006af0 <d_type>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	2125      	movs	r1, #37	; 0x25
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f7f9 fb29 	bl	8000340 <d_make_comp>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	9001      	str	r0, [sp, #4]
 8006cf2:	e7b5      	b.n	8006c60 <d_type+0x170>
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fccf 	bl	8007698 <d_function_type>
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	9001      	str	r0, [sp, #4]
 8006cfe:	e7af      	b.n	8006c60 <d_type+0x170>
 8006d00:	3101      	adds	r1, #1
 8006d02:	60e1      	str	r1, [r4, #12]
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7ff fef3 	bl	8006af0 <d_type>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	2126      	movs	r1, #38	; 0x26
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7f9 fb15 	bl	8000340 <d_make_comp>
 8006d16:	4605      	mov	r5, r0
 8006d18:	9001      	str	r0, [sp, #4]
 8006d1a:	e7a1      	b.n	8006c60 <d_type+0x170>
 8006d1c:	1c4b      	adds	r3, r1, #1
 8006d1e:	60e3      	str	r3, [r4, #12]
 8006d20:	784b      	ldrb	r3, [r1, #1]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f43f af7f 	beq.w	8006c26 <d_type+0x136>
 8006d28:	1c8b      	adds	r3, r1, #2
 8006d2a:	60e3      	str	r3, [r4, #12]
 8006d2c:	784b      	ldrb	r3, [r1, #1]
 8006d2e:	3b46      	subs	r3, #70	; 0x46
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	f63f af78 	bhi.w	8006c26 <d_type+0x136>
 8006d36:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <d_type+0x24c>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	0800710b 	.word	0x0800710b
 8006d40:	08006c27 	.word	0x08006c27
 8006d44:	08006c27 	.word	0x08006c27
 8006d48:	08006c27 	.word	0x08006c27
 8006d4c:	08006c27 	.word	0x08006c27
 8006d50:	08006c27 	.word	0x08006c27
 8006d54:	08006c27 	.word	0x08006c27
 8006d58:	08006c27 	.word	0x08006c27
 8006d5c:	08006c27 	.word	0x08006c27
 8006d60:	08006c27 	.word	0x08006c27
 8006d64:	08006c27 	.word	0x08006c27
 8006d68:	08006c27 	.word	0x08006c27
 8006d6c:	08006c27 	.word	0x08006c27
 8006d70:	08006c27 	.word	0x08006c27
 8006d74:	08006bf7 	.word	0x08006bf7
 8006d78:	08006c27 	.word	0x08006c27
 8006d7c:	08006c27 	.word	0x08006c27
 8006d80:	08006c27 	.word	0x08006c27
 8006d84:	08006c27 	.word	0x08006c27
 8006d88:	08006c27 	.word	0x08006c27
 8006d8c:	08006c27 	.word	0x08006c27
 8006d90:	08006c27 	.word	0x08006c27
 8006d94:	08006c27 	.word	0x08006c27
 8006d98:	08006c27 	.word	0x08006c27
 8006d9c:	08006c27 	.word	0x08006c27
 8006da0:	08006c27 	.word	0x08006c27
 8006da4:	08006c27 	.word	0x08006c27
 8006da8:	080070e1 	.word	0x080070e1
 8006dac:	08006c27 	.word	0x08006c27
 8006db0:	08006c27 	.word	0x08006c27
 8006db4:	080070c3 	.word	0x080070c3
 8006db8:	08006ffd 	.word	0x08006ffd
 8006dbc:	08006fd1 	.word	0x08006fd1
 8006dc0:	08006c27 	.word	0x08006c27
 8006dc4:	08006fa5 	.word	0x08006fa5
 8006dc8:	08006f79 	.word	0x08006f79
 8006dcc:	08006c27 	.word	0x08006c27
 8006dd0:	08006c27 	.word	0x08006c27
 8006dd4:	08006c27 	.word	0x08006c27
 8006dd8:	08006c27 	.word	0x08006c27
 8006ddc:	0800709b 	.word	0x0800709b
 8006de0:	08006c27 	.word	0x08006c27
 8006de4:	08007083 	.word	0x08007083
 8006de8:	08006c27 	.word	0x08006c27
 8006dec:	08006c27 	.word	0x08006c27
 8006df0:	08007063 	.word	0x08007063
 8006df4:	08006bf7 	.word	0x08006bf7
 8006df8:	08006c27 	.word	0x08006c27
 8006dfc:	08007029 	.word	0x08007029
 8006e00:	3101      	adds	r1, #1
 8006e02:	60e1      	str	r1, [r4, #12]
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7ff fe73 	bl	8006af0 <d_type>
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f43f af61 	beq.w	8006cd4 <d_type+0x1e4>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f7ff fe6c 	bl	8006af0 <d_type>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f43f af5b 	beq.w	8006cd4 <d_type+0x1e4>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	462a      	mov	r2, r5
 8006e22:	212b      	movs	r1, #43	; 0x2b
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7f9 fa8b 	bl	8000340 <d_make_comp>
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	9501      	str	r5, [sp, #4]
 8006e2e:	e717      	b.n	8006c60 <d_type+0x170>
 8006e30:	3101      	adds	r1, #1
 8006e32:	60e1      	str	r1, [r4, #12]
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff fe5b 	bl	8006af0 <d_type>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	2124      	movs	r1, #36	; 0x24
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7f9 fa7d 	bl	8000340 <d_make_comp>
 8006e46:	4605      	mov	r5, r0
 8006e48:	9001      	str	r0, [sp, #4]
 8006e4a:	e709      	b.n	8006c60 <d_type+0x170>
 8006e4c:	3101      	adds	r1, #1
 8006e4e:	60e1      	str	r1, [r4, #12]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f7ff fe4d 	bl	8006af0 <d_type>
 8006e56:	2300      	movs	r3, #0
 8006e58:	4602      	mov	r2, r0
 8006e5a:	2122      	movs	r1, #34	; 0x22
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f7f9 fa6f 	bl	8000340 <d_make_comp>
 8006e62:	4605      	mov	r5, r0
 8006e64:	9001      	str	r0, [sp, #4]
 8006e66:	e6fb      	b.n	8006c60 <d_type+0x170>
 8006e68:	3101      	adds	r1, #1
 8006e6a:	60e1      	str	r1, [r4, #12]
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f7ff fe3f 	bl	8006af0 <d_type>
 8006e72:	2300      	movs	r3, #0
 8006e74:	4602      	mov	r2, r0
 8006e76:	2123      	movs	r1, #35	; 0x23
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7f9 fa61 	bl	8000340 <d_make_comp>
 8006e7e:	4605      	mov	r5, r0
 8006e80:	9001      	str	r0, [sp, #4]
 8006e82:	e6ed      	b.n	8006c60 <d_type+0x170>
 8006e84:	784b      	ldrb	r3, [r1, #1]
 8006e86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006e8a:	2a09      	cmp	r2, #9
 8006e8c:	d905      	bls.n	8006e9a <d_type+0x3aa>
 8006e8e:	2b5f      	cmp	r3, #95	; 0x5f
 8006e90:	d003      	beq.n	8006e9a <d_type+0x3aa>
 8006e92:	3b41      	subs	r3, #65	; 0x41
 8006e94:	2b19      	cmp	r3, #25
 8006e96:	f200 818b 	bhi.w	80071b0 <d_type+0x6c0>
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7f9 fc8b 	bl	80007b8 <d_substitution>
 8006ea2:	68e3      	ldr	r3, [r4, #12]
 8006ea4:	9001      	str	r0, [sp, #4]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b49      	cmp	r3, #73	; 0x49
 8006eaa:	4605      	mov	r5, r0
 8006eac:	f47f aebc 	bne.w	8006c28 <d_type+0x138>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f7fd f941 	bl	8004138 <d_template_args>
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2104      	movs	r1, #4
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7f9 fa3f 	bl	8000340 <d_make_comp>
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	e7b2      	b.n	8006e2c <d_type+0x33c>
 8006ec6:	3101      	adds	r1, #1
 8006ec8:	60e1      	str	r1, [r4, #12]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7f9 fbfe 	bl	80006cc <d_source_name>
 8006ed0:	9001      	str	r0, [sp, #4]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff fe0c 	bl	8006af0 <d_type>
 8006ed8:	9b01      	ldr	r3, [sp, #4]
 8006eda:	4602      	mov	r2, r0
 8006edc:	2121      	movs	r1, #33	; 0x21
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7f9 fa2e 	bl	8000340 <d_make_comp>
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	9001      	str	r0, [sp, #4]
 8006ee8:	e6ba      	b.n	8006c60 <d_type+0x170>
 8006eea:	3b61      	subs	r3, #97	; 0x61
 8006eec:	4fb7      	ldr	r7, [pc, #732]	; (80071cc <d_type+0x6dc>)
 8006eee:	6962      	ldr	r2, [r4, #20]
 8006ef0:	69a5      	ldr	r5, [r4, #24]
 8006ef2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8006efc:	42aa      	cmp	r2, r5
 8006efe:	4418      	add	r0, r3
 8006f00:	f280 8137 	bge.w	8007172 <d_type+0x682>
 8006f04:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8006f08:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006f0c:	00b6      	lsls	r6, r6, #2
 8006f0e:	3201      	adds	r2, #1
 8006f10:	eb1e 0506 	adds.w	r5, lr, r6
 8006f14:	6162      	str	r2, [r4, #20]
 8006f16:	f000 812c 	beq.w	8007172 <d_type+0x682>
 8006f1a:	2227      	movs	r2, #39	; 0x27
 8006f1c:	443b      	add	r3, r7
 8006f1e:	f80e 2006 	strb.w	r2, [lr, r6]
 8006f22:	6068      	str	r0, [r5, #4]
 8006f24:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006f2a:	3101      	adds	r1, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	60e1      	str	r1, [r4, #12]
 8006f30:	6323      	str	r3, [r4, #48]	; 0x30
 8006f32:	e679      	b.n	8006c28 <d_type+0x138>
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7f9 fba7 	bl	8000688 <d_template_param>
 8006f3a:	68e6      	ldr	r6, [r4, #12]
 8006f3c:	9001      	str	r0, [sp, #4]
 8006f3e:	7833      	ldrb	r3, [r6, #0]
 8006f40:	2b49      	cmp	r3, #73	; 0x49
 8006f42:	4605      	mov	r5, r0
 8006f44:	f47f ae8c 	bne.w	8006c60 <d_type+0x170>
 8006f48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f040 8150 	bne.w	80071f0 <d_type+0x700>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f43f ae68 	beq.w	8006c26 <d_type+0x136>
 8006f56:	6a23      	ldr	r3, [r4, #32]
 8006f58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	f6bf ae63 	bge.w	8006c26 <d_type+0x136>
 8006f60:	69e1      	ldr	r1, [r4, #28]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8006f68:	6222      	str	r2, [r4, #32]
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	9d01      	ldr	r5, [sp, #4]
 8006f6e:	f7fd f8e3 	bl	8004138 <d_template_args>
 8006f72:	462a      	mov	r2, r5
 8006f74:	4603      	mov	r3, r0
 8006f76:	e7a0      	b.n	8006eba <d_type+0x3ca>
 8006f78:	6963      	ldr	r3, [r4, #20]
 8006f7a:	69a2      	ldr	r2, [r4, #24]
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	f280 80f8 	bge.w	8007172 <d_type+0x682>
 8006f82:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006f86:	6922      	ldr	r2, [r4, #16]
 8006f88:	0089      	lsls	r1, r1, #2
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	1855      	adds	r5, r2, r1
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	f000 80ef 	beq.w	8007172 <d_type+0x682>
 8006f94:	4b8e      	ldr	r3, [pc, #568]	; (80071d0 <d_type+0x6e0>)
 8006f96:	2027      	movs	r0, #39	; 0x27
 8006f98:	5450      	strb	r0, [r2, r1]
 8006f9a:	606b      	str	r3, [r5, #4]
 8006f9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa2:	e641      	b.n	8006c28 <d_type+0x138>
 8006fa4:	6963      	ldr	r3, [r4, #20]
 8006fa6:	69a2      	ldr	r2, [r4, #24]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	f280 80e2 	bge.w	8007172 <d_type+0x682>
 8006fae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006fb2:	6922      	ldr	r2, [r4, #16]
 8006fb4:	0089      	lsls	r1, r1, #2
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	1855      	adds	r5, r2, r1
 8006fba:	6163      	str	r3, [r4, #20]
 8006fbc:	f000 80d9 	beq.w	8007172 <d_type+0x682>
 8006fc0:	4b84      	ldr	r3, [pc, #528]	; (80071d4 <d_type+0x6e4>)
 8006fc2:	2027      	movs	r0, #39	; 0x27
 8006fc4:	5450      	strb	r0, [r2, r1]
 8006fc6:	606b      	str	r3, [r5, #4]
 8006fc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fca:	3304      	adds	r3, #4
 8006fcc:	6323      	str	r3, [r4, #48]	; 0x30
 8006fce:	e62b      	b.n	8006c28 <d_type+0x138>
 8006fd0:	6963      	ldr	r3, [r4, #20]
 8006fd2:	69a2      	ldr	r2, [r4, #24]
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	f280 80cc 	bge.w	8007172 <d_type+0x682>
 8006fda:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006fde:	6922      	ldr	r2, [r4, #16]
 8006fe0:	0089      	lsls	r1, r1, #2
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	1855      	adds	r5, r2, r1
 8006fe6:	6163      	str	r3, [r4, #20]
 8006fe8:	f000 80c3 	beq.w	8007172 <d_type+0x682>
 8006fec:	4b7a      	ldr	r3, [pc, #488]	; (80071d8 <d_type+0x6e8>)
 8006fee:	2027      	movs	r0, #39	; 0x27
 8006ff0:	5450      	strb	r0, [r2, r1]
 8006ff2:	606b      	str	r3, [r5, #4]
 8006ff4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ff6:	3309      	adds	r3, #9
 8006ff8:	6323      	str	r3, [r4, #48]	; 0x30
 8006ffa:	e615      	b.n	8006c28 <d_type+0x138>
 8006ffc:	6963      	ldr	r3, [r4, #20]
 8006ffe:	69a2      	ldr	r2, [r4, #24]
 8007000:	4293      	cmp	r3, r2
 8007002:	f280 80b6 	bge.w	8007172 <d_type+0x682>
 8007006:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800700a:	6922      	ldr	r2, [r4, #16]
 800700c:	0089      	lsls	r1, r1, #2
 800700e:	3301      	adds	r3, #1
 8007010:	1855      	adds	r5, r2, r1
 8007012:	6163      	str	r3, [r4, #20]
 8007014:	f000 80ad 	beq.w	8007172 <d_type+0x682>
 8007018:	4b70      	ldr	r3, [pc, #448]	; (80071dc <d_type+0x6ec>)
 800701a:	2027      	movs	r0, #39	; 0x27
 800701c:	5450      	strb	r0, [r2, r1]
 800701e:	606b      	str	r3, [r5, #4]
 8007020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007022:	330a      	adds	r3, #10
 8007024:	6323      	str	r3, [r4, #48]	; 0x30
 8007026:	e5ff      	b.n	8006c28 <d_type+0x138>
 8007028:	788b      	ldrb	r3, [r1, #2]
 800702a:	2b5f      	cmp	r3, #95	; 0x5f
 800702c:	f000 80ff 	beq.w	800722e <d_type+0x73e>
 8007030:	4620      	mov	r0, r4
 8007032:	f7f9 faf5 	bl	8000620 <d_number_component>
 8007036:	4605      	mov	r5, r0
 8007038:	2d00      	cmp	r5, #0
 800703a:	f43f aef7 	beq.w	8006e2c <d_type+0x33c>
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	2a5f      	cmp	r2, #95	; 0x5f
 8007044:	f47f ae46 	bne.w	8006cd4 <d_type+0x1e4>
 8007048:	3301      	adds	r3, #1
 800704a:	60e3      	str	r3, [r4, #12]
 800704c:	4620      	mov	r0, r4
 800704e:	f7ff fd4f 	bl	8006af0 <d_type>
 8007052:	462a      	mov	r2, r5
 8007054:	4603      	mov	r3, r0
 8007056:	212d      	movs	r1, #45	; 0x2d
 8007058:	4620      	mov	r0, r4
 800705a:	f7f9 f971 	bl	8000340 <d_make_comp>
 800705e:	4605      	mov	r5, r0
 8007060:	e6e4      	b.n	8006e2c <d_type+0x33c>
 8007062:	6963      	ldr	r3, [r4, #20]
 8007064:	69a2      	ldr	r2, [r4, #24]
 8007066:	4293      	cmp	r3, r2
 8007068:	f280 8083 	bge.w	8007172 <d_type+0x682>
 800706c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	0089      	lsls	r1, r1, #2
 8007074:	3301      	adds	r3, #1
 8007076:	1855      	adds	r5, r2, r1
 8007078:	6163      	str	r3, [r4, #20]
 800707a:	d07a      	beq.n	8007172 <d_type+0x682>
 800707c:	2027      	movs	r0, #39	; 0x27
 800707e:	4b58      	ldr	r3, [pc, #352]	; (80071e0 <d_type+0x6f0>)
 8007080:	e78a      	b.n	8006f98 <d_type+0x4a8>
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff fd34 	bl	8006af0 <d_type>
 8007088:	2300      	movs	r3, #0
 800708a:	4602      	mov	r2, r0
 800708c:	2149      	movs	r1, #73	; 0x49
 800708e:	4620      	mov	r0, r4
 8007090:	f7f9 f956 	bl	8000340 <d_make_comp>
 8007094:	4605      	mov	r5, r0
 8007096:	9001      	str	r0, [sp, #4]
 8007098:	e5e2      	b.n	8006c60 <d_type+0x170>
 800709a:	6963      	ldr	r3, [r4, #20]
 800709c:	69a2      	ldr	r2, [r4, #24]
 800709e:	4293      	cmp	r3, r2
 80070a0:	da67      	bge.n	8007172 <d_type+0x682>
 80070a2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80070a6:	6922      	ldr	r2, [r4, #16]
 80070a8:	0089      	lsls	r1, r1, #2
 80070aa:	3301      	adds	r3, #1
 80070ac:	1855      	adds	r5, r2, r1
 80070ae:	6163      	str	r3, [r4, #20]
 80070b0:	d05f      	beq.n	8007172 <d_type+0x682>
 80070b2:	4b4c      	ldr	r3, [pc, #304]	; (80071e4 <d_type+0x6f4>)
 80070b4:	2027      	movs	r0, #39	; 0x27
 80070b6:	5450      	strb	r0, [r2, r1]
 80070b8:	606b      	str	r3, [r5, #4]
 80070ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070bc:	3311      	adds	r3, #17
 80070be:	6323      	str	r3, [r4, #48]	; 0x30
 80070c0:	e5b2      	b.n	8006c28 <d_type+0x138>
 80070c2:	6963      	ldr	r3, [r4, #20]
 80070c4:	69a2      	ldr	r2, [r4, #24]
 80070c6:	4293      	cmp	r3, r2
 80070c8:	da53      	bge.n	8007172 <d_type+0x682>
 80070ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80070ce:	6922      	ldr	r2, [r4, #16]
 80070d0:	0089      	lsls	r1, r1, #2
 80070d2:	3301      	adds	r3, #1
 80070d4:	1855      	adds	r5, r2, r1
 80070d6:	6163      	str	r3, [r4, #20]
 80070d8:	d04b      	beq.n	8007172 <d_type+0x682>
 80070da:	2027      	movs	r0, #39	; 0x27
 80070dc:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <d_type+0x6f8>)
 80070de:	e787      	b.n	8006ff0 <d_type+0x500>
 80070e0:	6963      	ldr	r3, [r4, #20]
 80070e2:	69a2      	ldr	r2, [r4, #24]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	f6bf ad9e 	bge.w	8006c26 <d_type+0x136>
 80070ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80070ee:	6921      	ldr	r1, [r4, #16]
 80070f0:	0092      	lsls	r2, r2, #2
 80070f2:	3301      	adds	r3, #1
 80070f4:	188d      	adds	r5, r1, r2
 80070f6:	6163      	str	r3, [r4, #20]
 80070f8:	f43f ad95 	beq.w	8006c26 <d_type+0x136>
 80070fc:	2300      	movs	r3, #0
 80070fe:	548b      	strb	r3, [r1, r2]
 8007100:	483a      	ldr	r0, [pc, #232]	; (80071ec <d_type+0x6fc>)
 8007102:	6068      	str	r0, [r5, #4]
 8007104:	2304      	movs	r3, #4
 8007106:	60ab      	str	r3, [r5, #8]
 8007108:	e58e      	b.n	8006c28 <d_type+0x138>
 800710a:	6963      	ldr	r3, [r4, #20]
 800710c:	69a2      	ldr	r2, [r4, #24]
 800710e:	4293      	cmp	r3, r2
 8007110:	f280 8084 	bge.w	800721c <d_type+0x72c>
 8007114:	6925      	ldr	r5, [r4, #16]
 8007116:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800711a:	0080      	lsls	r0, r0, #2
 800711c:	3301      	adds	r3, #1
 800711e:	182a      	adds	r2, r5, r0
 8007120:	262c      	movs	r6, #44	; 0x2c
 8007122:	6163      	str	r3, [r4, #20]
 8007124:	9201      	str	r2, [sp, #4]
 8007126:	542e      	strb	r6, [r5, r0]
 8007128:	788b      	ldrb	r3, [r1, #2]
 800712a:	3b30      	subs	r3, #48	; 0x30
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b09      	cmp	r3, #9
 8007130:	bf94      	ite	ls
 8007132:	2301      	movls	r3, #1
 8007134:	2300      	movhi	r3, #0
 8007136:	8113      	strh	r3, [r2, #8]
 8007138:	d973      	bls.n	8007222 <d_type+0x732>
 800713a:	4615      	mov	r5, r2
 800713c:	4620      	mov	r0, r4
 800713e:	f7ff fcd7 	bl	8006af0 <d_type>
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6068      	str	r0, [r5, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f43f ad6c 	beq.w	8006c26 <d_type+0x136>
 800714e:	f104 000c 	add.w	r0, r4, #12
 8007152:	f7f9 fa3b 	bl	80005cc <d_number.isra.0>
 8007156:	68e2      	ldr	r2, [r4, #12]
 8007158:	7813      	ldrb	r3, [r2, #0]
 800715a:	b13b      	cbz	r3, 800716c <d_type+0x67c>
 800715c:	1c53      	adds	r3, r2, #1
 800715e:	60e3      	str	r3, [r4, #12]
 8007160:	7813      	ldrb	r3, [r2, #0]
 8007162:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8007166:	fab3 f383 	clz	r3, r3
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	9d01      	ldr	r5, [sp, #4]
 800716e:	816b      	strh	r3, [r5, #10]
 8007170:	e55a      	b.n	8006c28 <d_type+0x138>
 8007172:	2300      	movs	r3, #0
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	deff      	udf	#255	; 0xff
 800717a:	2500      	movs	r5, #0
 800717c:	3001      	adds	r0, #1
 800717e:	60e0      	str	r0, [r4, #12]
 8007180:	4620      	mov	r0, r4
 8007182:	f7ff fcb5 	bl	8006af0 <d_type>
 8007186:	462a      	mov	r2, r5
 8007188:	4603      	mov	r3, r0
 800718a:	212a      	movs	r1, #42	; 0x2a
 800718c:	4620      	mov	r0, r4
 800718e:	f7f9 f8d7 	bl	8000340 <d_make_comp>
 8007192:	4605      	mov	r5, r0
 8007194:	e64a      	b.n	8006e2c <d_type+0x33c>
 8007196:	2301      	movs	r3, #1
 8007198:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800719a:	6363      	str	r3, [r4, #52]	; 0x34
 800719c:	4620      	mov	r0, r4
 800719e:	f7ff fad5 	bl	800674c <d_expression_1>
 80071a2:	6365      	str	r5, [r4, #52]	; 0x34
 80071a4:	4605      	mov	r5, r0
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f43f ad94 	beq.w	8006cd4 <d_type+0x1e4>
 80071ac:	68e3      	ldr	r3, [r4, #12]
 80071ae:	e58d      	b.n	8006ccc <d_type+0x1dc>
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fa91 	bl	80076d8 <d_name>
 80071b6:	4605      	mov	r5, r0
 80071b8:	9001      	str	r0, [sp, #4]
 80071ba:	2800      	cmp	r0, #0
 80071bc:	f43f ad33 	beq.w	8006c26 <d_type+0x136>
 80071c0:	7803      	ldrb	r3, [r0, #0]
 80071c2:	2b18      	cmp	r3, #24
 80071c4:	f47f ad4e 	bne.w	8006c64 <d_type+0x174>
 80071c8:	e52e      	b.n	8006c28 <d_type+0x138>
 80071ca:	bf00      	nop
 80071cc:	08015280 	.word	0x08015280
 80071d0:	080155b0 	.word	0x080155b0
 80071d4:	08015588 	.word	0x08015588
 80071d8:	0801554c 	.word	0x0801554c
 80071dc:	08015574 	.word	0x08015574
 80071e0:	0801559c 	.word	0x0801559c
 80071e4:	080155c4 	.word	0x080155c4
 80071e8:	08015560 	.word	0x08015560
 80071ec:	080164e0 	.word	0x080164e0
 80071f0:	4620      	mov	r0, r4
 80071f2:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80071f6:	f8d4 8020 	ldr.w	r8, [r4, #32]
 80071fa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80071fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80071fe:	f7fc ff9b 	bl	8004138 <d_template_args>
 8007202:	68e2      	ldr	r2, [r4, #12]
 8007204:	7812      	ldrb	r2, [r2, #0]
 8007206:	2a49      	cmp	r2, #73	; 0x49
 8007208:	d01c      	beq.n	8007244 <d_type+0x754>
 800720a:	6325      	str	r5, [r4, #48]	; 0x30
 800720c:	60e6      	str	r6, [r4, #12]
 800720e:	f8c4 9014 	str.w	r9, [r4, #20]
 8007212:	f8c4 8020 	str.w	r8, [r4, #32]
 8007216:	62a7      	str	r7, [r4, #40]	; 0x28
 8007218:	9d01      	ldr	r5, [sp, #4]
 800721a:	e521      	b.n	8006c60 <d_type+0x170>
 800721c:	2300      	movs	r3, #0
 800721e:	701b      	strb	r3, [r3, #0]
 8007220:	deff      	udf	#255	; 0xff
 8007222:	f104 000c 	add.w	r0, r4, #12
 8007226:	f7f9 f9d1 	bl	80005cc <d_number.isra.0>
 800722a:	9d01      	ldr	r5, [sp, #4]
 800722c:	e786      	b.n	800713c <d_type+0x64c>
 800722e:	3103      	adds	r1, #3
 8007230:	2301      	movs	r3, #1
 8007232:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8007234:	60e1      	str	r1, [r4, #12]
 8007236:	6363      	str	r3, [r4, #52]	; 0x34
 8007238:	4620      	mov	r0, r4
 800723a:	f7ff fa87 	bl	800674c <d_expression_1>
 800723e:	6366      	str	r6, [r4, #52]	; 0x34
 8007240:	4605      	mov	r5, r0
 8007242:	e6f9      	b.n	8007038 <d_type+0x548>
 8007244:	9b01      	ldr	r3, [sp, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f43f aced 	beq.w	8006c26 <d_type+0x136>
 800724c:	6a22      	ldr	r2, [r4, #32]
 800724e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007250:	428a      	cmp	r2, r1
 8007252:	f6bf ace8 	bge.w	8006c26 <d_type+0x136>
 8007256:	69e5      	ldr	r5, [r4, #28]
 8007258:	1c51      	adds	r1, r2, #1
 800725a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800725e:	9a01      	ldr	r2, [sp, #4]
 8007260:	6221      	str	r1, [r4, #32]
 8007262:	4603      	mov	r3, r0
 8007264:	e629      	b.n	8006eba <d_type+0x3ca>
 8007266:	4618      	mov	r0, r3
 8007268:	e788      	b.n	800717c <d_type+0x68c>
 800726a:	bf00      	nop

0800726c <d_operator_name>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	68c3      	ldr	r3, [r0, #12]
 8007272:	781e      	ldrb	r6, [r3, #0]
 8007274:	4684      	mov	ip, r0
 8007276:	b316      	cbz	r6, 80072be <d_operator_name+0x52>
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	60c2      	str	r2, [r0, #12]
 800727c:	785a      	ldrb	r2, [r3, #1]
 800727e:	781e      	ldrb	r6, [r3, #0]
 8007280:	2a00      	cmp	r2, #0
 8007282:	d059      	beq.n	8007338 <d_operator_name+0xcc>
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	60c2      	str	r2, [r0, #12]
 8007288:	2e76      	cmp	r6, #118	; 0x76
 800728a:	4604      	mov	r4, r0
 800728c:	f893 e001 	ldrb.w	lr, [r3, #1]
 8007290:	d043      	beq.n	800731a <d_operator_name+0xae>
 8007292:	2e63      	cmp	r6, #99	; 0x63
 8007294:	d114      	bne.n	80072c0 <d_operator_name+0x54>
 8007296:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 800729a:	d111      	bne.n	80072c0 <d_operator_name+0x54>
 800729c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800729e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80072a0:	fab3 f383 	clz	r3, r3
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	6383      	str	r3, [r0, #56]	; 0x38
 80072a8:	f7ff fc22 	bl	8006af0 <d_type>
 80072ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80072ae:	4602      	mov	r2, r0
 80072b0:	2300      	movs	r3, #0
 80072b2:	4620      	mov	r0, r4
 80072b4:	2133      	movs	r1, #51	; 0x33
 80072b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ba:	f7f9 b841 	b.w	8000340 <d_make_comp>
 80072be:	46b6      	mov	lr, r6
 80072c0:	4c28      	ldr	r4, [pc, #160]	; (8007364 <d_operator_name+0xf8>)
 80072c2:	203d      	movs	r0, #61	; 0x3d
 80072c4:	2200      	movs	r2, #0
 80072c6:	e004      	b.n	80072d2 <d_operator_name+0x66>
 80072c8:	bf94      	ite	ls
 80072ca:	1c5a      	addls	r2, r3, #1
 80072cc:	4618      	movhi	r0, r3
 80072ce:	4282      	cmp	r2, r0
 80072d0:	d02f      	beq.n	8007332 <d_operator_name+0xc6>
 80072d2:	1a83      	subs	r3, r0, r2
 80072d4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80072d8:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80072dc:	0119      	lsls	r1, r3, #4
 80072de:	1867      	adds	r7, r4, r1
 80072e0:	5861      	ldr	r1, [r4, r1]
 80072e2:	780d      	ldrb	r5, [r1, #0]
 80072e4:	42b5      	cmp	r5, r6
 80072e6:	d1ef      	bne.n	80072c8 <d_operator_name+0x5c>
 80072e8:	7849      	ldrb	r1, [r1, #1]
 80072ea:	4571      	cmp	r1, lr
 80072ec:	d1ec      	bne.n	80072c8 <d_operator_name+0x5c>
 80072ee:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80072f2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80072f6:	4293      	cmp	r3, r2
 80072f8:	da1b      	bge.n	8007332 <d_operator_name+0xc6>
 80072fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80072fe:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8007302:	3301      	adds	r3, #1
 8007304:	0092      	lsls	r2, r2, #2
 8007306:	f8cc 3014 	str.w	r3, [ip, #20]
 800730a:	188b      	adds	r3, r1, r2
 800730c:	d027      	beq.n	800735e <d_operator_name+0xf2>
 800730e:	2031      	movs	r0, #49	; 0x31
 8007310:	5488      	strb	r0, [r1, r2]
 8007312:	605f      	str	r7, [r3, #4]
 8007314:	4618      	mov	r0, r3
 8007316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731a:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 800731e:	b2eb      	uxtb	r3, r5
 8007320:	2b09      	cmp	r3, #9
 8007322:	d8cd      	bhi.n	80072c0 <d_operator_name+0x54>
 8007324:	f7f9 f9d2 	bl	80006cc <d_source_name>
 8007328:	6963      	ldr	r3, [r4, #20]
 800732a:	69a2      	ldr	r2, [r4, #24]
 800732c:	4293      	cmp	r3, r2
 800732e:	4601      	mov	r1, r0
 8007330:	db04      	blt.n	800733c <d_operator_name+0xd0>
 8007332:	2000      	movs	r0, #0
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	4696      	mov	lr, r2
 800733a:	e7c1      	b.n	80072c0 <d_operator_name+0x54>
 800733c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007340:	6920      	ldr	r0, [r4, #16]
 8007342:	3301      	adds	r3, #1
 8007344:	0092      	lsls	r2, r2, #2
 8007346:	6163      	str	r3, [r4, #20]
 8007348:	1883      	adds	r3, r0, r2
 800734a:	d0f2      	beq.n	8007332 <d_operator_name+0xc6>
 800734c:	2900      	cmp	r1, #0
 800734e:	d0f0      	beq.n	8007332 <d_operator_name+0xc6>
 8007350:	2432      	movs	r4, #50	; 0x32
 8007352:	5484      	strb	r4, [r0, r2]
 8007354:	605d      	str	r5, [r3, #4]
 8007356:	6099      	str	r1, [r3, #8]
 8007358:	4618      	mov	r0, r3
 800735a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800735e:	4618      	mov	r0, r3
 8007360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007364:	080155d8 	.word	0x080155d8

08007368 <d_parmlist>:
 8007368:	b530      	push	{r4, r5, lr}
 800736a:	68c2      	ldr	r2, [r0, #12]
 800736c:	b083      	sub	sp, #12
 800736e:	2300      	movs	r3, #0
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	7813      	ldrb	r3, [r2, #0]
 8007374:	b343      	cbz	r3, 80073c8 <d_parmlist+0x60>
 8007376:	2b45      	cmp	r3, #69	; 0x45
 8007378:	d026      	beq.n	80073c8 <d_parmlist+0x60>
 800737a:	2b2e      	cmp	r3, #46	; 0x2e
 800737c:	d024      	beq.n	80073c8 <d_parmlist+0x60>
 800737e:	4604      	mov	r4, r0
 8007380:	ad01      	add	r5, sp, #4
 8007382:	e015      	b.n	80073b0 <d_parmlist+0x48>
 8007384:	2b4f      	cmp	r3, #79	; 0x4f
 8007386:	d016      	beq.n	80073b6 <d_parmlist+0x4e>
 8007388:	f7ff fbb2 	bl	8006af0 <d_type>
 800738c:	2300      	movs	r3, #0
 800738e:	4602      	mov	r2, r0
 8007390:	212e      	movs	r1, #46	; 0x2e
 8007392:	b1c8      	cbz	r0, 80073c8 <d_parmlist+0x60>
 8007394:	4620      	mov	r0, r4
 8007396:	f7f8 ffd3 	bl	8000340 <d_make_comp>
 800739a:	6028      	str	r0, [r5, #0]
 800739c:	b1a0      	cbz	r0, 80073c8 <d_parmlist+0x60>
 800739e:	68e2      	ldr	r2, [r4, #12]
 80073a0:	7813      	ldrb	r3, [r2, #0]
 80073a2:	f100 0508 	add.w	r5, r0, #8
 80073a6:	b14b      	cbz	r3, 80073bc <d_parmlist+0x54>
 80073a8:	2b45      	cmp	r3, #69	; 0x45
 80073aa:	d007      	beq.n	80073bc <d_parmlist+0x54>
 80073ac:	2b2e      	cmp	r3, #46	; 0x2e
 80073ae:	d005      	beq.n	80073bc <d_parmlist+0x54>
 80073b0:	2b52      	cmp	r3, #82	; 0x52
 80073b2:	4620      	mov	r0, r4
 80073b4:	d1e6      	bne.n	8007384 <d_parmlist+0x1c>
 80073b6:	7853      	ldrb	r3, [r2, #1]
 80073b8:	2b45      	cmp	r3, #69	; 0x45
 80073ba:	d1e5      	bne.n	8007388 <d_parmlist+0x20>
 80073bc:	9801      	ldr	r0, [sp, #4]
 80073be:	b118      	cbz	r0, 80073c8 <d_parmlist+0x60>
 80073c0:	6883      	ldr	r3, [r0, #8]
 80073c2:	b123      	cbz	r3, 80073ce <d_parmlist+0x66>
 80073c4:	b003      	add	sp, #12
 80073c6:	bd30      	pop	{r4, r5, pc}
 80073c8:	2000      	movs	r0, #0
 80073ca:	b003      	add	sp, #12
 80073cc:	bd30      	pop	{r4, r5, pc}
 80073ce:	6842      	ldr	r2, [r0, #4]
 80073d0:	7811      	ldrb	r1, [r2, #0]
 80073d2:	2927      	cmp	r1, #39	; 0x27
 80073d4:	d1f6      	bne.n	80073c4 <d_parmlist+0x5c>
 80073d6:	6852      	ldr	r2, [r2, #4]
 80073d8:	7c11      	ldrb	r1, [r2, #16]
 80073da:	2909      	cmp	r1, #9
 80073dc:	d1f2      	bne.n	80073c4 <d_parmlist+0x5c>
 80073de:	6851      	ldr	r1, [r2, #4]
 80073e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80073e2:	1a52      	subs	r2, r2, r1
 80073e4:	6322      	str	r2, [r4, #48]	; 0x30
 80073e6:	6043      	str	r3, [r0, #4]
 80073e8:	e7ec      	b.n	80073c4 <d_parmlist+0x5c>
 80073ea:	bf00      	nop

080073ec <d_unqualified_name>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	68c2      	ldr	r2, [r0, #12]
 80073f0:	7813      	ldrb	r3, [r2, #0]
 80073f2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80073f6:	2909      	cmp	r1, #9
 80073f8:	4604      	mov	r4, r0
 80073fa:	d920      	bls.n	800743e <d_unqualified_name+0x52>
 80073fc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8007400:	2919      	cmp	r1, #25
 8007402:	d933      	bls.n	800746c <d_unqualified_name+0x80>
 8007404:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 8007408:	2901      	cmp	r1, #1
 800740a:	d921      	bls.n	8007450 <d_unqualified_name+0x64>
 800740c:	2b4c      	cmp	r3, #76	; 0x4c
 800740e:	f000 8089 	beq.w	8007524 <d_unqualified_name+0x138>
 8007412:	2b55      	cmp	r3, #85	; 0x55
 8007414:	d128      	bne.n	8007468 <d_unqualified_name+0x7c>
 8007416:	7853      	ldrb	r3, [r2, #1]
 8007418:	2b6c      	cmp	r3, #108	; 0x6c
 800741a:	d032      	beq.n	8007482 <d_unqualified_name+0x96>
 800741c:	2b74      	cmp	r3, #116	; 0x74
 800741e:	d123      	bne.n	8007468 <d_unqualified_name+0x7c>
 8007420:	1c53      	adds	r3, r2, #1
 8007422:	60c3      	str	r3, [r0, #12]
 8007424:	7853      	ldrb	r3, [r2, #1]
 8007426:	2b74      	cmp	r3, #116	; 0x74
 8007428:	d05b      	beq.n	80074e2 <d_unqualified_name+0xf6>
 800742a:	2b42      	cmp	r3, #66	; 0x42
 800742c:	f04f 0500 	mov.w	r5, #0
 8007430:	d10c      	bne.n	800744c <d_unqualified_name+0x60>
 8007432:	4629      	mov	r1, r5
 8007434:	4620      	mov	r0, r4
 8007436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800743a:	f7f9 b9a3 	b.w	8000784 <d_abi_tags>
 800743e:	f7f9 f945 	bl	80006cc <d_source_name>
 8007442:	68e3      	ldr	r3, [r4, #12]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	4605      	mov	r5, r0
 8007448:	2b42      	cmp	r3, #66	; 0x42
 800744a:	d0f2      	beq.n	8007432 <d_unqualified_name+0x46>
 800744c:	4628      	mov	r0, r5
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007450:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007452:	b121      	cbz	r1, 800745e <d_unqualified_name+0x72>
 8007454:	7808      	ldrb	r0, [r1, #0]
 8007456:	2800      	cmp	r0, #0
 8007458:	d078      	beq.n	800754c <d_unqualified_name+0x160>
 800745a:	2818      	cmp	r0, #24
 800745c:	d076      	beq.n	800754c <d_unqualified_name+0x160>
 800745e:	2b43      	cmp	r3, #67	; 0x43
 8007460:	f000 80cd 	beq.w	80075fe <d_unqualified_name+0x212>
 8007464:	2b44      	cmp	r3, #68	; 0x44
 8007466:	d07b      	beq.n	8007560 <d_unqualified_name+0x174>
 8007468:	2000      	movs	r0, #0
 800746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800746c:	f7ff fefe 	bl	800726c <d_operator_name>
 8007470:	4605      	mov	r5, r0
 8007472:	b118      	cbz	r0, 800747c <d_unqualified_name+0x90>
 8007474:	7803      	ldrb	r3, [r0, #0]
 8007476:	2b31      	cmp	r3, #49	; 0x31
 8007478:	f000 80a4 	beq.w	80075c4 <d_unqualified_name+0x1d8>
 800747c:	68e3      	ldr	r3, [r4, #12]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	e7e2      	b.n	8007448 <d_unqualified_name+0x5c>
 8007482:	1c53      	adds	r3, r2, #1
 8007484:	60c3      	str	r3, [r0, #12]
 8007486:	7853      	ldrb	r3, [r2, #1]
 8007488:	2b6c      	cmp	r3, #108	; 0x6c
 800748a:	d1ce      	bne.n	800742a <d_unqualified_name+0x3e>
 800748c:	3202      	adds	r2, #2
 800748e:	60c2      	str	r2, [r0, #12]
 8007490:	f7ff ff6a 	bl	8007368 <d_parmlist>
 8007494:	4606      	mov	r6, r0
 8007496:	2800      	cmp	r0, #0
 8007498:	f000 80da 	beq.w	8007650 <d_unqualified_name+0x264>
 800749c:	68e2      	ldr	r2, [r4, #12]
 800749e:	7813      	ldrb	r3, [r2, #0]
 80074a0:	2b45      	cmp	r3, #69	; 0x45
 80074a2:	d1c2      	bne.n	800742a <d_unqualified_name+0x3e>
 80074a4:	3201      	adds	r2, #1
 80074a6:	60e2      	str	r2, [r4, #12]
 80074a8:	4620      	mov	r0, r4
 80074aa:	f7f9 f8d5 	bl	8000658 <d_compact_number>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	db13      	blt.n	80074da <d_unqualified_name+0xee>
 80074b2:	6963      	ldr	r3, [r4, #20]
 80074b4:	69a2      	ldr	r2, [r4, #24]
 80074b6:	4293      	cmp	r3, r2
 80074b8:	da0f      	bge.n	80074da <d_unqualified_name+0xee>
 80074ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80074be:	6921      	ldr	r1, [r4, #16]
 80074c0:	0092      	lsls	r2, r2, #2
 80074c2:	3301      	adds	r3, #1
 80074c4:	188d      	adds	r5, r1, r2
 80074c6:	6163      	str	r3, [r4, #20]
 80074c8:	d007      	beq.n	80074da <d_unqualified_name+0xee>
 80074ca:	2344      	movs	r3, #68	; 0x44
 80074cc:	548b      	strb	r3, [r1, r2]
 80074ce:	606e      	str	r6, [r5, #4]
 80074d0:	60a8      	str	r0, [r5, #8]
 80074d2:	6a23      	ldr	r3, [r4, #32]
 80074d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80074d6:	4293      	cmp	r3, r2
 80074d8:	db1c      	blt.n	8007514 <d_unqualified_name+0x128>
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	2500      	movs	r5, #0
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	e7b2      	b.n	8007448 <d_unqualified_name+0x5c>
 80074e2:	3202      	adds	r2, #2
 80074e4:	60c2      	str	r2, [r0, #12]
 80074e6:	f7f9 f8b7 	bl	8000658 <d_compact_number>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	dbf5      	blt.n	80074da <d_unqualified_name+0xee>
 80074ee:	6963      	ldr	r3, [r4, #20]
 80074f0:	69a2      	ldr	r2, [r4, #24]
 80074f2:	4293      	cmp	r3, r2
 80074f4:	daf1      	bge.n	80074da <d_unqualified_name+0xee>
 80074f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80074fa:	6921      	ldr	r1, [r4, #16]
 80074fc:	0092      	lsls	r2, r2, #2
 80074fe:	3301      	adds	r3, #1
 8007500:	188d      	adds	r5, r1, r2
 8007502:	6163      	str	r3, [r4, #20]
 8007504:	d0e9      	beq.n	80074da <d_unqualified_name+0xee>
 8007506:	2346      	movs	r3, #70	; 0x46
 8007508:	548b      	strb	r3, [r1, r2]
 800750a:	6068      	str	r0, [r5, #4]
 800750c:	6a23      	ldr	r3, [r4, #32]
 800750e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007510:	4293      	cmp	r3, r2
 8007512:	dae2      	bge.n	80074da <d_unqualified_name+0xee>
 8007514:	69e2      	ldr	r2, [r4, #28]
 8007516:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800751a:	3301      	adds	r3, #1
 800751c:	68e2      	ldr	r2, [r4, #12]
 800751e:	6223      	str	r3, [r4, #32]
 8007520:	7813      	ldrb	r3, [r2, #0]
 8007522:	e791      	b.n	8007448 <d_unqualified_name+0x5c>
 8007524:	3201      	adds	r2, #1
 8007526:	60c2      	str	r2, [r0, #12]
 8007528:	f7f9 f8d0 	bl	80006cc <d_source_name>
 800752c:	4605      	mov	r5, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	d09a      	beq.n	8007468 <d_unqualified_name+0x7c>
 8007532:	68e2      	ldr	r2, [r4, #12]
 8007534:	7813      	ldrb	r3, [r2, #0]
 8007536:	2b5f      	cmp	r3, #95	; 0x5f
 8007538:	d186      	bne.n	8007448 <d_unqualified_name+0x5c>
 800753a:	4620      	mov	r0, r4
 800753c:	3201      	adds	r2, #1
 800753e:	f840 2f0c 	str.w	r2, [r0, #12]!
 8007542:	f7f9 f843 	bl	80005cc <d_number.isra.0>
 8007546:	2800      	cmp	r0, #0
 8007548:	da98      	bge.n	800747c <d_unqualified_name+0x90>
 800754a:	e78d      	b.n	8007468 <d_unqualified_name+0x7c>
 800754c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800754e:	688b      	ldr	r3, [r1, #8]
 8007550:	4403      	add	r3, r0
 8007552:	6323      	str	r3, [r4, #48]	; 0x30
 8007554:	7813      	ldrb	r3, [r2, #0]
 8007556:	2b43      	cmp	r3, #67	; 0x43
 8007558:	d051      	beq.n	80075fe <d_unqualified_name+0x212>
 800755a:	2b44      	cmp	r3, #68	; 0x44
 800755c:	f47f af65 	bne.w	800742a <d_unqualified_name+0x3e>
 8007560:	7853      	ldrb	r3, [r2, #1]
 8007562:	3b30      	subs	r3, #48	; 0x30
 8007564:	2b05      	cmp	r3, #5
 8007566:	f63f af7f 	bhi.w	8007468 <d_unqualified_name+0x7c>
 800756a:	a001      	add	r0, pc, #4	; (adr r0, 8007570 <d_unqualified_name+0x184>)
 800756c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007570:	080075b9 	.word	0x080075b9
 8007574:	08007589 	.word	0x08007589
 8007578:	080075b5 	.word	0x080075b5
 800757c:	08007469 	.word	0x08007469
 8007580:	080075c1 	.word	0x080075c1
 8007584:	080075bd 	.word	0x080075bd
 8007588:	2702      	movs	r7, #2
 800758a:	6963      	ldr	r3, [r4, #20]
 800758c:	69a0      	ldr	r0, [r4, #24]
 800758e:	1c95      	adds	r5, r2, #2
 8007590:	4283      	cmp	r3, r0
 8007592:	60e5      	str	r5, [r4, #12]
 8007594:	da30      	bge.n	80075f8 <d_unqualified_name+0x20c>
 8007596:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800759a:	6926      	ldr	r6, [r4, #16]
 800759c:	0080      	lsls	r0, r0, #2
 800759e:	3301      	adds	r3, #1
 80075a0:	1835      	adds	r5, r6, r0
 80075a2:	6163      	str	r3, [r4, #20]
 80075a4:	d028      	beq.n	80075f8 <d_unqualified_name+0x20c>
 80075a6:	b339      	cbz	r1, 80075f8 <d_unqualified_name+0x20c>
 80075a8:	2308      	movs	r3, #8
 80075aa:	5433      	strb	r3, [r6, r0]
 80075ac:	712f      	strb	r7, [r5, #4]
 80075ae:	60a9      	str	r1, [r5, #8]
 80075b0:	7893      	ldrb	r3, [r2, #2]
 80075b2:	e749      	b.n	8007448 <d_unqualified_name+0x5c>
 80075b4:	2703      	movs	r7, #3
 80075b6:	e7e8      	b.n	800758a <d_unqualified_name+0x19e>
 80075b8:	2701      	movs	r7, #1
 80075ba:	e7e6      	b.n	800758a <d_unqualified_name+0x19e>
 80075bc:	2705      	movs	r7, #5
 80075be:	e7e4      	b.n	800758a <d_unqualified_name+0x19e>
 80075c0:	2704      	movs	r7, #4
 80075c2:	e7e2      	b.n	800758a <d_unqualified_name+0x19e>
 80075c4:	6842      	ldr	r2, [r0, #4]
 80075c6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80075c8:	6893      	ldr	r3, [r2, #8]
 80075ca:	6810      	ldr	r0, [r2, #0]
 80075cc:	4922      	ldr	r1, [pc, #136]	; (8007658 <d_unqualified_name+0x26c>)
 80075ce:	4433      	add	r3, r6
 80075d0:	3307      	adds	r3, #7
 80075d2:	6323      	str	r3, [r4, #48]	; 0x30
 80075d4:	f002 fd38 	bl	800a048 <strcmp>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f47f af4f 	bne.w	800747c <d_unqualified_name+0x90>
 80075de:	4620      	mov	r0, r4
 80075e0:	f7f9 f874 	bl	80006cc <d_source_name>
 80075e4:	462a      	mov	r2, r5
 80075e6:	4603      	mov	r3, r0
 80075e8:	2135      	movs	r1, #53	; 0x35
 80075ea:	4620      	mov	r0, r4
 80075ec:	f7f8 fea8 	bl	8000340 <d_make_comp>
 80075f0:	68e3      	ldr	r3, [r4, #12]
 80075f2:	4605      	mov	r5, r0
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	e727      	b.n	8007448 <d_unqualified_name+0x5c>
 80075f8:	7893      	ldrb	r3, [r2, #2]
 80075fa:	2500      	movs	r5, #0
 80075fc:	e724      	b.n	8007448 <d_unqualified_name+0x5c>
 80075fe:	7853      	ldrb	r3, [r2, #1]
 8007600:	3b31      	subs	r3, #49	; 0x31
 8007602:	2b04      	cmp	r3, #4
 8007604:	f63f af30 	bhi.w	8007468 <d_unqualified_name+0x7c>
 8007608:	e8df f003 	tbb	[pc, r3]
 800760c:	1e20031a 	.word	0x1e20031a
 8007610:	1c          	.byte	0x1c
 8007611:	00          	.byte	0x00
 8007612:	2702      	movs	r7, #2
 8007614:	6963      	ldr	r3, [r4, #20]
 8007616:	69a0      	ldr	r0, [r4, #24]
 8007618:	1c95      	adds	r5, r2, #2
 800761a:	4283      	cmp	r3, r0
 800761c:	60e5      	str	r5, [r4, #12]
 800761e:	daeb      	bge.n	80075f8 <d_unqualified_name+0x20c>
 8007620:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8007624:	6926      	ldr	r6, [r4, #16]
 8007626:	0080      	lsls	r0, r0, #2
 8007628:	3301      	adds	r3, #1
 800762a:	1835      	adds	r5, r6, r0
 800762c:	6163      	str	r3, [r4, #20]
 800762e:	d0e3      	beq.n	80075f8 <d_unqualified_name+0x20c>
 8007630:	2900      	cmp	r1, #0
 8007632:	d0e1      	beq.n	80075f8 <d_unqualified_name+0x20c>
 8007634:	2307      	movs	r3, #7
 8007636:	5433      	strb	r3, [r6, r0]
 8007638:	712f      	strb	r7, [r5, #4]
 800763a:	60a9      	str	r1, [r5, #8]
 800763c:	7893      	ldrb	r3, [r2, #2]
 800763e:	e703      	b.n	8007448 <d_unqualified_name+0x5c>
 8007640:	2701      	movs	r7, #1
 8007642:	e7e7      	b.n	8007614 <d_unqualified_name+0x228>
 8007644:	2705      	movs	r7, #5
 8007646:	e7e5      	b.n	8007614 <d_unqualified_name+0x228>
 8007648:	2704      	movs	r7, #4
 800764a:	e7e3      	b.n	8007614 <d_unqualified_name+0x228>
 800764c:	2703      	movs	r7, #3
 800764e:	e7e1      	b.n	8007614 <d_unqualified_name+0x228>
 8007650:	68e3      	ldr	r3, [r4, #12]
 8007652:	4605      	mov	r5, r0
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	e6f7      	b.n	8007448 <d_unqualified_name+0x5c>
 8007658:	080164e8 	.word	0x080164e8

0800765c <d_bare_function_type>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	68c3      	ldr	r3, [r0, #12]
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	2a4a      	cmp	r2, #74	; 0x4a
 8007664:	4604      	mov	r4, r0
 8007666:	d00d      	beq.n	8007684 <d_bare_function_type+0x28>
 8007668:	b971      	cbnz	r1, 8007688 <d_bare_function_type+0x2c>
 800766a:	460d      	mov	r5, r1
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff fe7b 	bl	8007368 <d_parmlist>
 8007672:	b178      	cbz	r0, 8007694 <d_bare_function_type+0x38>
 8007674:	4603      	mov	r3, r0
 8007676:	462a      	mov	r2, r5
 8007678:	4620      	mov	r0, r4
 800767a:	2129      	movs	r1, #41	; 0x29
 800767c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007680:	f7f8 be5e 	b.w	8000340 <d_make_comp>
 8007684:	3301      	adds	r3, #1
 8007686:	60c3      	str	r3, [r0, #12]
 8007688:	4620      	mov	r0, r4
 800768a:	f7ff fa31 	bl	8006af0 <d_type>
 800768e:	4605      	mov	r5, r0
 8007690:	2800      	cmp	r0, #0
 8007692:	d1eb      	bne.n	800766c <d_bare_function_type+0x10>
 8007694:	2000      	movs	r0, #0
 8007696:	bd70      	pop	{r4, r5, r6, pc}

08007698 <d_function_type>:
 8007698:	68c3      	ldr	r3, [r0, #12]
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	2a46      	cmp	r2, #70	; 0x46
 800769e:	d001      	beq.n	80076a4 <d_function_type+0xc>
 80076a0:	2000      	movs	r0, #0
 80076a2:	4770      	bx	lr
 80076a4:	b510      	push	{r4, lr}
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	60c2      	str	r2, [r0, #12]
 80076aa:	785a      	ldrb	r2, [r3, #1]
 80076ac:	2a59      	cmp	r2, #89	; 0x59
 80076ae:	bf04      	itt	eq
 80076b0:	3302      	addeq	r3, #2
 80076b2:	60c3      	streq	r3, [r0, #12]
 80076b4:	2101      	movs	r1, #1
 80076b6:	4604      	mov	r4, r0
 80076b8:	f7ff ffd0 	bl	800765c <d_bare_function_type>
 80076bc:	4601      	mov	r1, r0
 80076be:	4620      	mov	r0, r4
 80076c0:	f7f8 fee6 	bl	8000490 <d_ref_qualifier>
 80076c4:	68e3      	ldr	r3, [r4, #12]
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	2a45      	cmp	r2, #69	; 0x45
 80076ca:	d001      	beq.n	80076d0 <d_function_type+0x38>
 80076cc:	2000      	movs	r0, #0
 80076ce:	bd10      	pop	{r4, pc}
 80076d0:	3301      	adds	r3, #1
 80076d2:	60e3      	str	r3, [r4, #12]
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	bf00      	nop

080076d8 <d_name>:
 80076d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076dc:	68c2      	ldr	r2, [r0, #12]
 80076de:	7813      	ldrb	r3, [r2, #0]
 80076e0:	3b4e      	subs	r3, #78	; 0x4e
 80076e2:	b083      	sub	sp, #12
 80076e4:	4605      	mov	r5, r0
 80076e6:	2b0c      	cmp	r3, #12
 80076e8:	d869      	bhi.n	80077be <d_name+0xe6>
 80076ea:	e8df f003 	tbb	[pc, r3]
 80076ee:	681b      	.short	0x681b
 80076f0:	59686868 	.word	0x59686868
 80076f4:	68681668 	.word	0x68681668
 80076f8:	6868      	.short	0x6868
 80076fa:	07          	.byte	0x07
 80076fb:	00          	.byte	0x00
 80076fc:	3201      	adds	r2, #1
 80076fe:	2100      	movs	r1, #0
 8007700:	60c2      	str	r2, [r0, #12]
 8007702:	f000 f9ad 	bl	8007a60 <d_encoding>
 8007706:	68eb      	ldr	r3, [r5, #12]
 8007708:	7819      	ldrb	r1, [r3, #0]
 800770a:	2945      	cmp	r1, #69	; 0x45
 800770c:	4606      	mov	r6, r0
 800770e:	f000 809c 	beq.w	800784a <d_name+0x172>
 8007712:	2000      	movs	r0, #0
 8007714:	b003      	add	sp, #12
 8007716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800771a:	f7ff fe67 	bl	80073ec <d_unqualified_name>
 800771e:	b003      	add	sp, #12
 8007720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007724:	3201      	adds	r2, #1
 8007726:	60c2      	str	r2, [r0, #12]
 8007728:	a901      	add	r1, sp, #4
 800772a:	2201      	movs	r2, #1
 800772c:	f7f8 fe54 	bl	80003d8 <d_cv_qualifiers>
 8007730:	4681      	mov	r9, r0
 8007732:	2800      	cmp	r0, #0
 8007734:	d0ed      	beq.n	8007712 <d_name+0x3a>
 8007736:	2100      	movs	r1, #0
 8007738:	4628      	mov	r0, r5
 800773a:	f7f8 fea9 	bl	8000490 <d_ref_qualifier>
 800773e:	68ea      	ldr	r2, [r5, #12]
 8007740:	4eb9      	ldr	r6, [pc, #740]	; (8007a28 <d_name+0x350>)
 8007742:	7814      	ldrb	r4, [r2, #0]
 8007744:	4680      	mov	r8, r0
 8007746:	2700      	movs	r7, #0
 8007748:	2c00      	cmp	r4, #0
 800774a:	f000 80f1 	beq.w	8007930 <d_name+0x258>
 800774e:	2c44      	cmp	r4, #68	; 0x44
 8007750:	f000 80d8 	beq.w	8007904 <d_name+0x22c>
 8007754:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b1c      	cmp	r3, #28
 800775c:	f240 80ae 	bls.w	80078bc <d_name+0x1e4>
 8007760:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b19      	cmp	r3, #25
 8007768:	f240 80ad 	bls.w	80078c6 <d_name+0x1ee>
 800776c:	2c55      	cmp	r4, #85	; 0x55
 800776e:	f000 80e5 	beq.w	800793c <d_name+0x264>
 8007772:	2c53      	cmp	r4, #83	; 0x53
 8007774:	f000 80f0 	beq.w	8007958 <d_name+0x280>
 8007778:	2c49      	cmp	r4, #73	; 0x49
 800777a:	f000 80e6 	beq.w	800794a <d_name+0x272>
 800777e:	2c54      	cmp	r4, #84	; 0x54
 8007780:	f000 8121 	beq.w	80079c6 <d_name+0x2ee>
 8007784:	2c45      	cmp	r4, #69	; 0x45
 8007786:	f000 8155 	beq.w	8007a34 <d_name+0x35c>
 800778a:	2c4d      	cmp	r4, #77	; 0x4d
 800778c:	f040 80d0 	bne.w	8007930 <d_name+0x258>
 8007790:	2f00      	cmp	r7, #0
 8007792:	f000 80cd 	beq.w	8007930 <d_name+0x258>
 8007796:	1c53      	adds	r3, r2, #1
 8007798:	60eb      	str	r3, [r5, #12]
 800779a:	7854      	ldrb	r4, [r2, #1]
 800779c:	461a      	mov	r2, r3
 800779e:	e7d3      	b.n	8007748 <d_name+0x70>
 80077a0:	7853      	ldrb	r3, [r2, #1]
 80077a2:	2b74      	cmp	r3, #116	; 0x74
 80077a4:	d029      	beq.n	80077fa <d_name+0x122>
 80077a6:	2100      	movs	r1, #0
 80077a8:	f7f9 f806 	bl	80007b8 <d_substitution>
 80077ac:	68eb      	ldr	r3, [r5, #12]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b49      	cmp	r3, #73	; 0x49
 80077b2:	4604      	mov	r4, r0
 80077b4:	d047      	beq.n	8007846 <d_name+0x16e>
 80077b6:	4620      	mov	r0, r4
 80077b8:	b003      	add	sp, #12
 80077ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077be:	f7ff fe15 	bl	80073ec <d_unqualified_name>
 80077c2:	68eb      	ldr	r3, [r5, #12]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b49      	cmp	r3, #73	; 0x49
 80077c8:	4604      	mov	r4, r0
 80077ca:	d1f4      	bne.n	80077b6 <d_name+0xde>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d0a0      	beq.n	8007712 <d_name+0x3a>
 80077d0:	6a2b      	ldr	r3, [r5, #32]
 80077d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80077d4:	4293      	cmp	r3, r2
 80077d6:	da9c      	bge.n	8007712 <d_name+0x3a>
 80077d8:	69e9      	ldr	r1, [r5, #28]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80077e0:	4628      	mov	r0, r5
 80077e2:	622a      	str	r2, [r5, #32]
 80077e4:	f7fc fca8 	bl	8004138 <d_template_args>
 80077e8:	4622      	mov	r2, r4
 80077ea:	4603      	mov	r3, r0
 80077ec:	2104      	movs	r1, #4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f7f8 fda6 	bl	8000340 <d_make_comp>
 80077f4:	b003      	add	sp, #12
 80077f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077fa:	6943      	ldr	r3, [r0, #20]
 80077fc:	6981      	ldr	r1, [r0, #24]
 80077fe:	3202      	adds	r2, #2
 8007800:	428b      	cmp	r3, r1
 8007802:	60c2      	str	r2, [r0, #12]
 8007804:	f2c0 80b2 	blt.w	800796c <d_name+0x294>
 8007808:	2400      	movs	r4, #0
 800780a:	4628      	mov	r0, r5
 800780c:	f7ff fdee 	bl	80073ec <d_unqualified_name>
 8007810:	4622      	mov	r2, r4
 8007812:	4603      	mov	r3, r0
 8007814:	2101      	movs	r1, #1
 8007816:	4628      	mov	r0, r5
 8007818:	f7f8 fd92 	bl	8000340 <d_make_comp>
 800781c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800781e:	68ea      	ldr	r2, [r5, #12]
 8007820:	3303      	adds	r3, #3
 8007822:	632b      	str	r3, [r5, #48]	; 0x30
 8007824:	7813      	ldrb	r3, [r2, #0]
 8007826:	2b49      	cmp	r3, #73	; 0x49
 8007828:	4604      	mov	r4, r0
 800782a:	d1c4      	bne.n	80077b6 <d_name+0xde>
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f af70 	beq.w	8007712 <d_name+0x3a>
 8007832:	6a2b      	ldr	r3, [r5, #32]
 8007834:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007836:	4293      	cmp	r3, r2
 8007838:	f6bf af6b 	bge.w	8007712 <d_name+0x3a>
 800783c:	69e9      	ldr	r1, [r5, #28]
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007844:	622a      	str	r2, [r5, #32]
 8007846:	4628      	mov	r0, r5
 8007848:	e7cc      	b.n	80077e4 <d_name+0x10c>
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	60ea      	str	r2, [r5, #12]
 800784e:	7859      	ldrb	r1, [r3, #1]
 8007850:	2973      	cmp	r1, #115	; 0x73
 8007852:	f000 80a0 	beq.w	8007996 <d_name+0x2be>
 8007856:	2964      	cmp	r1, #100	; 0x64
 8007858:	f000 80bc 	beq.w	80079d4 <d_name+0x2fc>
 800785c:	4628      	mov	r0, r5
 800785e:	f7ff ff3b 	bl	80076d8 <d_name>
 8007862:	4604      	mov	r4, r0
 8007864:	2800      	cmp	r0, #0
 8007866:	f000 8092 	beq.w	800798e <d_name+0x2b6>
 800786a:	7803      	ldrb	r3, [r0, #0]
 800786c:	2b44      	cmp	r3, #68	; 0x44
 800786e:	f000 808e 	beq.w	800798e <d_name+0x2b6>
 8007872:	2b46      	cmp	r3, #70	; 0x46
 8007874:	f000 808b 	beq.w	800798e <d_name+0x2b6>
 8007878:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800787c:	68eb      	ldr	r3, [r5, #12]
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	2a5f      	cmp	r2, #95	; 0x5f
 8007882:	f000 80be 	beq.w	8007a02 <d_name+0x32a>
 8007886:	1c7b      	adds	r3, r7, #1
 8007888:	f000 8081 	beq.w	800798e <d_name+0x2b6>
 800788c:	696b      	ldr	r3, [r5, #20]
 800788e:	69aa      	ldr	r2, [r5, #24]
 8007890:	4293      	cmp	r3, r2
 8007892:	da7e      	bge.n	8007992 <d_name+0x2ba>
 8007894:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007898:	6929      	ldr	r1, [r5, #16]
 800789a:	3301      	adds	r3, #1
 800789c:	0092      	lsls	r2, r2, #2
 800789e:	616b      	str	r3, [r5, #20]
 80078a0:	188b      	adds	r3, r1, r2
 80078a2:	d003      	beq.n	80078ac <d_name+0x1d4>
 80078a4:	2045      	movs	r0, #69	; 0x45
 80078a6:	5488      	strb	r0, [r1, r2]
 80078a8:	609f      	str	r7, [r3, #8]
 80078aa:	605c      	str	r4, [r3, #4]
 80078ac:	4632      	mov	r2, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	2102      	movs	r1, #2
 80078b2:	f7f8 fd45 	bl	8000340 <d_make_comp>
 80078b6:	b003      	add	sp, #12
 80078b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078bc:	fa26 f303 	lsr.w	r3, r6, r3
 80078c0:	07d9      	lsls	r1, r3, #31
 80078c2:	f57f af4d 	bpl.w	8007760 <d_name+0x88>
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7ff fd90 	bl	80073ec <d_unqualified_name>
 80078cc:	b377      	cbz	r7, 800792c <d_name+0x254>
 80078ce:	2101      	movs	r1, #1
 80078d0:	4603      	mov	r3, r0
 80078d2:	463a      	mov	r2, r7
 80078d4:	4628      	mov	r0, r5
 80078d6:	f7f8 fd33 	bl	8000340 <d_make_comp>
 80078da:	4607      	mov	r7, r0
 80078dc:	2c53      	cmp	r4, #83	; 0x53
 80078de:	d01d      	beq.n	800791c <d_name+0x244>
 80078e0:	68ea      	ldr	r2, [r5, #12]
 80078e2:	7814      	ldrb	r4, [r2, #0]
 80078e4:	2c45      	cmp	r4, #69	; 0x45
 80078e6:	f43f af35 	beq.w	8007754 <d_name+0x7c>
 80078ea:	b30f      	cbz	r7, 8007930 <d_name+0x258>
 80078ec:	6a2b      	ldr	r3, [r5, #32]
 80078ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80078f0:	4293      	cmp	r3, r2
 80078f2:	da1d      	bge.n	8007930 <d_name+0x258>
 80078f4:	69ea      	ldr	r2, [r5, #28]
 80078f6:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 80078fa:	3301      	adds	r3, #1
 80078fc:	68ea      	ldr	r2, [r5, #12]
 80078fe:	622b      	str	r3, [r5, #32]
 8007900:	7814      	ldrb	r4, [r2, #0]
 8007902:	e721      	b.n	8007748 <d_name+0x70>
 8007904:	7853      	ldrb	r3, [r2, #1]
 8007906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800790a:	2b54      	cmp	r3, #84	; 0x54
 800790c:	4628      	mov	r0, r5
 800790e:	d008      	beq.n	8007922 <d_name+0x24a>
 8007910:	f7ff fd6c 	bl	80073ec <d_unqualified_name>
 8007914:	2f00      	cmp	r7, #0
 8007916:	d1da      	bne.n	80078ce <d_name+0x1f6>
 8007918:	4607      	mov	r7, r0
 800791a:	e7e1      	b.n	80078e0 <d_name+0x208>
 800791c:	68ea      	ldr	r2, [r5, #12]
 800791e:	7814      	ldrb	r4, [r2, #0]
 8007920:	e712      	b.n	8007748 <d_name+0x70>
 8007922:	f7ff f8e5 	bl	8006af0 <d_type>
 8007926:	2f00      	cmp	r7, #0
 8007928:	d1d1      	bne.n	80078ce <d_name+0x1f6>
 800792a:	e7f5      	b.n	8007918 <d_name+0x240>
 800792c:	4607      	mov	r7, r0
 800792e:	e7d5      	b.n	80078dc <d_name+0x204>
 8007930:	2000      	movs	r0, #0
 8007932:	f8c9 0000 	str.w	r0, [r9]
 8007936:	b003      	add	sp, #12
 8007938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800793c:	4628      	mov	r0, r5
 800793e:	f7ff fd55 	bl	80073ec <d_unqualified_name>
 8007942:	2f00      	cmp	r7, #0
 8007944:	d1c3      	bne.n	80078ce <d_name+0x1f6>
 8007946:	4607      	mov	r7, r0
 8007948:	e7ca      	b.n	80078e0 <d_name+0x208>
 800794a:	2f00      	cmp	r7, #0
 800794c:	d0f0      	beq.n	8007930 <d_name+0x258>
 800794e:	4628      	mov	r0, r5
 8007950:	f7fc fbf2 	bl	8004138 <d_template_args>
 8007954:	2104      	movs	r1, #4
 8007956:	e7bb      	b.n	80078d0 <d_name+0x1f8>
 8007958:	2101      	movs	r1, #1
 800795a:	4628      	mov	r0, r5
 800795c:	f7f8 ff2c 	bl	80007b8 <d_substitution>
 8007960:	2f00      	cmp	r7, #0
 8007962:	d1b4      	bne.n	80078ce <d_name+0x1f6>
 8007964:	68ea      	ldr	r2, [r5, #12]
 8007966:	4607      	mov	r7, r0
 8007968:	7814      	ldrb	r4, [r2, #0]
 800796a:	e6ed      	b.n	8007748 <d_name+0x70>
 800796c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007970:	6900      	ldr	r0, [r0, #16]
 8007972:	0089      	lsls	r1, r1, #2
 8007974:	3301      	adds	r3, #1
 8007976:	1842      	adds	r2, r0, r1
 8007978:	616b      	str	r3, [r5, #20]
 800797a:	f43f af45 	beq.w	8007808 <d_name+0x130>
 800797e:	2300      	movs	r3, #0
 8007980:	5443      	strb	r3, [r0, r1]
 8007982:	4c2a      	ldr	r4, [pc, #168]	; (8007a2c <d_name+0x354>)
 8007984:	6054      	str	r4, [r2, #4]
 8007986:	2303      	movs	r3, #3
 8007988:	6093      	str	r3, [r2, #8]
 800798a:	4614      	mov	r4, r2
 800798c:	e73d      	b.n	800780a <d_name+0x132>
 800798e:	4623      	mov	r3, r4
 8007990:	e78c      	b.n	80078ac <d_name+0x1d4>
 8007992:	2300      	movs	r3, #0
 8007994:	e78a      	b.n	80078ac <d_name+0x1d4>
 8007996:	1c9a      	adds	r2, r3, #2
 8007998:	60ea      	str	r2, [r5, #12]
 800799a:	789a      	ldrb	r2, [r3, #2]
 800799c:	2a5f      	cmp	r2, #95	; 0x5f
 800799e:	d03a      	beq.n	8007a16 <d_name+0x33e>
 80079a0:	696b      	ldr	r3, [r5, #20]
 80079a2:	69aa      	ldr	r2, [r5, #24]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	daf4      	bge.n	8007992 <d_name+0x2ba>
 80079a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80079ac:	6929      	ldr	r1, [r5, #16]
 80079ae:	3301      	adds	r3, #1
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	616b      	str	r3, [r5, #20]
 80079b4:	188b      	adds	r3, r1, r2
 80079b6:	d0ec      	beq.n	8007992 <d_name+0x2ba>
 80079b8:	2400      	movs	r4, #0
 80079ba:	548c      	strb	r4, [r1, r2]
 80079bc:	481c      	ldr	r0, [pc, #112]	; (8007a30 <d_name+0x358>)
 80079be:	6058      	str	r0, [r3, #4]
 80079c0:	220e      	movs	r2, #14
 80079c2:	609a      	str	r2, [r3, #8]
 80079c4:	e772      	b.n	80078ac <d_name+0x1d4>
 80079c6:	4628      	mov	r0, r5
 80079c8:	f7f8 fe5e 	bl	8000688 <d_template_param>
 80079cc:	2f00      	cmp	r7, #0
 80079ce:	f47f af7e 	bne.w	80078ce <d_name+0x1f6>
 80079d2:	e7a1      	b.n	8007918 <d_name+0x240>
 80079d4:	3302      	adds	r3, #2
 80079d6:	60eb      	str	r3, [r5, #12]
 80079d8:	4628      	mov	r0, r5
 80079da:	f7f8 fe3d 	bl	8000658 <d_compact_number>
 80079de:	1e07      	subs	r7, r0, #0
 80079e0:	f6ff ae97 	blt.w	8007712 <d_name+0x3a>
 80079e4:	4628      	mov	r0, r5
 80079e6:	f7ff fe77 	bl	80076d8 <d_name>
 80079ea:	4604      	mov	r4, r0
 80079ec:	2800      	cmp	r0, #0
 80079ee:	f43f af4d 	beq.w	800788c <d_name+0x1b4>
 80079f2:	7803      	ldrb	r3, [r0, #0]
 80079f4:	2b44      	cmp	r3, #68	; 0x44
 80079f6:	f43f af49 	beq.w	800788c <d_name+0x1b4>
 80079fa:	2b46      	cmp	r3, #70	; 0x46
 80079fc:	f43f af46 	beq.w	800788c <d_name+0x1b4>
 8007a00:	e73c      	b.n	800787c <d_name+0x1a4>
 8007a02:	4628      	mov	r0, r5
 8007a04:	3301      	adds	r3, #1
 8007a06:	f840 3f0c 	str.w	r3, [r0, #12]!
 8007a0a:	f7f8 fddf 	bl	80005cc <d_number.isra.0>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f6bf af39 	bge.w	8007886 <d_name+0x1ae>
 8007a14:	e67d      	b.n	8007712 <d_name+0x3a>
 8007a16:	4628      	mov	r0, r5
 8007a18:	3303      	adds	r3, #3
 8007a1a:	f840 3f0c 	str.w	r3, [r0, #12]!
 8007a1e:	f7f8 fdd5 	bl	80005cc <d_number.isra.0>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	dabc      	bge.n	80079a0 <d_name+0x2c8>
 8007a26:	e674      	b.n	8007712 <d_name+0x3a>
 8007a28:	100803ff 	.word	0x100803ff
 8007a2c:	080164fc 	.word	0x080164fc
 8007a30:	080164ec 	.word	0x080164ec
 8007a34:	f8c9 7000 	str.w	r7, [r9]
 8007a38:	2f00      	cmp	r7, #0
 8007a3a:	f43f ae6a 	beq.w	8007712 <d_name+0x3a>
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	d004      	beq.n	8007a4e <d_name+0x376>
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a4a:	f8cd 8004 	str.w	r8, [sp, #4]
 8007a4e:	68eb      	ldr	r3, [r5, #12]
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	2a45      	cmp	r2, #69	; 0x45
 8007a54:	f47f ae5d 	bne.w	8007712 <d_name+0x3a>
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60eb      	str	r3, [r5, #12]
 8007a5c:	9801      	ldr	r0, [sp, #4]
 8007a5e:	e65e      	b.n	800771e <d_name+0x46>

08007a60 <d_encoding>:
 8007a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	68c3      	ldr	r3, [r0, #12]
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	2a47      	cmp	r2, #71	; 0x47
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	d03b      	beq.n	8007ae6 <d_encoding+0x86>
 8007a6e:	2a54      	cmp	r2, #84	; 0x54
 8007a70:	d039      	beq.n	8007ae6 <d_encoding+0x86>
 8007a72:	460e      	mov	r6, r1
 8007a74:	f7ff fe30 	bl	80076d8 <d_name>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	b328      	cbz	r0, 8007ac8 <d_encoding+0x68>
 8007a7c:	b116      	cbz	r6, 8007a84 <d_encoding+0x24>
 8007a7e:	68ab      	ldr	r3, [r5, #8]
 8007a80:	07db      	lsls	r3, r3, #31
 8007a82:	d525      	bpl.n	8007ad0 <d_encoding+0x70>
 8007a84:	68eb      	ldr	r3, [r5, #12]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	b353      	cbz	r3, 8007ae0 <d_encoding+0x80>
 8007a8a:	2b45      	cmp	r3, #69	; 0x45
 8007a8c:	d028      	beq.n	8007ae0 <d_encoding+0x80>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	780b      	ldrb	r3, [r1, #0]
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	f1a3 021c 	sub.w	r2, r3, #28
 8007a98:	f000 811a 	beq.w	8007cd0 <d_encoding+0x270>
 8007a9c:	f0c0 8116 	bcc.w	8007ccc <d_encoding+0x26c>
 8007aa0:	2a04      	cmp	r2, #4
 8007aa2:	f200 8113 	bhi.w	8007ccc <d_encoding+0x26c>
 8007aa6:	6849      	ldr	r1, [r1, #4]
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d1f1      	bne.n	8007a90 <d_encoding+0x30>
 8007aac:	4628      	mov	r0, r5
 8007aae:	f7ff fdd5 	bl	800765c <d_bare_function_type>
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2103      	movs	r1, #3
 8007ab8:	4628      	mov	r0, r5
 8007aba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abe:	f7f8 bc3f 	b.w	8000340 <d_make_comp>
 8007ac2:	68eb      	ldr	r3, [r5, #12]
 8007ac4:	4419      	add	r1, r3
 8007ac6:	60e9      	str	r1, [r5, #12]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ace:	6864      	ldr	r4, [r4, #4]
 8007ad0:	7823      	ldrb	r3, [r4, #0]
 8007ad2:	f1a3 021c 	sub.w	r2, r3, #28
 8007ad6:	2a04      	cmp	r2, #4
 8007ad8:	d9f9      	bls.n	8007ace <d_encoding+0x6e>
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	f000 8168 	beq.w	8007db0 <d_encoding+0x350>
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007ae8:	f101 0214 	add.w	r2, r1, #20
 8007aec:	632a      	str	r2, [r5, #48]	; 0x30
 8007aee:	781a      	ldrb	r2, [r3, #0]
 8007af0:	2a54      	cmp	r2, #84	; 0x54
 8007af2:	d073      	beq.n	8007bdc <d_encoding+0x17c>
 8007af4:	2a47      	cmp	r2, #71	; 0x47
 8007af6:	d1e7      	bne.n	8007ac8 <d_encoding+0x68>
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	60ea      	str	r2, [r5, #12]
 8007afc:	785a      	ldrb	r2, [r3, #1]
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	d0e2      	beq.n	8007ac8 <d_encoding+0x68>
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	60ea      	str	r2, [r5, #12]
 8007b06:	785a      	ldrb	r2, [r3, #1]
 8007b08:	3a41      	subs	r2, #65	; 0x41
 8007b0a:	2a31      	cmp	r2, #49	; 0x31
 8007b0c:	d8dc      	bhi.n	8007ac8 <d_encoding+0x68>
 8007b0e:	a101      	add	r1, pc, #4	; (adr r1, 8007b14 <d_encoding+0xb4>)
 8007b10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b14:	08007eb5 	.word	0x08007eb5
 8007b18:	08007ac9 	.word	0x08007ac9
 8007b1c:	08007ac9 	.word	0x08007ac9
 8007b20:	08007ac9 	.word	0x08007ac9
 8007b24:	08007ac9 	.word	0x08007ac9
 8007b28:	08007ac9 	.word	0x08007ac9
 8007b2c:	08007ac9 	.word	0x08007ac9
 8007b30:	08007ac9 	.word	0x08007ac9
 8007b34:	08007ac9 	.word	0x08007ac9
 8007b38:	08007ac9 	.word	0x08007ac9
 8007b3c:	08007ac9 	.word	0x08007ac9
 8007b40:	08007ac9 	.word	0x08007ac9
 8007b44:	08007ac9 	.word	0x08007ac9
 8007b48:	08007ac9 	.word	0x08007ac9
 8007b4c:	08007ac9 	.word	0x08007ac9
 8007b50:	08007ac9 	.word	0x08007ac9
 8007b54:	08007ac9 	.word	0x08007ac9
 8007b58:	08007e97 	.word	0x08007e97
 8007b5c:	08007ac9 	.word	0x08007ac9
 8007b60:	08007ecd 	.word	0x08007ecd
 8007b64:	08007ac9 	.word	0x08007ac9
 8007b68:	08007e81 	.word	0x08007e81
 8007b6c:	08007ac9 	.word	0x08007ac9
 8007b70:	08007ac9 	.word	0x08007ac9
 8007b74:	08007ac9 	.word	0x08007ac9
 8007b78:	08007ac9 	.word	0x08007ac9
 8007b7c:	08007ac9 	.word	0x08007ac9
 8007b80:	08007ac9 	.word	0x08007ac9
 8007b84:	08007ac9 	.word	0x08007ac9
 8007b88:	08007ac9 	.word	0x08007ac9
 8007b8c:	08007ac9 	.word	0x08007ac9
 8007b90:	08007ac9 	.word	0x08007ac9
 8007b94:	08007ac9 	.word	0x08007ac9
 8007b98:	08007ac9 	.word	0x08007ac9
 8007b9c:	08007ac9 	.word	0x08007ac9
 8007ba0:	08007ac9 	.word	0x08007ac9
 8007ba4:	08007ac9 	.word	0x08007ac9
 8007ba8:	08007ac9 	.word	0x08007ac9
 8007bac:	08007ac9 	.word	0x08007ac9
 8007bb0:	08007ac9 	.word	0x08007ac9
 8007bb4:	08007ac9 	.word	0x08007ac9
 8007bb8:	08007ac9 	.word	0x08007ac9
 8007bbc:	08007ac9 	.word	0x08007ac9
 8007bc0:	08007ac9 	.word	0x08007ac9
 8007bc4:	08007ac9 	.word	0x08007ac9
 8007bc8:	08007ac9 	.word	0x08007ac9
 8007bcc:	08007ac9 	.word	0x08007ac9
 8007bd0:	08007ac9 	.word	0x08007ac9
 8007bd4:	08007ac9 	.word	0x08007ac9
 8007bd8:	08007dd7 	.word	0x08007dd7
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	60ea      	str	r2, [r5, #12]
 8007be0:	785a      	ldrb	r2, [r3, #1]
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	f43f af70 	beq.w	8007ac8 <d_encoding+0x68>
 8007be8:	1c9a      	adds	r2, r3, #2
 8007bea:	60ea      	str	r2, [r5, #12]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	3b43      	subs	r3, #67	; 0x43
 8007bf0:	2b33      	cmp	r3, #51	; 0x33
 8007bf2:	f63f af69 	bhi.w	8007ac8 <d_encoding+0x68>
 8007bf6:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <d_encoding+0x19c>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08008031 	.word	0x08008031
 8007c00:	08007ac9 	.word	0x08007ac9
 8007c04:	08007ac9 	.word	0x08007ac9
 8007c08:	0800801b 	.word	0x0800801b
 8007c0c:	08007ac9 	.word	0x08007ac9
 8007c10:	08008005 	.word	0x08008005
 8007c14:	08007fef 	.word	0x08007fef
 8007c18:	08007fd9 	.word	0x08007fd9
 8007c1c:	08007ac9 	.word	0x08007ac9
 8007c20:	08007ac9 	.word	0x08007ac9
 8007c24:	08007ac9 	.word	0x08007ac9
 8007c28:	08007ac9 	.word	0x08007ac9
 8007c2c:	08007ac9 	.word	0x08007ac9
 8007c30:	08007ac9 	.word	0x08007ac9
 8007c34:	08007ac9 	.word	0x08007ac9
 8007c38:	08007ac9 	.word	0x08007ac9
 8007c3c:	08007fc3 	.word	0x08007fc3
 8007c40:	08007fa9 	.word	0x08007fa9
 8007c44:	08007ac9 	.word	0x08007ac9
 8007c48:	08007f8f 	.word	0x08007f8f
 8007c4c:	08007f53 	.word	0x08007f53
 8007c50:	08007ac9 	.word	0x08007ac9
 8007c54:	08007ac9 	.word	0x08007ac9
 8007c58:	08007ac9 	.word	0x08007ac9
 8007c5c:	08007ac9 	.word	0x08007ac9
 8007c60:	08007ac9 	.word	0x08007ac9
 8007c64:	08007ac9 	.word	0x08007ac9
 8007c68:	08007ac9 	.word	0x08007ac9
 8007c6c:	08007ac9 	.word	0x08007ac9
 8007c70:	08007ac9 	.word	0x08007ac9
 8007c74:	08007ac9 	.word	0x08007ac9
 8007c78:	08007ac9 	.word	0x08007ac9
 8007c7c:	08007f1f 	.word	0x08007f1f
 8007c80:	08007ac9 	.word	0x08007ac9
 8007c84:	08007ac9 	.word	0x08007ac9
 8007c88:	08007ac9 	.word	0x08007ac9
 8007c8c:	08007ac9 	.word	0x08007ac9
 8007c90:	08007f69 	.word	0x08007f69
 8007c94:	08007ac9 	.word	0x08007ac9
 8007c98:	08007ac9 	.word	0x08007ac9
 8007c9c:	08007ac9 	.word	0x08007ac9
 8007ca0:	08007ac9 	.word	0x08007ac9
 8007ca4:	08007ac9 	.word	0x08007ac9
 8007ca8:	08007ac9 	.word	0x08007ac9
 8007cac:	08007ac9 	.word	0x08007ac9
 8007cb0:	08007ac9 	.word	0x08007ac9
 8007cb4:	08007ac9 	.word	0x08007ac9
 8007cb8:	08007ac9 	.word	0x08007ac9
 8007cbc:	08007ac9 	.word	0x08007ac9
 8007cc0:	08007ac9 	.word	0x08007ac9
 8007cc4:	08007ac9 	.word	0x08007ac9
 8007cc8:	08007ef9 	.word	0x08007ef9
 8007ccc:	2100      	movs	r1, #0
 8007cce:	e6ed      	b.n	8007aac <d_encoding+0x4c>
 8007cd0:	684a      	ldr	r2, [r1, #4]
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	d07d      	beq.n	8007dd2 <d_encoding+0x372>
 8007cd6:	7813      	ldrb	r3, [r2, #0]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	2b32      	cmp	r3, #50	; 0x32
 8007cdc:	d879      	bhi.n	8007dd2 <d_encoding+0x372>
 8007cde:	a101      	add	r1, pc, #4	; (adr r1, 8007ce4 <d_encoding+0x284>)
 8007ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce4:	08007dcd 	.word	0x08007dcd
 8007ce8:	08007dcd 	.word	0x08007dcd
 8007cec:	08007dd3 	.word	0x08007dd3
 8007cf0:	08007dd3 	.word	0x08007dd3
 8007cf4:	08007dd3 	.word	0x08007dd3
 8007cf8:	08007dd3 	.word	0x08007dd3
 8007cfc:	08007ccd 	.word	0x08007ccd
 8007d00:	08007ccd 	.word	0x08007ccd
 8007d04:	08007dd3 	.word	0x08007dd3
 8007d08:	08007dd3 	.word	0x08007dd3
 8007d0c:	08007dd3 	.word	0x08007dd3
 8007d10:	08007dd3 	.word	0x08007dd3
 8007d14:	08007dd3 	.word	0x08007dd3
 8007d18:	08007dd3 	.word	0x08007dd3
 8007d1c:	08007dd3 	.word	0x08007dd3
 8007d20:	08007dd3 	.word	0x08007dd3
 8007d24:	08007dd3 	.word	0x08007dd3
 8007d28:	08007dd3 	.word	0x08007dd3
 8007d2c:	08007dd3 	.word	0x08007dd3
 8007d30:	08007dd3 	.word	0x08007dd3
 8007d34:	08007dd3 	.word	0x08007dd3
 8007d38:	08007dd3 	.word	0x08007dd3
 8007d3c:	08007dd3 	.word	0x08007dd3
 8007d40:	08007dd3 	.word	0x08007dd3
 8007d44:	08007dd3 	.word	0x08007dd3
 8007d48:	08007dd3 	.word	0x08007dd3
 8007d4c:	08007dd3 	.word	0x08007dd3
 8007d50:	08007dd3 	.word	0x08007dd3
 8007d54:	08007dd3 	.word	0x08007dd3
 8007d58:	08007dd3 	.word	0x08007dd3
 8007d5c:	08007dd3 	.word	0x08007dd3
 8007d60:	08007dd3 	.word	0x08007dd3
 8007d64:	08007dd3 	.word	0x08007dd3
 8007d68:	08007dd3 	.word	0x08007dd3
 8007d6c:	08007dd3 	.word	0x08007dd3
 8007d70:	08007dd3 	.word	0x08007dd3
 8007d74:	08007dd3 	.word	0x08007dd3
 8007d78:	08007dd3 	.word	0x08007dd3
 8007d7c:	08007dd3 	.word	0x08007dd3
 8007d80:	08007dd3 	.word	0x08007dd3
 8007d84:	08007dd3 	.word	0x08007dd3
 8007d88:	08007dd3 	.word	0x08007dd3
 8007d8c:	08007dd3 	.word	0x08007dd3
 8007d90:	08007dd3 	.word	0x08007dd3
 8007d94:	08007dd3 	.word	0x08007dd3
 8007d98:	08007dd3 	.word	0x08007dd3
 8007d9c:	08007dd3 	.word	0x08007dd3
 8007da0:	08007dd3 	.word	0x08007dd3
 8007da4:	08007dd3 	.word	0x08007dd3
 8007da8:	08007dd3 	.word	0x08007dd3
 8007dac:	08007ccd 	.word	0x08007ccd
 8007db0:	68a2      	ldr	r2, [r4, #8]
 8007db2:	7813      	ldrb	r3, [r2, #0]
 8007db4:	3b1c      	subs	r3, #28
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d804      	bhi.n	8007dc4 <d_encoding+0x364>
 8007dba:	6852      	ldr	r2, [r2, #4]
 8007dbc:	7813      	ldrb	r3, [r2, #0]
 8007dbe:	3b1c      	subs	r3, #28
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d9fa      	bls.n	8007dba <d_encoding+0x35a>
 8007dc4:	60a2      	str	r2, [r4, #8]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dcc:	6892      	ldr	r2, [r2, #8]
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d181      	bne.n	8007cd6 <d_encoding+0x276>
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	e66a      	b.n	8007aac <d_encoding+0x4c>
 8007dd6:	f105 000c 	add.w	r0, r5, #12
 8007dda:	f7f8 fbf7 	bl	80005cc <d_number.isra.0>
 8007dde:	2801      	cmp	r0, #1
 8007de0:	f77f ae72 	ble.w	8007ac8 <d_encoding+0x68>
 8007de4:	68eb      	ldr	r3, [r5, #12]
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	f43f ae6d 	beq.w	8007ac8 <d_encoding+0x68>
 8007dee:	1c5f      	adds	r7, r3, #1
 8007df0:	60ef      	str	r7, [r5, #12]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b5f      	cmp	r3, #95	; 0x5f
 8007df6:	f47f ae67 	bne.w	8007ac8 <d_encoding+0x68>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	1e46      	subs	r6, r0, #1
 8007dfe:	4690      	mov	r8, r2
 8007e00:	f04f 093f 	mov.w	r9, #63	; 0x3f
 8007e04:	783b      	ldrb	r3, [r7, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f43f ae5e 	beq.w	8007ac8 <d_encoding+0x68>
 8007e0c:	2b24      	cmp	r3, #36	; 0x24
 8007e0e:	f000 812f 	beq.w	8008070 <d_encoding+0x610>
 8007e12:	463c      	mov	r4, r7
 8007e14:	2100      	movs	r1, #0
 8007e16:	e004      	b.n	8007e22 <d_encoding+0x3c2>
 8007e18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007e1c:	b123      	cbz	r3, 8007e28 <d_encoding+0x3c8>
 8007e1e:	2b24      	cmp	r3, #36	; 0x24
 8007e20:	d002      	beq.n	8007e28 <d_encoding+0x3c8>
 8007e22:	3101      	adds	r1, #1
 8007e24:	42b1      	cmp	r1, r6
 8007e26:	dbf7      	blt.n	8007e18 <d_encoding+0x3b8>
 8007e28:	696b      	ldr	r3, [r5, #20]
 8007e2a:	69a8      	ldr	r0, [r5, #24]
 8007e2c:	4283      	cmp	r3, r0
 8007e2e:	f6bf ae48 	bge.w	8007ac2 <d_encoding+0x62>
 8007e32:	6928      	ldr	r0, [r5, #16]
 8007e34:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8007e38:	f103 0e01 	add.w	lr, r3, #1
 8007e3c:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 8007e40:	f8c5 e014 	str.w	lr, [r5, #20]
 8007e44:	f43f ae3d 	beq.w	8007ac2 <d_encoding+0x62>
 8007e48:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 8007e4c:	605f      	str	r7, [r3, #4]
 8007e4e:	6099      	str	r1, [r3, #8]
 8007e50:	68ef      	ldr	r7, [r5, #12]
 8007e52:	440f      	add	r7, r1
 8007e54:	1a76      	subs	r6, r6, r1
 8007e56:	60ef      	str	r7, [r5, #12]
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	f000 8126 	beq.w	80080aa <d_encoding+0x64a>
 8007e5e:	213e      	movs	r1, #62	; 0x3e
 8007e60:	4628      	mov	r0, r5
 8007e62:	f7f8 fa6d 	bl	8000340 <d_make_comp>
 8007e66:	4602      	mov	r2, r0
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	f43f ae2d 	beq.w	8007ac8 <d_encoding+0x68>
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	dcc8      	bgt.n	8007e04 <d_encoding+0x3a4>
 8007e72:	4628      	mov	r0, r5
 8007e74:	2300      	movs	r3, #0
 8007e76:	213d      	movs	r1, #61	; 0x3d
 8007e78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	f7f8 ba60 	b.w	8000340 <d_make_comp>
 8007e80:	4628      	mov	r0, r5
 8007e82:	f7ff fc29 	bl	80076d8 <d_name>
 8007e86:	2300      	movs	r3, #0
 8007e88:	4602      	mov	r2, r0
 8007e8a:	2113      	movs	r1, #19
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e92:	f7f8 ba55 	b.w	8000340 <d_make_comp>
 8007e96:	4628      	mov	r0, r5
 8007e98:	f7ff fc1e 	bl	80076d8 <d_name>
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7f8 fbbe 	bl	8000620 <d_number_component>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2116      	movs	r1, #22
 8007eaa:	4628      	mov	r0, r5
 8007eac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	f7f8 ba46 	b.w	8000340 <d_make_comp>
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff fdd2 	bl	8007a60 <d_encoding>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	2117      	movs	r1, #23
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec8:	f7f8 ba3a 	b.w	8000340 <d_make_comp>
 8007ecc:	789a      	ldrb	r2, [r3, #2]
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	f000 80eb 	beq.w	80080ae <d_encoding+0x64e>
 8007ed8:	1cda      	adds	r2, r3, #3
 8007eda:	60ea      	str	r2, [r5, #12]
 8007edc:	789b      	ldrb	r3, [r3, #2]
 8007ede:	2b6e      	cmp	r3, #110	; 0x6e
 8007ee0:	f040 80e5 	bne.w	80080ae <d_encoding+0x64e>
 8007ee4:	f7ff fdbc 	bl	8007a60 <d_encoding>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4602      	mov	r2, r0
 8007eec:	2148      	movs	r1, #72	; 0x48
 8007eee:	4628      	mov	r0, r5
 8007ef0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	f7f8 ba24 	b.w	8000340 <d_make_comp>
 8007ef8:	2176      	movs	r1, #118	; 0x76
 8007efa:	4628      	mov	r0, r5
 8007efc:	f7f8 fd22 	bl	8000944 <d_call_offset>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f43f ade1 	beq.w	8007ac8 <d_encoding+0x68>
 8007f06:	2100      	movs	r1, #0
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f7ff fda9 	bl	8007a60 <d_encoding>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4602      	mov	r2, r0
 8007f12:	2110      	movs	r1, #16
 8007f14:	4628      	mov	r0, r5
 8007f16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f1a:	f7f8 ba11 	b.w	8000340 <d_make_comp>
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4628      	mov	r0, r5
 8007f22:	f7f8 fd0f 	bl	8000944 <d_call_offset>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f43f adce 	beq.w	8007ac8 <d_encoding+0x68>
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f7f8 fd08 	bl	8000944 <d_call_offset>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f43f adc7 	beq.w	8007ac8 <d_encoding+0x68>
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f7ff fd8f 	bl	8007a60 <d_encoding>
 8007f42:	2300      	movs	r3, #0
 8007f44:	4602      	mov	r2, r0
 8007f46:	2111      	movs	r1, #17
 8007f48:	4628      	mov	r0, r5
 8007f4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4e:	f7f8 b9f7 	b.w	8000340 <d_make_comp>
 8007f52:	4628      	mov	r0, r5
 8007f54:	f7ff fbc0 	bl	80076d8 <d_name>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	2115      	movs	r1, #21
 8007f5e:	4628      	mov	r0, r5
 8007f60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	f7f8 b9ec 	b.w	8000340 <d_make_comp>
 8007f68:	2168      	movs	r1, #104	; 0x68
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f7f8 fcea 	bl	8000944 <d_call_offset>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f43f ada9 	beq.w	8007ac8 <d_encoding+0x68>
 8007f76:	2100      	movs	r1, #0
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f7ff fd71 	bl	8007a60 <d_encoding>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4602      	mov	r2, r0
 8007f82:	210f      	movs	r1, #15
 8007f84:	4628      	mov	r0, r5
 8007f86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8a:	f7f8 b9d9 	b.w	8000340 <d_make_comp>
 8007f8e:	310f      	adds	r1, #15
 8007f90:	6329      	str	r1, [r5, #48]	; 0x30
 8007f92:	4628      	mov	r0, r5
 8007f94:	f7fe fdac 	bl	8006af0 <d_type>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	2109      	movs	r1, #9
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	f7f8 b9cc 	b.w	8000340 <d_make_comp>
 8007fa8:	310a      	adds	r1, #10
 8007faa:	6329      	str	r1, [r5, #48]	; 0x30
 8007fac:	4628      	mov	r0, r5
 8007fae:	f7fe fd9f 	bl	8006af0 <d_type>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	210a      	movs	r1, #10
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbe:	f7f8 b9bf 	b.w	8000340 <d_make_comp>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7fe fd94 	bl	8006af0 <d_type>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4602      	mov	r2, r0
 8007fcc:	210d      	movs	r1, #13
 8007fce:	4628      	mov	r0, r5
 8007fd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	f7f8 b9b4 	b.w	8000340 <d_make_comp>
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f7fe fd89 	bl	8006af0 <d_type>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	2112      	movs	r1, #18
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fea:	f7f8 b9a9 	b.w	8000340 <d_make_comp>
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7fe fd7e 	bl	8006af0 <d_type>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	210c      	movs	r1, #12
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	f7f8 b99e 	b.w	8000340 <d_make_comp>
 8008004:	4628      	mov	r0, r5
 8008006:	f7ff fb67 	bl	80076d8 <d_name>
 800800a:	2300      	movs	r3, #0
 800800c:	4602      	mov	r2, r0
 800800e:	2114      	movs	r1, #20
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008016:	f7f8 b993 	b.w	8000340 <d_make_comp>
 800801a:	4628      	mov	r0, r5
 800801c:	f7fe fd68 	bl	8006af0 <d_type>
 8008020:	2300      	movs	r3, #0
 8008022:	4602      	mov	r2, r0
 8008024:	210e      	movs	r1, #14
 8008026:	4628      	mov	r0, r5
 8008028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	f7f8 b988 	b.w	8000340 <d_make_comp>
 8008030:	4628      	mov	r0, r5
 8008032:	f7fe fd5d 	bl	8006af0 <d_type>
 8008036:	4604      	mov	r4, r0
 8008038:	f105 000c 	add.w	r0, r5, #12
 800803c:	f7f8 fac6 	bl	80005cc <d_number.isra.0>
 8008040:	2800      	cmp	r0, #0
 8008042:	f6ff ad41 	blt.w	8007ac8 <d_encoding+0x68>
 8008046:	68eb      	ldr	r3, [r5, #12]
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	2a5f      	cmp	r2, #95	; 0x5f
 800804c:	f47f ad3c 	bne.w	8007ac8 <d_encoding+0x68>
 8008050:	3301      	adds	r3, #1
 8008052:	60eb      	str	r3, [r5, #12]
 8008054:	4628      	mov	r0, r5
 8008056:	f7fe fd4b 	bl	8006af0 <d_type>
 800805a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800805c:	1d59      	adds	r1, r3, #5
 800805e:	6329      	str	r1, [r5, #48]	; 0x30
 8008060:	4602      	mov	r2, r0
 8008062:	4623      	mov	r3, r4
 8008064:	4628      	mov	r0, r5
 8008066:	210b      	movs	r1, #11
 8008068:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	f7f8 b968 	b.w	8000340 <d_make_comp>
 8008070:	787b      	ldrb	r3, [r7, #1]
 8008072:	2b53      	cmp	r3, #83	; 0x53
 8008074:	d027      	beq.n	80080c6 <d_encoding+0x666>
 8008076:	2b5f      	cmp	r3, #95	; 0x5f
 8008078:	d023      	beq.n	80080c2 <d_encoding+0x662>
 800807a:	2b24      	cmp	r3, #36	; 0x24
 800807c:	f47f ad24 	bne.w	8007ac8 <d_encoding+0x68>
 8008080:	4618      	mov	r0, r3
 8008082:	696b      	ldr	r3, [r5, #20]
 8008084:	69a9      	ldr	r1, [r5, #24]
 8008086:	428b      	cmp	r3, r1
 8008088:	da1f      	bge.n	80080ca <d_encoding+0x66a>
 800808a:	692c      	ldr	r4, [r5, #16]
 800808c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008090:	1c5f      	adds	r7, r3, #1
 8008092:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 8008096:	616f      	str	r7, [r5, #20]
 8008098:	d017      	beq.n	80080ca <d_encoding+0x66a>
 800809a:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 800809e:	6058      	str	r0, [r3, #4]
 80080a0:	68ef      	ldr	r7, [r5, #12]
 80080a2:	3702      	adds	r7, #2
 80080a4:	3e02      	subs	r6, #2
 80080a6:	60ef      	str	r7, [r5, #12]
 80080a8:	e6d6      	b.n	8007e58 <d_encoding+0x3f8>
 80080aa:	461a      	mov	r2, r3
 80080ac:	e6df      	b.n	8007e6e <d_encoding+0x40e>
 80080ae:	f7ff fcd7 	bl	8007a60 <d_encoding>
 80080b2:	2300      	movs	r3, #0
 80080b4:	4602      	mov	r2, r0
 80080b6:	2147      	movs	r1, #71	; 0x47
 80080b8:	4628      	mov	r0, r5
 80080ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080be:	f7f8 b93f 	b.w	8000340 <d_make_comp>
 80080c2:	202e      	movs	r0, #46	; 0x2e
 80080c4:	e7dd      	b.n	8008082 <d_encoding+0x622>
 80080c6:	202f      	movs	r0, #47	; 0x2f
 80080c8:	e7db      	b.n	8008082 <d_encoding+0x622>
 80080ca:	68eb      	ldr	r3, [r5, #12]
 80080cc:	3302      	adds	r3, #2
 80080ce:	60eb      	str	r3, [r5, #12]
 80080d0:	2000      	movs	r0, #0
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	bf00      	nop

080080d8 <d_expr_primary>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	68c2      	ldr	r2, [r0, #12]
 80080dc:	7813      	ldrb	r3, [r2, #0]
 80080de:	2b4c      	cmp	r3, #76	; 0x4c
 80080e0:	d001      	beq.n	80080e6 <d_expr_primary+0xe>
 80080e2:	2000      	movs	r0, #0
 80080e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e6:	1c53      	adds	r3, r2, #1
 80080e8:	60c3      	str	r3, [r0, #12]
 80080ea:	7851      	ldrb	r1, [r2, #1]
 80080ec:	295f      	cmp	r1, #95	; 0x5f
 80080ee:	4605      	mov	r5, r0
 80080f0:	d03c      	beq.n	800816c <d_expr_primary+0x94>
 80080f2:	295a      	cmp	r1, #90	; 0x5a
 80080f4:	d041      	beq.n	800817a <d_expr_primary+0xa2>
 80080f6:	f7fe fcfb 	bl	8006af0 <d_type>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d0f1      	beq.n	80080e2 <d_expr_primary+0xa>
 80080fe:	7803      	ldrb	r3, [r0, #0]
 8008100:	2b27      	cmp	r3, #39	; 0x27
 8008102:	d048      	beq.n	8008196 <d_expr_primary+0xbe>
 8008104:	68ee      	ldr	r6, [r5, #12]
 8008106:	7833      	ldrb	r3, [r6, #0]
 8008108:	2b6e      	cmp	r3, #110	; 0x6e
 800810a:	d04d      	beq.n	80081a8 <d_expr_primary+0xd0>
 800810c:	213b      	movs	r1, #59	; 0x3b
 800810e:	2b45      	cmp	r3, #69	; 0x45
 8008110:	d050      	beq.n	80081b4 <d_expr_primary+0xdc>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0e5      	beq.n	80080e2 <d_expr_primary+0xa>
 8008116:	4633      	mov	r3, r6
 8008118:	e001      	b.n	800811e <d_expr_primary+0x46>
 800811a:	2c00      	cmp	r4, #0
 800811c:	d0e1      	beq.n	80080e2 <d_expr_primary+0xa>
 800811e:	3301      	adds	r3, #1
 8008120:	60eb      	str	r3, [r5, #12]
 8008122:	781c      	ldrb	r4, [r3, #0]
 8008124:	2c45      	cmp	r4, #69	; 0x45
 8008126:	d1f8      	bne.n	800811a <d_expr_primary+0x42>
 8008128:	1b9c      	subs	r4, r3, r6
 800812a:	696b      	ldr	r3, [r5, #20]
 800812c:	69aa      	ldr	r2, [r5, #24]
 800812e:	4293      	cmp	r3, r2
 8008130:	da2f      	bge.n	8008192 <d_expr_primary+0xba>
 8008132:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008136:	692f      	ldr	r7, [r5, #16]
 8008138:	0092      	lsls	r2, r2, #2
 800813a:	3301      	adds	r3, #1
 800813c:	eb17 0e02 	adds.w	lr, r7, r2
 8008140:	616b      	str	r3, [r5, #20]
 8008142:	d026      	beq.n	8008192 <d_expr_primary+0xba>
 8008144:	b32e      	cbz	r6, 8008192 <d_expr_primary+0xba>
 8008146:	b324      	cbz	r4, 8008192 <d_expr_primary+0xba>
 8008148:	2300      	movs	r3, #0
 800814a:	54bb      	strb	r3, [r7, r2]
 800814c:	4673      	mov	r3, lr
 800814e:	f8ce 6004 	str.w	r6, [lr, #4]
 8008152:	f8ce 4008 	str.w	r4, [lr, #8]
 8008156:	4602      	mov	r2, r0
 8008158:	4628      	mov	r0, r5
 800815a:	f7f8 f8f1 	bl	8000340 <d_make_comp>
 800815e:	68eb      	ldr	r3, [r5, #12]
 8008160:	781a      	ldrb	r2, [r3, #0]
 8008162:	2a45      	cmp	r2, #69	; 0x45
 8008164:	d1bd      	bne.n	80080e2 <d_expr_primary+0xa>
 8008166:	3301      	adds	r3, #1
 8008168:	60eb      	str	r3, [r5, #12]
 800816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800816c:	1c93      	adds	r3, r2, #2
 800816e:	60c3      	str	r3, [r0, #12]
 8008170:	7892      	ldrb	r2, [r2, #2]
 8008172:	2a5a      	cmp	r2, #90	; 0x5a
 8008174:	bf18      	it	ne
 8008176:	2000      	movne	r0, #0
 8008178:	d107      	bne.n	800818a <d_expr_primary+0xb2>
 800817a:	3301      	adds	r3, #1
 800817c:	60eb      	str	r3, [r5, #12]
 800817e:	2100      	movs	r1, #0
 8008180:	4628      	mov	r0, r5
 8008182:	f7ff fc6d 	bl	8007a60 <d_encoding>
 8008186:	68eb      	ldr	r3, [r5, #12]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	2a45      	cmp	r2, #69	; 0x45
 800818c:	d0eb      	beq.n	8008166 <d_expr_primary+0x8e>
 800818e:	2000      	movs	r0, #0
 8008190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008192:	2300      	movs	r3, #0
 8008194:	e7df      	b.n	8008156 <d_expr_primary+0x7e>
 8008196:	6843      	ldr	r3, [r0, #4]
 8008198:	7c1a      	ldrb	r2, [r3, #16]
 800819a:	2a00      	cmp	r2, #0
 800819c:	d0b2      	beq.n	8008104 <d_expr_primary+0x2c>
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80081a2:	1a9b      	subs	r3, r3, r2
 80081a4:	632b      	str	r3, [r5, #48]	; 0x30
 80081a6:	e7ad      	b.n	8008104 <d_expr_primary+0x2c>
 80081a8:	1c72      	adds	r2, r6, #1
 80081aa:	60ea      	str	r2, [r5, #12]
 80081ac:	7873      	ldrb	r3, [r6, #1]
 80081ae:	213c      	movs	r1, #60	; 0x3c
 80081b0:	4616      	mov	r6, r2
 80081b2:	e7ac      	b.n	800810e <d_expr_primary+0x36>
 80081b4:	2400      	movs	r4, #0
 80081b6:	e7b8      	b.n	800812a <d_expr_primary+0x52>

080081b8 <d_demangle_callback.constprop.15>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	b0e5      	sub	sp, #404	; 0x194
 80081be:	f890 9000 	ldrb.w	r9, [r0]
 80081c2:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	4605      	mov	r5, r0
 80081ca:	460e      	mov	r6, r1
 80081cc:	4690      	mov	r8, r2
 80081ce:	f000 80e9 	beq.w	80083a4 <d_demangle_callback.constprop.15+0x1ec>
 80081d2:	2208      	movs	r2, #8
 80081d4:	49c2      	ldr	r1, [pc, #776]	; (80084e0 <d_demangle_callback.constprop.15+0x328>)
 80081d6:	4628      	mov	r0, r5
 80081d8:	f009 fc2a 	bl	8011a30 <strncmp>
 80081dc:	b978      	cbnz	r0, 80081fe <d_demangle_callback.constprop.15+0x46>
 80081de:	7a2b      	ldrb	r3, [r5, #8]
 80081e0:	2b2e      	cmp	r3, #46	; 0x2e
 80081e2:	d005      	beq.n	80081f0 <d_demangle_callback.constprop.15+0x38>
 80081e4:	2b5f      	cmp	r3, #95	; 0x5f
 80081e6:	d003      	beq.n	80081f0 <d_demangle_callback.constprop.15+0x38>
 80081e8:	2b24      	cmp	r3, #36	; 0x24
 80081ea:	d001      	beq.n	80081f0 <d_demangle_callback.constprop.15+0x38>
 80081ec:	4682      	mov	sl, r0
 80081ee:	e008      	b.n	8008202 <d_demangle_callback.constprop.15+0x4a>
 80081f0:	7a6b      	ldrb	r3, [r5, #9]
 80081f2:	2b44      	cmp	r3, #68	; 0x44
 80081f4:	f000 80e6 	beq.w	80083c4 <d_demangle_callback.constprop.15+0x20c>
 80081f8:	2b49      	cmp	r3, #73	; 0x49
 80081fa:	f000 80e3 	beq.w	80083c4 <d_demangle_callback.constprop.15+0x20c>
 80081fe:	f04f 0a00 	mov.w	sl, #0
 8008202:	4628      	mov	r0, r5
 8008204:	f002 f88c 	bl	800a320 <strlen>
 8008208:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 800820c:	0083      	lsls	r3, r0, #2
 800820e:	eb03 020b 	add.w	r2, r3, fp
 8008212:	0092      	lsls	r2, r2, #2
 8008214:	3208      	adds	r2, #8
 8008216:	330a      	adds	r3, #10
 8008218:	ebad 0d02 	sub.w	sp, sp, r2
 800821c:	f023 0307 	bic.w	r3, r3, #7
 8008220:	2400      	movs	r4, #0
 8008222:	466a      	mov	r2, sp
 8008224:	1829      	adds	r1, r5, r0
 8008226:	ebad 0d03 	sub.w	sp, sp, r3
 800822a:	f1ba 0f01 	cmp.w	sl, #1
 800822e:	f04f 0311 	mov.w	r3, #17
 8008232:	623a      	str	r2, [r7, #32]
 8008234:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
 8008238:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 800823c:	613d      	str	r5, [r7, #16]
 800823e:	61fd      	str	r5, [r7, #28]
 8008240:	6378      	str	r0, [r7, #52]	; 0x34
 8008242:	6179      	str	r1, [r7, #20]
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	627c      	str	r4, [r7, #36]	; 0x24
 8008248:	633c      	str	r4, [r7, #48]	; 0x30
 800824a:	63bc      	str	r4, [r7, #56]	; 0x38
 800824c:	63fc      	str	r4, [r7, #60]	; 0x3c
 800824e:	643c      	str	r4, [r7, #64]	; 0x40
 8008250:	647c      	str	r4, [r7, #68]	; 0x44
 8008252:	64bc      	str	r4, [r7, #72]	; 0x48
 8008254:	f000 80ad 	beq.w	80083b2 <d_demangle_callback.constprop.15+0x1fa>
 8008258:	f0c0 80cc 	bcc.w	80083f4 <d_demangle_callback.constprop.15+0x23c>
 800825c:	f1ba 0f03 	cmp.w	sl, #3
 8008260:	f200 80c8 	bhi.w	80083f4 <d_demangle_callback.constprop.15+0x23c>
 8008264:	7aeb      	ldrb	r3, [r5, #11]
 8008266:	f1ba 0f02 	cmp.w	sl, #2
 800826a:	bf18      	it	ne
 800826c:	f04f 0943 	movne.w	r9, #67	; 0x43
 8008270:	f105 0a0b 	add.w	sl, r5, #11
 8008274:	bf08      	it	eq
 8008276:	f04f 0942 	moveq.w	r9, #66	; 0x42
 800827a:	2b5f      	cmp	r3, #95	; 0x5f
 800827c:	f8c7 a01c 	str.w	sl, [r7, #28]
 8008280:	f000 80ab 	beq.w	80083da <d_demangle_callback.constprop.15+0x222>
 8008284:	4650      	mov	r0, sl
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	f002 f84a 	bl	800a320 <strlen>
 800828c:	f1bb 0f00 	cmp.w	fp, #0
 8008290:	f340 80b9 	ble.w	8008406 <d_demangle_callback.constprop.15+0x24e>
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	2301      	movs	r3, #1
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
 800829a:	2a00      	cmp	r2, #0
 800829c:	f000 80b3 	beq.w	8008406 <d_demangle_callback.constprop.15+0x24e>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	f000 80b0 	beq.w	8008406 <d_demangle_callback.constprop.15+0x24e>
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8c2 a004 	str.w	sl, [r2, #4]
 80082ac:	6090      	str	r0, [r2, #8]
 80082ae:	7013      	strb	r3, [r2, #0]
 80082b0:	4649      	mov	r1, r9
 80082b2:	2300      	movs	r3, #0
 80082b4:	f107 0010 	add.w	r0, r7, #16
 80082b8:	f7f8 f842 	bl	8000340 <d_make_comp>
 80082bc:	69fc      	ldr	r4, [r7, #28]
 80082be:	4605      	mov	r5, r0
 80082c0:	4620      	mov	r0, r4
 80082c2:	f002 f82d 	bl	800a320 <strlen>
 80082c6:	1823      	adds	r3, r4, r0
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	f814 9000 	ldrb.w	r9, [r4, r0]
 80082ce:	f1b9 0f00 	cmp.w	r9, #0
 80082d2:	d171      	bne.n	80083b8 <d_demangle_callback.constprop.15+0x200>
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d06f      	beq.n	80083b8 <d_demangle_callback.constprop.15+0x200>
 80082d8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80082dc:	462a      	mov	r2, r5
 80082de:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80082e2:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80082e6:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 80082ea:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80082ee:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80082f2:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80082f6:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80082fa:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 80082fe:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8008302:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
 8008306:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 800830a:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 800830e:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8008312:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8008316:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 800831a:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 800831e:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8008322:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8008326:	f7f8 f8cf 	bl	80004c8 <d_count_templates_scopes>
 800832a:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 800832e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8008332:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	00c8      	lsls	r0, r1, #3
 800833a:	3008      	adds	r0, #8
 800833c:	fb02 f101 	mul.w	r1, r2, r1
 8008340:	466e      	mov	r6, sp
 8008342:	00ca      	lsls	r2, r1, #3
 8008344:	ebad 0d00 	sub.w	sp, sp, r0
 8008348:	4668      	mov	r0, sp
 800834a:	3208      	adds	r2, #8
 800834c:	ebad 0d02 	sub.w	sp, sp, r2
 8008350:	f107 0308 	add.w	r3, r7, #8
 8008354:	462a      	mov	r2, r5
 8008356:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 800835a:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 800835e:	4620      	mov	r0, r4
 8008360:	2111      	movs	r1, #17
 8008362:	f8c4 d134 	str.w	sp, [r4, #308]	; 0x134
 8008366:	60bd      	str	r5, [r7, #8]
 8008368:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800836c:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8008370:	f7f8 fbb8 	bl	8000ae4 <d_print_comp_inner>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800837a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800837e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008382:	f804 9001 	strb.w	r9, [r4, r1]
 8008386:	4620      	mov	r0, r4
 8008388:	46b5      	mov	sp, r6
 800838a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800838e:	4798      	blx	r3
 8008390:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8008394:	fab0 f080 	clz	r0, r0
 8008398:	0940      	lsrs	r0, r0, #5
 800839a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800839e:	46bd      	mov	sp, r7
 80083a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a4:	7843      	ldrb	r3, [r0, #1]
 80083a6:	2b5a      	cmp	r3, #90	; 0x5a
 80083a8:	f47f af13 	bne.w	80081d2 <d_demangle_callback.constprop.15+0x1a>
 80083ac:	f04f 0a01 	mov.w	sl, #1
 80083b0:	e727      	b.n	8008202 <d_demangle_callback.constprop.15+0x4a>
 80083b2:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80083b6:	d028      	beq.n	800840a <d_demangle_callback.constprop.15+0x252>
 80083b8:	2000      	movs	r0, #0
 80083ba:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80083be:	46bd      	mov	sp, r7
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	7aaa      	ldrb	r2, [r5, #10]
 80083c6:	2a5f      	cmp	r2, #95	; 0x5f
 80083c8:	f47f af19 	bne.w	80081fe <d_demangle_callback.constprop.15+0x46>
 80083cc:	2b49      	cmp	r3, #73	; 0x49
 80083ce:	bf14      	ite	ne
 80083d0:	f04f 0a03 	movne.w	sl, #3
 80083d4:	f04f 0a02 	moveq.w	sl, #2
 80083d8:	e713      	b.n	8008202 <d_demangle_callback.constprop.15+0x4a>
 80083da:	7b2b      	ldrb	r3, [r5, #12]
 80083dc:	2b5a      	cmp	r3, #90	; 0x5a
 80083de:	f47f af51 	bne.w	8008284 <d_demangle_callback.constprop.15+0xcc>
 80083e2:	350d      	adds	r5, #13
 80083e4:	4621      	mov	r1, r4
 80083e6:	f107 0010 	add.w	r0, r7, #16
 80083ea:	61fd      	str	r5, [r7, #28]
 80083ec:	f7ff fb38 	bl	8007a60 <d_encoding>
 80083f0:	4602      	mov	r2, r0
 80083f2:	e75d      	b.n	80082b0 <d_demangle_callback.constprop.15+0xf8>
 80083f4:	f107 0010 	add.w	r0, r7, #16
 80083f8:	f7fe fb7a 	bl	8006af0 <d_type>
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4605      	mov	r5, r0
 8008400:	f893 9000 	ldrb.w	r9, [r3]
 8008404:	e763      	b.n	80082ce <d_demangle_callback.constprop.15+0x116>
 8008406:	2200      	movs	r2, #0
 8008408:	e752      	b.n	80082b0 <d_demangle_callback.constprop.15+0xf8>
 800840a:	786b      	ldrb	r3, [r5, #1]
 800840c:	2b5a      	cmp	r3, #90	; 0x5a
 800840e:	d1d3      	bne.n	80083b8 <d_demangle_callback.constprop.15+0x200>
 8008410:	3502      	adds	r5, #2
 8008412:	4651      	mov	r1, sl
 8008414:	f107 0010 	add.w	r0, r7, #16
 8008418:	61fd      	str	r5, [r7, #28]
 800841a:	f7ff fb21 	bl	8007a60 <d_encoding>
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	07db      	lsls	r3, r3, #31
 8008422:	4605      	mov	r5, r0
 8008424:	d557      	bpl.n	80084d6 <d_demangle_callback.constprop.15+0x31e>
 8008426:	69f8      	ldr	r0, [r7, #28]
 8008428:	f890 9000 	ldrb.w	r9, [r0]
 800842c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8008430:	f47f af4d 	bne.w	80082ce <d_demangle_callback.constprop.15+0x116>
 8008434:	7843      	ldrb	r3, [r0, #1]
 8008436:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800843a:	2a19      	cmp	r2, #25
 800843c:	d93e      	bls.n	80084bc <d_demangle_callback.constprop.15+0x304>
 800843e:	2b5f      	cmp	r3, #95	; 0x5f
 8008440:	d03c      	beq.n	80084bc <d_demangle_callback.constprop.15+0x304>
 8008442:	3b30      	subs	r3, #48	; 0x30
 8008444:	2b09      	cmp	r3, #9
 8008446:	d846      	bhi.n	80084d6 <d_demangle_callback.constprop.15+0x31e>
 8008448:	7802      	ldrb	r2, [r0, #0]
 800844a:	4603      	mov	r3, r0
 800844c:	2a2e      	cmp	r2, #46	; 0x2e
 800844e:	d112      	bne.n	8008476 <d_demangle_callback.constprop.15+0x2be>
 8008450:	785a      	ldrb	r2, [r3, #1]
 8008452:	3a30      	subs	r2, #48	; 0x30
 8008454:	2a09      	cmp	r2, #9
 8008456:	d80e      	bhi.n	8008476 <d_demangle_callback.constprop.15+0x2be>
 8008458:	789a      	ldrb	r2, [r3, #2]
 800845a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800845e:	2909      	cmp	r1, #9
 8008460:	f103 0302 	add.w	r3, r3, #2
 8008464:	d8f2      	bhi.n	800844c <d_demangle_callback.constprop.15+0x294>
 8008466:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800846a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800846e:	2909      	cmp	r1, #9
 8008470:	d9f9      	bls.n	8008466 <d_demangle_callback.constprop.15+0x2ae>
 8008472:	2a2e      	cmp	r2, #46	; 0x2e
 8008474:	d0ec      	beq.n	8008450 <d_demangle_callback.constprop.15+0x298>
 8008476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800847a:	61fb      	str	r3, [r7, #28]
 800847c:	428a      	cmp	r2, r1
 800847e:	da1b      	bge.n	80084b8 <d_demangle_callback.constprop.15+0x300>
 8008480:	6a39      	ldr	r1, [r7, #32]
 8008482:	f102 0e01 	add.w	lr, r2, #1
 8008486:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800848a:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 800848e:	eb11 0e82 	adds.w	lr, r1, r2, lsl #2
 8008492:	d011      	beq.n	80084b8 <d_demangle_callback.constprop.15+0x300>
 8008494:	ebb3 0c00 	subs.w	ip, r3, r0
 8008498:	d00e      	beq.n	80084b8 <d_demangle_callback.constprop.15+0x300>
 800849a:	f801 4022 	strb.w	r4, [r1, r2, lsl #2]
 800849e:	4673      	mov	r3, lr
 80084a0:	f8ce 0004 	str.w	r0, [lr, #4]
 80084a4:	f8ce c008 	str.w	ip, [lr, #8]
 80084a8:	462a      	mov	r2, r5
 80084aa:	214b      	movs	r1, #75	; 0x4b
 80084ac:	f107 0010 	add.w	r0, r7, #16
 80084b0:	f7f7 ff46 	bl	8000340 <d_make_comp>
 80084b4:	4605      	mov	r5, r0
 80084b6:	e7b6      	b.n	8008426 <d_demangle_callback.constprop.15+0x26e>
 80084b8:	2300      	movs	r3, #0
 80084ba:	e7f5      	b.n	80084a8 <d_demangle_callback.constprop.15+0x2f0>
 80084bc:	1c81      	adds	r1, r0, #2
 80084be:	780a      	ldrb	r2, [r1, #0]
 80084c0:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 80084c4:	f1be 0f19 	cmp.w	lr, #25
 80084c8:	460b      	mov	r3, r1
 80084ca:	f101 0101 	add.w	r1, r1, #1
 80084ce:	d9f6      	bls.n	80084be <d_demangle_callback.constprop.15+0x306>
 80084d0:	2a5f      	cmp	r2, #95	; 0x5f
 80084d2:	d0f4      	beq.n	80084be <d_demangle_callback.constprop.15+0x306>
 80084d4:	e7ba      	b.n	800844c <d_demangle_callback.constprop.15+0x294>
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	f893 9000 	ldrb.w	r9, [r3]
 80084dc:	e6f7      	b.n	80082ce <d_demangle_callback.constprop.15+0x116>
 80084de:	bf00      	nop
 80084e0:	080161e0 	.word	0x080161e0

080084e4 <__cxa_demangle>:
 80084e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	b370      	cbz	r0, 800854a <__cxa_demangle+0x66>
 80084ec:	b101      	cbz	r1, 80084f0 <__cxa_demangle+0xc>
 80084ee:	b362      	cbz	r2, 800854a <__cxa_demangle+0x66>
 80084f0:	2400      	movs	r4, #0
 80084f2:	4617      	mov	r7, r2
 80084f4:	460d      	mov	r5, r1
 80084f6:	466a      	mov	r2, sp
 80084f8:	4928      	ldr	r1, [pc, #160]	; (800859c <__cxa_demangle+0xb8>)
 80084fa:	9400      	str	r4, [sp, #0]
 80084fc:	461e      	mov	r6, r3
 80084fe:	9401      	str	r4, [sp, #4]
 8008500:	9402      	str	r4, [sp, #8]
 8008502:	9403      	str	r4, [sp, #12]
 8008504:	f7ff fe58 	bl	80081b8 <d_demangle_callback.constprop.15>
 8008508:	b368      	cbz	r0, 8008566 <__cxa_demangle+0x82>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	b1d3      	cbz	r3, 8008544 <__cxa_demangle+0x60>
 800850e:	f04f 0801 	mov.w	r8, #1
 8008512:	9c00      	ldr	r4, [sp, #0]
 8008514:	b3ac      	cbz	r4, 8008582 <__cxa_demangle+0x9e>
 8008516:	b38d      	cbz	r5, 800857c <__cxa_demangle+0x98>
 8008518:	4620      	mov	r0, r4
 800851a:	f001 ff01 	bl	800a320 <strlen>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	4298      	cmp	r0, r3
 8008522:	d21a      	bcs.n	800855a <__cxa_demangle+0x76>
 8008524:	1c42      	adds	r2, r0, #1
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f001 fce9 	bl	8009f00 <memcpy>
 800852e:	4620      	mov	r0, r4
 8008530:	f008 fc16 	bl	8010d60 <free>
 8008534:	462c      	mov	r4, r5
 8008536:	b376      	cbz	r6, 8008596 <__cxa_demangle+0xb2>
 8008538:	2300      	movs	r3, #0
 800853a:	4620      	mov	r0, r4
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	b004      	add	sp, #16
 8008540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008544:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008548:	e7e3      	b.n	8008512 <__cxa_demangle+0x2e>
 800854a:	b19b      	cbz	r3, 8008574 <__cxa_demangle+0x90>
 800854c:	f06f 0202 	mvn.w	r2, #2
 8008550:	2000      	movs	r0, #0
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	b004      	add	sp, #16
 8008556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800855a:	4628      	mov	r0, r5
 800855c:	f008 fc00 	bl	8010d60 <free>
 8008560:	f8c7 8000 	str.w	r8, [r7]
 8008564:	e7e7      	b.n	8008536 <__cxa_demangle+0x52>
 8008566:	9800      	ldr	r0, [sp, #0]
 8008568:	f008 fbfa 	bl	8010d60 <free>
 800856c:	b116      	cbz	r6, 8008574 <__cxa_demangle+0x90>
 800856e:	f06f 0301 	mvn.w	r3, #1
 8008572:	6033      	str	r3, [r6, #0]
 8008574:	2000      	movs	r0, #0
 8008576:	b004      	add	sp, #16
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	2f00      	cmp	r7, #0
 800857e:	d1ef      	bne.n	8008560 <__cxa_demangle+0x7c>
 8008580:	e7d9      	b.n	8008536 <__cxa_demangle+0x52>
 8008582:	2e00      	cmp	r6, #0
 8008584:	d0f6      	beq.n	8008574 <__cxa_demangle+0x90>
 8008586:	f1b8 0f01 	cmp.w	r8, #1
 800858a:	d1f0      	bne.n	800856e <__cxa_demangle+0x8a>
 800858c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008590:	4620      	mov	r0, r4
 8008592:	6033      	str	r3, [r6, #0]
 8008594:	e7d3      	b.n	800853e <__cxa_demangle+0x5a>
 8008596:	4620      	mov	r0, r4
 8008598:	e7d1      	b.n	800853e <__cxa_demangle+0x5a>
 800859a:	bf00      	nop
 800859c:	08000a69 	.word	0x08000a69

080085a0 <__gcclibcxx_demangle_callback>:
 80085a0:	b160      	cbz	r0, 80085bc <__gcclibcxx_demangle_callback+0x1c>
 80085a2:	b508      	push	{r3, lr}
 80085a4:	b139      	cbz	r1, 80085b6 <__gcclibcxx_demangle_callback+0x16>
 80085a6:	f7ff fe07 	bl	80081b8 <d_demangle_callback.constprop.15>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	bf0c      	ite	eq
 80085ae:	f06f 0001 	mvneq.w	r0, #1
 80085b2:	2000      	movne	r0, #0
 80085b4:	bd08      	pop	{r3, pc}
 80085b6:	f06f 0002 	mvn.w	r0, #2
 80085ba:	bd08      	pop	{r3, pc}
 80085bc:	f06f 0002 	mvn.w	r0, #2
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
	...

080085d0 <__aeabi_drsub>:
 80085d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80085d4:	e002      	b.n	80085dc <__adddf3>
 80085d6:	bf00      	nop

080085d8 <__aeabi_dsub>:
 80085d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080085dc <__adddf3>:
 80085dc:	b530      	push	{r4, r5, lr}
 80085de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80085e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80085e6:	ea94 0f05 	teq	r4, r5
 80085ea:	bf08      	it	eq
 80085ec:	ea90 0f02 	teqeq	r0, r2
 80085f0:	bf1f      	itttt	ne
 80085f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80085f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80085fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80085fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008602:	f000 80e2 	beq.w	80087ca <__adddf3+0x1ee>
 8008606:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800860a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800860e:	bfb8      	it	lt
 8008610:	426d      	neglt	r5, r5
 8008612:	dd0c      	ble.n	800862e <__adddf3+0x52>
 8008614:	442c      	add	r4, r5
 8008616:	ea80 0202 	eor.w	r2, r0, r2
 800861a:	ea81 0303 	eor.w	r3, r1, r3
 800861e:	ea82 0000 	eor.w	r0, r2, r0
 8008622:	ea83 0101 	eor.w	r1, r3, r1
 8008626:	ea80 0202 	eor.w	r2, r0, r2
 800862a:	ea81 0303 	eor.w	r3, r1, r3
 800862e:	2d36      	cmp	r5, #54	; 0x36
 8008630:	bf88      	it	hi
 8008632:	bd30      	pophi	{r4, r5, pc}
 8008634:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800863c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008640:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008644:	d002      	beq.n	800864c <__adddf3+0x70>
 8008646:	4240      	negs	r0, r0
 8008648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800864c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008654:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008658:	d002      	beq.n	8008660 <__adddf3+0x84>
 800865a:	4252      	negs	r2, r2
 800865c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008660:	ea94 0f05 	teq	r4, r5
 8008664:	f000 80a7 	beq.w	80087b6 <__adddf3+0x1da>
 8008668:	f1a4 0401 	sub.w	r4, r4, #1
 800866c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008670:	db0d      	blt.n	800868e <__adddf3+0xb2>
 8008672:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008676:	fa22 f205 	lsr.w	r2, r2, r5
 800867a:	1880      	adds	r0, r0, r2
 800867c:	f141 0100 	adc.w	r1, r1, #0
 8008680:	fa03 f20e 	lsl.w	r2, r3, lr
 8008684:	1880      	adds	r0, r0, r2
 8008686:	fa43 f305 	asr.w	r3, r3, r5
 800868a:	4159      	adcs	r1, r3
 800868c:	e00e      	b.n	80086ac <__adddf3+0xd0>
 800868e:	f1a5 0520 	sub.w	r5, r5, #32
 8008692:	f10e 0e20 	add.w	lr, lr, #32
 8008696:	2a01      	cmp	r2, #1
 8008698:	fa03 fc0e 	lsl.w	ip, r3, lr
 800869c:	bf28      	it	cs
 800869e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80086a2:	fa43 f305 	asr.w	r3, r3, r5
 80086a6:	18c0      	adds	r0, r0, r3
 80086a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80086ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80086b0:	d507      	bpl.n	80086c2 <__adddf3+0xe6>
 80086b2:	f04f 0e00 	mov.w	lr, #0
 80086b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80086ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80086be:	eb6e 0101 	sbc.w	r1, lr, r1
 80086c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80086c6:	d31b      	bcc.n	8008700 <__adddf3+0x124>
 80086c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80086cc:	d30c      	bcc.n	80086e8 <__adddf3+0x10c>
 80086ce:	0849      	lsrs	r1, r1, #1
 80086d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80086d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80086d8:	f104 0401 	add.w	r4, r4, #1
 80086dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80086e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80086e4:	f080 809a 	bcs.w	800881c <__adddf3+0x240>
 80086e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80086ec:	bf08      	it	eq
 80086ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80086f2:	f150 0000 	adcs.w	r0, r0, #0
 80086f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80086fa:	ea41 0105 	orr.w	r1, r1, r5
 80086fe:	bd30      	pop	{r4, r5, pc}
 8008700:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008704:	4140      	adcs	r0, r0
 8008706:	eb41 0101 	adc.w	r1, r1, r1
 800870a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800870e:	f1a4 0401 	sub.w	r4, r4, #1
 8008712:	d1e9      	bne.n	80086e8 <__adddf3+0x10c>
 8008714:	f091 0f00 	teq	r1, #0
 8008718:	bf04      	itt	eq
 800871a:	4601      	moveq	r1, r0
 800871c:	2000      	moveq	r0, #0
 800871e:	fab1 f381 	clz	r3, r1
 8008722:	bf08      	it	eq
 8008724:	3320      	addeq	r3, #32
 8008726:	f1a3 030b 	sub.w	r3, r3, #11
 800872a:	f1b3 0220 	subs.w	r2, r3, #32
 800872e:	da0c      	bge.n	800874a <__adddf3+0x16e>
 8008730:	320c      	adds	r2, #12
 8008732:	dd08      	ble.n	8008746 <__adddf3+0x16a>
 8008734:	f102 0c14 	add.w	ip, r2, #20
 8008738:	f1c2 020c 	rsb	r2, r2, #12
 800873c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008740:	fa21 f102 	lsr.w	r1, r1, r2
 8008744:	e00c      	b.n	8008760 <__adddf3+0x184>
 8008746:	f102 0214 	add.w	r2, r2, #20
 800874a:	bfd8      	it	le
 800874c:	f1c2 0c20 	rsble	ip, r2, #32
 8008750:	fa01 f102 	lsl.w	r1, r1, r2
 8008754:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008758:	bfdc      	itt	le
 800875a:	ea41 010c 	orrle.w	r1, r1, ip
 800875e:	4090      	lslle	r0, r2
 8008760:	1ae4      	subs	r4, r4, r3
 8008762:	bfa2      	ittt	ge
 8008764:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008768:	4329      	orrge	r1, r5
 800876a:	bd30      	popge	{r4, r5, pc}
 800876c:	ea6f 0404 	mvn.w	r4, r4
 8008770:	3c1f      	subs	r4, #31
 8008772:	da1c      	bge.n	80087ae <__adddf3+0x1d2>
 8008774:	340c      	adds	r4, #12
 8008776:	dc0e      	bgt.n	8008796 <__adddf3+0x1ba>
 8008778:	f104 0414 	add.w	r4, r4, #20
 800877c:	f1c4 0220 	rsb	r2, r4, #32
 8008780:	fa20 f004 	lsr.w	r0, r0, r4
 8008784:	fa01 f302 	lsl.w	r3, r1, r2
 8008788:	ea40 0003 	orr.w	r0, r0, r3
 800878c:	fa21 f304 	lsr.w	r3, r1, r4
 8008790:	ea45 0103 	orr.w	r1, r5, r3
 8008794:	bd30      	pop	{r4, r5, pc}
 8008796:	f1c4 040c 	rsb	r4, r4, #12
 800879a:	f1c4 0220 	rsb	r2, r4, #32
 800879e:	fa20 f002 	lsr.w	r0, r0, r2
 80087a2:	fa01 f304 	lsl.w	r3, r1, r4
 80087a6:	ea40 0003 	orr.w	r0, r0, r3
 80087aa:	4629      	mov	r1, r5
 80087ac:	bd30      	pop	{r4, r5, pc}
 80087ae:	fa21 f004 	lsr.w	r0, r1, r4
 80087b2:	4629      	mov	r1, r5
 80087b4:	bd30      	pop	{r4, r5, pc}
 80087b6:	f094 0f00 	teq	r4, #0
 80087ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80087be:	bf06      	itte	eq
 80087c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80087c4:	3401      	addeq	r4, #1
 80087c6:	3d01      	subne	r5, #1
 80087c8:	e74e      	b.n	8008668 <__adddf3+0x8c>
 80087ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80087ce:	bf18      	it	ne
 80087d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80087d4:	d029      	beq.n	800882a <__adddf3+0x24e>
 80087d6:	ea94 0f05 	teq	r4, r5
 80087da:	bf08      	it	eq
 80087dc:	ea90 0f02 	teqeq	r0, r2
 80087e0:	d005      	beq.n	80087ee <__adddf3+0x212>
 80087e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80087e6:	bf04      	itt	eq
 80087e8:	4619      	moveq	r1, r3
 80087ea:	4610      	moveq	r0, r2
 80087ec:	bd30      	pop	{r4, r5, pc}
 80087ee:	ea91 0f03 	teq	r1, r3
 80087f2:	bf1e      	ittt	ne
 80087f4:	2100      	movne	r1, #0
 80087f6:	2000      	movne	r0, #0
 80087f8:	bd30      	popne	{r4, r5, pc}
 80087fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80087fe:	d105      	bne.n	800880c <__adddf3+0x230>
 8008800:	0040      	lsls	r0, r0, #1
 8008802:	4149      	adcs	r1, r1
 8008804:	bf28      	it	cs
 8008806:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800880a:	bd30      	pop	{r4, r5, pc}
 800880c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008810:	bf3c      	itt	cc
 8008812:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008816:	bd30      	popcc	{r4, r5, pc}
 8008818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800881c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008824:	f04f 0000 	mov.w	r0, #0
 8008828:	bd30      	pop	{r4, r5, pc}
 800882a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800882e:	bf1a      	itte	ne
 8008830:	4619      	movne	r1, r3
 8008832:	4610      	movne	r0, r2
 8008834:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008838:	bf1c      	itt	ne
 800883a:	460b      	movne	r3, r1
 800883c:	4602      	movne	r2, r0
 800883e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008842:	bf06      	itte	eq
 8008844:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008848:	ea91 0f03 	teqeq	r1, r3
 800884c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008850:	bd30      	pop	{r4, r5, pc}
 8008852:	bf00      	nop

08008854 <__aeabi_ui2d>:
 8008854:	f090 0f00 	teq	r0, #0
 8008858:	bf04      	itt	eq
 800885a:	2100      	moveq	r1, #0
 800885c:	4770      	bxeq	lr
 800885e:	b530      	push	{r4, r5, lr}
 8008860:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008864:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008868:	f04f 0500 	mov.w	r5, #0
 800886c:	f04f 0100 	mov.w	r1, #0
 8008870:	e750      	b.n	8008714 <__adddf3+0x138>
 8008872:	bf00      	nop

08008874 <__aeabi_i2d>:
 8008874:	f090 0f00 	teq	r0, #0
 8008878:	bf04      	itt	eq
 800887a:	2100      	moveq	r1, #0
 800887c:	4770      	bxeq	lr
 800887e:	b530      	push	{r4, r5, lr}
 8008880:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008884:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008888:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800888c:	bf48      	it	mi
 800888e:	4240      	negmi	r0, r0
 8008890:	f04f 0100 	mov.w	r1, #0
 8008894:	e73e      	b.n	8008714 <__adddf3+0x138>
 8008896:	bf00      	nop

08008898 <__aeabi_f2d>:
 8008898:	0042      	lsls	r2, r0, #1
 800889a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800889e:	ea4f 0131 	mov.w	r1, r1, rrx
 80088a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80088a6:	bf1f      	itttt	ne
 80088a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80088ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80088b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80088b4:	4770      	bxne	lr
 80088b6:	f092 0f00 	teq	r2, #0
 80088ba:	bf14      	ite	ne
 80088bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80088c0:	4770      	bxeq	lr
 80088c2:	b530      	push	{r4, r5, lr}
 80088c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80088c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80088cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80088d0:	e720      	b.n	8008714 <__adddf3+0x138>
 80088d2:	bf00      	nop

080088d4 <__aeabi_ul2d>:
 80088d4:	ea50 0201 	orrs.w	r2, r0, r1
 80088d8:	bf08      	it	eq
 80088da:	4770      	bxeq	lr
 80088dc:	b530      	push	{r4, r5, lr}
 80088de:	f04f 0500 	mov.w	r5, #0
 80088e2:	e00a      	b.n	80088fa <__aeabi_l2d+0x16>

080088e4 <__aeabi_l2d>:
 80088e4:	ea50 0201 	orrs.w	r2, r0, r1
 80088e8:	bf08      	it	eq
 80088ea:	4770      	bxeq	lr
 80088ec:	b530      	push	{r4, r5, lr}
 80088ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80088f2:	d502      	bpl.n	80088fa <__aeabi_l2d+0x16>
 80088f4:	4240      	negs	r0, r0
 80088f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80088fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008902:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008906:	f43f aedc 	beq.w	80086c2 <__adddf3+0xe6>
 800890a:	f04f 0203 	mov.w	r2, #3
 800890e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008912:	bf18      	it	ne
 8008914:	3203      	addne	r2, #3
 8008916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800891a:	bf18      	it	ne
 800891c:	3203      	addne	r2, #3
 800891e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008922:	f1c2 0320 	rsb	r3, r2, #32
 8008926:	fa00 fc03 	lsl.w	ip, r0, r3
 800892a:	fa20 f002 	lsr.w	r0, r0, r2
 800892e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008932:	ea40 000e 	orr.w	r0, r0, lr
 8008936:	fa21 f102 	lsr.w	r1, r1, r2
 800893a:	4414      	add	r4, r2
 800893c:	e6c1      	b.n	80086c2 <__adddf3+0xe6>
 800893e:	bf00      	nop

08008940 <__aeabi_dmul>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800894a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800894e:	bf1d      	ittte	ne
 8008950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008954:	ea94 0f0c 	teqne	r4, ip
 8008958:	ea95 0f0c 	teqne	r5, ip
 800895c:	f000 f8de 	bleq	8008b1c <__aeabi_dmul+0x1dc>
 8008960:	442c      	add	r4, r5
 8008962:	ea81 0603 	eor.w	r6, r1, r3
 8008966:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800896a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800896e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008972:	bf18      	it	ne
 8008974:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800897c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008980:	d038      	beq.n	80089f4 <__aeabi_dmul+0xb4>
 8008982:	fba0 ce02 	umull	ip, lr, r0, r2
 8008986:	f04f 0500 	mov.w	r5, #0
 800898a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800898e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008992:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008996:	f04f 0600 	mov.w	r6, #0
 800899a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800899e:	f09c 0f00 	teq	ip, #0
 80089a2:	bf18      	it	ne
 80089a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80089a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80089ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80089b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80089b4:	d204      	bcs.n	80089c0 <__aeabi_dmul+0x80>
 80089b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80089ba:	416d      	adcs	r5, r5
 80089bc:	eb46 0606 	adc.w	r6, r6, r6
 80089c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80089c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80089c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80089cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80089d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80089d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80089d8:	bf88      	it	hi
 80089da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80089de:	d81e      	bhi.n	8008a1e <__aeabi_dmul+0xde>
 80089e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80089e4:	bf08      	it	eq
 80089e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80089ea:	f150 0000 	adcs.w	r0, r0, #0
 80089ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80089f8:	ea46 0101 	orr.w	r1, r6, r1
 80089fc:	ea40 0002 	orr.w	r0, r0, r2
 8008a00:	ea81 0103 	eor.w	r1, r1, r3
 8008a04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008a08:	bfc2      	ittt	gt
 8008a0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a12:	bd70      	popgt	{r4, r5, r6, pc}
 8008a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a18:	f04f 0e00 	mov.w	lr, #0
 8008a1c:	3c01      	subs	r4, #1
 8008a1e:	f300 80ab 	bgt.w	8008b78 <__aeabi_dmul+0x238>
 8008a22:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008a26:	bfde      	ittt	le
 8008a28:	2000      	movle	r0, #0
 8008a2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008a2e:	bd70      	pople	{r4, r5, r6, pc}
 8008a30:	f1c4 0400 	rsb	r4, r4, #0
 8008a34:	3c20      	subs	r4, #32
 8008a36:	da35      	bge.n	8008aa4 <__aeabi_dmul+0x164>
 8008a38:	340c      	adds	r4, #12
 8008a3a:	dc1b      	bgt.n	8008a74 <__aeabi_dmul+0x134>
 8008a3c:	f104 0414 	add.w	r4, r4, #20
 8008a40:	f1c4 0520 	rsb	r5, r4, #32
 8008a44:	fa00 f305 	lsl.w	r3, r0, r5
 8008a48:	fa20 f004 	lsr.w	r0, r0, r4
 8008a4c:	fa01 f205 	lsl.w	r2, r1, r5
 8008a50:	ea40 0002 	orr.w	r0, r0, r2
 8008a54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008a5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008a60:	fa21 f604 	lsr.w	r6, r1, r4
 8008a64:	eb42 0106 	adc.w	r1, r2, r6
 8008a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008a6c:	bf08      	it	eq
 8008a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
 8008a74:	f1c4 040c 	rsb	r4, r4, #12
 8008a78:	f1c4 0520 	rsb	r5, r4, #32
 8008a7c:	fa00 f304 	lsl.w	r3, r0, r4
 8008a80:	fa20 f005 	lsr.w	r0, r0, r5
 8008a84:	fa01 f204 	lsl.w	r2, r1, r4
 8008a88:	ea40 0002 	orr.w	r0, r0, r2
 8008a8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008a90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008a94:	f141 0100 	adc.w	r1, r1, #0
 8008a98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008a9c:	bf08      	it	eq
 8008a9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	f1c4 0520 	rsb	r5, r4, #32
 8008aa8:	fa00 f205 	lsl.w	r2, r0, r5
 8008aac:	ea4e 0e02 	orr.w	lr, lr, r2
 8008ab0:	fa20 f304 	lsr.w	r3, r0, r4
 8008ab4:	fa01 f205 	lsl.w	r2, r1, r5
 8008ab8:	ea43 0302 	orr.w	r3, r3, r2
 8008abc:	fa21 f004 	lsr.w	r0, r1, r4
 8008ac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ac4:	fa21 f204 	lsr.w	r2, r1, r4
 8008ac8:	ea20 0002 	bic.w	r0, r0, r2
 8008acc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ad4:	bf08      	it	eq
 8008ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	f094 0f00 	teq	r4, #0
 8008ae0:	d10f      	bne.n	8008b02 <__aeabi_dmul+0x1c2>
 8008ae2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008ae6:	0040      	lsls	r0, r0, #1
 8008ae8:	eb41 0101 	adc.w	r1, r1, r1
 8008aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008af0:	bf08      	it	eq
 8008af2:	3c01      	subeq	r4, #1
 8008af4:	d0f7      	beq.n	8008ae6 <__aeabi_dmul+0x1a6>
 8008af6:	ea41 0106 	orr.w	r1, r1, r6
 8008afa:	f095 0f00 	teq	r5, #0
 8008afe:	bf18      	it	ne
 8008b00:	4770      	bxne	lr
 8008b02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008b06:	0052      	lsls	r2, r2, #1
 8008b08:	eb43 0303 	adc.w	r3, r3, r3
 8008b0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008b10:	bf08      	it	eq
 8008b12:	3d01      	subeq	r5, #1
 8008b14:	d0f7      	beq.n	8008b06 <__aeabi_dmul+0x1c6>
 8008b16:	ea43 0306 	orr.w	r3, r3, r6
 8008b1a:	4770      	bx	lr
 8008b1c:	ea94 0f0c 	teq	r4, ip
 8008b20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008b24:	bf18      	it	ne
 8008b26:	ea95 0f0c 	teqne	r5, ip
 8008b2a:	d00c      	beq.n	8008b46 <__aeabi_dmul+0x206>
 8008b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008b30:	bf18      	it	ne
 8008b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b36:	d1d1      	bne.n	8008adc <__aeabi_dmul+0x19c>
 8008b38:	ea81 0103 	eor.w	r1, r1, r3
 8008b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b40:	f04f 0000 	mov.w	r0, #0
 8008b44:	bd70      	pop	{r4, r5, r6, pc}
 8008b46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008b4a:	bf06      	itte	eq
 8008b4c:	4610      	moveq	r0, r2
 8008b4e:	4619      	moveq	r1, r3
 8008b50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b54:	d019      	beq.n	8008b8a <__aeabi_dmul+0x24a>
 8008b56:	ea94 0f0c 	teq	r4, ip
 8008b5a:	d102      	bne.n	8008b62 <__aeabi_dmul+0x222>
 8008b5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008b60:	d113      	bne.n	8008b8a <__aeabi_dmul+0x24a>
 8008b62:	ea95 0f0c 	teq	r5, ip
 8008b66:	d105      	bne.n	8008b74 <__aeabi_dmul+0x234>
 8008b68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008b6c:	bf1c      	itt	ne
 8008b6e:	4610      	movne	r0, r2
 8008b70:	4619      	movne	r1, r3
 8008b72:	d10a      	bne.n	8008b8a <__aeabi_dmul+0x24a>
 8008b74:	ea81 0103 	eor.w	r1, r1, r3
 8008b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008b80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b84:	f04f 0000 	mov.w	r0, #0
 8008b88:	bd70      	pop	{r4, r5, r6, pc}
 8008b8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008b8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008b92:	bd70      	pop	{r4, r5, r6, pc}

08008b94 <__aeabi_ddiv>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008ba2:	bf1d      	ittte	ne
 8008ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008ba8:	ea94 0f0c 	teqne	r4, ip
 8008bac:	ea95 0f0c 	teqne	r5, ip
 8008bb0:	f000 f8a7 	bleq	8008d02 <__aeabi_ddiv+0x16e>
 8008bb4:	eba4 0405 	sub.w	r4, r4, r5
 8008bb8:	ea81 0e03 	eor.w	lr, r1, r3
 8008bbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008bc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008bc4:	f000 8088 	beq.w	8008cd8 <__aeabi_ddiv+0x144>
 8008bc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008bcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008bd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008bd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008bd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008bdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008be0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008be4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008be8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008bec:	429d      	cmp	r5, r3
 8008bee:	bf08      	it	eq
 8008bf0:	4296      	cmpeq	r6, r2
 8008bf2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008bf6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008bfa:	d202      	bcs.n	8008c02 <__aeabi_ddiv+0x6e>
 8008bfc:	085b      	lsrs	r3, r3, #1
 8008bfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c02:	1ab6      	subs	r6, r6, r2
 8008c04:	eb65 0503 	sbc.w	r5, r5, r3
 8008c08:	085b      	lsrs	r3, r3, #1
 8008c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008c16:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c1e:	bf22      	ittt	cs
 8008c20:	1ab6      	subcs	r6, r6, r2
 8008c22:	4675      	movcs	r5, lr
 8008c24:	ea40 000c 	orrcs.w	r0, r0, ip
 8008c28:	085b      	lsrs	r3, r3, #1
 8008c2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c36:	bf22      	ittt	cs
 8008c38:	1ab6      	subcs	r6, r6, r2
 8008c3a:	4675      	movcs	r5, lr
 8008c3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c46:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c4e:	bf22      	ittt	cs
 8008c50:	1ab6      	subcs	r6, r6, r2
 8008c52:	4675      	movcs	r5, lr
 8008c54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008c58:	085b      	lsrs	r3, r3, #1
 8008c5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c66:	bf22      	ittt	cs
 8008c68:	1ab6      	subcs	r6, r6, r2
 8008c6a:	4675      	movcs	r5, lr
 8008c6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008c70:	ea55 0e06 	orrs.w	lr, r5, r6
 8008c74:	d018      	beq.n	8008ca8 <__aeabi_ddiv+0x114>
 8008c76:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008c7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008c7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008c82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008c86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008c8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008c8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008c92:	d1c0      	bne.n	8008c16 <__aeabi_ddiv+0x82>
 8008c94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008c98:	d10b      	bne.n	8008cb2 <__aeabi_ddiv+0x11e>
 8008c9a:	ea41 0100 	orr.w	r1, r1, r0
 8008c9e:	f04f 0000 	mov.w	r0, #0
 8008ca2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008ca6:	e7b6      	b.n	8008c16 <__aeabi_ddiv+0x82>
 8008ca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008cac:	bf04      	itt	eq
 8008cae:	4301      	orreq	r1, r0
 8008cb0:	2000      	moveq	r0, #0
 8008cb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008cb6:	bf88      	it	hi
 8008cb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008cbc:	f63f aeaf 	bhi.w	8008a1e <__aeabi_dmul+0xde>
 8008cc0:	ebb5 0c03 	subs.w	ip, r5, r3
 8008cc4:	bf04      	itt	eq
 8008cc6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008cca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008cce:	f150 0000 	adcs.w	r0, r0, #0
 8008cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008cdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008ce0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008ce4:	bfc2      	ittt	gt
 8008ce6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008cea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008cee:	bd70      	popgt	{r4, r5, r6, pc}
 8008cf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008cf4:	f04f 0e00 	mov.w	lr, #0
 8008cf8:	3c01      	subs	r4, #1
 8008cfa:	e690      	b.n	8008a1e <__aeabi_dmul+0xde>
 8008cfc:	ea45 0e06 	orr.w	lr, r5, r6
 8008d00:	e68d      	b.n	8008a1e <__aeabi_dmul+0xde>
 8008d02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008d06:	ea94 0f0c 	teq	r4, ip
 8008d0a:	bf08      	it	eq
 8008d0c:	ea95 0f0c 	teqeq	r5, ip
 8008d10:	f43f af3b 	beq.w	8008b8a <__aeabi_dmul+0x24a>
 8008d14:	ea94 0f0c 	teq	r4, ip
 8008d18:	d10a      	bne.n	8008d30 <__aeabi_ddiv+0x19c>
 8008d1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008d1e:	f47f af34 	bne.w	8008b8a <__aeabi_dmul+0x24a>
 8008d22:	ea95 0f0c 	teq	r5, ip
 8008d26:	f47f af25 	bne.w	8008b74 <__aeabi_dmul+0x234>
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	e72c      	b.n	8008b8a <__aeabi_dmul+0x24a>
 8008d30:	ea95 0f0c 	teq	r5, ip
 8008d34:	d106      	bne.n	8008d44 <__aeabi_ddiv+0x1b0>
 8008d36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008d3a:	f43f aefd 	beq.w	8008b38 <__aeabi_dmul+0x1f8>
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4619      	mov	r1, r3
 8008d42:	e722      	b.n	8008b8a <__aeabi_dmul+0x24a>
 8008d44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008d48:	bf18      	it	ne
 8008d4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008d4e:	f47f aec5 	bne.w	8008adc <__aeabi_dmul+0x19c>
 8008d52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008d56:	f47f af0d 	bne.w	8008b74 <__aeabi_dmul+0x234>
 8008d5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008d5e:	f47f aeeb 	bne.w	8008b38 <__aeabi_dmul+0x1f8>
 8008d62:	e712      	b.n	8008b8a <__aeabi_dmul+0x24a>
	...

08008d70 <__gedf2>:
 8008d70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008d74:	e006      	b.n	8008d84 <__cmpdf2+0x4>
 8008d76:	bf00      	nop

08008d78 <__ledf2>:
 8008d78:	f04f 0c01 	mov.w	ip, #1
 8008d7c:	e002      	b.n	8008d84 <__cmpdf2+0x4>
 8008d7e:	bf00      	nop

08008d80 <__cmpdf2>:
 8008d80:	f04f 0c01 	mov.w	ip, #1
 8008d84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008d88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008d90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008d94:	bf18      	it	ne
 8008d96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008d9a:	d01b      	beq.n	8008dd4 <__cmpdf2+0x54>
 8008d9c:	b001      	add	sp, #4
 8008d9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008da2:	bf0c      	ite	eq
 8008da4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008da8:	ea91 0f03 	teqne	r1, r3
 8008dac:	bf02      	ittt	eq
 8008dae:	ea90 0f02 	teqeq	r0, r2
 8008db2:	2000      	moveq	r0, #0
 8008db4:	4770      	bxeq	lr
 8008db6:	f110 0f00 	cmn.w	r0, #0
 8008dba:	ea91 0f03 	teq	r1, r3
 8008dbe:	bf58      	it	pl
 8008dc0:	4299      	cmppl	r1, r3
 8008dc2:	bf08      	it	eq
 8008dc4:	4290      	cmpeq	r0, r2
 8008dc6:	bf2c      	ite	cs
 8008dc8:	17d8      	asrcs	r0, r3, #31
 8008dca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008dce:	f040 0001 	orr.w	r0, r0, #1
 8008dd2:	4770      	bx	lr
 8008dd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008dd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ddc:	d102      	bne.n	8008de4 <__cmpdf2+0x64>
 8008dde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008de2:	d107      	bne.n	8008df4 <__cmpdf2+0x74>
 8008de4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008dec:	d1d6      	bne.n	8008d9c <__cmpdf2+0x1c>
 8008dee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008df2:	d0d3      	beq.n	8008d9c <__cmpdf2+0x1c>
 8008df4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop

08008dfc <__aeabi_cdrcmple>:
 8008dfc:	4684      	mov	ip, r0
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4662      	mov	r2, ip
 8008e02:	468c      	mov	ip, r1
 8008e04:	4619      	mov	r1, r3
 8008e06:	4663      	mov	r3, ip
 8008e08:	e000      	b.n	8008e0c <__aeabi_cdcmpeq>
 8008e0a:	bf00      	nop

08008e0c <__aeabi_cdcmpeq>:
 8008e0c:	b501      	push	{r0, lr}
 8008e0e:	f7ff ffb7 	bl	8008d80 <__cmpdf2>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	bf48      	it	mi
 8008e16:	f110 0f00 	cmnmi.w	r0, #0
 8008e1a:	bd01      	pop	{r0, pc}

08008e1c <__aeabi_dcmpeq>:
 8008e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e20:	f7ff fff4 	bl	8008e0c <__aeabi_cdcmpeq>
 8008e24:	bf0c      	ite	eq
 8008e26:	2001      	moveq	r0, #1
 8008e28:	2000      	movne	r0, #0
 8008e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e2e:	bf00      	nop

08008e30 <__aeabi_dcmplt>:
 8008e30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e34:	f7ff ffea 	bl	8008e0c <__aeabi_cdcmpeq>
 8008e38:	bf34      	ite	cc
 8008e3a:	2001      	movcc	r0, #1
 8008e3c:	2000      	movcs	r0, #0
 8008e3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e42:	bf00      	nop

08008e44 <__aeabi_dcmple>:
 8008e44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e48:	f7ff ffe0 	bl	8008e0c <__aeabi_cdcmpeq>
 8008e4c:	bf94      	ite	ls
 8008e4e:	2001      	movls	r0, #1
 8008e50:	2000      	movhi	r0, #0
 8008e52:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e56:	bf00      	nop

08008e58 <__aeabi_dcmpge>:
 8008e58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e5c:	f7ff ffce 	bl	8008dfc <__aeabi_cdrcmple>
 8008e60:	bf94      	ite	ls
 8008e62:	2001      	movls	r0, #1
 8008e64:	2000      	movhi	r0, #0
 8008e66:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e6a:	bf00      	nop

08008e6c <__aeabi_dcmpgt>:
 8008e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e70:	f7ff ffc4 	bl	8008dfc <__aeabi_cdrcmple>
 8008e74:	bf34      	ite	cc
 8008e76:	2001      	movcc	r0, #1
 8008e78:	2000      	movcs	r0, #0
 8008e7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e7e:	bf00      	nop

08008e80 <__aeabi_d2iz>:
 8008e80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008e84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008e88:	d215      	bcs.n	8008eb6 <__aeabi_d2iz+0x36>
 8008e8a:	d511      	bpl.n	8008eb0 <__aeabi_d2iz+0x30>
 8008e8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008e90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008e94:	d912      	bls.n	8008ebc <__aeabi_d2iz+0x3c>
 8008e96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008ea2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008ea6:	fa23 f002 	lsr.w	r0, r3, r2
 8008eaa:	bf18      	it	ne
 8008eac:	4240      	negne	r0, r0
 8008eae:	4770      	bx	lr
 8008eb0:	f04f 0000 	mov.w	r0, #0
 8008eb4:	4770      	bx	lr
 8008eb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008eba:	d105      	bne.n	8008ec8 <__aeabi_d2iz+0x48>
 8008ebc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008ec0:	bf08      	it	eq
 8008ec2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008ec6:	4770      	bx	lr
 8008ec8:	f04f 0000 	mov.w	r0, #0
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop

08008ed0 <__aeabi_d2f>:
 8008ed0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008ed4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008ed8:	bf24      	itt	cs
 8008eda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008ede:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008ee2:	d90d      	bls.n	8008f00 <__aeabi_d2f+0x30>
 8008ee4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008ee8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008eec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008ef0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008ef4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008ef8:	bf08      	it	eq
 8008efa:	f020 0001 	biceq.w	r0, r0, #1
 8008efe:	4770      	bx	lr
 8008f00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008f04:	d121      	bne.n	8008f4a <__aeabi_d2f+0x7a>
 8008f06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008f0a:	bfbc      	itt	lt
 8008f0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008f10:	4770      	bxlt	lr
 8008f12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008f1a:	f1c2 0218 	rsb	r2, r2, #24
 8008f1e:	f1c2 0c20 	rsb	ip, r2, #32
 8008f22:	fa10 f30c 	lsls.w	r3, r0, ip
 8008f26:	fa20 f002 	lsr.w	r0, r0, r2
 8008f2a:	bf18      	it	ne
 8008f2c:	f040 0001 	orrne.w	r0, r0, #1
 8008f30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008f38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008f3c:	ea40 000c 	orr.w	r0, r0, ip
 8008f40:	fa23 f302 	lsr.w	r3, r3, r2
 8008f44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f48:	e7cc      	b.n	8008ee4 <__aeabi_d2f+0x14>
 8008f4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008f4e:	d107      	bne.n	8008f60 <__aeabi_d2f+0x90>
 8008f50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008f54:	bf1e      	ittt	ne
 8008f56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008f5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008f5e:	4770      	bxne	lr
 8008f60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop

08008f70 <selfrel_offset31>:
 8008f70:	6803      	ldr	r3, [r0, #0]
 8008f72:	005a      	lsls	r2, r3, #1
 8008f74:	bf4c      	ite	mi
 8008f76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008f7a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8008f7e:	4418      	add	r0, r3
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop

08008f84 <search_EIT_table>:
 8008f84:	b361      	cbz	r1, 8008fe0 <search_EIT_table+0x5c>
 8008f86:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8a:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8008f8e:	4690      	mov	r8, r2
 8008f90:	4606      	mov	r6, r0
 8008f92:	46d1      	mov	r9, sl
 8008f94:	2700      	movs	r7, #0
 8008f96:	eb07 0409 	add.w	r4, r7, r9
 8008f9a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8008f9e:	1064      	asrs	r4, r4, #1
 8008fa0:	00e5      	lsls	r5, r4, #3
 8008fa2:	1971      	adds	r1, r6, r5
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	f7ff ffe3 	bl	8008f70 <selfrel_offset31>
 8008faa:	45a2      	cmp	sl, r4
 8008fac:	4683      	mov	fp, r0
 8008fae:	f105 0008 	add.w	r0, r5, #8
 8008fb2:	4430      	add	r0, r6
 8008fb4:	d009      	beq.n	8008fca <search_EIT_table+0x46>
 8008fb6:	f7ff ffdb 	bl	8008f70 <selfrel_offset31>
 8008fba:	45c3      	cmp	fp, r8
 8008fbc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8008fc0:	d805      	bhi.n	8008fce <search_EIT_table+0x4a>
 8008fc2:	4540      	cmp	r0, r8
 8008fc4:	d209      	bcs.n	8008fda <search_EIT_table+0x56>
 8008fc6:	1c67      	adds	r7, r4, #1
 8008fc8:	e7e5      	b.n	8008f96 <search_EIT_table+0x12>
 8008fca:	45c3      	cmp	fp, r8
 8008fcc:	d905      	bls.n	8008fda <search_EIT_table+0x56>
 8008fce:	42a7      	cmp	r7, r4
 8008fd0:	d002      	beq.n	8008fd8 <search_EIT_table+0x54>
 8008fd2:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8008fd6:	e7de      	b.n	8008f96 <search_EIT_table+0x12>
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4608      	mov	r0, r1
 8008fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	4770      	bx	lr

08008fe4 <__gnu_unwind_get_pr_addr>:
 8008fe4:	2801      	cmp	r0, #1
 8008fe6:	d007      	beq.n	8008ff8 <__gnu_unwind_get_pr_addr+0x14>
 8008fe8:	2802      	cmp	r0, #2
 8008fea:	d007      	beq.n	8008ffc <__gnu_unwind_get_pr_addr+0x18>
 8008fec:	4b04      	ldr	r3, [pc, #16]	; (8009000 <__gnu_unwind_get_pr_addr+0x1c>)
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	bf0c      	ite	eq
 8008ff2:	4618      	moveq	r0, r3
 8008ff4:	2000      	movne	r0, #0
 8008ff6:	4770      	bx	lr
 8008ff8:	4802      	ldr	r0, [pc, #8]	; (8009004 <__gnu_unwind_get_pr_addr+0x20>)
 8008ffa:	4770      	bx	lr
 8008ffc:	4802      	ldr	r0, [pc, #8]	; (8009008 <__gnu_unwind_get_pr_addr+0x24>)
 8008ffe:	4770      	bx	lr
 8009000:	080096f1 	.word	0x080096f1
 8009004:	080096f5 	.word	0x080096f5
 8009008:	080096f9 	.word	0x080096f9

0800900c <get_eit_entry>:
 800900c:	b530      	push	{r4, r5, lr}
 800900e:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <get_eit_entry+0x94>)
 8009010:	b083      	sub	sp, #12
 8009012:	4604      	mov	r4, r0
 8009014:	1e8d      	subs	r5, r1, #2
 8009016:	b37b      	cbz	r3, 8009078 <get_eit_entry+0x6c>
 8009018:	a901      	add	r1, sp, #4
 800901a:	4628      	mov	r0, r5
 800901c:	f3af 8000 	nop.w
 8009020:	b320      	cbz	r0, 800906c <get_eit_entry+0x60>
 8009022:	9901      	ldr	r1, [sp, #4]
 8009024:	462a      	mov	r2, r5
 8009026:	f7ff ffad 	bl	8008f84 <search_EIT_table>
 800902a:	4601      	mov	r1, r0
 800902c:	b1f0      	cbz	r0, 800906c <get_eit_entry+0x60>
 800902e:	f7ff ff9f 	bl	8008f70 <selfrel_offset31>
 8009032:	684b      	ldr	r3, [r1, #4]
 8009034:	64a0      	str	r0, [r4, #72]	; 0x48
 8009036:	2b01      	cmp	r3, #1
 8009038:	d012      	beq.n	8009060 <get_eit_entry+0x54>
 800903a:	2b00      	cmp	r3, #0
 800903c:	f101 0004 	add.w	r0, r1, #4
 8009040:	db20      	blt.n	8009084 <get_eit_entry+0x78>
 8009042:	f7ff ff95 	bl	8008f70 <selfrel_offset31>
 8009046:	2300      	movs	r3, #0
 8009048:	64e0      	str	r0, [r4, #76]	; 0x4c
 800904a:	6523      	str	r3, [r4, #80]	; 0x50
 800904c:	6803      	ldr	r3, [r0, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	db1c      	blt.n	800908c <get_eit_entry+0x80>
 8009052:	f7ff ff8d 	bl	8008f70 <selfrel_offset31>
 8009056:	2300      	movs	r3, #0
 8009058:	6120      	str	r0, [r4, #16]
 800905a:	4618      	mov	r0, r3
 800905c:	b003      	add	sp, #12
 800905e:	bd30      	pop	{r4, r5, pc}
 8009060:	2300      	movs	r3, #0
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	2305      	movs	r3, #5
 8009066:	4618      	mov	r0, r3
 8009068:	b003      	add	sp, #12
 800906a:	bd30      	pop	{r4, r5, pc}
 800906c:	2300      	movs	r3, #0
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	2309      	movs	r3, #9
 8009072:	4618      	mov	r0, r3
 8009074:	b003      	add	sp, #12
 8009076:	bd30      	pop	{r4, r5, pc}
 8009078:	490a      	ldr	r1, [pc, #40]	; (80090a4 <get_eit_entry+0x98>)
 800907a:	480b      	ldr	r0, [pc, #44]	; (80090a8 <get_eit_entry+0x9c>)
 800907c:	1a09      	subs	r1, r1, r0
 800907e:	10c9      	asrs	r1, r1, #3
 8009080:	9101      	str	r1, [sp, #4]
 8009082:	e7cf      	b.n	8009024 <get_eit_entry+0x18>
 8009084:	2301      	movs	r3, #1
 8009086:	64e0      	str	r0, [r4, #76]	; 0x4c
 8009088:	6523      	str	r3, [r4, #80]	; 0x50
 800908a:	e7df      	b.n	800904c <get_eit_entry+0x40>
 800908c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8009090:	f7ff ffa8 	bl	8008fe4 <__gnu_unwind_get_pr_addr>
 8009094:	2800      	cmp	r0, #0
 8009096:	6120      	str	r0, [r4, #16]
 8009098:	bf14      	ite	ne
 800909a:	2300      	movne	r3, #0
 800909c:	2309      	moveq	r3, #9
 800909e:	e7dc      	b.n	800905a <get_eit_entry+0x4e>
 80090a0:	00000000 	.word	0x00000000
 80090a4:	08016e68 	.word	0x08016e68
 80090a8:	08016ca0 	.word	0x08016ca0

080090ac <restore_non_core_regs>:
 80090ac:	6803      	ldr	r3, [r0, #0]
 80090ae:	07da      	lsls	r2, r3, #31
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4604      	mov	r4, r0
 80090b4:	d406      	bmi.n	80090c4 <restore_non_core_regs+0x18>
 80090b6:	079b      	lsls	r3, r3, #30
 80090b8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80090bc:	d509      	bpl.n	80090d2 <restore_non_core_regs+0x26>
 80090be:	f000 fc5b 	bl	8009978 <__gnu_Unwind_Restore_VFP_D>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	0759      	lsls	r1, r3, #29
 80090c6:	d509      	bpl.n	80090dc <restore_non_core_regs+0x30>
 80090c8:	071a      	lsls	r2, r3, #28
 80090ca:	d50e      	bpl.n	80090ea <restore_non_core_regs+0x3e>
 80090cc:	06db      	lsls	r3, r3, #27
 80090ce:	d513      	bpl.n	80090f8 <restore_non_core_regs+0x4c>
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	f000 fc49 	bl	8009968 <__gnu_Unwind_Restore_VFP>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	0759      	lsls	r1, r3, #29
 80090da:	d4f5      	bmi.n	80090c8 <restore_non_core_regs+0x1c>
 80090dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090e0:	f000 fc52 	bl	8009988 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	071a      	lsls	r2, r3, #28
 80090e8:	d4f0      	bmi.n	80090cc <restore_non_core_regs+0x20>
 80090ea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80090ee:	f000 fc53 	bl	8009998 <__gnu_Unwind_Restore_WMMXD>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	06db      	lsls	r3, r3, #27
 80090f6:	d4eb      	bmi.n	80090d0 <restore_non_core_regs+0x24>
 80090f8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009100:	f000 bc8e 	b.w	8009a20 <__gnu_Unwind_Restore_WMMXC>

08009104 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8009104:	6803      	ldr	r3, [r0, #0]
 8009106:	b10b      	cbz	r3, 800910c <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8009108:	4418      	add	r0, r3
 800910a:	4770      	bx	lr
 800910c:	4618      	mov	r0, r3
 800910e:	4770      	bx	lr

08009110 <__gnu_unwind_24bit.isra.1>:
 8009110:	2009      	movs	r0, #9
 8009112:	4770      	bx	lr

08009114 <_Unwind_DebugHook>:
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop

08009118 <unwind_phase2>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	4604      	mov	r4, r0
 800911c:	460d      	mov	r5, r1
 800911e:	e008      	b.n	8009132 <unwind_phase2+0x1a>
 8009120:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009122:	6163      	str	r3, [r4, #20]
 8009124:	462a      	mov	r2, r5
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	4621      	mov	r1, r4
 800912a:	2001      	movs	r0, #1
 800912c:	4798      	blx	r3
 800912e:	2808      	cmp	r0, #8
 8009130:	d108      	bne.n	8009144 <unwind_phase2+0x2c>
 8009132:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8009134:	4620      	mov	r0, r4
 8009136:	f7ff ff69 	bl	800900c <get_eit_entry>
 800913a:	4606      	mov	r6, r0
 800913c:	2800      	cmp	r0, #0
 800913e:	d0ef      	beq.n	8009120 <unwind_phase2+0x8>
 8009140:	f007 fbe6 	bl	8010910 <abort>
 8009144:	2807      	cmp	r0, #7
 8009146:	d1fb      	bne.n	8009140 <unwind_phase2+0x28>
 8009148:	4630      	mov	r0, r6
 800914a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800914c:	f7ff ffe2 	bl	8009114 <_Unwind_DebugHook>
 8009150:	1d28      	adds	r0, r5, #4
 8009152:	f000 fbfd 	bl	8009950 <__restore_core_regs>
 8009156:	bf00      	nop

08009158 <unwind_phase2_forced>:
 8009158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	1d0c      	adds	r4, r1, #4
 800915e:	4606      	mov	r6, r0
 8009160:	4617      	mov	r7, r2
 8009162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009164:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8009168:	ad03      	add	r5, sp, #12
 800916a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800916c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800916e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009174:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009178:	ac02      	add	r4, sp, #8
 800917a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800917e:	f8d6 9018 	ldr.w	r9, [r6, #24]
 8009182:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009186:	2300      	movs	r3, #0
 8009188:	4630      	mov	r0, r6
 800918a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	f7ff ff3d 	bl	800900c <get_eit_entry>
 8009192:	2f00      	cmp	r7, #0
 8009194:	4605      	mov	r5, r0
 8009196:	bf14      	ite	ne
 8009198:	270a      	movne	r7, #10
 800919a:	2709      	moveq	r7, #9
 800919c:	b17d      	cbz	r5, 80091be <unwind_phase2_forced+0x66>
 800919e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80091a0:	f047 0110 	orr.w	r1, r7, #16
 80091a4:	e88d 0210 	stmia.w	sp, {r4, r9}
 80091a8:	4632      	mov	r2, r6
 80091aa:	6463      	str	r3, [r4, #68]	; 0x44
 80091ac:	2001      	movs	r0, #1
 80091ae:	4633      	mov	r3, r6
 80091b0:	47c0      	blx	r8
 80091b2:	bb78      	cbnz	r0, 8009214 <unwind_phase2_forced+0xbc>
 80091b4:	4628      	mov	r0, r5
 80091b6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091c0:	6173      	str	r3, [r6, #20]
 80091c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80091c6:	4621      	mov	r1, r4
 80091c8:	a87a      	add	r0, sp, #488	; 0x1e8
 80091ca:	f000 fe99 	bl	8009f00 <memcpy>
 80091ce:	6933      	ldr	r3, [r6, #16]
 80091d0:	aa7a      	add	r2, sp, #488	; 0x1e8
 80091d2:	4631      	mov	r1, r6
 80091d4:	4638      	mov	r0, r7
 80091d6:	4798      	blx	r3
 80091d8:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80091da:	4682      	mov	sl, r0
 80091dc:	e88d 0210 	stmia.w	sp, {r4, r9}
 80091e0:	4639      	mov	r1, r7
 80091e2:	6463      	str	r3, [r4, #68]	; 0x44
 80091e4:	4632      	mov	r2, r6
 80091e6:	4633      	mov	r3, r6
 80091e8:	2001      	movs	r0, #1
 80091ea:	47c0      	blx	r8
 80091ec:	b990      	cbnz	r0, 8009214 <unwind_phase2_forced+0xbc>
 80091ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80091f2:	a97a      	add	r1, sp, #488	; 0x1e8
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fe83 	bl	8009f00 <memcpy>
 80091fa:	f1ba 0f08 	cmp.w	sl, #8
 80091fe:	d106      	bne.n	800920e <unwind_phase2_forced+0xb6>
 8009200:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff ff02 	bl	800900c <get_eit_entry>
 8009208:	2709      	movs	r7, #9
 800920a:	4605      	mov	r5, r0
 800920c:	e7c6      	b.n	800919c <unwind_phase2_forced+0x44>
 800920e:	f1ba 0f07 	cmp.w	sl, #7
 8009212:	d004      	beq.n	800921e <unwind_phase2_forced+0xc6>
 8009214:	2009      	movs	r0, #9
 8009216:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800921a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921e:	4628      	mov	r0, r5
 8009220:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009222:	f7ff ff77 	bl	8009114 <_Unwind_DebugHook>
 8009226:	a803      	add	r0, sp, #12
 8009228:	f000 fb92 	bl	8009950 <__restore_core_regs>

0800922c <_Unwind_GetCFA>:
 800922c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800922e:	4770      	bx	lr

08009230 <__gnu_Unwind_RaiseException>:
 8009230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009232:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009234:	640b      	str	r3, [r1, #64]	; 0x40
 8009236:	1d0e      	adds	r6, r1, #4
 8009238:	460f      	mov	r7, r1
 800923a:	4604      	mov	r4, r0
 800923c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800923e:	b0f9      	sub	sp, #484	; 0x1e4
 8009240:	ad01      	add	r5, sp, #4
 8009242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009244:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009248:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800924a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800924c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009250:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009254:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009258:	9600      	str	r6, [sp, #0]
 800925a:	e006      	b.n	800926a <__gnu_Unwind_RaiseException+0x3a>
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	466a      	mov	r2, sp
 8009260:	4621      	mov	r1, r4
 8009262:	4798      	blx	r3
 8009264:	2808      	cmp	r0, #8
 8009266:	4605      	mov	r5, r0
 8009268:	d108      	bne.n	800927c <__gnu_Unwind_RaiseException+0x4c>
 800926a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800926c:	4620      	mov	r0, r4
 800926e:	f7ff fecd 	bl	800900c <get_eit_entry>
 8009272:	2800      	cmp	r0, #0
 8009274:	d0f2      	beq.n	800925c <__gnu_Unwind_RaiseException+0x2c>
 8009276:	2009      	movs	r0, #9
 8009278:	b079      	add	sp, #484	; 0x1e4
 800927a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800927c:	4668      	mov	r0, sp
 800927e:	f7ff ff15 	bl	80090ac <restore_non_core_regs>
 8009282:	2d06      	cmp	r5, #6
 8009284:	d1f7      	bne.n	8009276 <__gnu_Unwind_RaiseException+0x46>
 8009286:	4639      	mov	r1, r7
 8009288:	4620      	mov	r0, r4
 800928a:	f7ff ff45 	bl	8009118 <unwind_phase2>
 800928e:	bf00      	nop

08009290 <__gnu_Unwind_ForcedUnwind>:
 8009290:	b430      	push	{r4, r5}
 8009292:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8009294:	60c1      	str	r1, [r0, #12]
 8009296:	6182      	str	r2, [r0, #24]
 8009298:	4619      	mov	r1, r3
 800929a:	641d      	str	r5, [r3, #64]	; 0x40
 800929c:	2200      	movs	r2, #0
 800929e:	bc30      	pop	{r4, r5}
 80092a0:	e75a      	b.n	8009158 <unwind_phase2_forced>
 80092a2:	bf00      	nop

080092a4 <__gnu_Unwind_Resume>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	68c6      	ldr	r6, [r0, #12]
 80092a8:	6943      	ldr	r3, [r0, #20]
 80092aa:	640b      	str	r3, [r1, #64]	; 0x40
 80092ac:	b126      	cbz	r6, 80092b8 <__gnu_Unwind_Resume+0x14>
 80092ae:	2201      	movs	r2, #1
 80092b0:	f7ff ff52 	bl	8009158 <unwind_phase2_forced>
 80092b4:	f007 fb2c 	bl	8010910 <abort>
 80092b8:	6903      	ldr	r3, [r0, #16]
 80092ba:	460a      	mov	r2, r1
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	4601      	mov	r1, r0
 80092c2:	2002      	movs	r0, #2
 80092c4:	4798      	blx	r3
 80092c6:	2807      	cmp	r0, #7
 80092c8:	d007      	beq.n	80092da <__gnu_Unwind_Resume+0x36>
 80092ca:	2808      	cmp	r0, #8
 80092cc:	d103      	bne.n	80092d6 <__gnu_Unwind_Resume+0x32>
 80092ce:	4629      	mov	r1, r5
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7ff ff21 	bl	8009118 <unwind_phase2>
 80092d6:	f007 fb1b 	bl	8010910 <abort>
 80092da:	4630      	mov	r0, r6
 80092dc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80092de:	f7ff ff19 	bl	8009114 <_Unwind_DebugHook>
 80092e2:	1d28      	adds	r0, r5, #4
 80092e4:	f000 fb34 	bl	8009950 <__restore_core_regs>

080092e8 <__gnu_Unwind_Resume_or_Rethrow>:
 80092e8:	68c2      	ldr	r2, [r0, #12]
 80092ea:	b11a      	cbz	r2, 80092f4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80092ec:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80092ee:	640a      	str	r2, [r1, #64]	; 0x40
 80092f0:	2200      	movs	r2, #0
 80092f2:	e731      	b.n	8009158 <unwind_phase2_forced>
 80092f4:	e79c      	b.n	8009230 <__gnu_Unwind_RaiseException>
 80092f6:	bf00      	nop

080092f8 <_Unwind_Complete>:
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop

080092fc <_Unwind_DeleteException>:
 80092fc:	6883      	ldr	r3, [r0, #8]
 80092fe:	b113      	cbz	r3, 8009306 <_Unwind_DeleteException+0xa>
 8009300:	4601      	mov	r1, r0
 8009302:	2001      	movs	r0, #1
 8009304:	4718      	bx	r3
 8009306:	4770      	bx	lr

08009308 <_Unwind_VRS_Get>:
 8009308:	b500      	push	{lr}
 800930a:	2904      	cmp	r1, #4
 800930c:	d807      	bhi.n	800931e <_Unwind_VRS_Get+0x16>
 800930e:	e8df f001 	tbb	[pc, r1]
 8009312:	0903      	.short	0x0903
 8009314:	0906      	.short	0x0906
 8009316:	09          	.byte	0x09
 8009317:	00          	.byte	0x00
 8009318:	b90b      	cbnz	r3, 800931e <_Unwind_VRS_Get+0x16>
 800931a:	2a0f      	cmp	r2, #15
 800931c:	d905      	bls.n	800932a <_Unwind_VRS_Get+0x22>
 800931e:	2002      	movs	r0, #2
 8009320:	f85d fb04 	ldr.w	pc, [sp], #4
 8009324:	2001      	movs	r0, #1
 8009326:	f85d fb04 	ldr.w	pc, [sp], #4
 800932a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800932e:	4618      	mov	r0, r3
 8009330:	6853      	ldr	r3, [r2, #4]
 8009332:	9a01      	ldr	r2, [sp, #4]
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	f85d fb04 	ldr.w	pc, [sp], #4
 800933a:	bf00      	nop

0800933c <_Unwind_GetGR>:
 800933c:	b510      	push	{r4, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	2300      	movs	r3, #0
 8009342:	ac03      	add	r4, sp, #12
 8009344:	460a      	mov	r2, r1
 8009346:	9400      	str	r4, [sp, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	f7ff ffdd 	bl	8009308 <_Unwind_VRS_Get>
 800934e:	9803      	ldr	r0, [sp, #12]
 8009350:	b004      	add	sp, #16
 8009352:	bd10      	pop	{r4, pc}

08009354 <_Unwind_VRS_Set>:
 8009354:	b500      	push	{lr}
 8009356:	2904      	cmp	r1, #4
 8009358:	d807      	bhi.n	800936a <_Unwind_VRS_Set+0x16>
 800935a:	e8df f001 	tbb	[pc, r1]
 800935e:	0903      	.short	0x0903
 8009360:	0906      	.short	0x0906
 8009362:	09          	.byte	0x09
 8009363:	00          	.byte	0x00
 8009364:	b90b      	cbnz	r3, 800936a <_Unwind_VRS_Set+0x16>
 8009366:	2a0f      	cmp	r2, #15
 8009368:	d905      	bls.n	8009376 <_Unwind_VRS_Set+0x22>
 800936a:	2002      	movs	r0, #2
 800936c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009370:	2001      	movs	r0, #1
 8009372:	f85d fb04 	ldr.w	pc, [sp], #4
 8009376:	9901      	ldr	r1, [sp, #4]
 8009378:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800937c:	6809      	ldr	r1, [r1, #0]
 800937e:	6051      	str	r1, [r2, #4]
 8009380:	4618      	mov	r0, r3
 8009382:	f85d fb04 	ldr.w	pc, [sp], #4
 8009386:	bf00      	nop

08009388 <_Unwind_SetGR>:
 8009388:	b510      	push	{r4, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	ac04      	add	r4, sp, #16
 800938e:	2300      	movs	r3, #0
 8009390:	f844 2d04 	str.w	r2, [r4, #-4]!
 8009394:	460a      	mov	r2, r1
 8009396:	9400      	str	r4, [sp, #0]
 8009398:	4619      	mov	r1, r3
 800939a:	f7ff ffdb 	bl	8009354 <_Unwind_VRS_Set>
 800939e:	b004      	add	sp, #16
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	bf00      	nop

080093a4 <__gnu_Unwind_Backtrace>:
 80093a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80093a8:	6413      	str	r3, [r2, #64]	; 0x40
 80093aa:	1d15      	adds	r5, r2, #4
 80093ac:	4607      	mov	r7, r0
 80093ae:	460e      	mov	r6, r1
 80093b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093b2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80093b6:	ac17      	add	r4, sp, #92	; 0x5c
 80093b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80093c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80093ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80093ce:	9516      	str	r5, [sp, #88]	; 0x58
 80093d0:	e010      	b.n	80093f4 <__gnu_Unwind_Backtrace+0x50>
 80093d2:	a816      	add	r0, sp, #88	; 0x58
 80093d4:	f7ff ffd8 	bl	8009388 <_Unwind_SetGR>
 80093d8:	4631      	mov	r1, r6
 80093da:	a816      	add	r0, sp, #88	; 0x58
 80093dc:	47b8      	blx	r7
 80093de:	aa16      	add	r2, sp, #88	; 0x58
 80093e0:	4669      	mov	r1, sp
 80093e2:	b978      	cbnz	r0, 8009404 <__gnu_Unwind_Backtrace+0x60>
 80093e4:	9b04      	ldr	r3, [sp, #16]
 80093e6:	2008      	movs	r0, #8
 80093e8:	4798      	blx	r3
 80093ea:	2805      	cmp	r0, #5
 80093ec:	4604      	mov	r4, r0
 80093ee:	d00a      	beq.n	8009406 <__gnu_Unwind_Backtrace+0x62>
 80093f0:	2809      	cmp	r0, #9
 80093f2:	d007      	beq.n	8009404 <__gnu_Unwind_Backtrace+0x60>
 80093f4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80093f6:	4668      	mov	r0, sp
 80093f8:	f7ff fe08 	bl	800900c <get_eit_entry>
 80093fc:	466a      	mov	r2, sp
 80093fe:	210c      	movs	r1, #12
 8009400:	2800      	cmp	r0, #0
 8009402:	d0e6      	beq.n	80093d2 <__gnu_Unwind_Backtrace+0x2e>
 8009404:	2409      	movs	r4, #9
 8009406:	a816      	add	r0, sp, #88	; 0x58
 8009408:	f7ff fe50 	bl	80090ac <restore_non_core_regs>
 800940c:	4620      	mov	r0, r4
 800940e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8009412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009414 <__gnu_unwind_pr_common>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	460d      	mov	r5, r1
 800941a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800941c:	b08b      	sub	sp, #44	; 0x2c
 800941e:	1d0c      	adds	r4, r1, #4
 8009420:	6809      	ldr	r1, [r1, #0]
 8009422:	9107      	str	r1, [sp, #28]
 8009424:	4691      	mov	r9, r2
 8009426:	9408      	str	r4, [sp, #32]
 8009428:	f000 0b03 	and.w	fp, r0, #3
 800942c:	461e      	mov	r6, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d164      	bne.n	80094fc <__gnu_unwind_pr_common+0xe8>
 8009432:	0209      	lsls	r1, r1, #8
 8009434:	2303      	movs	r3, #3
 8009436:	9107      	str	r1, [sp, #28]
 8009438:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800943c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009440:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009442:	f1bb 0f02 	cmp.w	fp, #2
 8009446:	bf08      	it	eq
 8009448:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800944a:	f013 0301 	ands.w	r3, r3, #1
 800944e:	d143      	bne.n	80094d8 <__gnu_unwind_pr_common+0xc4>
 8009450:	f000 0008 	and.w	r0, r0, #8
 8009454:	b2c2      	uxtb	r2, r0
 8009456:	9203      	str	r2, [sp, #12]
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	6827      	ldr	r7, [r4, #0]
 800945c:	2f00      	cmp	r7, #0
 800945e:	d03d      	beq.n	80094dc <__gnu_unwind_pr_common+0xc8>
 8009460:	2e02      	cmp	r6, #2
 8009462:	d047      	beq.n	80094f4 <__gnu_unwind_pr_common+0xe0>
 8009464:	8827      	ldrh	r7, [r4, #0]
 8009466:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 800946a:	3404      	adds	r4, #4
 800946c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800946e:	f028 0a01 	bic.w	sl, r8, #1
 8009472:	210f      	movs	r1, #15
 8009474:	4648      	mov	r0, r9
 8009476:	449a      	add	sl, r3
 8009478:	f7ff ff60 	bl	800933c <_Unwind_GetGR>
 800947c:	4582      	cmp	sl, r0
 800947e:	d837      	bhi.n	80094f0 <__gnu_unwind_pr_common+0xdc>
 8009480:	f027 0301 	bic.w	r3, r7, #1
 8009484:	449a      	add	sl, r3
 8009486:	4550      	cmp	r0, sl
 8009488:	bf2c      	ite	cs
 800948a:	2000      	movcs	r0, #0
 800948c:	2001      	movcc	r0, #1
 800948e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009492:	f008 0802 	and.w	r8, r8, #2
 8009496:	f007 0701 	and.w	r7, r7, #1
 800949a:	ea48 0807 	orr.w	r8, r8, r7
 800949e:	f1b8 0f01 	cmp.w	r8, #1
 80094a2:	d041      	beq.n	8009528 <__gnu_unwind_pr_common+0x114>
 80094a4:	d338      	bcc.n	8009518 <__gnu_unwind_pr_common+0x104>
 80094a6:	f1b8 0f02 	cmp.w	r8, #2
 80094aa:	d11d      	bne.n	80094e8 <__gnu_unwind_pr_common+0xd4>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094b2:	9202      	str	r2, [sp, #8]
 80094b4:	f1bb 0f00 	cmp.w	fp, #0
 80094b8:	d179      	bne.n	80095ae <__gnu_unwind_pr_common+0x19a>
 80094ba:	b130      	cbz	r0, 80094ca <__gnu_unwind_pr_common+0xb6>
 80094bc:	9903      	ldr	r1, [sp, #12]
 80094be:	2900      	cmp	r1, #0
 80094c0:	f000 8081 	beq.w	80095c6 <__gnu_unwind_pr_common+0x1b2>
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	f000 80a8 	beq.w	800961a <__gnu_unwind_pr_common+0x206>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	db79      	blt.n	80095c2 <__gnu_unwind_pr_common+0x1ae>
 80094ce:	9b02      	ldr	r3, [sp, #8]
 80094d0:	3301      	adds	r3, #1
 80094d2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80094d6:	e7c0      	b.n	800945a <__gnu_unwind_pr_common+0x46>
 80094d8:	2300      	movs	r3, #0
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	2e02      	cmp	r6, #2
 80094de:	dd40      	ble.n	8009562 <__gnu_unwind_pr_common+0x14e>
 80094e0:	f7ff fe16 	bl	8009110 <__gnu_unwind_24bit.isra.1>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d042      	beq.n	800956e <__gnu_unwind_pr_common+0x15a>
 80094e8:	2009      	movs	r0, #9
 80094ea:	b00b      	add	sp, #44	; 0x2c
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7cc      	b.n	800948e <__gnu_unwind_pr_common+0x7a>
 80094f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80094f8:	3408      	adds	r4, #8
 80094fa:	e7b7      	b.n	800946c <__gnu_unwind_pr_common+0x58>
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	dc9f      	bgt.n	8009440 <__gnu_unwind_pr_common+0x2c>
 8009500:	0c0b      	lsrs	r3, r1, #16
 8009502:	b2da      	uxtb	r2, r3
 8009504:	0409      	lsls	r1, r1, #16
 8009506:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800950a:	2302      	movs	r3, #2
 800950c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009510:	9107      	str	r1, [sp, #28]
 8009512:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009516:	e793      	b.n	8009440 <__gnu_unwind_pr_common+0x2c>
 8009518:	f1bb 0f00 	cmp.w	fp, #0
 800951c:	d002      	beq.n	8009524 <__gnu_unwind_pr_common+0x110>
 800951e:	2800      	cmp	r0, #0
 8009520:	f040 80b0 	bne.w	8009684 <__gnu_unwind_pr_common+0x270>
 8009524:	3404      	adds	r4, #4
 8009526:	e798      	b.n	800945a <__gnu_unwind_pr_common+0x46>
 8009528:	f1bb 0f00 	cmp.w	fp, #0
 800952c:	d126      	bne.n	800957c <__gnu_unwind_pr_common+0x168>
 800952e:	b1b0      	cbz	r0, 800955e <__gnu_unwind_pr_common+0x14a>
 8009530:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009534:	1c99      	adds	r1, r3, #2
 8009536:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800953a:	d0d5      	beq.n	80094e8 <__gnu_unwind_pr_common+0xd4>
 800953c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8009540:	3301      	adds	r3, #1
 8009542:	9106      	str	r1, [sp, #24]
 8009544:	f000 8094 	beq.w	8009670 <__gnu_unwind_pr_common+0x25c>
 8009548:	1d20      	adds	r0, r4, #4
 800954a:	f7ff fddb 	bl	8009104 <_Unwind_decode_typeinfo_ptr.isra.0>
 800954e:	ab06      	add	r3, sp, #24
 8009550:	4601      	mov	r1, r0
 8009552:	4628      	mov	r0, r5
 8009554:	f005 fd64 	bl	800f020 <__cxa_type_match>
 8009558:	2800      	cmp	r0, #0
 800955a:	f040 80b8 	bne.w	80096ce <__gnu_unwind_pr_common+0x2ba>
 800955e:	3408      	adds	r4, #8
 8009560:	e77b      	b.n	800945a <__gnu_unwind_pr_common+0x46>
 8009562:	a907      	add	r1, sp, #28
 8009564:	4648      	mov	r0, r9
 8009566:	f000 faf7 	bl	8009b58 <__gnu_unwind_execute>
 800956a:	2800      	cmp	r0, #0
 800956c:	d1bc      	bne.n	80094e8 <__gnu_unwind_pr_common+0xd4>
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d15c      	bne.n	800962e <__gnu_unwind_pr_common+0x21a>
 8009574:	2008      	movs	r0, #8
 8009576:	b00b      	add	sp, #44	; 0x2c
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	210d      	movs	r1, #13
 800957e:	4648      	mov	r0, r9
 8009580:	6a2f      	ldr	r7, [r5, #32]
 8009582:	f7ff fedb 	bl	800933c <_Unwind_GetGR>
 8009586:	4287      	cmp	r7, r0
 8009588:	d1e9      	bne.n	800955e <__gnu_unwind_pr_common+0x14a>
 800958a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800958c:	429c      	cmp	r4, r3
 800958e:	d1e6      	bne.n	800955e <__gnu_unwind_pr_common+0x14a>
 8009590:	4620      	mov	r0, r4
 8009592:	f7ff fced 	bl	8008f70 <selfrel_offset31>
 8009596:	210f      	movs	r1, #15
 8009598:	4602      	mov	r2, r0
 800959a:	4648      	mov	r0, r9
 800959c:	f7ff fef4 	bl	8009388 <_Unwind_SetGR>
 80095a0:	4648      	mov	r0, r9
 80095a2:	462a      	mov	r2, r5
 80095a4:	2100      	movs	r1, #0
 80095a6:	f7ff feef 	bl	8009388 <_Unwind_SetGR>
 80095aa:	2007      	movs	r0, #7
 80095ac:	e79d      	b.n	80094ea <__gnu_unwind_pr_common+0xd6>
 80095ae:	210d      	movs	r1, #13
 80095b0:	4648      	mov	r0, r9
 80095b2:	6a2f      	ldr	r7, [r5, #32]
 80095b4:	f7ff fec2 	bl	800933c <_Unwind_GetGR>
 80095b8:	4287      	cmp	r7, r0
 80095ba:	d048      	beq.n	800964e <__gnu_unwind_pr_common+0x23a>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	da85      	bge.n	80094ce <__gnu_unwind_pr_common+0xba>
 80095c2:	3404      	adds	r4, #4
 80095c4:	e783      	b.n	80094ce <__gnu_unwind_pr_common+0xba>
 80095c6:	9b02      	ldr	r3, [sp, #8]
 80095c8:	b33b      	cbz	r3, 800961a <__gnu_unwind_pr_common+0x206>
 80095ca:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80095ce:	1d27      	adds	r7, r4, #4
 80095d0:	f8cd b010 	str.w	fp, [sp, #16]
 80095d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80095d8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80095dc:	9605      	str	r6, [sp, #20]
 80095de:	46a3      	mov	fp, r4
 80095e0:	461c      	mov	r4, r3
 80095e2:	e002      	b.n	80095ea <__gnu_unwind_pr_common+0x1d6>
 80095e4:	45b2      	cmp	sl, r6
 80095e6:	46b0      	mov	r8, r6
 80095e8:	d016      	beq.n	8009618 <__gnu_unwind_pr_common+0x204>
 80095ea:	4638      	mov	r0, r7
 80095ec:	9406      	str	r4, [sp, #24]
 80095ee:	f7ff fd89 	bl	8009104 <_Unwind_decode_typeinfo_ptr.isra.0>
 80095f2:	ab06      	add	r3, sp, #24
 80095f4:	4601      	mov	r1, r0
 80095f6:	2200      	movs	r2, #0
 80095f8:	4628      	mov	r0, r5
 80095fa:	f005 fd11 	bl	800f020 <__cxa_type_match>
 80095fe:	f108 0601 	add.w	r6, r8, #1
 8009602:	3704      	adds	r7, #4
 8009604:	2800      	cmp	r0, #0
 8009606:	d0ed      	beq.n	80095e4 <__gnu_unwind_pr_common+0x1d0>
 8009608:	9b02      	ldr	r3, [sp, #8]
 800960a:	9e05      	ldr	r6, [sp, #20]
 800960c:	4543      	cmp	r3, r8
 800960e:	465c      	mov	r4, fp
 8009610:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009614:	d1d2      	bne.n	80095bc <__gnu_unwind_pr_common+0x1a8>
 8009616:	e000      	b.n	800961a <__gnu_unwind_pr_common+0x206>
 8009618:	465c      	mov	r4, fp
 800961a:	4648      	mov	r0, r9
 800961c:	210d      	movs	r1, #13
 800961e:	f7ff fe8d 	bl	800933c <_Unwind_GetGR>
 8009622:	9b06      	ldr	r3, [sp, #24]
 8009624:	6228      	str	r0, [r5, #32]
 8009626:	62ac      	str	r4, [r5, #40]	; 0x28
 8009628:	626b      	str	r3, [r5, #36]	; 0x24
 800962a:	2006      	movs	r0, #6
 800962c:	e75d      	b.n	80094ea <__gnu_unwind_pr_common+0xd6>
 800962e:	210f      	movs	r1, #15
 8009630:	4648      	mov	r0, r9
 8009632:	f7ff fe83 	bl	800933c <_Unwind_GetGR>
 8009636:	210e      	movs	r1, #14
 8009638:	4602      	mov	r2, r0
 800963a:	4648      	mov	r0, r9
 800963c:	f7ff fea4 	bl	8009388 <_Unwind_SetGR>
 8009640:	4648      	mov	r0, r9
 8009642:	4a2a      	ldr	r2, [pc, #168]	; (80096ec <__gnu_unwind_pr_common+0x2d8>)
 8009644:	210f      	movs	r1, #15
 8009646:	f7ff fe9f 	bl	8009388 <_Unwind_SetGR>
 800964a:	2007      	movs	r0, #7
 800964c:	e74d      	b.n	80094ea <__gnu_unwind_pr_common+0xd6>
 800964e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009650:	429c      	cmp	r4, r3
 8009652:	d1b3      	bne.n	80095bc <__gnu_unwind_pr_common+0x1a8>
 8009654:	2204      	movs	r2, #4
 8009656:	2700      	movs	r7, #0
 8009658:	18a3      	adds	r3, r4, r2
 800965a:	9902      	ldr	r1, [sp, #8]
 800965c:	62a9      	str	r1, [r5, #40]	; 0x28
 800965e:	62ef      	str	r7, [r5, #44]	; 0x2c
 8009660:	632a      	str	r2, [r5, #48]	; 0x30
 8009662:	636b      	str	r3, [r5, #52]	; 0x34
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	42bb      	cmp	r3, r7
 8009668:	db1f      	blt.n	80096aa <__gnu_unwind_pr_common+0x296>
 800966a:	2301      	movs	r3, #1
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	e72e      	b.n	80094ce <__gnu_unwind_pr_common+0xba>
 8009670:	4648      	mov	r0, r9
 8009672:	210d      	movs	r1, #13
 8009674:	f7ff fe62 	bl	800933c <_Unwind_GetGR>
 8009678:	6228      	str	r0, [r5, #32]
 800967a:	9b06      	ldr	r3, [sp, #24]
 800967c:	626b      	str	r3, [r5, #36]	; 0x24
 800967e:	62ac      	str	r4, [r5, #40]	; 0x28
 8009680:	2006      	movs	r0, #6
 8009682:	e732      	b.n	80094ea <__gnu_unwind_pr_common+0xd6>
 8009684:	4620      	mov	r0, r4
 8009686:	f7ff fc73 	bl	8008f70 <selfrel_offset31>
 800968a:	3404      	adds	r4, #4
 800968c:	4606      	mov	r6, r0
 800968e:	63ac      	str	r4, [r5, #56]	; 0x38
 8009690:	4628      	mov	r0, r5
 8009692:	f005 fd1d 	bl	800f0d0 <__cxa_begin_cleanup>
 8009696:	2800      	cmp	r0, #0
 8009698:	f43f af26 	beq.w	80094e8 <__gnu_unwind_pr_common+0xd4>
 800969c:	4648      	mov	r0, r9
 800969e:	4632      	mov	r2, r6
 80096a0:	210f      	movs	r1, #15
 80096a2:	f7ff fe71 	bl	8009388 <_Unwind_SetGR>
 80096a6:	2007      	movs	r0, #7
 80096a8:	e71f      	b.n	80094ea <__gnu_unwind_pr_common+0xd6>
 80096aa:	4608      	mov	r0, r1
 80096ac:	3001      	adds	r0, #1
 80096ae:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80096b2:	f7ff fc5d 	bl	8008f70 <selfrel_offset31>
 80096b6:	210f      	movs	r1, #15
 80096b8:	4602      	mov	r2, r0
 80096ba:	4648      	mov	r0, r9
 80096bc:	f7ff fe64 	bl	8009388 <_Unwind_SetGR>
 80096c0:	4648      	mov	r0, r9
 80096c2:	462a      	mov	r2, r5
 80096c4:	4639      	mov	r1, r7
 80096c6:	f7ff fe5f 	bl	8009388 <_Unwind_SetGR>
 80096ca:	2007      	movs	r0, #7
 80096cc:	e70d      	b.n	80094ea <__gnu_unwind_pr_common+0xd6>
 80096ce:	4607      	mov	r7, r0
 80096d0:	210d      	movs	r1, #13
 80096d2:	4648      	mov	r0, r9
 80096d4:	f7ff fe32 	bl	800933c <_Unwind_GetGR>
 80096d8:	2f02      	cmp	r7, #2
 80096da:	6228      	str	r0, [r5, #32]
 80096dc:	d1cd      	bne.n	800967a <__gnu_unwind_pr_common+0x266>
 80096de:	462b      	mov	r3, r5
 80096e0:	9a06      	ldr	r2, [sp, #24]
 80096e2:	f843 2f2c 	str.w	r2, [r3, #44]!
 80096e6:	626b      	str	r3, [r5, #36]	; 0x24
 80096e8:	e7c9      	b.n	800967e <__gnu_unwind_pr_common+0x26a>
 80096ea:	bf00      	nop
 80096ec:	0800f211 	.word	0x0800f211

080096f0 <__aeabi_unwind_cpp_pr0>:
 80096f0:	2300      	movs	r3, #0
 80096f2:	e68f      	b.n	8009414 <__gnu_unwind_pr_common>

080096f4 <__aeabi_unwind_cpp_pr1>:
 80096f4:	2301      	movs	r3, #1
 80096f6:	e68d      	b.n	8009414 <__gnu_unwind_pr_common>

080096f8 <__aeabi_unwind_cpp_pr2>:
 80096f8:	2302      	movs	r3, #2
 80096fa:	e68b      	b.n	8009414 <__gnu_unwind_pr_common>

080096fc <_Unwind_VRS_Pop>:
 80096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fe:	4604      	mov	r4, r0
 8009700:	b0c5      	sub	sp, #276	; 0x114
 8009702:	2904      	cmp	r1, #4
 8009704:	d80d      	bhi.n	8009722 <_Unwind_VRS_Pop+0x26>
 8009706:	e8df f001 	tbb	[pc, r1]
 800970a:	0357      	.short	0x0357
 800970c:	310c      	.short	0x310c
 800970e:	0f          	.byte	0x0f
 800970f:	00          	.byte	0x00
 8009710:	2b01      	cmp	r3, #1
 8009712:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8009716:	b295      	uxth	r5, r2
 8009718:	d166      	bne.n	80097e8 <_Unwind_VRS_Pop+0xec>
 800971a:	1972      	adds	r2, r6, r5
 800971c:	2a10      	cmp	r2, #16
 800971e:	f240 809f 	bls.w	8009860 <_Unwind_VRS_Pop+0x164>
 8009722:	2002      	movs	r0, #2
 8009724:	b045      	add	sp, #276	; 0x114
 8009726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1fa      	bne.n	8009722 <_Unwind_VRS_Pop+0x26>
 800972c:	2a10      	cmp	r2, #16
 800972e:	d8f8      	bhi.n	8009722 <_Unwind_VRS_Pop+0x26>
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	06d8      	lsls	r0, r3, #27
 8009734:	f100 80c9 	bmi.w	80098ca <_Unwind_VRS_Pop+0x1ce>
 8009738:	ae22      	add	r6, sp, #136	; 0x88
 800973a:	4630      	mov	r0, r6
 800973c:	9201      	str	r2, [sp, #4]
 800973e:	f000 f979 	bl	8009a34 <__gnu_Unwind_Save_WMMXC>
 8009742:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009744:	9a01      	ldr	r2, [sp, #4]
 8009746:	2300      	movs	r3, #0
 8009748:	2501      	movs	r5, #1
 800974a:	fa05 f103 	lsl.w	r1, r5, r3
 800974e:	4211      	tst	r1, r2
 8009750:	d003      	beq.n	800975a <_Unwind_VRS_Pop+0x5e>
 8009752:	6801      	ldr	r1, [r0, #0]
 8009754:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8009758:	3004      	adds	r0, #4
 800975a:	3301      	adds	r3, #1
 800975c:	2b04      	cmp	r3, #4
 800975e:	d1f4      	bne.n	800974a <_Unwind_VRS_Pop+0x4e>
 8009760:	63a0      	str	r0, [r4, #56]	; 0x38
 8009762:	4630      	mov	r0, r6
 8009764:	f000 f95c 	bl	8009a20 <__gnu_Unwind_Restore_WMMXC>
 8009768:	2000      	movs	r0, #0
 800976a:	e7db      	b.n	8009724 <_Unwind_VRS_Pop+0x28>
 800976c:	2b03      	cmp	r3, #3
 800976e:	d1d8      	bne.n	8009722 <_Unwind_VRS_Pop+0x26>
 8009770:	0c15      	lsrs	r5, r2, #16
 8009772:	b297      	uxth	r7, r2
 8009774:	19eb      	adds	r3, r5, r7
 8009776:	2b10      	cmp	r3, #16
 8009778:	d8d3      	bhi.n	8009722 <_Unwind_VRS_Pop+0x26>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	071e      	lsls	r6, r3, #28
 800977e:	f100 80b8 	bmi.w	80098f2 <_Unwind_VRS_Pop+0x1f6>
 8009782:	ae22      	add	r6, sp, #136	; 0x88
 8009784:	4630      	mov	r0, r6
 8009786:	007f      	lsls	r7, r7, #1
 8009788:	f000 f928 	bl	80099dc <__gnu_Unwind_Save_WMMXD>
 800978c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8009790:	1e7b      	subs	r3, r7, #1
 8009792:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009794:	b157      	cbz	r7, 80097ac <_Unwind_VRS_Pop+0xb0>
 8009796:	3a04      	subs	r2, #4
 8009798:	4629      	mov	r1, r5
 800979a:	f851 0b04 	ldr.w	r0, [r1], #4
 800979e:	f842 0f04 	str.w	r0, [r2, #4]!
 80097a2:	3b01      	subs	r3, #1
 80097a4:	1c58      	adds	r0, r3, #1
 80097a6:	d1f8      	bne.n	800979a <_Unwind_VRS_Pop+0x9e>
 80097a8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80097ac:	4630      	mov	r0, r6
 80097ae:	63a5      	str	r5, [r4, #56]	; 0x38
 80097b0:	f000 f8f2 	bl	8009998 <__gnu_Unwind_Restore_WMMXD>
 80097b4:	2000      	movs	r0, #0
 80097b6:	e7b5      	b.n	8009724 <_Unwind_VRS_Pop+0x28>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1b2      	bne.n	8009722 <_Unwind_VRS_Pop+0x26>
 80097bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80097be:	b297      	uxth	r7, r2
 80097c0:	1d20      	adds	r0, r4, #4
 80097c2:	2601      	movs	r6, #1
 80097c4:	fa06 f103 	lsl.w	r1, r6, r3
 80097c8:	4239      	tst	r1, r7
 80097ca:	f103 0301 	add.w	r3, r3, #1
 80097ce:	d002      	beq.n	80097d6 <_Unwind_VRS_Pop+0xda>
 80097d0:	6829      	ldr	r1, [r5, #0]
 80097d2:	6001      	str	r1, [r0, #0]
 80097d4:	3504      	adds	r5, #4
 80097d6:	2b10      	cmp	r3, #16
 80097d8:	f100 0004 	add.w	r0, r0, #4
 80097dc:	d1f2      	bne.n	80097c4 <_Unwind_VRS_Pop+0xc8>
 80097de:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80097e2:	d13b      	bne.n	800985c <_Unwind_VRS_Pop+0x160>
 80097e4:	63a5      	str	r5, [r4, #56]	; 0x38
 80097e6:	e79d      	b.n	8009724 <_Unwind_VRS_Pop+0x28>
 80097e8:	2b05      	cmp	r3, #5
 80097ea:	d19a      	bne.n	8009722 <_Unwind_VRS_Pop+0x26>
 80097ec:	1977      	adds	r7, r6, r5
 80097ee:	2f20      	cmp	r7, #32
 80097f0:	d897      	bhi.n	8009722 <_Unwind_VRS_Pop+0x26>
 80097f2:	2e0f      	cmp	r6, #15
 80097f4:	d965      	bls.n	80098c2 <_Unwind_VRS_Pop+0x1c6>
 80097f6:	462f      	mov	r7, r5
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	d148      	bne.n	800988e <_Unwind_VRS_Pop+0x192>
 80097fc:	462a      	mov	r2, r5
 80097fe:	2700      	movs	r7, #0
 8009800:	2a00      	cmp	r2, #0
 8009802:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009804:	dd71      	ble.n	80098ea <_Unwind_VRS_Pop+0x1ee>
 8009806:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800980a:	4601      	mov	r1, r0
 800980c:	a844      	add	r0, sp, #272	; 0x110
 800980e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8009812:	388c      	subs	r0, #140	; 0x8c
 8009814:	f851 5b04 	ldr.w	r5, [r1], #4
 8009818:	f840 5f04 	str.w	r5, [r0, #4]!
 800981c:	4291      	cmp	r1, r2
 800981e:	d1f9      	bne.n	8009814 <_Unwind_VRS_Pop+0x118>
 8009820:	4608      	mov	r0, r1
 8009822:	b197      	cbz	r7, 800984a <_Unwind_VRS_Pop+0x14e>
 8009824:	2e10      	cmp	r6, #16
 8009826:	4632      	mov	r2, r6
 8009828:	a944      	add	r1, sp, #272	; 0x110
 800982a:	bf38      	it	cc
 800982c:	2210      	movcc	r2, #16
 800982e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009832:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8009836:	0079      	lsls	r1, r7, #1
 8009838:	3a04      	subs	r2, #4
 800983a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800983e:	f850 5b04 	ldr.w	r5, [r0], #4
 8009842:	f842 5f04 	str.w	r5, [r2, #4]!
 8009846:	4281      	cmp	r1, r0
 8009848:	d1f9      	bne.n	800983e <_Unwind_VRS_Pop+0x142>
 800984a:	2b01      	cmp	r3, #1
 800984c:	d047      	beq.n	80098de <_Unwind_VRS_Pop+0x1e2>
 800984e:	2e0f      	cmp	r6, #15
 8009850:	63a1      	str	r1, [r4, #56]	; 0x38
 8009852:	d932      	bls.n	80098ba <_Unwind_VRS_Pop+0x1be>
 8009854:	b117      	cbz	r7, 800985c <_Unwind_VRS_Pop+0x160>
 8009856:	a802      	add	r0, sp, #8
 8009858:	f000 f896 	bl	8009988 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800985c:	2000      	movs	r0, #0
 800985e:	e761      	b.n	8009724 <_Unwind_VRS_Pop+0x28>
 8009860:	2e0f      	cmp	r6, #15
 8009862:	f63f af5e 	bhi.w	8009722 <_Unwind_VRS_Pop+0x26>
 8009866:	2700      	movs	r7, #0
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	07d1      	lsls	r1, r2, #31
 800986c:	d50d      	bpl.n	800988a <_Unwind_VRS_Pop+0x18e>
 800986e:	f022 0101 	bic.w	r1, r2, #1
 8009872:	2b05      	cmp	r3, #5
 8009874:	6021      	str	r1, [r4, #0]
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	4620      	mov	r0, r4
 800987a:	d052      	beq.n	8009922 <_Unwind_VRS_Pop+0x226>
 800987c:	f022 0203 	bic.w	r2, r2, #3
 8009880:	f840 2b48 	str.w	r2, [r0], #72
 8009884:	f000 f874 	bl	8009970 <__gnu_Unwind_Save_VFP>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	2f00      	cmp	r7, #0
 800988c:	d051      	beq.n	8009932 <_Unwind_VRS_Pop+0x236>
 800988e:	6822      	ldr	r2, [r4, #0]
 8009890:	0751      	lsls	r1, r2, #29
 8009892:	d436      	bmi.n	8009902 <_Unwind_VRS_Pop+0x206>
 8009894:	2b01      	cmp	r3, #1
 8009896:	d03e      	beq.n	8009916 <_Unwind_VRS_Pop+0x21a>
 8009898:	2e0f      	cmp	r6, #15
 800989a:	d806      	bhi.n	80098aa <_Unwind_VRS_Pop+0x1ae>
 800989c:	a822      	add	r0, sp, #136	; 0x88
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	f000 f86e 	bl	8009980 <__gnu_Unwind_Save_VFP_D>
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	2f00      	cmp	r7, #0
 80098a8:	d0a8      	beq.n	80097fc <_Unwind_VRS_Pop+0x100>
 80098aa:	a802      	add	r0, sp, #8
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	f000 f86f 	bl	8009990 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	f1c6 0210 	rsb	r2, r6, #16
 80098b8:	e7a2      	b.n	8009800 <_Unwind_VRS_Pop+0x104>
 80098ba:	a822      	add	r0, sp, #136	; 0x88
 80098bc:	f000 f85c 	bl	8009978 <__gnu_Unwind_Restore_VFP_D>
 80098c0:	e7c8      	b.n	8009854 <_Unwind_VRS_Pop+0x158>
 80098c2:	2f10      	cmp	r7, #16
 80098c4:	d9cf      	bls.n	8009866 <_Unwind_VRS_Pop+0x16a>
 80098c6:	3f10      	subs	r7, #16
 80098c8:	e7ce      	b.n	8009868 <_Unwind_VRS_Pop+0x16c>
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80098d4:	9201      	str	r2, [sp, #4]
 80098d6:	f000 f8ad 	bl	8009a34 <__gnu_Unwind_Save_WMMXC>
 80098da:	9a01      	ldr	r2, [sp, #4]
 80098dc:	e72c      	b.n	8009738 <_Unwind_VRS_Pop+0x3c>
 80098de:	3104      	adds	r1, #4
 80098e0:	63a1      	str	r1, [r4, #56]	; 0x38
 80098e2:	a822      	add	r0, sp, #136	; 0x88
 80098e4:	f000 f840 	bl	8009968 <__gnu_Unwind_Restore_VFP>
 80098e8:	e7b8      	b.n	800985c <_Unwind_VRS_Pop+0x160>
 80098ea:	2f00      	cmp	r7, #0
 80098ec:	d19a      	bne.n	8009824 <_Unwind_VRS_Pop+0x128>
 80098ee:	4601      	mov	r1, r0
 80098f0:	e7ab      	b.n	800984a <_Unwind_VRS_Pop+0x14e>
 80098f2:	f023 0308 	bic.w	r3, r3, #8
 80098f6:	6023      	str	r3, [r4, #0]
 80098f8:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80098fc:	f000 f86e 	bl	80099dc <__gnu_Unwind_Save_WMMXD>
 8009900:	e73f      	b.n	8009782 <_Unwind_VRS_Pop+0x86>
 8009902:	4620      	mov	r0, r4
 8009904:	f022 0204 	bic.w	r2, r2, #4
 8009908:	f840 2bd0 	str.w	r2, [r0], #208
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	f000 f83f 	bl	8009990 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8009912:	9b01      	ldr	r3, [sp, #4]
 8009914:	e7be      	b.n	8009894 <_Unwind_VRS_Pop+0x198>
 8009916:	a822      	add	r0, sp, #136	; 0x88
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	f000 f829 	bl	8009970 <__gnu_Unwind_Save_VFP>
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	e7c8      	b.n	80098b4 <_Unwind_VRS_Pop+0x1b8>
 8009922:	f041 0102 	orr.w	r1, r1, #2
 8009926:	f840 1b48 	str.w	r1, [r0], #72
 800992a:	f000 f829 	bl	8009980 <__gnu_Unwind_Save_VFP_D>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	e7ab      	b.n	800988a <_Unwind_VRS_Pop+0x18e>
 8009932:	2b01      	cmp	r3, #1
 8009934:	d003      	beq.n	800993e <_Unwind_VRS_Pop+0x242>
 8009936:	2e0f      	cmp	r6, #15
 8009938:	f63f af60 	bhi.w	80097fc <_Unwind_VRS_Pop+0x100>
 800993c:	e7ae      	b.n	800989c <_Unwind_VRS_Pop+0x1a0>
 800993e:	a822      	add	r0, sp, #136	; 0x88
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	f000 f815 	bl	8009970 <__gnu_Unwind_Save_VFP>
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	e758      	b.n	80097fc <_Unwind_VRS_Pop+0x100>
 800994a:	bf00      	nop
 800994c:	0000      	movs	r0, r0
	...

08009950 <__restore_core_regs>:
 8009950:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8009954:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8009958:	469c      	mov	ip, r3
 800995a:	46a6      	mov	lr, r4
 800995c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8009960:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009964:	46e5      	mov	sp, ip
 8009966:	bd00      	pop	{pc}

08009968 <__gnu_Unwind_Restore_VFP>:
 8009968:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop

08009970 <__gnu_Unwind_Save_VFP>:
 8009970:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop

08009978 <__gnu_Unwind_Restore_VFP_D>:
 8009978:	ec90 0b20 	vldmia	r0, {d0-d15}
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <__gnu_Unwind_Save_VFP_D>:
 8009980:	ec80 0b20 	vstmia	r0, {d0-d15}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop

08009988 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8009988:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8009990:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop

08009998 <__gnu_Unwind_Restore_WMMXD>:
 8009998:	ecf0 0102 	ldfe	f0, [r0], #8
 800999c:	ecf0 1102 	ldfe	f1, [r0], #8
 80099a0:	ecf0 2102 	ldfe	f2, [r0], #8
 80099a4:	ecf0 3102 	ldfe	f3, [r0], #8
 80099a8:	ecf0 4102 	ldfe	f4, [r0], #8
 80099ac:	ecf0 5102 	ldfe	f5, [r0], #8
 80099b0:	ecf0 6102 	ldfe	f6, [r0], #8
 80099b4:	ecf0 7102 	ldfe	f7, [r0], #8
 80099b8:	ecf0 8102 	ldfp	f0, [r0], #8
 80099bc:	ecf0 9102 	ldfp	f1, [r0], #8
 80099c0:	ecf0 a102 	ldfp	f2, [r0], #8
 80099c4:	ecf0 b102 	ldfp	f3, [r0], #8
 80099c8:	ecf0 c102 	ldfp	f4, [r0], #8
 80099cc:	ecf0 d102 	ldfp	f5, [r0], #8
 80099d0:	ecf0 e102 	ldfp	f6, [r0], #8
 80099d4:	ecf0 f102 	ldfp	f7, [r0], #8
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop

080099dc <__gnu_Unwind_Save_WMMXD>:
 80099dc:	ece0 0102 	stfe	f0, [r0], #8
 80099e0:	ece0 1102 	stfe	f1, [r0], #8
 80099e4:	ece0 2102 	stfe	f2, [r0], #8
 80099e8:	ece0 3102 	stfe	f3, [r0], #8
 80099ec:	ece0 4102 	stfe	f4, [r0], #8
 80099f0:	ece0 5102 	stfe	f5, [r0], #8
 80099f4:	ece0 6102 	stfe	f6, [r0], #8
 80099f8:	ece0 7102 	stfe	f7, [r0], #8
 80099fc:	ece0 8102 	stfp	f0, [r0], #8
 8009a00:	ece0 9102 	stfp	f1, [r0], #8
 8009a04:	ece0 a102 	stfp	f2, [r0], #8
 8009a08:	ece0 b102 	stfp	f3, [r0], #8
 8009a0c:	ece0 c102 	stfp	f4, [r0], #8
 8009a10:	ece0 d102 	stfp	f5, [r0], #8
 8009a14:	ece0 e102 	stfp	f6, [r0], #8
 8009a18:	ece0 f102 	stfp	f7, [r0], #8
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop

08009a20 <__gnu_Unwind_Restore_WMMXC>:
 8009a20:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8009a24:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8009a28:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8009a2c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop

08009a34 <__gnu_Unwind_Save_WMMXC>:
 8009a34:	fca0 8101 	stc2	1, cr8, [r0], #4
 8009a38:	fca0 9101 	stc2	1, cr9, [r0], #4
 8009a3c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8009a40:	fca0 b101 	stc2	1, cr11, [r0], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <_Unwind_RaiseException>:
 8009a48:	46ec      	mov	ip, sp
 8009a4a:	b500      	push	{lr}
 8009a4c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009a50:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009a54:	f04f 0300 	mov.w	r3, #0
 8009a58:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009a5c:	a901      	add	r1, sp, #4
 8009a5e:	f7ff fbe7 	bl	8009230 <__gnu_Unwind_RaiseException>
 8009a62:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009a66:	b012      	add	sp, #72	; 0x48
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop

08009a6c <_Unwind_Resume>:
 8009a6c:	46ec      	mov	ip, sp
 8009a6e:	b500      	push	{lr}
 8009a70:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009a74:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009a80:	a901      	add	r1, sp, #4
 8009a82:	f7ff fc0f 	bl	80092a4 <__gnu_Unwind_Resume>
 8009a86:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009a8a:	b012      	add	sp, #72	; 0x48
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop

08009a90 <_Unwind_Resume_or_Rethrow>:
 8009a90:	46ec      	mov	ip, sp
 8009a92:	b500      	push	{lr}
 8009a94:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009a98:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009a9c:	f04f 0300 	mov.w	r3, #0
 8009aa0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009aa4:	a901      	add	r1, sp, #4
 8009aa6:	f7ff fc1f 	bl	80092e8 <__gnu_Unwind_Resume_or_Rethrow>
 8009aaa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009aae:	b012      	add	sp, #72	; 0x48
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop

08009ab4 <_Unwind_ForcedUnwind>:
 8009ab4:	46ec      	mov	ip, sp
 8009ab6:	b500      	push	{lr}
 8009ab8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009abc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009ac0:	f04f 0300 	mov.w	r3, #0
 8009ac4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009ac8:	ab01      	add	r3, sp, #4
 8009aca:	f7ff fbe1 	bl	8009290 <__gnu_Unwind_ForcedUnwind>
 8009ace:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009ad2:	b012      	add	sp, #72	; 0x48
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop

08009ad8 <_Unwind_Backtrace>:
 8009ad8:	46ec      	mov	ip, sp
 8009ada:	b500      	push	{lr}
 8009adc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009ae0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009ae4:	f04f 0300 	mov.w	r3, #0
 8009ae8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009aec:	aa01      	add	r2, sp, #4
 8009aee:	f7ff fc59 	bl	80093a4 <__gnu_Unwind_Backtrace>
 8009af2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009af6:	b012      	add	sp, #72	; 0x48
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	0000      	movs	r0, r0
	...

08009b00 <next_unwind_byte>:
 8009b00:	7a03      	ldrb	r3, [r0, #8]
 8009b02:	b91b      	cbnz	r3, 8009b0c <next_unwind_byte+0xc>
 8009b04:	7a43      	ldrb	r3, [r0, #9]
 8009b06:	b943      	cbnz	r3, 8009b1a <next_unwind_byte+0x1a>
 8009b08:	20b0      	movs	r0, #176	; 0xb0
 8009b0a:	4770      	bx	lr
 8009b0c:	1e5a      	subs	r2, r3, #1
 8009b0e:	6803      	ldr	r3, [r0, #0]
 8009b10:	7202      	strb	r2, [r0, #8]
 8009b12:	021a      	lsls	r2, r3, #8
 8009b14:	6002      	str	r2, [r0, #0]
 8009b16:	0e18      	lsrs	r0, r3, #24
 8009b18:	4770      	bx	lr
 8009b1a:	6842      	ldr	r2, [r0, #4]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b410      	push	{r4}
 8009b20:	7243      	strb	r3, [r0, #9]
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	2103      	movs	r1, #3
 8009b26:	1d14      	adds	r4, r2, #4
 8009b28:	7201      	strb	r1, [r0, #8]
 8009b2a:	021a      	lsls	r2, r3, #8
 8009b2c:	6044      	str	r4, [r0, #4]
 8009b2e:	6002      	str	r2, [r0, #0]
 8009b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b34:	0e18      	lsrs	r0, r3, #24
 8009b36:	4770      	bx	lr

08009b38 <_Unwind_GetGR.constprop.0>:
 8009b38:	b500      	push	{lr}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	aa03      	add	r2, sp, #12
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9200      	str	r2, [sp, #0]
 8009b42:	4619      	mov	r1, r3
 8009b44:	220c      	movs	r2, #12
 8009b46:	f7ff fbdf 	bl	8009308 <_Unwind_VRS_Get>
 8009b4a:	9803      	ldr	r0, [sp, #12]
 8009b4c:	b005      	add	sp, #20
 8009b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b52:	bf00      	nop

08009b54 <unwind_UCB_from_context>:
 8009b54:	e7f0      	b.n	8009b38 <_Unwind_GetGR.constprop.0>
 8009b56:	bf00      	nop

08009b58 <__gnu_unwind_execute>:
 8009b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	b085      	sub	sp, #20
 8009b60:	460d      	mov	r5, r1
 8009b62:	f04f 0800 	mov.w	r8, #0
 8009b66:	4628      	mov	r0, r5
 8009b68:	f7ff ffca 	bl	8009b00 <next_unwind_byte>
 8009b6c:	28b0      	cmp	r0, #176	; 0xb0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	f000 80b4 	beq.w	8009cdc <__gnu_unwind_execute+0x184>
 8009b74:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8009b78:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8009b7c:	d020      	beq.n	8009bc0 <__gnu_unwind_execute+0x68>
 8009b7e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8009b82:	2b80      	cmp	r3, #128	; 0x80
 8009b84:	d07a      	beq.n	8009c7c <__gnu_unwind_execute+0x124>
 8009b86:	2b90      	cmp	r3, #144	; 0x90
 8009b88:	d035      	beq.n	8009bf6 <__gnu_unwind_execute+0x9e>
 8009b8a:	2ba0      	cmp	r3, #160	; 0xa0
 8009b8c:	d048      	beq.n	8009c20 <__gnu_unwind_execute+0xc8>
 8009b8e:	2bb0      	cmp	r3, #176	; 0xb0
 8009b90:	d05c      	beq.n	8009c4c <__gnu_unwind_execute+0xf4>
 8009b92:	2bc0      	cmp	r3, #192	; 0xc0
 8009b94:	f000 8089 	beq.w	8009caa <__gnu_unwind_execute+0x152>
 8009b98:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009b9c:	2bd0      	cmp	r3, #208	; 0xd0
 8009b9e:	d10b      	bne.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009ba0:	f000 0207 	and.w	r2, r0, #7
 8009ba4:	3201      	adds	r2, #1
 8009ba6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009baa:	2305      	movs	r3, #5
 8009bac:	2101      	movs	r1, #1
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7ff fda4 	bl	80096fc <_Unwind_VRS_Pop>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d0d6      	beq.n	8009b66 <__gnu_unwind_execute+0xe>
 8009bb8:	2009      	movs	r0, #9
 8009bba:	b005      	add	sp, #20
 8009bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc0:	f10d 090c 	add.w	r9, sp, #12
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	0087      	lsls	r7, r0, #2
 8009bc8:	f8cd 9000 	str.w	r9, [sp]
 8009bcc:	220d      	movs	r2, #13
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff fb9a 	bl	8009308 <_Unwind_VRS_Get>
 8009bd4:	b2ff      	uxtb	r7, r7
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	f8cd 9000 	str.w	r9, [sp]
 8009bdc:	3704      	adds	r7, #4
 8009bde:	0660      	lsls	r0, r4, #25
 8009be0:	bf4c      	ite	mi
 8009be2:	1bdf      	submi	r7, r3, r7
 8009be4:	18ff      	addpl	r7, r7, r3
 8009be6:	2300      	movs	r3, #0
 8009be8:	4619      	mov	r1, r3
 8009bea:	220d      	movs	r2, #13
 8009bec:	4630      	mov	r0, r6
 8009bee:	9703      	str	r7, [sp, #12]
 8009bf0:	f7ff fbb0 	bl	8009354 <_Unwind_VRS_Set>
 8009bf4:	e7b7      	b.n	8009b66 <__gnu_unwind_execute+0xe>
 8009bf6:	f000 030d 	and.w	r3, r0, #13
 8009bfa:	2b0d      	cmp	r3, #13
 8009bfc:	d0dc      	beq.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009bfe:	af03      	add	r7, sp, #12
 8009c00:	2300      	movs	r3, #0
 8009c02:	f000 020f 	and.w	r2, r0, #15
 8009c06:	4619      	mov	r1, r3
 8009c08:	9700      	str	r7, [sp, #0]
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7ff fb7c 	bl	8009308 <_Unwind_VRS_Get>
 8009c10:	2300      	movs	r3, #0
 8009c12:	9700      	str	r7, [sp, #0]
 8009c14:	4619      	mov	r1, r3
 8009c16:	220d      	movs	r2, #13
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff fb9b 	bl	8009354 <_Unwind_VRS_Set>
 8009c1e:	e7a2      	b.n	8009b66 <__gnu_unwind_execute+0xe>
 8009c20:	43c2      	mvns	r2, r0
 8009c22:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8009c26:	f002 0207 	and.w	r2, r2, #7
 8009c2a:	fa43 f202 	asr.w	r2, r3, r2
 8009c2e:	0701      	lsls	r1, r0, #28
 8009c30:	ea02 0203 	and.w	r2, r2, r3
 8009c34:	f04f 0300 	mov.w	r3, #0
 8009c38:	bf48      	it	mi
 8009c3a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff fd5b 	bl	80096fc <_Unwind_VRS_Pop>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d1b6      	bne.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009c4a:	e78c      	b.n	8009b66 <__gnu_unwind_execute+0xe>
 8009c4c:	28b1      	cmp	r0, #177	; 0xb1
 8009c4e:	d04a      	beq.n	8009ce6 <__gnu_unwind_execute+0x18e>
 8009c50:	28b2      	cmp	r0, #178	; 0xb2
 8009c52:	d053      	beq.n	8009cfc <__gnu_unwind_execute+0x1a4>
 8009c54:	28b3      	cmp	r0, #179	; 0xb3
 8009c56:	f000 8081 	beq.w	8009d5c <__gnu_unwind_execute+0x204>
 8009c5a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8009c5e:	2bb4      	cmp	r3, #180	; 0xb4
 8009c60:	d0aa      	beq.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009c62:	f000 0207 	and.w	r2, r0, #7
 8009c66:	3201      	adds	r2, #1
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff fd43 	bl	80096fc <_Unwind_VRS_Pop>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d19e      	bne.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009c7a:	e774      	b.n	8009b66 <__gnu_unwind_execute+0xe>
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f7ff ff3f 	bl	8009b00 <next_unwind_byte>
 8009c82:	0224      	lsls	r4, r4, #8
 8009c84:	4320      	orrs	r0, r4
 8009c86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009c8a:	d095      	beq.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009c8c:	0104      	lsls	r4, r0, #4
 8009c8e:	2300      	movs	r3, #0
 8009c90:	b2a2      	uxth	r2, r4
 8009c92:	4619      	mov	r1, r3
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff fd31 	bl	80096fc <_Unwind_VRS_Pop>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d18c      	bne.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009c9e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8009ca2:	bf18      	it	ne
 8009ca4:	f04f 0801 	movne.w	r8, #1
 8009ca8:	e75d      	b.n	8009b66 <__gnu_unwind_execute+0xe>
 8009caa:	28c6      	cmp	r0, #198	; 0xc6
 8009cac:	d062      	beq.n	8009d74 <__gnu_unwind_execute+0x21c>
 8009cae:	28c7      	cmp	r0, #199	; 0xc7
 8009cb0:	d06c      	beq.n	8009d8c <__gnu_unwind_execute+0x234>
 8009cb2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8009cb8:	d07b      	beq.n	8009db2 <__gnu_unwind_execute+0x25a>
 8009cba:	28c8      	cmp	r0, #200	; 0xc8
 8009cbc:	f000 8091 	beq.w	8009de2 <__gnu_unwind_execute+0x28a>
 8009cc0:	28c9      	cmp	r0, #201	; 0xc9
 8009cc2:	f47f af79 	bne.w	8009bb8 <__gnu_unwind_execute+0x60>
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f7ff ff1a 	bl	8009b00 <next_unwind_byte>
 8009ccc:	0302      	lsls	r2, r0, #12
 8009cce:	f000 000f 	and.w	r0, r0, #15
 8009cd2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	4302      	orrs	r2, r0
 8009cda:	e766      	b.n	8009baa <__gnu_unwind_execute+0x52>
 8009cdc:	f1b8 0f00 	cmp.w	r8, #0
 8009ce0:	d06e      	beq.n	8009dc0 <__gnu_unwind_execute+0x268>
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	e769      	b.n	8009bba <__gnu_unwind_execute+0x62>
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f7ff ff0a 	bl	8009b00 <next_unwind_byte>
 8009cec:	4602      	mov	r2, r0
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f43f af62 	beq.w	8009bb8 <__gnu_unwind_execute+0x60>
 8009cf4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009cf8:	d0b9      	beq.n	8009c6e <__gnu_unwind_execute+0x116>
 8009cfa:	e75d      	b.n	8009bb8 <__gnu_unwind_execute+0x60>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f10d 090c 	add.w	r9, sp, #12
 8009d02:	220d      	movs	r2, #13
 8009d04:	4619      	mov	r1, r3
 8009d06:	f8cd 9000 	str.w	r9, [sp]
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff fafc 	bl	8009308 <_Unwind_VRS_Get>
 8009d10:	4628      	mov	r0, r5
 8009d12:	f7ff fef5 	bl	8009b00 <next_unwind_byte>
 8009d16:	0602      	lsls	r2, r0, #24
 8009d18:	f04f 0402 	mov.w	r4, #2
 8009d1c:	d50c      	bpl.n	8009d38 <__gnu_unwind_execute+0x1e0>
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009d24:	40a0      	lsls	r0, r4
 8009d26:	4403      	add	r3, r0
 8009d28:	4628      	mov	r0, r5
 8009d2a:	9303      	str	r3, [sp, #12]
 8009d2c:	f7ff fee8 	bl	8009b00 <next_unwind_byte>
 8009d30:	0603      	lsls	r3, r0, #24
 8009d32:	f104 0407 	add.w	r4, r4, #7
 8009d36:	d4f2      	bmi.n	8009d1e <__gnu_unwind_execute+0x1c6>
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	f8cd 9000 	str.w	r9, [sp]
 8009d3e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009d42:	fa00 f204 	lsl.w	r2, r0, r4
 8009d46:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	4414      	add	r4, r2
 8009d4e:	4619      	mov	r1, r3
 8009d50:	220d      	movs	r2, #13
 8009d52:	4630      	mov	r0, r6
 8009d54:	9403      	str	r4, [sp, #12]
 8009d56:	f7ff fafd 	bl	8009354 <_Unwind_VRS_Set>
 8009d5a:	e704      	b.n	8009b66 <__gnu_unwind_execute+0xe>
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f7ff fecf 	bl	8009b00 <next_unwind_byte>
 8009d62:	0301      	lsls	r1, r0, #12
 8009d64:	f000 000f 	and.w	r0, r0, #15
 8009d68:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8009d6c:	1c42      	adds	r2, r0, #1
 8009d6e:	2301      	movs	r3, #1
 8009d70:	430a      	orrs	r2, r1
 8009d72:	e77c      	b.n	8009c6e <__gnu_unwind_execute+0x116>
 8009d74:	4628      	mov	r0, r5
 8009d76:	f7ff fec3 	bl	8009b00 <next_unwind_byte>
 8009d7a:	0301      	lsls	r1, r0, #12
 8009d7c:	f000 000f 	and.w	r0, r0, #15
 8009d80:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8009d84:	1c42      	adds	r2, r0, #1
 8009d86:	2303      	movs	r3, #3
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	e770      	b.n	8009c6e <__gnu_unwind_execute+0x116>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7ff feb7 	bl	8009b00 <next_unwind_byte>
 8009d92:	4602      	mov	r2, r0
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f43f af0f 	beq.w	8009bb8 <__gnu_unwind_execute+0x60>
 8009d9a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009d9e:	f47f af0b 	bne.w	8009bb8 <__gnu_unwind_execute+0x60>
 8009da2:	2104      	movs	r1, #4
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff fca9 	bl	80096fc <_Unwind_VRS_Pop>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f47f af04 	bne.w	8009bb8 <__gnu_unwind_execute+0x60>
 8009db0:	e6d9      	b.n	8009b66 <__gnu_unwind_execute+0xe>
 8009db2:	f000 020f 	and.w	r2, r0, #15
 8009db6:	3201      	adds	r2, #1
 8009db8:	2303      	movs	r3, #3
 8009dba:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8009dbe:	e756      	b.n	8009c6e <__gnu_unwind_execute+0x116>
 8009dc0:	ac03      	add	r4, sp, #12
 8009dc2:	4643      	mov	r3, r8
 8009dc4:	220e      	movs	r2, #14
 8009dc6:	4641      	mov	r1, r8
 8009dc8:	9400      	str	r4, [sp, #0]
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7ff fa9c 	bl	8009308 <_Unwind_VRS_Get>
 8009dd0:	9400      	str	r4, [sp, #0]
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	4643      	mov	r3, r8
 8009dd6:	220f      	movs	r2, #15
 8009dd8:	4641      	mov	r1, r8
 8009dda:	f7ff fabb 	bl	8009354 <_Unwind_VRS_Set>
 8009dde:	4640      	mov	r0, r8
 8009de0:	e6eb      	b.n	8009bba <__gnu_unwind_execute+0x62>
 8009de2:	4628      	mov	r0, r5
 8009de4:	f7ff fe8c 	bl	8009b00 <next_unwind_byte>
 8009de8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009dec:	f000 030f 	and.w	r3, r0, #15
 8009df0:	3210      	adds	r2, #16
 8009df2:	3301      	adds	r3, #1
 8009df4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8009df8:	e6d7      	b.n	8009baa <__gnu_unwind_execute+0x52>
 8009dfa:	bf00      	nop

08009dfc <__gnu_unwind_frame>:
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009e00:	b084      	sub	sp, #16
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	2003      	movs	r0, #3
 8009e06:	f88d 000c 	strb.w	r0, [sp, #12]
 8009e0a:	79dc      	ldrb	r4, [r3, #7]
 8009e0c:	f88d 400d 	strb.w	r4, [sp, #13]
 8009e10:	0212      	lsls	r2, r2, #8
 8009e12:	3308      	adds	r3, #8
 8009e14:	4608      	mov	r0, r1
 8009e16:	a901      	add	r1, sp, #4
 8009e18:	9201      	str	r2, [sp, #4]
 8009e1a:	9302      	str	r3, [sp, #8]
 8009e1c:	f7ff fe9c 	bl	8009b58 <__gnu_unwind_execute>
 8009e20:	b004      	add	sp, #16
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <_Unwind_GetRegionStart>:
 8009e24:	b508      	push	{r3, lr}
 8009e26:	f7ff fe95 	bl	8009b54 <unwind_UCB_from_context>
 8009e2a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8009e2c:	bd08      	pop	{r3, pc}
 8009e2e:	bf00      	nop

08009e30 <_Unwind_GetLanguageSpecificData>:
 8009e30:	b508      	push	{r3, lr}
 8009e32:	f7ff fe8f 	bl	8009b54 <unwind_UCB_from_context>
 8009e36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009e38:	79d8      	ldrb	r0, [r3, #7]
 8009e3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e3e:	3008      	adds	r0, #8
 8009e40:	bd08      	pop	{r3, pc}
 8009e42:	bf00      	nop

08009e44 <_Unwind_GetTextRelBase>:
 8009e44:	b508      	push	{r3, lr}
 8009e46:	f006 fd63 	bl	8010910 <abort>
 8009e4a:	bf00      	nop

08009e4c <_Unwind_GetDataRelBase>:
 8009e4c:	b508      	push	{r3, lr}
 8009e4e:	f7ff fff9 	bl	8009e44 <_Unwind_GetTextRelBase>
 8009e52:	bf00      	nop
	...

08009e60 <memchr>:
 8009e60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8009e64:	2a10      	cmp	r2, #16
 8009e66:	db2b      	blt.n	8009ec0 <memchr+0x60>
 8009e68:	f010 0f07 	tst.w	r0, #7
 8009e6c:	d008      	beq.n	8009e80 <memchr+0x20>
 8009e6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e72:	3a01      	subs	r2, #1
 8009e74:	428b      	cmp	r3, r1
 8009e76:	d02d      	beq.n	8009ed4 <memchr+0x74>
 8009e78:	f010 0f07 	tst.w	r0, #7
 8009e7c:	b342      	cbz	r2, 8009ed0 <memchr+0x70>
 8009e7e:	d1f6      	bne.n	8009e6e <memchr+0xe>
 8009e80:	b4f0      	push	{r4, r5, r6, r7}
 8009e82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8009e86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8009e8a:	f022 0407 	bic.w	r4, r2, #7
 8009e8e:	f07f 0700 	mvns.w	r7, #0
 8009e92:	2300      	movs	r3, #0
 8009e94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8009e98:	3c08      	subs	r4, #8
 8009e9a:	ea85 0501 	eor.w	r5, r5, r1
 8009e9e:	ea86 0601 	eor.w	r6, r6, r1
 8009ea2:	fa85 f547 	uadd8	r5, r5, r7
 8009ea6:	faa3 f587 	sel	r5, r3, r7
 8009eaa:	fa86 f647 	uadd8	r6, r6, r7
 8009eae:	faa5 f687 	sel	r6, r5, r7
 8009eb2:	b98e      	cbnz	r6, 8009ed8 <memchr+0x78>
 8009eb4:	d1ee      	bne.n	8009e94 <memchr+0x34>
 8009eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8009eb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8009ebc:	f002 0207 	and.w	r2, r2, #7
 8009ec0:	b132      	cbz	r2, 8009ed0 <memchr+0x70>
 8009ec2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ec6:	3a01      	subs	r2, #1
 8009ec8:	ea83 0301 	eor.w	r3, r3, r1
 8009ecc:	b113      	cbz	r3, 8009ed4 <memchr+0x74>
 8009ece:	d1f8      	bne.n	8009ec2 <memchr+0x62>
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	4770      	bx	lr
 8009ed4:	3801      	subs	r0, #1
 8009ed6:	4770      	bx	lr
 8009ed8:	2d00      	cmp	r5, #0
 8009eda:	bf06      	itte	eq
 8009edc:	4635      	moveq	r5, r6
 8009ede:	3803      	subeq	r0, #3
 8009ee0:	3807      	subne	r0, #7
 8009ee2:	f015 0f01 	tst.w	r5, #1
 8009ee6:	d107      	bne.n	8009ef8 <memchr+0x98>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f415 7f80 	tst.w	r5, #256	; 0x100
 8009eee:	bf02      	ittt	eq
 8009ef0:	3001      	addeq	r0, #1
 8009ef2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8009ef6:	3001      	addeq	r0, #1
 8009ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8009efa:	3801      	subs	r0, #1
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop

08009f00 <memcpy>:
 8009f00:	4684      	mov	ip, r0
 8009f02:	ea41 0300 	orr.w	r3, r1, r0
 8009f06:	f013 0303 	ands.w	r3, r3, #3
 8009f0a:	d16d      	bne.n	8009fe8 <memcpy+0xe8>
 8009f0c:	3a40      	subs	r2, #64	; 0x40
 8009f0e:	d341      	bcc.n	8009f94 <memcpy+0x94>
 8009f10:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f14:	f840 3b04 	str.w	r3, [r0], #4
 8009f18:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f1c:	f840 3b04 	str.w	r3, [r0], #4
 8009f20:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f24:	f840 3b04 	str.w	r3, [r0], #4
 8009f28:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f2c:	f840 3b04 	str.w	r3, [r0], #4
 8009f30:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f34:	f840 3b04 	str.w	r3, [r0], #4
 8009f38:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f3c:	f840 3b04 	str.w	r3, [r0], #4
 8009f40:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f44:	f840 3b04 	str.w	r3, [r0], #4
 8009f48:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f4c:	f840 3b04 	str.w	r3, [r0], #4
 8009f50:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f54:	f840 3b04 	str.w	r3, [r0], #4
 8009f58:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f5c:	f840 3b04 	str.w	r3, [r0], #4
 8009f60:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f64:	f840 3b04 	str.w	r3, [r0], #4
 8009f68:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f6c:	f840 3b04 	str.w	r3, [r0], #4
 8009f70:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f74:	f840 3b04 	str.w	r3, [r0], #4
 8009f78:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f7c:	f840 3b04 	str.w	r3, [r0], #4
 8009f80:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f84:	f840 3b04 	str.w	r3, [r0], #4
 8009f88:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f8c:	f840 3b04 	str.w	r3, [r0], #4
 8009f90:	3a40      	subs	r2, #64	; 0x40
 8009f92:	d2bd      	bcs.n	8009f10 <memcpy+0x10>
 8009f94:	3230      	adds	r2, #48	; 0x30
 8009f96:	d311      	bcc.n	8009fbc <memcpy+0xbc>
 8009f98:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f9c:	f840 3b04 	str.w	r3, [r0], #4
 8009fa0:	f851 3b04 	ldr.w	r3, [r1], #4
 8009fa4:	f840 3b04 	str.w	r3, [r0], #4
 8009fa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8009fac:	f840 3b04 	str.w	r3, [r0], #4
 8009fb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8009fb4:	f840 3b04 	str.w	r3, [r0], #4
 8009fb8:	3a10      	subs	r2, #16
 8009fba:	d2ed      	bcs.n	8009f98 <memcpy+0x98>
 8009fbc:	320c      	adds	r2, #12
 8009fbe:	d305      	bcc.n	8009fcc <memcpy+0xcc>
 8009fc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8009fc4:	f840 3b04 	str.w	r3, [r0], #4
 8009fc8:	3a04      	subs	r2, #4
 8009fca:	d2f9      	bcs.n	8009fc0 <memcpy+0xc0>
 8009fcc:	3204      	adds	r2, #4
 8009fce:	d008      	beq.n	8009fe2 <memcpy+0xe2>
 8009fd0:	07d2      	lsls	r2, r2, #31
 8009fd2:	bf1c      	itt	ne
 8009fd4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8009fd8:	f800 3b01 	strbne.w	r3, [r0], #1
 8009fdc:	d301      	bcc.n	8009fe2 <memcpy+0xe2>
 8009fde:	880b      	ldrh	r3, [r1, #0]
 8009fe0:	8003      	strh	r3, [r0, #0]
 8009fe2:	4660      	mov	r0, ip
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	2a08      	cmp	r2, #8
 8009fea:	d313      	bcc.n	800a014 <memcpy+0x114>
 8009fec:	078b      	lsls	r3, r1, #30
 8009fee:	d08d      	beq.n	8009f0c <memcpy+0xc>
 8009ff0:	f010 0303 	ands.w	r3, r0, #3
 8009ff4:	d08a      	beq.n	8009f0c <memcpy+0xc>
 8009ff6:	f1c3 0304 	rsb	r3, r3, #4
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	07db      	lsls	r3, r3, #31
 8009ffe:	bf1c      	itt	ne
 800a000:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800a004:	f800 3b01 	strbne.w	r3, [r0], #1
 800a008:	d380      	bcc.n	8009f0c <memcpy+0xc>
 800a00a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800a00e:	f820 3b02 	strh.w	r3, [r0], #2
 800a012:	e77b      	b.n	8009f0c <memcpy+0xc>
 800a014:	3a04      	subs	r2, #4
 800a016:	d3d9      	bcc.n	8009fcc <memcpy+0xcc>
 800a018:	3a01      	subs	r2, #1
 800a01a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a01e:	f800 3b01 	strb.w	r3, [r0], #1
 800a022:	d2f9      	bcs.n	800a018 <memcpy+0x118>
 800a024:	780b      	ldrb	r3, [r1, #0]
 800a026:	7003      	strb	r3, [r0, #0]
 800a028:	784b      	ldrb	r3, [r1, #1]
 800a02a:	7043      	strb	r3, [r0, #1]
 800a02c:	788b      	ldrb	r3, [r1, #2]
 800a02e:	7083      	strb	r3, [r0, #2]
 800a030:	4660      	mov	r0, ip
 800a032:	4770      	bx	lr
	...
 800a040:	eba2 0003 	sub.w	r0, r2, r3
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop

0800a048 <strcmp>:
 800a048:	7802      	ldrb	r2, [r0, #0]
 800a04a:	780b      	ldrb	r3, [r1, #0]
 800a04c:	2a01      	cmp	r2, #1
 800a04e:	bf28      	it	cs
 800a050:	429a      	cmpcs	r2, r3
 800a052:	d1f5      	bne.n	800a040 <memcpy+0x140>
 800a054:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800a058:	ea40 0401 	orr.w	r4, r0, r1
 800a05c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a060:	f06f 0c00 	mvn.w	ip, #0
 800a064:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800a068:	b312      	cbz	r2, 800a0b0 <strcmp+0x68>
 800a06a:	ea80 0401 	eor.w	r4, r0, r1
 800a06e:	f014 0f07 	tst.w	r4, #7
 800a072:	d16a      	bne.n	800a14a <strcmp+0x102>
 800a074:	f000 0407 	and.w	r4, r0, #7
 800a078:	f020 0007 	bic.w	r0, r0, #7
 800a07c:	f004 0503 	and.w	r5, r4, #3
 800a080:	f021 0107 	bic.w	r1, r1, #7
 800a084:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800a088:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800a08c:	f014 0f04 	tst.w	r4, #4
 800a090:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800a094:	fa0c f405 	lsl.w	r4, ip, r5
 800a098:	ea62 0204 	orn	r2, r2, r4
 800a09c:	ea66 0604 	orn	r6, r6, r4
 800a0a0:	d00a      	beq.n	800a0b8 <strcmp+0x70>
 800a0a2:	ea63 0304 	orn	r3, r3, r4
 800a0a6:	4662      	mov	r2, ip
 800a0a8:	ea67 0704 	orn	r7, r7, r4
 800a0ac:	4666      	mov	r6, ip
 800a0ae:	e003      	b.n	800a0b8 <strcmp+0x70>
 800a0b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800a0b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800a0b8:	fa82 f54c 	uadd8	r5, r2, ip
 800a0bc:	ea82 0406 	eor.w	r4, r2, r6
 800a0c0:	faa4 f48c 	sel	r4, r4, ip
 800a0c4:	bb6c      	cbnz	r4, 800a122 <strcmp+0xda>
 800a0c6:	fa83 f54c 	uadd8	r5, r3, ip
 800a0ca:	ea83 0507 	eor.w	r5, r3, r7
 800a0ce:	faa5 f58c 	sel	r5, r5, ip
 800a0d2:	b995      	cbnz	r5, 800a0fa <strcmp+0xb2>
 800a0d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800a0d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800a0dc:	fa82 f54c 	uadd8	r5, r2, ip
 800a0e0:	ea82 0406 	eor.w	r4, r2, r6
 800a0e4:	faa4 f48c 	sel	r4, r4, ip
 800a0e8:	fa83 f54c 	uadd8	r5, r3, ip
 800a0ec:	ea83 0507 	eor.w	r5, r3, r7
 800a0f0:	faa5 f58c 	sel	r5, r5, ip
 800a0f4:	4325      	orrs	r5, r4
 800a0f6:	d0db      	beq.n	800a0b0 <strcmp+0x68>
 800a0f8:	b99c      	cbnz	r4, 800a122 <strcmp+0xda>
 800a0fa:	ba2d      	rev	r5, r5
 800a0fc:	fab5 f485 	clz	r4, r5
 800a100:	f024 0407 	bic.w	r4, r4, #7
 800a104:	fa27 f104 	lsr.w	r1, r7, r4
 800a108:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a10c:	fa23 f304 	lsr.w	r3, r3, r4
 800a110:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800a114:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800a118:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800a11c:	eba0 0001 	sub.w	r0, r0, r1
 800a120:	4770      	bx	lr
 800a122:	ba24      	rev	r4, r4
 800a124:	fab4 f484 	clz	r4, r4
 800a128:	f024 0407 	bic.w	r4, r4, #7
 800a12c:	fa26 f104 	lsr.w	r1, r6, r4
 800a130:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a134:	fa22 f204 	lsr.w	r2, r2, r4
 800a138:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800a13c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800a140:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800a144:	eba0 0001 	sub.w	r0, r0, r1
 800a148:	4770      	bx	lr
 800a14a:	f014 0f03 	tst.w	r4, #3
 800a14e:	d13c      	bne.n	800a1ca <strcmp+0x182>
 800a150:	f010 0403 	ands.w	r4, r0, #3
 800a154:	d128      	bne.n	800a1a8 <strcmp+0x160>
 800a156:	f850 2b08 	ldr.w	r2, [r0], #8
 800a15a:	f851 3b08 	ldr.w	r3, [r1], #8
 800a15e:	fa82 f54c 	uadd8	r5, r2, ip
 800a162:	ea82 0503 	eor.w	r5, r2, r3
 800a166:	faa5 f58c 	sel	r5, r5, ip
 800a16a:	b95d      	cbnz	r5, 800a184 <strcmp+0x13c>
 800a16c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a174:	fa82 f54c 	uadd8	r5, r2, ip
 800a178:	ea82 0503 	eor.w	r5, r2, r3
 800a17c:	faa5 f58c 	sel	r5, r5, ip
 800a180:	2d00      	cmp	r5, #0
 800a182:	d0e8      	beq.n	800a156 <strcmp+0x10e>
 800a184:	ba2d      	rev	r5, r5
 800a186:	fab5 f485 	clz	r4, r5
 800a18a:	f024 0407 	bic.w	r4, r4, #7
 800a18e:	fa23 f104 	lsr.w	r1, r3, r4
 800a192:	fa22 f204 	lsr.w	r2, r2, r4
 800a196:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800a19a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800a19e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800a1a2:	eba0 0001 	sub.w	r0, r0, r1
 800a1a6:	4770      	bx	lr
 800a1a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800a1ac:	f020 0003 	bic.w	r0, r0, #3
 800a1b0:	f850 2b08 	ldr.w	r2, [r0], #8
 800a1b4:	f021 0103 	bic.w	r1, r1, #3
 800a1b8:	f851 3b08 	ldr.w	r3, [r1], #8
 800a1bc:	fa0c f404 	lsl.w	r4, ip, r4
 800a1c0:	ea62 0204 	orn	r2, r2, r4
 800a1c4:	ea63 0304 	orn	r3, r3, r4
 800a1c8:	e7c9      	b.n	800a15e <strcmp+0x116>
 800a1ca:	f010 0403 	ands.w	r4, r0, #3
 800a1ce:	d01a      	beq.n	800a206 <strcmp+0x1be>
 800a1d0:	eba1 0104 	sub.w	r1, r1, r4
 800a1d4:	f020 0003 	bic.w	r0, r0, #3
 800a1d8:	07e4      	lsls	r4, r4, #31
 800a1da:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1de:	d006      	beq.n	800a1ee <strcmp+0x1a6>
 800a1e0:	d20f      	bcs.n	800a202 <strcmp+0x1ba>
 800a1e2:	788b      	ldrb	r3, [r1, #2]
 800a1e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800a1e8:	1ae4      	subs	r4, r4, r3
 800a1ea:	d106      	bne.n	800a1fa <strcmp+0x1b2>
 800a1ec:	b12b      	cbz	r3, 800a1fa <strcmp+0x1b2>
 800a1ee:	78cb      	ldrb	r3, [r1, #3]
 800a1f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800a1f4:	1ae4      	subs	r4, r4, r3
 800a1f6:	d100      	bne.n	800a1fa <strcmp+0x1b2>
 800a1f8:	b91b      	cbnz	r3, 800a202 <strcmp+0x1ba>
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 800a200:	4770      	bx	lr
 800a202:	f101 0104 	add.w	r1, r1, #4
 800a206:	f850 2b04 	ldr.w	r2, [r0], #4
 800a20a:	07cc      	lsls	r4, r1, #31
 800a20c:	f021 0103 	bic.w	r1, r1, #3
 800a210:	f851 3b04 	ldr.w	r3, [r1], #4
 800a214:	d848      	bhi.n	800a2a8 <strcmp+0x260>
 800a216:	d224      	bcs.n	800a262 <strcmp+0x21a>
 800a218:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800a21c:	fa82 f54c 	uadd8	r5, r2, ip
 800a220:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800a224:	faa5 f58c 	sel	r5, r5, ip
 800a228:	d10a      	bne.n	800a240 <strcmp+0x1f8>
 800a22a:	b965      	cbnz	r5, 800a246 <strcmp+0x1fe>
 800a22c:	f851 3b04 	ldr.w	r3, [r1], #4
 800a230:	ea84 0402 	eor.w	r4, r4, r2
 800a234:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800a238:	d10e      	bne.n	800a258 <strcmp+0x210>
 800a23a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a23e:	e7eb      	b.n	800a218 <strcmp+0x1d0>
 800a240:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a244:	e055      	b.n	800a2f2 <strcmp+0x2aa>
 800a246:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800a24a:	d14d      	bne.n	800a2e8 <strcmp+0x2a0>
 800a24c:	7808      	ldrb	r0, [r1, #0]
 800a24e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800a252:	f1c0 0000 	rsb	r0, r0, #0
 800a256:	4770      	bx	lr
 800a258:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800a25c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800a260:	e047      	b.n	800a2f2 <strcmp+0x2aa>
 800a262:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800a266:	fa82 f54c 	uadd8	r5, r2, ip
 800a26a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800a26e:	faa5 f58c 	sel	r5, r5, ip
 800a272:	d10a      	bne.n	800a28a <strcmp+0x242>
 800a274:	b965      	cbnz	r5, 800a290 <strcmp+0x248>
 800a276:	f851 3b04 	ldr.w	r3, [r1], #4
 800a27a:	ea84 0402 	eor.w	r4, r4, r2
 800a27e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800a282:	d10c      	bne.n	800a29e <strcmp+0x256>
 800a284:	f850 2b04 	ldr.w	r2, [r0], #4
 800a288:	e7eb      	b.n	800a262 <strcmp+0x21a>
 800a28a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a28e:	e030      	b.n	800a2f2 <strcmp+0x2aa>
 800a290:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800a294:	d128      	bne.n	800a2e8 <strcmp+0x2a0>
 800a296:	880b      	ldrh	r3, [r1, #0]
 800a298:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a29c:	e029      	b.n	800a2f2 <strcmp+0x2aa>
 800a29e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a2a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800a2a6:	e024      	b.n	800a2f2 <strcmp+0x2aa>
 800a2a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800a2ac:	fa82 f54c 	uadd8	r5, r2, ip
 800a2b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800a2b4:	faa5 f58c 	sel	r5, r5, ip
 800a2b8:	d10a      	bne.n	800a2d0 <strcmp+0x288>
 800a2ba:	b965      	cbnz	r5, 800a2d6 <strcmp+0x28e>
 800a2bc:	f851 3b04 	ldr.w	r3, [r1], #4
 800a2c0:	ea84 0402 	eor.w	r4, r4, r2
 800a2c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800a2c8:	d109      	bne.n	800a2de <strcmp+0x296>
 800a2ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2ce:	e7eb      	b.n	800a2a8 <strcmp+0x260>
 800a2d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800a2d4:	e00d      	b.n	800a2f2 <strcmp+0x2aa>
 800a2d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 800a2da:	d105      	bne.n	800a2e8 <strcmp+0x2a0>
 800a2dc:	680b      	ldr	r3, [r1, #0]
 800a2de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800a2e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a2e6:	e004      	b.n	800a2f2 <strcmp+0x2aa>
 800a2e8:	f04f 0000 	mov.w	r0, #0
 800a2ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800a2f0:	4770      	bx	lr
 800a2f2:	ba12      	rev	r2, r2
 800a2f4:	ba1b      	rev	r3, r3
 800a2f6:	fa82 f44c 	uadd8	r4, r2, ip
 800a2fa:	ea82 0403 	eor.w	r4, r2, r3
 800a2fe:	faa4 f58c 	sel	r5, r4, ip
 800a302:	fab5 f485 	clz	r4, r5
 800a306:	fa02 f204 	lsl.w	r2, r2, r4
 800a30a:	fa03 f304 	lsl.w	r3, r3, r4
 800a30e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800a312:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800a316:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800a31a:	4770      	bx	lr
 800a31c:	0000      	movs	r0, r0
	...

0800a320 <strlen>:
 800a320:	f890 f000 	pld	[r0]
 800a324:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 800a328:	f020 0107 	bic.w	r1, r0, #7
 800a32c:	f06f 0c00 	mvn.w	ip, #0
 800a330:	f010 0407 	ands.w	r4, r0, #7
 800a334:	f891 f020 	pld	[r1, #32]
 800a338:	f040 8049 	bne.w	800a3ce <strlen+0xae>
 800a33c:	f04f 0400 	mov.w	r4, #0
 800a340:	f06f 0007 	mvn.w	r0, #7
 800a344:	e9d1 2300 	ldrd	r2, r3, [r1]
 800a348:	f891 f040 	pld	[r1, #64]	; 0x40
 800a34c:	f100 0008 	add.w	r0, r0, #8
 800a350:	fa82 f24c 	uadd8	r2, r2, ip
 800a354:	faa4 f28c 	sel	r2, r4, ip
 800a358:	fa83 f34c 	uadd8	r3, r3, ip
 800a35c:	faa2 f38c 	sel	r3, r2, ip
 800a360:	bb4b      	cbnz	r3, 800a3b6 <strlen+0x96>
 800a362:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800a366:	fa82 f24c 	uadd8	r2, r2, ip
 800a36a:	f100 0008 	add.w	r0, r0, #8
 800a36e:	faa4 f28c 	sel	r2, r4, ip
 800a372:	fa83 f34c 	uadd8	r3, r3, ip
 800a376:	faa2 f38c 	sel	r3, r2, ip
 800a37a:	b9e3      	cbnz	r3, 800a3b6 <strlen+0x96>
 800a37c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800a380:	fa82 f24c 	uadd8	r2, r2, ip
 800a384:	f100 0008 	add.w	r0, r0, #8
 800a388:	faa4 f28c 	sel	r2, r4, ip
 800a38c:	fa83 f34c 	uadd8	r3, r3, ip
 800a390:	faa2 f38c 	sel	r3, r2, ip
 800a394:	b97b      	cbnz	r3, 800a3b6 <strlen+0x96>
 800a396:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800a39a:	f101 0120 	add.w	r1, r1, #32
 800a39e:	fa82 f24c 	uadd8	r2, r2, ip
 800a3a2:	f100 0008 	add.w	r0, r0, #8
 800a3a6:	faa4 f28c 	sel	r2, r4, ip
 800a3aa:	fa83 f34c 	uadd8	r3, r3, ip
 800a3ae:	faa2 f38c 	sel	r3, r2, ip
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0c6      	beq.n	800a344 <strlen+0x24>
 800a3b6:	2a00      	cmp	r2, #0
 800a3b8:	bf04      	itt	eq
 800a3ba:	3004      	addeq	r0, #4
 800a3bc:	461a      	moveq	r2, r3
 800a3be:	ba12      	rev	r2, r2
 800a3c0:	fab2 f282 	clz	r2, r2
 800a3c4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 800a3c8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800a3cc:	4770      	bx	lr
 800a3ce:	e9d1 2300 	ldrd	r2, r3, [r1]
 800a3d2:	f004 0503 	and.w	r5, r4, #3
 800a3d6:	f1c4 0000 	rsb	r0, r4, #0
 800a3da:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800a3de:	f014 0f04 	tst.w	r4, #4
 800a3e2:	f891 f040 	pld	[r1, #64]	; 0x40
 800a3e6:	fa0c f505 	lsl.w	r5, ip, r5
 800a3ea:	ea62 0205 	orn	r2, r2, r5
 800a3ee:	bf1c      	itt	ne
 800a3f0:	ea63 0305 	ornne	r3, r3, r5
 800a3f4:	4662      	movne	r2, ip
 800a3f6:	f04f 0400 	mov.w	r4, #0
 800a3fa:	e7a9      	b.n	800a350 <strlen+0x30>
 800a3fc:	0000      	movs	r0, r0
	...

0800a400 <__aeabi_uldivmod>:
 800a400:	b953      	cbnz	r3, 800a418 <__aeabi_uldivmod+0x18>
 800a402:	b94a      	cbnz	r2, 800a418 <__aeabi_uldivmod+0x18>
 800a404:	2900      	cmp	r1, #0
 800a406:	bf08      	it	eq
 800a408:	2800      	cmpeq	r0, #0
 800a40a:	bf1c      	itt	ne
 800a40c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800a410:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800a414:	f000 b984 	b.w	800a720 <__aeabi_idiv0>
 800a418:	f1ad 0c08 	sub.w	ip, sp, #8
 800a41c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800a420:	f000 f806 	bl	800a430 <__udivmoddi4>
 800a424:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a42c:	b004      	add	sp, #16
 800a42e:	4770      	bx	lr

0800a430 <__udivmoddi4>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	468c      	mov	ip, r1
 800a436:	460e      	mov	r6, r1
 800a438:	4604      	mov	r4, r0
 800a43a:	9d08      	ldr	r5, [sp, #32]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d150      	bne.n	800a4e2 <__udivmoddi4+0xb2>
 800a440:	428a      	cmp	r2, r1
 800a442:	4617      	mov	r7, r2
 800a444:	d96c      	bls.n	800a520 <__udivmoddi4+0xf0>
 800a446:	fab2 fe82 	clz	lr, r2
 800a44a:	f1be 0f00 	cmp.w	lr, #0
 800a44e:	d00b      	beq.n	800a468 <__udivmoddi4+0x38>
 800a450:	f1ce 0420 	rsb	r4, lr, #32
 800a454:	fa20 f404 	lsr.w	r4, r0, r4
 800a458:	fa01 f60e 	lsl.w	r6, r1, lr
 800a45c:	ea44 0c06 	orr.w	ip, r4, r6
 800a460:	fa02 f70e 	lsl.w	r7, r2, lr
 800a464:	fa00 f40e 	lsl.w	r4, r0, lr
 800a468:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800a46c:	0c22      	lsrs	r2, r4, #16
 800a46e:	fbbc f0f9 	udiv	r0, ip, r9
 800a472:	fa1f f887 	uxth.w	r8, r7
 800a476:	fb09 c610 	mls	r6, r9, r0, ip
 800a47a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a47e:	fb00 f308 	mul.w	r3, r0, r8
 800a482:	42b3      	cmp	r3, r6
 800a484:	d909      	bls.n	800a49a <__udivmoddi4+0x6a>
 800a486:	19f6      	adds	r6, r6, r7
 800a488:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a48c:	f080 8122 	bcs.w	800a6d4 <__udivmoddi4+0x2a4>
 800a490:	42b3      	cmp	r3, r6
 800a492:	f240 811f 	bls.w	800a6d4 <__udivmoddi4+0x2a4>
 800a496:	3802      	subs	r0, #2
 800a498:	443e      	add	r6, r7
 800a49a:	1af6      	subs	r6, r6, r3
 800a49c:	b2a2      	uxth	r2, r4
 800a49e:	fbb6 f3f9 	udiv	r3, r6, r9
 800a4a2:	fb09 6613 	mls	r6, r9, r3, r6
 800a4a6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a4aa:	fb03 f808 	mul.w	r8, r3, r8
 800a4ae:	45a0      	cmp	r8, r4
 800a4b0:	d909      	bls.n	800a4c6 <__udivmoddi4+0x96>
 800a4b2:	19e4      	adds	r4, r4, r7
 800a4b4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a4b8:	f080 810a 	bcs.w	800a6d0 <__udivmoddi4+0x2a0>
 800a4bc:	45a0      	cmp	r8, r4
 800a4be:	f240 8107 	bls.w	800a6d0 <__udivmoddi4+0x2a0>
 800a4c2:	3b02      	subs	r3, #2
 800a4c4:	443c      	add	r4, r7
 800a4c6:	ebc8 0404 	rsb	r4, r8, r4
 800a4ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	2d00      	cmp	r5, #0
 800a4d2:	d062      	beq.n	800a59a <__udivmoddi4+0x16a>
 800a4d4:	fa24 f40e 	lsr.w	r4, r4, lr
 800a4d8:	2300      	movs	r3, #0
 800a4da:	602c      	str	r4, [r5, #0]
 800a4dc:	606b      	str	r3, [r5, #4]
 800a4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e2:	428b      	cmp	r3, r1
 800a4e4:	d907      	bls.n	800a4f6 <__udivmoddi4+0xc6>
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	d055      	beq.n	800a596 <__udivmoddi4+0x166>
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	e885 0041 	stmia.w	r5, {r0, r6}
 800a4f0:	4608      	mov	r0, r1
 800a4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f6:	fab3 f183 	clz	r1, r3
 800a4fa:	2900      	cmp	r1, #0
 800a4fc:	f040 8090 	bne.w	800a620 <__udivmoddi4+0x1f0>
 800a500:	42b3      	cmp	r3, r6
 800a502:	d302      	bcc.n	800a50a <__udivmoddi4+0xda>
 800a504:	4282      	cmp	r2, r0
 800a506:	f200 80f8 	bhi.w	800a6fa <__udivmoddi4+0x2ca>
 800a50a:	1a84      	subs	r4, r0, r2
 800a50c:	eb66 0603 	sbc.w	r6, r6, r3
 800a510:	2001      	movs	r0, #1
 800a512:	46b4      	mov	ip, r6
 800a514:	2d00      	cmp	r5, #0
 800a516:	d040      	beq.n	800a59a <__udivmoddi4+0x16a>
 800a518:	e885 1010 	stmia.w	r5, {r4, ip}
 800a51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a520:	b912      	cbnz	r2, 800a528 <__udivmoddi4+0xf8>
 800a522:	2701      	movs	r7, #1
 800a524:	fbb7 f7f2 	udiv	r7, r7, r2
 800a528:	fab7 fe87 	clz	lr, r7
 800a52c:	f1be 0f00 	cmp.w	lr, #0
 800a530:	d135      	bne.n	800a59e <__udivmoddi4+0x16e>
 800a532:	1bf3      	subs	r3, r6, r7
 800a534:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a538:	fa1f fc87 	uxth.w	ip, r7
 800a53c:	2101      	movs	r1, #1
 800a53e:	fbb3 f0f8 	udiv	r0, r3, r8
 800a542:	0c22      	lsrs	r2, r4, #16
 800a544:	fb08 3610 	mls	r6, r8, r0, r3
 800a548:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a54c:	fb0c f300 	mul.w	r3, ip, r0
 800a550:	42b3      	cmp	r3, r6
 800a552:	d907      	bls.n	800a564 <__udivmoddi4+0x134>
 800a554:	19f6      	adds	r6, r6, r7
 800a556:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a55a:	d202      	bcs.n	800a562 <__udivmoddi4+0x132>
 800a55c:	42b3      	cmp	r3, r6
 800a55e:	f200 80ce 	bhi.w	800a6fe <__udivmoddi4+0x2ce>
 800a562:	4610      	mov	r0, r2
 800a564:	1af6      	subs	r6, r6, r3
 800a566:	b2a2      	uxth	r2, r4
 800a568:	fbb6 f3f8 	udiv	r3, r6, r8
 800a56c:	fb08 6613 	mls	r6, r8, r3, r6
 800a570:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a574:	fb0c fc03 	mul.w	ip, ip, r3
 800a578:	45a4      	cmp	ip, r4
 800a57a:	d907      	bls.n	800a58c <__udivmoddi4+0x15c>
 800a57c:	19e4      	adds	r4, r4, r7
 800a57e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a582:	d202      	bcs.n	800a58a <__udivmoddi4+0x15a>
 800a584:	45a4      	cmp	ip, r4
 800a586:	f200 80b5 	bhi.w	800a6f4 <__udivmoddi4+0x2c4>
 800a58a:	4613      	mov	r3, r2
 800a58c:	ebcc 0404 	rsb	r4, ip, r4
 800a590:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a594:	e79c      	b.n	800a4d0 <__udivmoddi4+0xa0>
 800a596:	4629      	mov	r1, r5
 800a598:	4628      	mov	r0, r5
 800a59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a59e:	f1ce 0120 	rsb	r1, lr, #32
 800a5a2:	fa06 f30e 	lsl.w	r3, r6, lr
 800a5a6:	fa07 f70e 	lsl.w	r7, r7, lr
 800a5aa:	fa20 f901 	lsr.w	r9, r0, r1
 800a5ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a5b2:	40ce      	lsrs	r6, r1
 800a5b4:	ea49 0903 	orr.w	r9, r9, r3
 800a5b8:	fbb6 faf8 	udiv	sl, r6, r8
 800a5bc:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800a5c0:	fb08 661a 	mls	r6, r8, sl, r6
 800a5c4:	fa1f fc87 	uxth.w	ip, r7
 800a5c8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800a5cc:	fb0a f20c 	mul.w	r2, sl, ip
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	fa00 f40e 	lsl.w	r4, r0, lr
 800a5d6:	d90a      	bls.n	800a5ee <__udivmoddi4+0x1be>
 800a5d8:	19db      	adds	r3, r3, r7
 800a5da:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800a5de:	f080 8087 	bcs.w	800a6f0 <__udivmoddi4+0x2c0>
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	f240 8084 	bls.w	800a6f0 <__udivmoddi4+0x2c0>
 800a5e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5ec:	443b      	add	r3, r7
 800a5ee:	1a9b      	subs	r3, r3, r2
 800a5f0:	fa1f f989 	uxth.w	r9, r9
 800a5f4:	fbb3 f1f8 	udiv	r1, r3, r8
 800a5f8:	fb08 3311 	mls	r3, r8, r1, r3
 800a5fc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800a600:	fb01 f60c 	mul.w	r6, r1, ip
 800a604:	429e      	cmp	r6, r3
 800a606:	d907      	bls.n	800a618 <__udivmoddi4+0x1e8>
 800a608:	19db      	adds	r3, r3, r7
 800a60a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800a60e:	d26b      	bcs.n	800a6e8 <__udivmoddi4+0x2b8>
 800a610:	429e      	cmp	r6, r3
 800a612:	d969      	bls.n	800a6e8 <__udivmoddi4+0x2b8>
 800a614:	3902      	subs	r1, #2
 800a616:	443b      	add	r3, r7
 800a618:	1b9b      	subs	r3, r3, r6
 800a61a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a61e:	e78e      	b.n	800a53e <__udivmoddi4+0x10e>
 800a620:	f1c1 0e20 	rsb	lr, r1, #32
 800a624:	fa22 f40e 	lsr.w	r4, r2, lr
 800a628:	408b      	lsls	r3, r1
 800a62a:	4323      	orrs	r3, r4
 800a62c:	fa20 f70e 	lsr.w	r7, r0, lr
 800a630:	fa06 f401 	lsl.w	r4, r6, r1
 800a634:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a638:	fa26 f60e 	lsr.w	r6, r6, lr
 800a63c:	433c      	orrs	r4, r7
 800a63e:	fbb6 f9fc 	udiv	r9, r6, ip
 800a642:	0c27      	lsrs	r7, r4, #16
 800a644:	fb0c 6619 	mls	r6, ip, r9, r6
 800a648:	fa1f f883 	uxth.w	r8, r3
 800a64c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800a650:	fb09 f708 	mul.w	r7, r9, r8
 800a654:	42b7      	cmp	r7, r6
 800a656:	fa02 f201 	lsl.w	r2, r2, r1
 800a65a:	fa00 fa01 	lsl.w	sl, r0, r1
 800a65e:	d908      	bls.n	800a672 <__udivmoddi4+0x242>
 800a660:	18f6      	adds	r6, r6, r3
 800a662:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800a666:	d241      	bcs.n	800a6ec <__udivmoddi4+0x2bc>
 800a668:	42b7      	cmp	r7, r6
 800a66a:	d93f      	bls.n	800a6ec <__udivmoddi4+0x2bc>
 800a66c:	f1a9 0902 	sub.w	r9, r9, #2
 800a670:	441e      	add	r6, r3
 800a672:	1bf6      	subs	r6, r6, r7
 800a674:	b2a0      	uxth	r0, r4
 800a676:	fbb6 f4fc 	udiv	r4, r6, ip
 800a67a:	fb0c 6614 	mls	r6, ip, r4, r6
 800a67e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800a682:	fb04 f808 	mul.w	r8, r4, r8
 800a686:	45b8      	cmp	r8, r7
 800a688:	d907      	bls.n	800a69a <__udivmoddi4+0x26a>
 800a68a:	18ff      	adds	r7, r7, r3
 800a68c:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
 800a690:	d228      	bcs.n	800a6e4 <__udivmoddi4+0x2b4>
 800a692:	45b8      	cmp	r8, r7
 800a694:	d926      	bls.n	800a6e4 <__udivmoddi4+0x2b4>
 800a696:	3c02      	subs	r4, #2
 800a698:	441f      	add	r7, r3
 800a69a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800a69e:	ebc8 0707 	rsb	r7, r8, r7
 800a6a2:	fba0 8902 	umull	r8, r9, r0, r2
 800a6a6:	454f      	cmp	r7, r9
 800a6a8:	4644      	mov	r4, r8
 800a6aa:	464e      	mov	r6, r9
 800a6ac:	d314      	bcc.n	800a6d8 <__udivmoddi4+0x2a8>
 800a6ae:	d029      	beq.n	800a704 <__udivmoddi4+0x2d4>
 800a6b0:	b365      	cbz	r5, 800a70c <__udivmoddi4+0x2dc>
 800a6b2:	ebba 0304 	subs.w	r3, sl, r4
 800a6b6:	eb67 0706 	sbc.w	r7, r7, r6
 800a6ba:	fa07 fe0e 	lsl.w	lr, r7, lr
 800a6be:	40cb      	lsrs	r3, r1
 800a6c0:	40cf      	lsrs	r7, r1
 800a6c2:	ea4e 0303 	orr.w	r3, lr, r3
 800a6c6:	e885 0088 	stmia.w	r5, {r3, r7}
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	e6f8      	b.n	800a4c6 <__udivmoddi4+0x96>
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	e6e0      	b.n	800a49a <__udivmoddi4+0x6a>
 800a6d8:	ebb8 0402 	subs.w	r4, r8, r2
 800a6dc:	eb69 0603 	sbc.w	r6, r9, r3
 800a6e0:	3801      	subs	r0, #1
 800a6e2:	e7e5      	b.n	800a6b0 <__udivmoddi4+0x280>
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	e7d8      	b.n	800a69a <__udivmoddi4+0x26a>
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	e795      	b.n	800a618 <__udivmoddi4+0x1e8>
 800a6ec:	4681      	mov	r9, r0
 800a6ee:	e7c0      	b.n	800a672 <__udivmoddi4+0x242>
 800a6f0:	468a      	mov	sl, r1
 800a6f2:	e77c      	b.n	800a5ee <__udivmoddi4+0x1be>
 800a6f4:	3b02      	subs	r3, #2
 800a6f6:	443c      	add	r4, r7
 800a6f8:	e748      	b.n	800a58c <__udivmoddi4+0x15c>
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	e70a      	b.n	800a514 <__udivmoddi4+0xe4>
 800a6fe:	3802      	subs	r0, #2
 800a700:	443e      	add	r6, r7
 800a702:	e72f      	b.n	800a564 <__udivmoddi4+0x134>
 800a704:	45c2      	cmp	sl, r8
 800a706:	d3e7      	bcc.n	800a6d8 <__udivmoddi4+0x2a8>
 800a708:	463e      	mov	r6, r7
 800a70a:	e7d1      	b.n	800a6b0 <__udivmoddi4+0x280>
 800a70c:	4629      	mov	r1, r5
 800a70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a712:	bf00      	nop
	...

0800a720 <__aeabi_idiv0>:
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
	...

0800a730 <__core_init>:
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
	...

0800a740 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
	...

0800a750 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800a750:	e7fe      	b.n	800a750 <__default_exit>
 800a752:	bf00      	nop
	...

0800a760 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800a760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a762:	4f13      	ldr	r7, [pc, #76]	; (800a7b0 <__init_ram_areas+0x50>)
 800a764:	4d13      	ldr	r5, [pc, #76]	; (800a7b4 <__init_ram_areas+0x54>)
 800a766:	4c14      	ldr	r4, [pc, #80]	; (800a7b8 <__init_ram_areas+0x58>)
 800a768:	4b14      	ldr	r3, [pc, #80]	; (800a7bc <__init_ram_areas+0x5c>)
 800a76a:	4915      	ldr	r1, [pc, #84]	; (800a7c0 <__init_ram_areas+0x60>)
 800a76c:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800a770:	2600      	movs	r6, #0
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800a772:	429c      	cmp	r4, r3
 800a774:	d911      	bls.n	800a79a <__init_ram_areas+0x3a>
 800a776:	3904      	subs	r1, #4
 800a778:	461a      	mov	r2, r3
      *p = *tp;
 800a77a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800a77e:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800a782:	4294      	cmp	r4, r2
 800a784:	d8f9      	bhi.n	800a77a <__init_ram_areas+0x1a>
 800a786:	43da      	mvns	r2, r3
 800a788:	4414      	add	r4, r2
 800a78a:	f024 0403 	bic.w	r4, r4, #3
 800a78e:	3404      	adds	r4, #4
 800a790:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800a792:	429d      	cmp	r5, r3
 800a794:	d903      	bls.n	800a79e <__init_ram_areas+0x3e>
      *p = 0;
 800a796:	f843 6b04 	str.w	r6, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800a79a:	429d      	cmp	r5, r3
 800a79c:	d8fb      	bhi.n	800a796 <__init_ram_areas+0x36>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800a79e:	4577      	cmp	r7, lr
 800a7a0:	d005      	beq.n	800a7ae <__init_ram_areas+0x4e>
 800a7a2:	6939      	ldr	r1, [r7, #16]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	69bc      	ldr	r4, [r7, #24]
 800a7a8:	69fd      	ldr	r5, [r7, #28]
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	e7e1      	b.n	800a772 <__init_ram_areas+0x12>
 800a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7b0:	080159c0 	.word	0x080159c0
 800a7b4:	20001c6c 	.word	0x20001c6c
 800a7b8:	20001c6c 	.word	0x20001c6c
 800a7bc:	20001c6c 	.word	0x20001c6c
 800a7c0:	080176f4 	.word	0x080176f4
	...

0800a7d0 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800a7d0:	e7fe      	b.n	800a7d0 <_unhandled_exception>
 800a7d2:	bf00      	nop
	...

0800a7e0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800a7e0:	e7fe      	b.n	800a7e0 <_idle_thread>
 800a7e2:	bf00      	nop
	...

0800a7f0 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800a7f0:	4b20      	ldr	r3, [pc, #128]	; (800a874 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800a7f2:	4a21      	ldr	r2, [pc, #132]	; (800a878 <chSysInit+0x88>)
  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800a7f4:	4821      	ldr	r0, [pc, #132]	; (800a87c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800a7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800a7f8:	2400      	movs	r4, #0
 800a7fa:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a7fc:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800a7fe:	4e20      	ldr	r6, [pc, #128]	; (800a880 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800a800:	4d20      	ldr	r5, [pc, #128]	; (800a884 <chSysInit+0x94>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 800a802:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800a806:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                   |
 800a808:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800a80a:	60da      	str	r2, [r3, #12]
 800a80c:	68f2      	ldr	r2, [r6, #12]
 800a80e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a812:	60f2      	str	r2, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800a814:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a816:	2120      	movs	r1, #32
 800a818:	f042 0201 	orr.w	r2, r2, #1
 800a81c:	2610      	movs	r6, #16
 800a81e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800a820:	b083      	sub	sp, #12
 800a822:	77de      	strb	r6, [r3, #31]
 800a824:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 800a828:	f000 f8fa 	bl	800aa20 <_scheduler_init>
  _vt_init();
 800a82c:	f000 f878 	bl	800a920 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800a830:	f000 fb5e 	bl	800aef0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800a834:	f000 fbb4 	bl	800afa0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800a838:	f000 fbea 	bl	800b010 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800a83c:	4628      	mov	r0, r5
 800a83e:	2140      	movs	r1, #64	; 0x40
 800a840:	f000 f9fe 	bl	800ac40 <_thread_init>
 800a844:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800a848:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800a84a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800a84c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a84e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800a852:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	490c      	ldr	r1, [pc, #48]	; (800a888 <chSysInit+0x98>)
 800a858:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800a85a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800a85e:	9400      	str	r4, [sp, #0]
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <chSysInit+0x9c>)
 800a862:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800a866:	f000 fa43 	bl	800acf0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800a86a:	4b09      	ldr	r3, [pc, #36]	; (800a890 <chSysInit+0xa0>)
 800a86c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800a86e:	b003      	add	sp, #12
 800a870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a872:	bf00      	nop
 800a874:	e000ed00 	.word	0xe000ed00
 800a878:	05fa0300 	.word	0x05fa0300
 800a87c:	e0001000 	.word	0xe0001000
 800a880:	e000edf0 	.word	0xe000edf0
 800a884:	200010c0 	.word	0x200010c0
 800a888:	08015a50 	.word	0x08015a50
 800a88c:	0800a7e1 	.word	0x0800a7e1
 800a890:	08015a40 	.word	0x08015a40
	...

0800a8a0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800a8a2:	4d13      	ldr	r5, [pc, #76]	; (800a8f0 <chSysTimerHandlerI+0x50>)
 800a8a4:	69aa      	ldr	r2, [r5, #24]
 800a8a6:	7fd3      	ldrb	r3, [r2, #31]
 800a8a8:	b10b      	cbz	r3, 800a8ae <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800a8ae:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800a8b0:	69eb      	ldr	r3, [r5, #28]
 800a8b2:	4e10      	ldr	r6, [pc, #64]	; (800a8f4 <chSysTimerHandlerI+0x54>)
 800a8b4:	3101      	adds	r1, #1
 800a8b6:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800a8b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800a8ba:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800a8bc:	f102 0201 	add.w	r2, r2, #1
 800a8c0:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800a8c2:	d013      	beq.n	800a8ec <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800a8c4:	689c      	ldr	r4, [r3, #8]
 800a8c6:	3c01      	subs	r4, #1
 800a8c8:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800a8ca:	b97c      	cbnz	r4, 800a8ec <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a8cc:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800a8ce:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 800a8d0:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800a8d2:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800a8d4:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800a8d6:	61ea      	str	r2, [r5, #28]
 800a8d8:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800a8dc:	6918      	ldr	r0, [r3, #16]
 800a8de:	4788      	blx	r1
 800a8e0:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800a8e4:	69eb      	ldr	r3, [r5, #28]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	d0f0      	beq.n	800a8ce <chSysTimerHandlerI+0x2e>
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20001090 	.word	0x20001090
 800a8f4:	200010ac 	.word	0x200010ac
	...

0800a900 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800a900:	4a03      	ldr	r2, [pc, #12]	; (800a910 <chSysPolledDelayX+0x10>)
 800a902:	6851      	ldr	r1, [r2, #4]
 800a904:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800a906:	1a5b      	subs	r3, r3, r1
 800a908:	4283      	cmp	r3, r0
 800a90a:	d3fb      	bcc.n	800a904 <chSysPolledDelayX+0x4>
  }
}
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	e0001000 	.word	0xe0001000
	...

0800a920 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800a922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800a926:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800a92a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800a92c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800a92e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800a930:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800a932:	621a      	str	r2, [r3, #32]
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20001090 	.word	0x20001090
 800a93c:	00000000 	.word	0x00000000

0800a940 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800a940:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800a942:	4e0d      	ldr	r6, [pc, #52]	; (800a978 <chVTDoSetI+0x38>)
 800a944:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 800a946:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800a948:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800a94a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800a94c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800a94e:	d904      	bls.n	800a95a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800a950:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 800a952:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800a954:	68a5      	ldr	r5, [r4, #8]
 800a956:	428d      	cmp	r5, r1
 800a958:	d3fa      	bcc.n	800a950 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800a95e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800a960:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800a962:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800a964:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800a966:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800a968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800a96c:	1a59      	subs	r1, r3, r1
 800a96e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800a970:	6272      	str	r2, [r6, #36]	; 0x24
}
 800a972:	bc70      	pop	{r4, r5, r6}
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20001090 	.word	0x20001090
 800a97c:	00000000 	.word	0x00000000

0800a980 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800a980:	6803      	ldr	r3, [r0, #0]
 800a982:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800a984:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800a986:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800a988:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800a98a:	4c06      	ldr	r4, [pc, #24]	; (800a9a4 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800a98c:	442a      	add	r2, r5
 800a98e:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800a990:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800a992:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800a994:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800a996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800a99a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800a99c:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800a99e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800a9a0:	bc30      	pop	{r4, r5}
 800a9a2:	4770      	bx	lr
 800a9a4:	20001090 	.word	0x20001090
	...

0800a9b0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 800a9b0:	b410      	push	{r4}
 800a9b2:	2320      	movs	r3, #32
 800a9b4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800a9b8:	7f03      	ldrb	r3, [r0, #28]
 800a9ba:	2b07      	cmp	r3, #7
 800a9bc:	d80e      	bhi.n	800a9dc <wakeup+0x2c>
 800a9be:	e8df f003 	tbb	[pc, r3]
 800a9c2:	0d27      	.short	0x0d27
 800a9c4:	0408230d 	.word	0x0408230d
 800a9c8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800a9ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800a9cc:	6893      	ldr	r3, [r2, #8]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800a9d2:	e890 000c 	ldmia.w	r0, {r2, r3}
 800a9d6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800a9d8:	6802      	ldr	r2, [r0, #0]
 800a9da:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800a9dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800a9e4:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800a9e6:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800a9e8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800a9ea:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	428a      	cmp	r2, r1
 800a9f0:	d2fb      	bcs.n	800a9ea <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800a9f6:	6003      	str	r3, [r0, #0]
 800a9f8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800a9fa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800a9fc:	6058      	str	r0, [r3, #4]
 800a9fe:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800aa02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa06:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 800aa08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]
    break;
 800aa0e:	e7e5      	b.n	800a9dc <wakeup+0x2c>
 800aa10:	2300      	movs	r3, #0
 800aa12:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800aa16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	20001090 	.word	0x20001090

0800aa20 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800aa20:	4b03      	ldr	r3, [pc, #12]	; (800aa30 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800aa22:	2200      	movs	r2, #0
 800aa24:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800aa26:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800aa28:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800aa2a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800aa2c:	609a      	str	r2, [r3, #8]
 800aa2e:	4770      	bx	lr
 800aa30:	20001090 	.word	0x20001090
	...

0800aa40 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800aa40:	2200      	movs	r2, #0
 800aa42:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800aa44:	4b08      	ldr	r3, [pc, #32]	; (800aa68 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 800aa46:	b410      	push	{r4}
 800aa48:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800aa4a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800aa4c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	428a      	cmp	r2, r1
 800aa52:	d2fb      	bcs.n	800aa4c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800aa58:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800aa5a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800aa5c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800aa5e:	605c      	str	r4, [r3, #4]

  return tp;
}
 800aa60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20001090 	.word	0x20001090
 800aa6c:	00000000 	.word	0x00000000

0800aa70 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800aa70:	4b08      	ldr	r3, [pc, #32]	; (800aa94 <chSchGoSleepS+0x24>)
 800aa72:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800aa74:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 800aa76:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800aa78:	7708      	strb	r0, [r1, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800aa7a:	2004      	movs	r0, #4
 800aa7c:	77c8      	strb	r0, [r1, #31]

  tqp->p_next = tp->p_next;
 800aa7e:	6810      	ldr	r0, [r2, #0]
 800aa80:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800aa82:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800aa84:	6043      	str	r3, [r0, #4]
 800aa86:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 800aa88:	4610      	mov	r0, r2
}
 800aa8a:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800aa8e:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800aa90:	f7f5 bc3e 	b.w	8000310 <_port_switch>
 800aa94:	20001090 	.word	0x20001090
	...

0800aaa0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800aaa0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800aaa2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800aaa4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800aaa6:	d012      	beq.n	800aace <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800aaa8:	4c0c      	ldr	r4, [pc, #48]	; (800aadc <chSchGoSleepTimeoutS+0x3c>)
 800aaaa:	4a0d      	ldr	r2, [pc, #52]	; (800aae0 <chSchGoSleepTimeoutS+0x40>)
 800aaac:	69a3      	ldr	r3, [r4, #24]
 800aaae:	4605      	mov	r5, r0
 800aab0:	a801      	add	r0, sp, #4
 800aab2:	f7ff ff45 	bl	800a940 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800aab6:	4628      	mov	r0, r5
 800aab8:	f7ff ffda 	bl	800aa70 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800aabc:	9b04      	ldr	r3, [sp, #16]
 800aabe:	b113      	cbz	r3, 800aac6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800aac0:	a801      	add	r0, sp, #4
 800aac2:	f7ff ff5d 	bl	800a980 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800aac6:	69a3      	ldr	r3, [r4, #24]
}
 800aac8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aaca:	b007      	add	sp, #28
 800aacc:	bd30      	pop	{r4, r5, pc}
 800aace:	4c03      	ldr	r4, [pc, #12]	; (800aadc <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800aad0:	f7ff ffce 	bl	800aa70 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800aad4:	69a3      	ldr	r3, [r4, #24]
}
 800aad6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aad8:	b007      	add	sp, #28
 800aada:	bd30      	pop	{r4, r5, pc}
 800aadc:	20001090 	.word	0x20001090
 800aae0:	0800a9b1 	.word	0x0800a9b1
	...

0800aaf0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800aaf0:	4b14      	ldr	r3, [pc, #80]	; (800ab44 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800aaf2:	b470      	push	{r4, r5, r6}
 800aaf4:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800aaf6:	699d      	ldr	r5, [r3, #24]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800aaf8:	6241      	str	r1, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800aafa:	68a8      	ldr	r0, [r5, #8]
 800aafc:	68a1      	ldr	r1, [r4, #8]
 800aafe:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ab00:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ab04:	d80b      	bhi.n	800ab1e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ab06:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800ab08:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	4291      	cmp	r1, r2
 800ab0e:	d9fb      	bls.n	800ab08 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800ab14:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ab16:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800ab18:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800ab1a:	bc70      	pop	{r4, r5, r6}
 800ab1c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ab1e:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800ab20:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 800ab22:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800ab24:	6891      	ldr	r1, [r2, #8]
 800ab26:	4288      	cmp	r0, r1
 800ab28:	d9fb      	bls.n	800ab22 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800ab2a:	6850      	ldr	r0, [r2, #4]
 800ab2c:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800ab2e:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800ab30:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ab32:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 800ab34:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800ab36:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800ab3c:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800ab3e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800ab40:	f7f5 bbe6 	b.w	8000310 <_port_switch>
 800ab44:	20001090 	.word	0x20001090
	...

0800ab50 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ab50:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800ab52:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ab54:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ab56:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ab58:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800ab5a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ab5c:	b921      	cbnz	r1, 800ab68 <chSchIsPreemptionRequired+0x18>
 800ab5e:	4283      	cmp	r3, r0
 800ab60:	bf34      	ite	cc
 800ab62:	2000      	movcc	r0, #0
 800ab64:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800ab66:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ab68:	4283      	cmp	r3, r0
 800ab6a:	bf94      	ite	ls
 800ab6c:	2000      	movls	r0, #0
 800ab6e:	2001      	movhi	r0, #1
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	20001090 	.word	0x20001090
	...

0800ab80 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800ab80:	4a0e      	ldr	r2, [pc, #56]	; (800abbc <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800ab82:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800ab84:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 800ab86:	b470      	push	{r4, r5, r6}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ab88:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800ab8a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ab8c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ab8e:	2604      	movs	r6, #4
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ab90:	7701      	strb	r1, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ab92:	2500      	movs	r5, #0
 800ab94:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800ab96:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800ab98:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ab9a:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ab9c:	7725      	strb	r5, [r4, #28]
 800ab9e:	e000      	b.n	800aba2 <chSchDoRescheduleBehind+0x22>
 800aba0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	428a      	cmp	r2, r1
 800aba6:	d2fb      	bcs.n	800aba0 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800abac:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800abae:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800abb0:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800abb2:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 800abb4:	bc70      	pop	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800abb6:	f7f5 bbab 	b.w	8000310 <_port_switch>
 800abba:	bf00      	nop
 800abbc:	20001090 	.word	0x20001090

0800abc0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800abc0:	4a0d      	ldr	r2, [pc, #52]	; (800abf8 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800abc2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800abc4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 800abc6:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800abc8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800abca:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800abcc:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800abce:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800abd0:	7701      	strb	r1, [r0, #28]
 800abd2:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800abd4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800abd6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800abd8:	7725      	strb	r5, [r4, #28]
 800abda:	e000      	b.n	800abde <chSchDoRescheduleAhead+0x1e>
 800abdc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	428a      	cmp	r2, r1
 800abe2:	d8fb      	bhi.n	800abdc <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800abe8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800abea:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800abec:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800abee:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 800abf0:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800abf2:	f7f5 bb8d 	b.w	8000310 <_port_switch>
 800abf6:	bf00      	nop
 800abf8:	20001090 	.word	0x20001090
 800abfc:	00000000 	.word	0x00000000

0800ac00 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <chSchRescheduleS+0x14>)
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 800ac06:	6892      	ldr	r2, [r2, #8]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d800      	bhi.n	800ac10 <chSchRescheduleS+0x10>
 800ac0e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 800ac10:	f7ff bfd6 	b.w	800abc0 <chSchDoRescheduleAhead>
 800ac14:	20001090 	.word	0x20001090
	...

0800ac20 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800ac20:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <chSchDoReschedule+0x10>)
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	7fdb      	ldrb	r3, [r3, #31]
 800ac26:	b10b      	cbz	r3, 800ac2c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800ac28:	f7ff bfca 	b.w	800abc0 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800ac2c:	f7ff bfa8 	b.w	800ab80 <chSchDoRescheduleBehind>
 800ac30:	20001090 	.word	0x20001090
	...

0800ac40 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800ac40:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ac42:	4c0f      	ldr	r4, [pc, #60]	; (800ac80 <_thread_init+0x40>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800ac44:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ac46:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800ac48:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800ac4a:	2602      	movs	r6, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ac4c:	2200      	movs	r2, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800ac4e:	7706      	strb	r6, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800ac50:	f100 012c 	add.w	r1, r0, #44	; 0x2c

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ac54:	f04f 0e04 	mov.w	lr, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800ac58:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800ac5a:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ac5e:	6145      	str	r5, [r0, #20]
 800ac60:	6104      	str	r4, [r0, #16]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ac62:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800ac66:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ac68:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800ac6a:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800ac6c:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800ac6e:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800ac70:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800ac72:	6128      	str	r0, [r5, #16]
 800ac74:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800ac76:	6286      	str	r6, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800ac78:	62c1      	str	r1, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800ac7a:	6301      	str	r1, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800ac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20001090 	.word	0x20001090
	...

0800ac90 <chThdCreateI>:

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ac90:	3964      	subs	r1, #100	; 0x64
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 800ac92:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ac94:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ac96:	4e12      	ldr	r6, [pc, #72]	; (800ace0 <chThdCreateI+0x50>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ac98:	4d12      	ldr	r5, [pc, #72]	; (800ace4 <chThdCreateI+0x54>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ac9a:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ac9c:	60c1      	str	r1, [r0, #12]
 800ac9e:	640b      	str	r3, [r1, #64]	; 0x40
 800aca0:	9b05      	ldr	r3, [sp, #20]
 800aca2:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800aca4:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800aca6:	660d      	str	r5, [r1, #96]	; 0x60

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800aca8:	f04f 0e04 	mov.w	lr, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800acac:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800acae:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800acb0:	7703      	strb	r3, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800acb2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800acb6:	2300      	movs	r3, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800acb8:	2501      	movs	r5, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800acba:	f100 0128 	add.w	r1, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800acbe:	6106      	str	r6, [r0, #16]
 800acc0:	6147      	str	r7, [r0, #20]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800acc2:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800acc6:	7785      	strb	r5, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800acc8:	7743      	strb	r3, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800acca:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800accc:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800acce:	6203      	str	r3, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800acd0:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 800acd2:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800acd4:	6281      	str	r1, [r0, #40]	; 0x28
 800acd6:	6170      	str	r0, [r6, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800acd8:	62c2      	str	r2, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800acda:	6302      	str	r2, [r0, #48]	; 0x30
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 800acdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acde:	bf00      	nop
 800ace0:	20001090 	.word	0x20001090
 800ace4:	08000329 	.word	0x08000329
	...

0800acf0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	461d      	mov	r5, r3
 800acf4:	4604      	mov	r4, r0
 800acf6:	2320      	movs	r3, #32
 800acf8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800acfc:	3964      	subs	r1, #100	; 0x64
 800acfe:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ad00:	4e13      	ldr	r6, [pc, #76]	; (800ad50 <chThdCreateStatic+0x60>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ad02:	4b14      	ldr	r3, [pc, #80]	; (800ad54 <chThdCreateStatic+0x64>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ad04:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ad06:	60c1      	str	r1, [r0, #12]
 800ad08:	640d      	str	r5, [r1, #64]	; 0x40
 800ad0a:	9d06      	ldr	r5, [sp, #24]
 800ad0c:	644d      	str	r5, [r1, #68]	; 0x44
 800ad0e:	660b      	str	r3, [r1, #96]	; 0x60
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800ad10:	2502      	movs	r5, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ad12:	2304      	movs	r3, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800ad14:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800ad16:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800ad18:	7705      	strb	r5, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ad1a:	77c3      	strb	r3, [r0, #31]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ad1c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800ad1e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800ad22:	f100 0228 	add.w	r2, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800ad26:	2101      	movs	r1, #1
 800ad28:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ad2a:	6106      	str	r6, [r0, #16]
 800ad2c:	6147      	str	r7, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ad2e:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800ad30:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800ad32:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800ad34:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800ad36:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800ad38:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ad3a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800ad3c:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800ad3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800ad40:	6303      	str	r3, [r0, #48]	; 0x30
 800ad42:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800ad44:	f7ff fed4 	bl	800aaf0 <chSchWakeupS>
 800ad48:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad50:	20001090 	.word	0x20001090
 800ad54:	08000329 	.word	0x08000329
	...

0800ad60 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800ad60:	b508      	push	{r3, lr}
 800ad62:	4601      	mov	r1, r0
 800ad64:	2320      	movs	r3, #32
 800ad66:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800ad6a:	2008      	movs	r0, #8
 800ad6c:	f7ff fe98 	bl	800aaa0 <chSchGoSleepTimeoutS>
 800ad70:	2300      	movs	r3, #0
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	bd08      	pop	{r3, pc}
	...

0800ad80 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800ad80:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800ad82:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <chThdExitS+0x3c>)
 800ad84:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800ad86:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800ad88:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800ad8a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800ad8e:	429d      	cmp	r5, r3
 800ad90:	d007      	beq.n	800ada2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7ff fe52 	bl	800aa40 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800ad9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800ad9e:	42ab      	cmp	r3, r5
 800ada0:	d1f7      	bne.n	800ad92 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800ada2:	7f63      	ldrb	r3, [r4, #29]
 800ada4:	079b      	lsls	r3, r3, #30
 800ada6:	d104      	bne.n	800adb2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800ada8:	6963      	ldr	r3, [r4, #20]
 800adaa:	6922      	ldr	r2, [r4, #16]
 800adac:	611a      	str	r2, [r3, #16]
 800adae:	6922      	ldr	r2, [r4, #16]
 800adb0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800adb2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800adb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800adb8:	f7ff be5a 	b.w	800aa70 <chSchGoSleepS>
 800adbc:	20001090 	.word	0x20001090

0800adc0 <chThdExit>:
 800adc0:	2320      	movs	r3, #32
 800adc2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 800adc6:	f7ff bfdb 	b.w	800ad80 <chThdExitS>
 800adca:	bf00      	nop
 800adcc:	0000      	movs	r0, r0
	...

0800add0 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800add0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800add2:	4c05      	ldr	r4, [pc, #20]	; (800ade8 <chThdSuspendS+0x18>)
 800add4:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 800add6:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800add8:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 800adda:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800addc:	2003      	movs	r0, #3
 800adde:	f7ff fe47 	bl	800aa70 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 800ade2:	69a3      	ldr	r3, [r4, #24]
}
 800ade4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ade6:	bd10      	pop	{r4, pc}
 800ade8:	20001090 	.word	0x20001090
 800adec:	00000000 	.word	0x00000000

0800adf0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800adf0:	6803      	ldr	r3, [r0, #0]
 800adf2:	b12b      	cbz	r3, 800ae00 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800adf4:	2200      	movs	r2, #0
 800adf6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800adf8:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800adfa:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800adfc:	f7ff be20 	b.w	800aa40 <chSchReadyI>
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
	...

0800ae10 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800ae10:	b169      	cbz	r1, 800ae2e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800ae12:	4b08      	ldr	r3, [pc, #32]	; (800ae34 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800ae14:	b410      	push	{r4}
 800ae16:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800ae18:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800ae1a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800ae1c:	2004      	movs	r0, #4
 800ae1e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 800ae22:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800ae24:	6053      	str	r3, [r2, #4]
}
 800ae26:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800ae2a:	f7ff be39 	b.w	800aaa0 <chSchGoSleepTimeoutS>
}
 800ae2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae32:	4770      	bx	lr
 800ae34:	20001090 	.word	0x20001090
	...

0800ae40 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800ae40:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800ae42:	4290      	cmp	r0, r2
 800ae44:	d00a      	beq.n	800ae5c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800ae46:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800ae48:	6814      	ldr	r4, [r2, #0]
 800ae4a:	6004      	str	r4, [r0, #0]
 800ae4c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ae4e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800ae50:	6251      	str	r1, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 800ae52:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800ae54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae58:	f7ff bdf2 	b.w	800aa40 <chSchReadyI>
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop

0800ae60 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800ae60:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800ae62:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800ae64:	4298      	cmp	r0, r3
 800ae66:	d00b      	beq.n	800ae80 <chThdDequeueAllI+0x20>
 800ae68:	4604      	mov	r4, r0
 800ae6a:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	6022      	str	r2, [r4, #0]
 800ae70:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ae72:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800ae74:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800ae76:	f7ff fde3 	bl	800aa40 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	429c      	cmp	r4, r3
 800ae7e:	d1f5      	bne.n	800ae6c <chThdDequeueAllI+0xc>
 800ae80:	bd38      	pop	{r3, r4, r5, pc}
 800ae82:	bf00      	nop
	...

0800ae90 <chTMStartMeasurementX>:
 800ae90:	4b01      	ldr	r3, [pc, #4]	; (800ae98 <chTMStartMeasurementX+0x8>)
 800ae92:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800ae94:	6083      	str	r3, [r0, #8]
 800ae96:	4770      	bx	lr
 800ae98:	e0001000 	.word	0xe0001000
 800ae9c:	00000000 	.word	0x00000000

0800aea0 <chTMStopMeasurementX>:
 800aea0:	4b0e      	ldr	r3, [pc, #56]	; (800aedc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800aea2:	490f      	ldr	r1, [pc, #60]	; (800aee0 <chTMStopMeasurementX+0x40>)
 800aea4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800aea6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800aea8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800aeaa:	6f8f      	ldr	r7, [r1, #120]	; 0x78
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800aeac:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800aeae:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800aeb0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800aeb8:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800aeba:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800aebc:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800aebe:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800aec2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800aec4:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800aec8:	bf88      	it	hi
 800aeca:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800aecc:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800aece:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800aed0:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 800aed4:	bf38      	it	cc
 800aed6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800aed8:	bcf0      	pop	{r4, r5, r6, r7}
 800aeda:	4770      	bx	lr
 800aedc:	e0001000 	.word	0xe0001000
 800aee0:	20001090 	.word	0x20001090
	...

0800aef0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800aef0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800aef2:	4c0c      	ldr	r4, [pc, #48]	; (800af24 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800aef4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800aef6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800aef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800aefc:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800aefe:	2600      	movs	r6, #0
 800af00:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800af02:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800af04:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 800af06:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800af08:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800af0a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800af0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800af10:	f7ff ffbe 	bl	800ae90 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800af14:	4668      	mov	r0, sp
 800af16:	f7ff ffc3 	bl	800aea0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800af1a:	9b02      	ldr	r3, [sp, #8]
 800af1c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800af1e:	b006      	add	sp, #24
 800af20:	bdd0      	pop	{r4, r6, r7, pc}
 800af22:	bf00      	nop
 800af24:	20001090 	.word	0x20001090
	...

0800af30 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800af30:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800af32:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800af34:	6040      	str	r0, [r0, #4]
 800af36:	6083      	str	r3, [r0, #8]
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	0000      	movs	r0, r0
	...

0800af40 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800af40:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800af42:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800af44:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800af46:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800af48:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800af4a:	d009      	beq.n	800af60 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800af4c:	2a0b      	cmp	r2, #11
 800af4e:	d000      	beq.n	800af52 <chEvtSignalI+0x12>
 800af50:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800af52:	6a43      	ldr	r3, [r0, #36]	; 0x24

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800af54:	438b      	bics	r3, r1
 800af56:	d1fb      	bne.n	800af50 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800af5c:	f7ff bd70 	b.w	800aa40 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800af60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800af62:	4219      	tst	r1, r3
 800af64:	d1f8      	bne.n	800af58 <chEvtSignalI+0x18>
 800af66:	4770      	bx	lr
	...

0800af70 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800af70:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 800af72:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800af74:	42a0      	cmp	r0, r4
 800af76:	d00f      	beq.n	800af98 <chEvtBroadcastFlagsI+0x28>
 800af78:	4606      	mov	r6, r0
 800af7a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 800af7c:	68e3      	ldr	r3, [r4, #12]
 800af7e:	432b      	orrs	r3, r5
 800af80:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800af82:	b115      	cbz	r5, 800af8a <chEvtBroadcastFlagsI+0x1a>
 800af84:	6922      	ldr	r2, [r4, #16]
 800af86:	4213      	tst	r3, r2
 800af88:	d003      	beq.n	800af92 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800af8a:	68a1      	ldr	r1, [r4, #8]
 800af8c:	6860      	ldr	r0, [r4, #4]
 800af8e:	f7ff ffd7 	bl	800af40 <chEvtSignalI>
    }
    elp = elp->el_next;
 800af92:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800af94:	42a6      	cmp	r6, r4
 800af96:	d1f1      	bne.n	800af7c <chEvtBroadcastFlagsI+0xc>
 800af98:	bd70      	pop	{r4, r5, r6, pc}
 800af9a:	bf00      	nop
 800af9c:	0000      	movs	r0, r0
	...

0800afa0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800afa0:	4a05      	ldr	r2, [pc, #20]	; (800afb8 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800afa2:	4b06      	ldr	r3, [pc, #24]	; (800afbc <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800afa4:	4806      	ldr	r0, [pc, #24]	; (800afc0 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800afa6:	4907      	ldr	r1, [pc, #28]	; (800afc4 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800afa8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800afac:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800afb0:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800afb2:	600b      	str	r3, [r1, #0]
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20001c77 	.word	0x20001c77
 800afbc:	20020000 	.word	0x20020000
 800afc0:	200012ec 	.word	0x200012ec
 800afc4:	200012e8 	.word	0x200012e8
	...

0800afd0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800afd0:	b410      	push	{r4}
 800afd2:	2320      	movs	r3, #32
 800afd4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800afd8:	4c09      	ldr	r4, [pc, #36]	; (800b000 <chCoreAlloc+0x30>)
 800afda:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <chCoreAlloc+0x34>)
 800afdc:	6822      	ldr	r2, [r4, #0]
 800afde:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800afe0:	1dc3      	adds	r3, r0, #7
 800afe2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800afe6:	1a89      	subs	r1, r1, r2
 800afe8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800afea:	bf9d      	ittte	ls
 800afec:	189b      	addls	r3, r3, r2
 800afee:	6023      	strls	r3, [r4, #0]

  return p;
 800aff0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 800aff2:	2000      	movhi	r0, #0
 800aff4:	2300      	movs	r3, #0
 800aff6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800affa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	200012ec 	.word	0x200012ec
 800b004:	200012e8 	.word	0x200012e8
	...

0800b010 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800b010:	4b04      	ldr	r3, [pc, #16]	; (800b024 <_heap_init+0x14>)
 800b012:	4a05      	ldr	r2, [pc, #20]	; (800b028 <_heap_init+0x18>)
 800b014:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800b016:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800b01a:	2200      	movs	r2, #0
 800b01c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800b01e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800b020:	f7ff bf86 	b.w	800af30 <chMtxObjectInit>
 800b024:	200012f0 	.word	0x200012f0
 800b028:	0800afd1 	.word	0x0800afd1
 800b02c:	00000000 	.word	0x00000000

0800b030 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800b030:	4a06      	ldr	r2, [pc, #24]	; (800b04c <SVC_Handler+0x1c>)
 800b032:	6853      	ldr	r3, [r2, #4]
 800b034:	f023 0301 	bic.w	r3, r3, #1
 800b038:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800b03a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800b03e:	3368      	adds	r3, #104	; 0x68
 800b040:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800b044:	2300      	movs	r3, #0
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	4770      	bx	lr
 800b04c:	e000ef30 	.word	0xe000ef30

0800b050 <_port_irq_epilogue>:
 800b050:	2320      	movs	r3, #32
 800b052:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800b056:	4b12      	ldr	r3, [pc, #72]	; (800b0a0 <_port_irq_epilogue+0x50>)
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800b05e:	d102      	bne.n	800b066 <_port_irq_epilogue+0x16>
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800b066:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800b068:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800b06c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800b070:	4b0c      	ldr	r3, [pc, #48]	; (800b0a4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800b072:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800b07c:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800b080:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 800b084:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800b088:	f7ff fd62 	bl	800ab50 <chSchIsPreemptionRequired>
 800b08c:	b118      	cbz	r0, 800b096 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800b08e:	4b06      	ldr	r3, [pc, #24]	; (800b0a8 <_port_irq_epilogue+0x58>)
 800b090:	f844 3c50 	str.w	r3, [r4, #-80]
 800b094:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800b096:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <_port_irq_epilogue+0x5c>)
 800b098:	f844 3c50 	str.w	r3, [r4, #-80]
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	bf00      	nop
 800b0a0:	e000ed00 	.word	0xe000ed00
 800b0a4:	e000ef30 	.word	0xe000ef30
 800b0a8:	08000339 	.word	0x08000339
 800b0ac:	0800033c 	.word	0x0800033c

0800b0b0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800b0b0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800b0b2:	f001 f825 	bl	800c100 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800b0b6:	480b      	ldr	r0, [pc, #44]	; (800b0e4 <halInit+0x34>)
 800b0b8:	f001 fd1a 	bl	800caf0 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 800b0bc:	f000 fa90 	bl	800b5e0 <adcInit>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
 800b0c0:	f000 faa6 	bl	800b610 <extInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800b0c4:	f000 fab4 	bl	800b630 <i2cInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 800b0c8:	f000 fac2 	bl	800b650 <pwmInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 800b0cc:	f000 fce8 	bl	800baa0 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800b0d0:	f000 fcf6 	bl	800bac0 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800b0d4:	f000 fb9c 	bl	800b810 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800b0d8:	f002 fda2 	bl	800dc20 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800b0dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800b0e0:	f000 b806 	b.w	800b0f0 <stInit>
 800b0e4:	08015bd0 	.word	0x08015bd0
	...

0800b0f0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800b0f0:	f001 ba66 	b.w	800c5c0 <st_lld_init>
	...

0800b100 <ibqObjectInit>:
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 800b100:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 800b102:	3204      	adds	r2, #4
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 800b104:	2400      	movs	r4, #0
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 800b106:	fb03 1702 	mla	r7, r3, r2, r1
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 800b10a:	9e04      	ldr	r6, [sp, #16]
 800b10c:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 800b10e:	6147      	str	r7, [r0, #20]
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
 800b110:	62c6      	str	r6, [r0, #44]	; 0x2c
  ibqp->link     = link;
 800b112:	6305      	str	r5, [r0, #48]	; 0x30
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 800b114:	6084      	str	r4, [r0, #8]
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
 800b116:	6244      	str	r4, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 800b118:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800b11a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800b11c:	6040      	str	r0, [r0, #4]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
 800b11e:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = bp;
 800b120:	60c1      	str	r1, [r0, #12]
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
 800b122:	6182      	str	r2, [r0, #24]
  ibqp->bn       = n;
 800b124:	61c3      	str	r3, [r0, #28]
  ibqp->buffers  = bp;
 800b126:	6201      	str	r1, [r0, #32]
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
  ibqp->link     = link;
}
 800b128:	bcf0      	pop	{r4, r5, r6, r7}
 800b12a:	4770      	bx	lr
 800b12c:	0000      	movs	r0, r0
	...

0800b130 <ibqResetI>:
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 800b130:	2200      	movs	r2, #0
  ibqp->brdptr   = ibqp->buffers;
 800b132:	6a01      	ldr	r1, [r0, #32]
 800b134:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = ibqp->buffers;
 800b136:	60c1      	str	r1, [r0, #12]
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 800b138:	6082      	str	r2, [r0, #8]
  ibqp->brdptr   = ibqp->buffers;
  ibqp->bwrptr   = ibqp->buffers;
  ibqp->ptr      = NULL;
 800b13a:	6242      	str	r2, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 800b13c:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800b13e:	f06f 0101 	mvn.w	r1, #1
 800b142:	f7ff be8d 	b.w	800ae60 <chThdDequeueAllI>
 800b146:	bf00      	nop
	...

0800b150 <ibqGetEmptyBufferI>:
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 800b150:	68c3      	ldr	r3, [r0, #12]
 800b152:	6902      	ldr	r2, [r0, #16]
 800b154:	4293      	cmp	r3, r2
 800b156:	d001      	beq.n	800b15c <ibqGetEmptyBufferI+0xc>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 800b158:	1d18      	adds	r0, r3, #4
}
 800b15a:	4770      	bx	lr
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 800b15c:	6882      	ldr	r2, [r0, #8]
 800b15e:	2a00      	cmp	r2, #0
 800b160:	d0fa      	beq.n	800b158 <ibqGetEmptyBufferI+0x8>
    return NULL;
 800b162:	2000      	movs	r0, #0
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
	...

0800b170 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 800b170:	b430      	push	{r4, r5}

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 800b172:	68c4      	ldr	r4, [r0, #12]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 800b174:	6945      	ldr	r5, [r0, #20]

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 800b176:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 800b178:	6983      	ldr	r3, [r0, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800b17a:	6882      	ldr	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
 800b17c:	4423      	add	r3, r4
  if (ibqp->bwrptr >= ibqp->btop) {
 800b17e:	42ab      	cmp	r3, r5
  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 800b180:	60c3      	str	r3, [r0, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800b182:	f102 0201 	add.w	r2, r2, #1
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 800b186:	bf28      	it	cs
 800b188:	6a03      	ldrcs	r3, [r0, #32]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800b18a:	6082      	str	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 800b18c:	bf28      	it	cs
 800b18e:	60c3      	strcs	r3, [r0, #12]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 800b190:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 800b192:	bc30      	pop	{r4, r5}
 800b194:	f7ff be54 	b.w	800ae40 <chThdDequeueNextI>
	...

0800b1a0 <ibqGetFullBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 800b1a6:	e003      	b.n	800b1b0 <ibqGetFullBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800b1a8:	f7ff fe32 	bl	800ae10 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
    if (msg < MSG_OK) {
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	db0b      	blt.n	800b1c8 <ibqGetFullBufferTimeoutS+0x28>
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0f6      	beq.n	800b1a8 <ibqGetFullBufferTimeoutS+0x8>
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800b1ba:	6923      	ldr	r3, [r4, #16]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800b1bc:	681a      	ldr	r2, [r3, #0]
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800b1be:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800b1c0:	441a      	add	r2, r3
 800b1c2:	62a2      	str	r2, [r4, #40]	; 0x28
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800b1c4:	6263      	str	r3, [r4, #36]	; 0x24
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800b1c6:	2000      	movs	r0, #0

  return MSG_OK;
}
 800b1c8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ca:	bf00      	nop
 800b1cc:	0000      	movs	r0, r0
	...

0800b1d0 <ibqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800b1d4:	2320      	movs	r3, #32
 800b1d6:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 800b1da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1dc:	b1ed      	cbz	r5, 800b21a <ibqGetTimeout+0x4a>
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 800b1de:	462b      	mov	r3, r5
  ibqp->ptr++;

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 800b1e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 800b1e2:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 800b1e6:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d311      	bcc.n	800b210 <ibqGetTimeout+0x40>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 800b1ec:	f104 0010 	add.w	r0, r4, #16
 800b1f0:	c80b      	ldmia	r0, {r0, r1, r3}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 800b1f2:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 800b1f4:	428b      	cmp	r3, r1

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800b1f6:	68a2      	ldr	r2, [r4, #8]
  ibqp->brdptr += ibqp->bsize;
 800b1f8:	6123      	str	r3, [r4, #16]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 800b1fa:	bf24      	itt	cs
 800b1fc:	6a23      	ldrcs	r3, [r4, #32]
 800b1fe:	6123      	strcs	r3, [r4, #16]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800b200:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 800b202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800b204:	60a2      	str	r2, [r4, #8]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 800b206:	2200      	movs	r2, #0
 800b208:	6262      	str	r2, [r4, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 800b20a:	b10b      	cbz	r3, 800b210 <ibqGetTimeout+0x40>
    ibqp->notify(ibqp);
 800b20c:	4620      	mov	r0, r4
 800b20e:	4798      	blx	r3
 800b210:	2300      	movs	r3, #0
 800b212:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr >= ibqp->top) {
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
 800b216:	4628      	mov	r0, r5
}
 800b218:	bd38      	pop	{r3, r4, r5, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800b21a:	f7ff ffc1 	bl	800b1a0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800b21e:	b908      	cbnz	r0, 800b224 <ibqGetTimeout+0x54>
 800b220:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b222:	e7dc      	b.n	800b1de <ibqGetTimeout+0xe>
 800b224:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	0000      	movs	r0, r0
	...

0800b230 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4604      	mov	r4, r0
 800b236:	b083      	sub	sp, #12
 800b238:	460d      	mov	r5, r1
 800b23a:	4616      	mov	r6, r2
 800b23c:	4699      	mov	r9, r3
 800b23e:	f04f 0820 	mov.w	r8, #32
 800b242:	f388 8811 	msr	BASEPRI, r8
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
 800b246:	4b3d      	ldr	r3, [pc, #244]	; (800b33c <ibqReadTimeout+0x10c>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 800b248:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 800b24c:	444b      	add	r3, r9
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
  size_t r = 0;
 800b24e:	f04f 0a00 	mov.w	sl, #0
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 800b252:	9301      	str	r3, [sp, #4]
    if (ibqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800b254:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800b258:	9300      	str	r3, [sp, #0]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 800b25a:	4657      	mov	r7, sl

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 800b25c:	2900      	cmp	r1, #0
 800b25e:	d042      	beq.n	800b2e6 <ibqReadTimeout+0xb6>
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800b260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (size > (n - r)) {
 800b262:	ebca 0b06 	rsb	fp, sl, r6
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800b266:	1a5b      	subs	r3, r3, r1
 800b268:	459b      	cmp	fp, r3
 800b26a:	bf28      	it	cs
 800b26c:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 800b26e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800b272:	d948      	bls.n	800b306 <ibqReadTimeout+0xd6>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
 800b274:	f101 0240 	add.w	r2, r1, #64	; 0x40
 800b278:	462b      	mov	r3, r5
 800b27a:	f8d1 c000 	ldr.w	ip, [r1]
 800b27e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800b282:	6888      	ldr	r0, [r1, #8]
 800b284:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800b288:	f8c3 b00c 	str.w	fp, [r3, #12]
 800b28c:	3110      	adds	r1, #16
 800b28e:	4291      	cmp	r1, r2
 800b290:	f8c3 c000 	str.w	ip, [r3]
 800b294:	f8c3 e004 	str.w	lr, [r3, #4]
 800b298:	6098      	str	r0, [r3, #8]
 800b29a:	f103 0310 	add.w	r3, r3, #16
 800b29e:	d1ec      	bne.n	800b27a <ibqReadTimeout+0x4a>
      bp        += 64U;
      ibqp->ptr += 64U;
 800b2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a2:	3340      	adds	r3, #64	; 0x40
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
 800b2a4:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += 64U;
      r         += 64U;
 800b2a6:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
      ibqp->ptr += 64U;
 800b2aa:	6263      	str	r3, [r4, #36]	; 0x24
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 800b2ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d810      	bhi.n	800b2d4 <ibqReadTimeout+0xa4>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 800b2b2:	f104 0110 	add.w	r1, r4, #16
 800b2b6:	c90e      	ldmia	r1, {r1, r2, r3}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 800b2b8:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 800b2ba:	4293      	cmp	r3, r2
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 800b2bc:	6123      	str	r3, [r4, #16]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800b2be:	68a0      	ldr	r0, [r4, #8]
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 800b2c0:	bf24      	itt	cs
 800b2c2:	6a23      	ldrcs	r3, [r4, #32]
 800b2c4:	6123      	strcs	r3, [r4, #16]

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 800b2c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 800b2c8:	6267      	str	r7, [r4, #36]	; 0x24

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800b2ca:	3801      	subs	r0, #1
 800b2cc:	60a0      	str	r0, [r4, #8]

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 800b2ce:	b10b      	cbz	r3, 800b2d4 <ibqReadTimeout+0xa4>
    ibqp->notify(ibqp);
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	4798      	blx	r3
 800b2d4:	f387 8811 	msr	BASEPRI, r7
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 800b2d8:	45b2      	cmp	sl, r6
 800b2da:	d227      	bcs.n	800b32c <ibqReadTimeout+0xfc>
 800b2dc:	f388 8811 	msr	BASEPRI, r8

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 800b2e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2e2:	2900      	cmp	r1, #0
 800b2e4:	d1bc      	bne.n	800b260 <ibqReadTimeout+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800b2e6:	9b00      	ldr	r3, [sp, #0]
 800b2e8:	3303      	adds	r3, #3
 800b2ea:	d816      	bhi.n	800b31a <ibqReadTimeout+0xea>
 800b2ec:	4b13      	ldr	r3, [pc, #76]	; (800b33c <ibqReadTimeout+0x10c>)
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 800b2ee:	9a01      	ldr	r2, [sp, #4]
 800b2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f2:	1ad3      	subs	r3, r2, r3

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 800b2f4:	4599      	cmp	r9, r3
 800b2f6:	d31d      	bcc.n	800b334 <ibqReadTimeout+0x104>
          osalSysUnlock();
          return r;
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7ff ff50 	bl	800b1a0 <ibqGetFullBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 800b300:	b988      	cbnz	r0, 800b326 <ibqReadTimeout+0xf6>
 800b302:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b304:	e7ac      	b.n	800b260 <ibqReadTimeout+0x30>
      bp        += 64U;
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 800b306:	4628      	mov	r0, r5
 800b308:	465a      	mov	r2, fp
 800b30a:	f7fe fdf9 	bl	8009f00 <memcpy>
      bp        += size;
      ibqp->ptr += size;
 800b30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b310:	445b      	add	r3, fp
      r         += size;
 800b312:	44da      	add	sl, fp
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
 800b314:	445d      	add	r5, fp
      ibqp->ptr += size;
 800b316:	6263      	str	r3, [r4, #36]	; 0x24
 800b318:	e7c8      	b.n	800b2ac <ibqReadTimeout+0x7c>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800b31a:	4649      	mov	r1, r9
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7ff ff3f 	bl	800b1a0 <ibqGetFullBufferTimeoutS>
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 800b322:	2800      	cmp	r0, #0
 800b324:	d0ed      	beq.n	800b302 <ibqReadTimeout+0xd2>
 800b326:	2300      	movs	r3, #0
 800b328:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
      return r;
    }
    osalSysLock();
  }
}
 800b32c:	4650      	mov	r0, sl
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	f381 8811 	msr	BASEPRI, r1
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return r;
 800b338:	e7f8      	b.n	800b32c <ibqReadTimeout+0xfc>
 800b33a:	bf00      	nop
 800b33c:	20001090 	.word	0x20001090

0800b340 <obqObjectInit>:
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 800b340:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 800b342:	3204      	adds	r2, #4
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 800b344:	2400      	movs	r4, #0

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 800b346:	fb02 1703 	mla	r7, r2, r3, r1
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 800b34a:	9e04      	ldr	r6, [sp, #16]
 800b34c:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 800b34e:	6147      	str	r7, [r0, #20]
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
 800b350:	62c6      	str	r6, [r0, #44]	; 0x2c
  obqp->link     = link;
 800b352:	6305      	str	r5, [r0, #48]	; 0x30
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 800b354:	6244      	str	r4, [r0, #36]	; 0x24
  obqp->top      = NULL;
 800b356:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800b358:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800b35a:	6040      	str	r0, [r0, #4]
                   bqnotify_t onfy, void *link) {

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
 800b35c:	6083      	str	r3, [r0, #8]
  obqp->brdptr   = bp;
 800b35e:	6101      	str	r1, [r0, #16]
  obqp->bwrptr   = bp;
 800b360:	60c1      	str	r1, [r0, #12]
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
 800b362:	6182      	str	r2, [r0, #24]
  obqp->bn       = n;
 800b364:	61c3      	str	r3, [r0, #28]
  obqp->buffers  = bp;
 800b366:	6201      	str	r1, [r0, #32]
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
  obqp->link     = link;
}
 800b368:	bcf0      	pop	{r4, r5, r6, r7}
 800b36a:	4770      	bx	lr
 800b36c:	0000      	movs	r0, r0
	...

0800b370 <obqResetI>:
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
 800b370:	6a01      	ldr	r1, [r0, #32]
 800b372:	6101      	str	r1, [r0, #16]
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 800b374:	b410      	push	{r4}
  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
  obqp->ptr      = NULL;
 800b376:	2200      	movs	r2, #0
 */
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
 800b378:	69c4      	ldr	r4, [r0, #28]
 800b37a:	6084      	str	r4, [r0, #8]
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
 800b37c:	60c1      	str	r1, [r0, #12]
  obqp->ptr      = NULL;
 800b37e:	6242      	str	r2, [r0, #36]	; 0x24
  obqp->top      = NULL;
 800b380:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800b382:	f06f 0101 	mvn.w	r1, #1
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 800b386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38a:	f7ff bd69 	b.w	800ae60 <chThdDequeueAllI>
 800b38e:	bf00      	nop

0800b390 <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 800b390:	6903      	ldr	r3, [r0, #16]
 800b392:	68c2      	ldr	r2, [r0, #12]
 800b394:	429a      	cmp	r2, r3
 800b396:	d004      	beq.n	800b3a2 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 800b398:	4618      	mov	r0, r3
 800b39a:	f850 3b04 	ldr.w	r3, [r0], #4
 800b39e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 800b3a0:	4770      	bx	lr
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 800b3a2:	6882      	ldr	r2, [r0, #8]
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	d0f7      	beq.n	800b398 <obqGetFullBufferI+0x8>
    return NULL;
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	4770      	bx	lr
 800b3ac:	0000      	movs	r0, r0
	...

0800b3b0 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 800b3b0:	b410      	push	{r4}
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 800b3b2:	6983      	ldr	r3, [r0, #24]
 800b3b4:	6904      	ldr	r4, [r0, #16]
  if (obqp->brdptr >= obqp->btop) {
 800b3b6:	6941      	ldr	r1, [r0, #20]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 800b3b8:	6882      	ldr	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
 800b3ba:	4423      	add	r3, r4
  if (obqp->brdptr >= obqp->btop) {
 800b3bc:	428b      	cmp	r3, r1
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 800b3be:	6103      	str	r3, [r0, #16]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 800b3c0:	f102 0201 	add.w	r2, r2, #1
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 800b3c4:	bf28      	it	cs
 800b3c6:	6a03      	ldrcs	r3, [r0, #32]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 800b3c8:	6082      	str	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 800b3ca:	bf28      	it	cs
 800b3cc:	6103      	strcs	r3, [r0, #16]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 800b3ce:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 800b3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d4:	f7ff bd34 	b.w	800ae40 <chThdDequeueNextI>
	...

0800b3e0 <obqGetEmptyBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 800b3e6:	e003      	b.n	800b3f0 <obqGetEmptyBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800b3e8:	f7ff fd12 	bl	800ae10 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	db0b      	blt.n	800b408 <obqGetEmptyBufferTimeoutS+0x28>
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0f6      	beq.n	800b3e8 <obqGetEmptyBufferTimeoutS+0x8>
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800b3fa:	68e2      	ldr	r2, [r4, #12]
  obqp->top = obqp->bwrptr + obqp->bsize;
 800b3fc:	69a3      	ldr	r3, [r4, #24]
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800b3fe:	1d11      	adds	r1, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 800b400:	4413      	add	r3, r2
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800b402:	6261      	str	r1, [r4, #36]	; 0x24
  obqp->top = obqp->bwrptr + obqp->bsize;
 800b404:	62a3      	str	r3, [r4, #40]	; 0x28
 800b406:	2000      	movs	r0, #0

  return MSG_OK;
}
 800b408:	bd38      	pop	{r3, r4, r5, pc}
 800b40a:	bf00      	nop
 800b40c:	0000      	movs	r0, r0
	...

0800b410 <obqPutTimeout>:
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    systime_t timeout) {
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	2320      	movs	r3, #32
 800b414:	460e      	mov	r6, r1
 800b416:	4604      	mov	r4, r0
 800b418:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 800b41c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b41e:	b1fd      	cbz	r5, 800b460 <obqPutTimeout+0x50>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 800b420:	702e      	strb	r6, [r5, #0]
  obqp->ptr++;
 800b422:	6a63      	ldr	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 800b424:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 800b426:	3301      	adds	r3, #1

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 800b428:	4293      	cmp	r3, r2
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 800b42a:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 800b42c:	d314      	bcc.n	800b458 <obqPutTimeout+0x48>
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 800b42e:	69a2      	ldr	r2, [r4, #24]
 800b430:	68e1      	ldr	r1, [r4, #12]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 800b432:	6960      	ldr	r0, [r4, #20]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 800b434:	3a04      	subs	r2, #4
 800b436:	600a      	str	r2, [r1, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 800b438:	69a3      	ldr	r3, [r4, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 800b43a:	68a2      	ldr	r2, [r4, #8]
  obqp->bwrptr += obqp->bsize;
 800b43c:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 800b43e:	4283      	cmp	r3, r0
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 800b440:	60e3      	str	r3, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 800b442:	bf24      	itt	cs
 800b444:	6a23      	ldrcs	r3, [r4, #32]
 800b446:	60e3      	strcs	r3, [r4, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 800b448:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 800b44a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 800b44c:	60a2      	str	r2, [r4, #8]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 800b44e:	2200      	movs	r2, #0
 800b450:	6262      	str	r2, [r4, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 800b452:	b10b      	cbz	r3, 800b458 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 800b454:	4620      	mov	r0, r4
 800b456:	4798      	blx	r3
 800b458:	2000      	movs	r0, #0
 800b45a:	f380 8811 	msr	BASEPRI, r0
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
}
 800b45e:	bd70      	pop	{r4, r5, r6, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800b460:	4611      	mov	r1, r2
 800b462:	f7ff ffbd 	bl	800b3e0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 800b466:	b908      	cbnz	r0, 800b46c <obqPutTimeout+0x5c>
 800b468:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b46a:	e7d9      	b.n	800b420 <obqPutTimeout+0x10>
 800b46c:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 800b470:	bd70      	pop	{r4, r5, r6, pc}
 800b472:	bf00      	nop
	...

0800b480 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
 800b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b484:	4605      	mov	r5, r0
 800b486:	b083      	sub	sp, #12
 800b488:	4617      	mov	r7, r2
 800b48a:	469a      	mov	sl, r3
 800b48c:	f04f 0920 	mov.w	r9, #32
 800b490:	f389 8811 	msr	BASEPRI, r9
 800b494:	4b3d      	ldr	r3, [pc, #244]	; (800b58c <obqWriteTimeout+0x10c>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 800b496:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 800b49a:	eb0a 0302 	add.w	r3, sl, r2
 800b49e:	9301      	str	r3, [sp, #4]
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800b4a0:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
  size_t w = 0;
 800b4a4:	f04f 0b00 	mov.w	fp, #0
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800b4a8:	9300      	str	r3, [sp, #0]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	46d8      	mov	r8, fp
 800b4ae:	460f      	mov	r7, r1
 800b4b0:	461e      	mov	r6, r3

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d041      	beq.n	800b53a <obqWriteTimeout+0xba>
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800b4b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    if (size > (n - w)) {
 800b4b8:	ebcb 0406 	rsb	r4, fp, r6
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800b4bc:	1a12      	subs	r2, r2, r0
 800b4be:	4294      	cmp	r4, r2
 800b4c0:	bf28      	it	cs
 800b4c2:	4614      	movcs	r4, r2
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 800b4c4:	2c40      	cmp	r4, #64	; 0x40
 800b4c6:	d947      	bls.n	800b558 <obqWriteTimeout+0xd8>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b4ce:	680f      	ldr	r7, [r1, #0]
 800b4d0:	684c      	ldr	r4, [r1, #4]
 800b4d2:	688a      	ldr	r2, [r1, #8]
 800b4d4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800b4d8:	f8c0 e00c 	str.w	lr, [r0, #12]
 800b4dc:	3110      	adds	r1, #16
 800b4de:	4299      	cmp	r1, r3
 800b4e0:	6007      	str	r7, [r0, #0]
 800b4e2:	6044      	str	r4, [r0, #4]
 800b4e4:	6082      	str	r2, [r0, #8]
 800b4e6:	f100 0010 	add.w	r0, r0, #16
 800b4ea:	d1f0      	bne.n	800b4ce <obqWriteTimeout+0x4e>
      bp        += 64U;
      obqp->ptr += 64U;
 800b4ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b4ee:	3240      	adds	r2, #64	; 0x40
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
 800b4f0:	460f      	mov	r7, r1
      obqp->ptr += 64U;
      w         += 64U;
 800b4f2:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
      obqp->ptr += 64U;
 800b4f6:	626a      	str	r2, [r5, #36]	; 0x24
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 800b4f8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b4fa:	4291      	cmp	r1, r2
 800b4fc:	d814      	bhi.n	800b528 <obqWriteTimeout+0xa8>
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 800b4fe:	69a9      	ldr	r1, [r5, #24]
 800b500:	68ec      	ldr	r4, [r5, #12]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 800b502:	6968      	ldr	r0, [r5, #20]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 800b504:	3904      	subs	r1, #4
 800b506:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 800b508:	69aa      	ldr	r2, [r5, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 800b50a:	68a9      	ldr	r1, [r5, #8]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 800b50c:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 800b510:	4422      	add	r2, r4
  if (obqp->bwrptr >= obqp->btop) {
 800b512:	4282      	cmp	r2, r0
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 800b514:	60ea      	str	r2, [r5, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 800b516:	bf24      	itt	cs
 800b518:	6a2a      	ldrcs	r2, [r5, #32]
 800b51a:	60ea      	strcs	r2, [r5, #12]

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 800b51c:	6aea      	ldr	r2, [r5, #44]	; 0x2c

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 800b51e:	3901      	subs	r1, #1
 800b520:	60a9      	str	r1, [r5, #8]

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 800b522:	b10a      	cbz	r2, 800b528 <obqWriteTimeout+0xa8>
    obqp->notify(obqp);
 800b524:	4628      	mov	r0, r5
 800b526:	4790      	blx	r2
 800b528:	f388 8811 	msr	BASEPRI, r8
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 800b52c:	45b3      	cmp	fp, r6
 800b52e:	d226      	bcs.n	800b57e <obqWriteTimeout+0xfe>
 800b530:	f389 8811 	msr	BASEPRI, r9

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 800b534:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b536:	2800      	cmp	r0, #0
 800b538:	d1bd      	bne.n	800b4b6 <obqWriteTimeout+0x36>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800b53a:	9b00      	ldr	r3, [sp, #0]
 800b53c:	3303      	adds	r3, #3
 800b53e:	d815      	bhi.n	800b56c <obqWriteTimeout+0xec>
 800b540:	4b12      	ldr	r3, [pc, #72]	; (800b58c <obqWriteTimeout+0x10c>)
 800b542:	6a99      	ldr	r1, [r3, #40]	; 0x28
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 800b544:	9b01      	ldr	r3, [sp, #4]
 800b546:	1a59      	subs	r1, r3, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 800b548:	458a      	cmp	sl, r1
 800b54a:	d31c      	bcc.n	800b586 <obqWriteTimeout+0x106>
          osalSysUnlock();
          return w;
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 800b54c:	4628      	mov	r0, r5
 800b54e:	f7ff ff47 	bl	800b3e0 <obqGetEmptyBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 800b552:	b988      	cbnz	r0, 800b578 <obqWriteTimeout+0xf8>
 800b554:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b556:	e7ae      	b.n	800b4b6 <obqWriteTimeout+0x36>
      bp        += 64U;
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
 800b558:	4622      	mov	r2, r4
 800b55a:	4639      	mov	r1, r7
 800b55c:	f7fe fcd0 	bl	8009f00 <memcpy>
      bp        += size;
      obqp->ptr += size;
 800b560:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b562:	4422      	add	r2, r4
      w         += size;
 800b564:	44a3      	add	fp, r4
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
 800b566:	4427      	add	r7, r4
      obqp->ptr += size;
 800b568:	626a      	str	r2, [r5, #36]	; 0x24
 800b56a:	e7c5      	b.n	800b4f8 <obqWriteTimeout+0x78>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800b56c:	4651      	mov	r1, sl
 800b56e:	4628      	mov	r0, r5
 800b570:	f7ff ff36 	bl	800b3e0 <obqGetEmptyBufferTimeoutS>
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 800b574:	2800      	cmp	r0, #0
 800b576:	d0ed      	beq.n	800b554 <obqWriteTimeout+0xd4>
 800b578:	2200      	movs	r2, #0
 800b57a:	f382 8811 	msr	BASEPRI, r2
    if (w >= n) {
      return w;
    }
    osalSysLock();
  }
}
 800b57e:	4658      	mov	r0, fp
 800b580:	b003      	add	sp, #12
 800b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b586:	f380 8811 	msr	BASEPRI, r0
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return w;
 800b58a:	e7f8      	b.n	800b57e <obqWriteTimeout+0xfe>
 800b58c:	20001090 	.word	0x20001090

0800b590 <obqTryFlushI>:

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 800b590:	68c2      	ldr	r2, [r0, #12]
 800b592:	6903      	ldr	r3, [r0, #16]
 800b594:	429a      	cmp	r2, r3
 800b596:	d001      	beq.n	800b59c <obqTryFlushI+0xc>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 800b598:	2000      	movs	r0, #0
 800b59a:	4770      	bx	lr

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 800b59c:	6883      	ldr	r3, [r0, #8]
 800b59e:	b90b      	cbnz	r3, 800b5a4 <obqTryFlushI+0x14>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	4770      	bx	lr

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 800b5a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d0fa      	beq.n	800b5a0 <obqTryFlushI+0x10>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 800b5aa:	3b04      	subs	r3, #4

    if (size > 0U) {
 800b5ac:	1a9b      	subs	r3, r3, r2
 800b5ae:	d0f7      	beq.n	800b5a0 <obqTryFlushI+0x10>
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 800b5b0:	b410      	push	{r4}
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));

    if (size > 0U) {

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 800b5b2:	6013      	str	r3, [r2, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 800b5b4:	6983      	ldr	r3, [r0, #24]
      if (obqp->bwrptr >= obqp->btop) {
 800b5b6:	6944      	ldr	r4, [r0, #20]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 800b5b8:	6881      	ldr	r1, [r0, #8]
      obqp->bwrptr += obqp->bsize;
 800b5ba:	441a      	add	r2, r3
      if (obqp->bwrptr >= obqp->btop) {
 800b5bc:	42a2      	cmp	r2, r4
        obqp->bwrptr = obqp->buffers;
 800b5be:	bf28      	it	cs
 800b5c0:	6a03      	ldrcs	r3, [r0, #32]
      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 800b5c2:	60c2      	str	r2, [r0, #12]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 800b5c4:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
 800b5c8:	bf28      	it	cs
 800b5ca:	60c3      	strcs	r3, [r0, #12]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 800b5cc:	2300      	movs	r3, #0

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 800b5ce:	6081      	str	r1, [r0, #8]
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 800b5d0:	6243      	str	r3, [r0, #36]	; 0x24

      return true;
    }
  }
  return false;
}
 800b5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;

      return true;
 800b5d6:	2001      	movs	r0, #1
    }
  }
  return false;
}
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	0000      	movs	r0, r0
	...

0800b5e0 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 800b5e0:	f001 b8be 	b.w	800c760 <adc_lld_init>
	...

0800b5f0 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 800b5f0:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 800b5f6:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 800b5f8:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 800b5fa:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 800b5fc:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 800b5fe:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800b600:	3018      	adds	r0, #24
 800b602:	f7ff bc95 	b.w	800af30 <chMtxObjectInit>
 800b606:	bf00      	nop
	...

0800b610 <extInit>:
 *
 * @init
 */
void extInit(void) {

  ext_lld_init();
 800b610:	f001 b8e6 	b.w	800c7e0 <ext_lld_init>
	...

0800b620 <extObjectInit>:
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 800b620:	2201      	movs	r2, #1
  extp->config = NULL;
 800b622:	2300      	movs	r3, #0
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 800b624:	7002      	strb	r2, [r0, #0]
  extp->config = NULL;
 800b626:	6043      	str	r3, [r0, #4]
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	0000      	movs	r0, r0
	...

0800b630 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800b630:	f001 bc8e 	b.w	800cf50 <i2c_lld_init>
	...

0800b640 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800b640:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800b642:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800b644:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800b646:	6043      	str	r3, [r0, #4]
 800b648:	300c      	adds	r0, #12
 800b64a:	f7ff bc71 	b.w	800af30 <chMtxObjectInit>
 800b64e:	bf00      	nop

0800b650 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 800b650:	f002 ba8e 	b.w	800db70 <pwm_lld_init>
	...

0800b660 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 800b660:	2300      	movs	r3, #0
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800b662:	2201      	movs	r2, #1
 800b664:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 800b666:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 800b668:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 800b66a:	7403      	strb	r3, [r0, #16]
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop

0800b670 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 800b670:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 800b672:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800b674:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 800b678:	6813      	ldr	r3, [r2, #0]
 800b67a:	7819      	ldrb	r1, [r3, #0]
 800b67c:	2904      	cmp	r1, #4
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 800b67e:	b082      	sub	sp, #8
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800b680:	d001      	beq.n	800b686 <obnotify+0x16>
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
    }
  }
}
 800b682:	b002      	add	sp, #8
 800b684:	bd10      	pop	{r4, pc}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800b686:	7a21      	ldrb	r1, [r4, #8]
 800b688:	2902      	cmp	r1, #2
 800b68a:	d1fa      	bne.n	800b682 <obnotify+0x12>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800b68c:	7911      	ldrb	r1, [r2, #4]
 800b68e:	891a      	ldrh	r2, [r3, #8]
 800b690:	2301      	movs	r3, #1
 800b692:	408b      	lsls	r3, r1
 800b694:	4213      	tst	r3, r2
 800b696:	d1f4      	bne.n	800b682 <obnotify+0x12>
    /* Trying to get a full buffer.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800b698:	a901      	add	r1, sp, #4
 800b69a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b69e:	f7ff fe77 	bl	800b390 <obqGetFullBufferI>
    if (buf != NULL) {
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d0ec      	beq.n	800b682 <obnotify+0x12>
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800b6a8:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
 800b6ac:	9b01      	ldr	r3, [sp, #4]
 800b6ae:	7901      	ldrb	r1, [r0, #4]
 800b6b0:	6800      	ldr	r0, [r0, #0]
 800b6b2:	f000 fa65 	bl	800bb80 <usbStartTransmitI>
 800b6b6:	e7e4      	b.n	800b682 <obnotify+0x12>
	...

0800b6c0 <ibnotify>:
/**
 * @brief   Notification of empty buffer released into the input buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
 800b6c0:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 800b6c2:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800b6c4:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 800b6c8:	6813      	ldr	r3, [r2, #0]
 800b6ca:	7819      	ldrb	r1, [r3, #0]
 800b6cc:	2904      	cmp	r1, #4
 800b6ce:	d000      	beq.n	800b6d2 <ibnotify+0x12>
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	7a21      	ldrb	r1, [r4, #8]
 800b6d4:	2902      	cmp	r1, #2
 800b6d6:	d1fb      	bne.n	800b6d0 <ibnotify+0x10>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800b6d8:	7951      	ldrb	r1, [r2, #5]
 800b6da:	895a      	ldrh	r2, [r3, #10]
 800b6dc:	2301      	movs	r3, #1
 800b6de:	408b      	lsls	r3, r1
 800b6e0:	4213      	tst	r3, r2
 800b6e2:	d1f5      	bne.n	800b6d0 <ibnotify+0x10>
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 800b6e4:	f104 000c 	add.w	r0, r4, #12
 800b6e8:	f7ff fd32 	bl	800b150 <ibqGetEmptyBufferI>
    if (buf != NULL) {
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d0ef      	beq.n	800b6d0 <ibnotify+0x10>
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800b6f0:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	7959      	ldrb	r1, [r3, #5]
 800b6f8:	6818      	ldr	r0, [r3, #0]
                       buf, SERIAL_USB_BUFFERS_SIZE);
    }
  }
}
 800b6fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800b6fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b702:	f000 ba25 	b.w	800bb50 <usbStartReceiveI>
 800b706:	bf00      	nop
	...

0800b710 <readt>:
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 800b710:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b712:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 800b716:	6824      	ldr	r4, [r4, #0]
 800b718:	7824      	ldrb	r4, [r4, #0]
 800b71a:	2c04      	cmp	r4, #4
 800b71c:	d003      	beq.n	800b726 <readt+0x16>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
}
 800b71e:	2000      	movs	r0, #0
 800b720:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b724:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 800b726:	300c      	adds	r0, #12
}
 800b728:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 800b72c:	f7ff bd80 	b.w	800b230 <ibqReadTimeout>

0800b730 <writet>:
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 800b730:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b732:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 800b736:	6824      	ldr	r4, [r4, #0]
 800b738:	7824      	ldrb	r4, [r4, #0]
 800b73a:	2c04      	cmp	r4, #4
 800b73c:	d003      	beq.n	800b746 <writet+0x16>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}
 800b73e:	2000      	movs	r0, #0
 800b740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b744:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 800b746:	3040      	adds	r0, #64	; 0x40
}
 800b748:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 800b74c:	f7ff be98 	b.w	800b480 <obqWriteTimeout>

0800b750 <gett>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b750:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d102      	bne.n	800b762 <gett+0x12>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 800b75c:	300c      	adds	r0, #12
 800b75e:	f7ff bd37 	b.w	800b1d0 <ibqGetTimeout>
}
 800b762:	f06f 0001 	mvn.w	r0, #1
 800b766:	4770      	bx	lr
	...

0800b770 <get>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b770:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b04      	cmp	r3, #4
 800b77a:	d104      	bne.n	800b786 <get+0x16>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 800b77c:	300c      	adds	r0, #12
 800b77e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b782:	f7ff bd25 	b.w	800b1d0 <ibqGetTimeout>
}
 800b786:	f06f 0001 	mvn.w	r0, #1
 800b78a:	4770      	bx	lr
 800b78c:	0000      	movs	r0, r0
	...

0800b790 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b790:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b04      	cmp	r3, #4
 800b79a:	d102      	bne.n	800b7a2 <putt+0x12>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800b79c:	3040      	adds	r0, #64	; 0x40
 800b79e:	f7ff be37 	b.w	800b410 <obqPutTimeout>
}
 800b7a2:	f06f 0001 	mvn.w	r0, #1
 800b7a6:	4770      	bx	lr
	...

0800b7b0 <put>:
                        n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b7b0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d104      	bne.n	800b7c6 <put+0x16>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 800b7bc:	3040      	adds	r0, #64	; 0x40
 800b7be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7c2:	f7ff be25 	b.w	800b410 <obqPutTimeout>
}
 800b7c6:	f06f 0001 	mvn.w	r0, #1
 800b7ca:	4770      	bx	lr
 800b7cc:	0000      	movs	r0, r0
	...

0800b7d0 <read>:
                         n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b7d0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b04      	cmp	r3, #4
 800b7da:	d001      	beq.n	800b7e0 <read+0x10>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
                        n, TIME_INFINITE);
}
 800b7dc:	2000      	movs	r0, #0
 800b7de:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 800b7e0:	300c      	adds	r0, #12
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7e6:	f7ff bd23 	b.w	800b230 <ibqReadTimeout>
 800b7ea:	bf00      	nop
 800b7ec:	0000      	movs	r0, r0
	...

0800b7f0 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 800b7f0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d001      	beq.n	800b800 <write+0x10>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
                         n, TIME_INFINITE);
}
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 800b800:	3040      	adds	r0, #64	; 0x40
 800b802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b806:	f7ff be3b 	b.w	800b480 <obqWriteTimeout>
 800b80a:	bf00      	nop
 800b80c:	0000      	movs	r0, r0
	...

0800b810 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
	...

0800b820 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800b820:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 800b822:	4603      	mov	r3, r0
 800b824:	4a10      	ldr	r2, [pc, #64]	; (800b868 <sduObjectInit+0x48>)
 800b826:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800b82a:	b082      	sub	sp, #8

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800b82c:	2101      	movs	r1, #1
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 800b82e:	4a0f      	ldr	r2, [pc, #60]	; (800b86c <sduObjectInit+0x4c>)
 800b830:	9001      	str	r0, [sp, #4]
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800b832:	4604      	mov	r4, r0
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800b834:	6043      	str	r3, [r0, #4]

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800b836:	7201      	strb	r1, [r0, #8]
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 800b838:	2302      	movs	r3, #2
 800b83a:	f100 0174 	add.w	r1, r0, #116	; 0x74
 800b83e:	9200      	str	r2, [sp, #0]
 800b840:	300c      	adds	r0, #12
 800b842:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b846:	f7ff fc5b 	bl	800b100 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, sdup->ob,
 800b84a:	4b09      	ldr	r3, [pc, #36]	; (800b870 <sduObjectInit+0x50>)
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	9401      	str	r4, [sp, #4]
 800b850:	f504 711f 	add.w	r1, r4, #636	; 0x27c
 800b854:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b858:	2302      	movs	r3, #2
 800b85a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b85e:	f7ff fd6f 	bl	800b340 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 800b862:	b002      	add	sp, #8
 800b864:	bd10      	pop	{r4, pc}
 800b866:	bf00      	nop
 800b868:	08015a70 	.word	0x08015a70
 800b86c:	0800b6c1 	.word	0x0800b6c1
 800b870:	0800b671 	.word	0x0800b671
	...

0800b880 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 800b880:	680b      	ldr	r3, [r1, #0]
 800b882:	2220      	movs	r2, #32
 800b884:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800b888:	790a      	ldrb	r2, [r1, #4]
 800b88a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b88e:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800b890:	794a      	ldrb	r2, [r1, #5]
 800b892:	3209      	adds	r2, #9
 800b894:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 800b898:	798a      	ldrb	r2, [r1, #6]
 800b89a:	b112      	cbz	r2, 800b8a2 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800b89c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b8a0:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 800b8a6:	f8c0 1484 	str.w	r1, [r0, #1156]	; 0x484
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
	...

0800b8c0 <sduDisconnectI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduDisconnectI(SerialUSBDriver *sdup) {
 800b8c0:	b510      	push	{r4, lr}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800b8c2:	2102      	movs	r1, #2
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	3004      	adds	r0, #4
 800b8c8:	f7ff fb52 	bl	800af70 <chEvtBroadcastFlagsI>

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
 800b8cc:	f104 000c 	add.w	r0, r4, #12
 800b8d0:	f7ff fc2e 	bl	800b130 <ibqResetI>
  obqResetI(&sdup->obqueue);
 800b8d4:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 800b8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void sduDisconnectI(SerialUSBDriver *sdup) {

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
  obqResetI(&sdup->obqueue);
 800b8dc:	f7ff bd48 	b.w	800b370 <obqResetI>

0800b8e0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800b8e0:	b570      	push	{r4, r5, r6, lr}
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 800b8e2:	f100 050c 	add.w	r5, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800b8e6:	4604      	mov	r4, r0
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f7ff fc21 	bl	800b130 <ibqResetI>
  obqResetI(&sdup->obqueue);
 800b8ee:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b8f2:	f7ff fd3d 	bl	800b370 <obqResetI>
 800b8f6:	1d20      	adds	r0, r4, #4
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	f7ff fb39 	bl	800af70 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 800b8fe:	4628      	mov	r0, r5
 800b900:	f7ff fc26 	bl	800b150 <ibqGetEmptyBufferI>

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800b904:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 800b908:	4602      	mov	r2, r0
 800b90a:	7959      	ldrb	r1, [r3, #5]
 800b90c:	6818      	ldr	r0, [r3, #0]
                   buf, SERIAL_USB_BUFFERS_SIZE);
}
 800b90e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800b912:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b916:	f000 b91b 	b.w	800bb50 <usbStartReceiveI>
 800b91a:	bf00      	nop
 800b91c:	0000      	movs	r0, r0
	...

0800b920 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 800b920:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b928:	2b20      	cmp	r3, #32
 800b92a:	d001      	beq.n	800b930 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 800b92c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 800b92e:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 800b930:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b934:	2b21      	cmp	r3, #33	; 0x21
 800b936:	d003      	beq.n	800b940 <sduRequestsHook+0x20>
 800b938:	2b22      	cmp	r3, #34	; 0x22
 800b93a:	d009      	beq.n	800b950 <sduRequestsHook+0x30>
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d1f5      	bne.n	800b92c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800b940:	4b06      	ldr	r3, [pc, #24]	; (800b95c <sduRequestsHook+0x3c>)
 800b942:	6383      	str	r3, [r0, #56]	; 0x38
 800b944:	2207      	movs	r2, #7
 800b946:	2300      	movs	r3, #0
 800b948:	63c2      	str	r2, [r0, #60]	; 0x3c
 800b94a:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800b94c:	2001      	movs	r0, #1
 800b94e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800b950:	2300      	movs	r3, #0
 800b952:	6383      	str	r3, [r0, #56]	; 0x38
 800b954:	63c3      	str	r3, [r0, #60]	; 0x3c
 800b956:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800b958:	2001      	movs	r0, #1
 800b95a:	4770      	bx	lr
 800b95c:	20000800 	.word	0x20000800

0800b960 <sduSOFHookI>:
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800b960:	f8d0 2484 	ldr.w	r2, [r0, #1156]	; 0x484
 800b964:	6813      	ldr	r3, [r2, #0]
 800b966:	7819      	ldrb	r1, [r3, #0]
 800b968:	2904      	cmp	r1, #4
 800b96a:	d000      	beq.n	800b96e <sduSOFHookI+0xe>
 800b96c:	4770      	bx	lr
 800b96e:	7a01      	ldrb	r1, [r0, #8]
 800b970:	2902      	cmp	r1, #2
 800b972:	d1fb      	bne.n	800b96c <sduSOFHookI+0xc>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800b974:	7911      	ldrb	r1, [r2, #4]
 800b976:	891a      	ldrh	r2, [r3, #8]
 800b978:	2301      	movs	r3, #1
 800b97a:	408b      	lsls	r3, r1
 800b97c:	4213      	tst	r3, r2
 800b97e:	d1f5      	bne.n	800b96c <sduSOFHookI+0xc>
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 800b980:	b530      	push	{r4, r5, lr}
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 800b982:	f100 0540 	add.w	r5, r0, #64	; 0x40
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 800b986:	b083      	sub	sp, #12
 800b988:	4604      	mov	r4, r0
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 800b98a:	4628      	mov	r0, r5
 800b98c:	f7ff fe00 	bl	800b590 <obqTryFlushI>
 800b990:	b908      	cbnz	r0, 800b996 <sduSOFHookI+0x36>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 800b992:	b003      	add	sp, #12
 800b994:	bd30      	pop	{r4, r5, pc}

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800b996:	a901      	add	r1, sp, #4
 800b998:	4628      	mov	r0, r5
 800b99a:	f7ff fcf9 	bl	800b390 <obqGetFullBufferI>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800b99e:	f8d4 4484 	ldr.w	r4, [r4, #1156]	; 0x484
 800b9a2:	9b01      	ldr	r3, [sp, #4]
 800b9a4:	7921      	ldrb	r1, [r4, #4]
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	6820      	ldr	r0, [r4, #0]
 800b9aa:	f000 f8e9 	bl	800bb80 <usbStartTransmitI>
 800b9ae:	e7f0      	b.n	800b992 <sduSOFHookI+0x32>

0800b9b0 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800b9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800b9b2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800b9b6:	b083      	sub	sp, #12
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800b9b8:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800b9ba:	b1ec      	cbz	r4, 800b9f8 <sduDataTransmitted+0x48>
 800b9bc:	460e      	mov	r6, r1
 800b9be:	4605      	mov	r5, r0
 800b9c0:	2320      	movs	r3, #32
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800b9ca:	1d20      	adds	r0, r4, #4
 800b9cc:	2108      	movs	r1, #8
 800b9ce:	f7ff facf 	bl	800af70 <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	681b      	ldr	r3, [r3, #0]
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800b9d8:	3440      	adds	r4, #64	; 0x40

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 800b9da:	b9fb      	cbnz	r3, 800ba1c <sduDataTransmitted+0x6c>
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800b9dc:	4620      	mov	r0, r4
 800b9de:	a901      	add	r1, sp, #4
 800b9e0:	f7ff fcd6 	bl	800b390 <obqGetFullBufferI>

  if (buf != NULL) {
 800b9e4:	b150      	cbz	r0, 800b9fc <sduDataTransmitted+0x4c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	f000 f8c7 	bl	800bb80 <usbStartTransmitI>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 800b9f8:	b003      	add	sp, #12
 800b9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (buf != NULL) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	695a      	ldr	r2, [r3, #20]
 800ba00:	6812      	ldr	r2, [r2, #0]
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	d0f5      	beq.n	800b9f2 <sduDataTransmitted+0x42>
 800ba06:	8a1b      	ldrh	r3, [r3, #16]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	d1f1      	bne.n	800b9f2 <sduDataTransmitted+0x42>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 800ba0e:	4631      	mov	r1, r6
 800ba10:	f105 0244 	add.w	r2, r5, #68	; 0x44
 800ba14:	4628      	mov	r0, r5
 800ba16:	f000 f8b3 	bl	800bb80 <usbStartTransmitI>
 800ba1a:	e7ea      	b.n	800b9f2 <sduDataTransmitted+0x42>
  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f7ff fcc7 	bl	800b3b0 <obqReleaseEmptyBufferI>
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800ba22:	4620      	mov	r0, r4
 800ba24:	a901      	add	r1, sp, #4
 800ba26:	f7ff fcb3 	bl	800b390 <obqGetFullBufferI>

  if (buf != NULL) {
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d1db      	bne.n	800b9e6 <sduDataTransmitted+0x36>
 800ba2e:	e7e5      	b.n	800b9fc <sduDataTransmitted+0x4c>

0800ba30 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800ba30:	3109      	adds	r1, #9
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800ba32:	b538      	push	{r3, r4, r5, lr}
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800ba34:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 800ba38:	b324      	cbz	r4, 800ba84 <sduDataReceived+0x54>
 800ba3a:	2320      	movs	r3, #32
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	2104      	movs	r1, #4
 800ba42:	1860      	adds	r0, r4, r1
 800ba44:	f7ff fa94 	bl	800af70 <chEvtBroadcastFlagsI>
  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 800ba48:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 800ba4c:	6813      	ldr	r3, [r2, #0]
 800ba4e:	7952      	ldrb	r2, [r2, #5]
 800ba50:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 800ba54:	f104 050c 	add.w	r5, r4, #12
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 800ba58:	68db      	ldr	r3, [r3, #12]

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	6859      	ldr	r1, [r3, #4]
 800ba60:	f7ff fb86 	bl	800b170 <ibqPostFullBufferI>
                                                   sdup->config->bulk_out));

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 800ba64:	4628      	mov	r0, r5
 800ba66:	f7ff fb73 	bl	800b150 <ibqGetEmptyBufferI>
  if (buf != NULL) {
 800ba6a:	b140      	cbz	r0, 800ba7e <sduDataReceived+0x4e>
    /* Buffer found, starting a new transaction.*/
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800ba6c:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 800ba70:	4602      	mov	r2, r0
 800ba72:	7959      	ldrb	r1, [r3, #5]
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba7a:	f000 f869 	bl	800bb50 <usbStartReceiveI>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	bd38      	pop	{r3, r4, r5, pc}
 800ba86:	bf00      	nop
	...

0800ba90 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
	...

0800baa0 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 800baa0:	f002 b83e 	b.w	800db20 <spi_lld_init>
	...

0800bab0 <spiObjectInit>:
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 800bab0:	2300      	movs	r3, #0
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800bab2:	2201      	movs	r2, #1
 800bab4:	7002      	strb	r2, [r0, #0]
  spip->config = NULL;
 800bab6:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800bab8:	6083      	str	r3, [r0, #8]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800baba:	300c      	adds	r0, #12
 800babc:	f7ff ba38 	b.w	800af30 <chMtxObjectInit>

0800bac0 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800bac0:	f001 bb5e 	b.w	800d180 <usb_lld_init>
	...

0800bad0 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 800bad0:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800bad2:	2201      	movs	r2, #1
 800bad4:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800bad6:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800bad8:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800bada:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800badc:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800bade:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800bae0:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800bae2:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 800bae4:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 800bae6:	8143      	strh	r3, [r0, #10]
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	0000      	movs	r0, r0
	...

0800baf0 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4604      	mov	r4, r0
 800baf4:	2320      	movs	r3, #32
 800baf6:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800bafa:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800bafc:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800bafe:	60c5      	str	r5, [r0, #12]
 800bb00:	6105      	str	r5, [r0, #16]
 800bb02:	6145      	str	r5, [r0, #20]
 800bb04:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 800bb06:	f001 fb53 	bl	800d1b0 <usb_lld_start>
  usbp->state = USB_READY;
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	7023      	strb	r3, [r4, #0]
 800bb0e:	f385 8811 	msr	BASEPRI, r5
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bb20 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 800bb20:	b410      	push	{r4}

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 800bb22:	6953      	ldr	r3, [r2, #20]
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 800bb24:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 800bb28:	60e2      	str	r2, [r4, #12]

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 800bb2a:	b123      	cbz	r3, 800bb36 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800bb2c:	2400      	movs	r4, #0
 800bb2e:	601c      	str	r4, [r3, #0]
 800bb30:	605c      	str	r4, [r3, #4]
 800bb32:	609c      	str	r4, [r3, #8]
 800bb34:	60dc      	str	r4, [r3, #12]
  }
  if (epcp->out_state != NULL) {
 800bb36:	6993      	ldr	r3, [r2, #24]
 800bb38:	b123      	cbz	r3, 800bb44 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	605a      	str	r2, [r3, #4]
 800bb40:	609a      	str	r2, [r3, #8]
 800bb42:	60da      	str	r2, [r3, #12]
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 800bb44:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800bb48:	f001 bc3a 	b.w	800d3c0 <usb_lld_init_endpoint>
 800bb4c:	0000      	movs	r0, r0
	...

0800bb50 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 800bb50:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bb52:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb56:	8947      	ldrh	r7, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bb58:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb5c:	2401      	movs	r4, #1
 800bb5e:	fa04 f601 	lsl.w	r6, r4, r1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bb62:	f8de 4018 	ldr.w	r4, [lr, #24]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb66:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 800bb68:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb6a:	8146      	strh	r6, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 800bb6c:	60a2      	str	r2, [r4, #8]
  osp->rxsize = n;
  osp->rxcnt  = 0;
 800bb6e:	e884 0088 	stmia.w	r4, {r3, r7}
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 800bb72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800bb76:	f001 bd0b 	b.w	800d590 <usb_lld_start_out>
 800bb7a:	bf00      	nop
 800bb7c:	0000      	movs	r0, r0
	...

0800bb80 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 800bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bb82:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb86:	8907      	ldrh	r7, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bb88:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb8c:	2401      	movs	r4, #1
 800bb8e:	fa04 f601 	lsl.w	r6, r4, r1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bb92:	f8de 4014 	ldr.w	r4, [lr, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb96:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 800bb98:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bb9a:	8106      	strh	r6, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800bb9c:	60a2      	str	r2, [r4, #8]
  isp->txsize = n;
  isp->txcnt  = 0;
 800bb9e:	e884 0088 	stmia.w	r4, {r3, r7}
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 800bba2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800bba6:	f001 bd8b 	b.w	800d6c0 <usb_lld_start_in>
 800bbaa:	bf00      	nop
 800bbac:	0000      	movs	r0, r0
	...

0800bbb0 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 800bbb0:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 800bbb2:	2302      	movs	r3, #2

  /* Resetting internal state.*/
  usbp->status        = 0;
 800bbb4:	2500      	movs	r5, #0
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 800bbb6:	4604      	mov	r4, r0
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 800bbb8:	7003      	strb	r3, [r0, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 800bbba:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800bbbe:	f880 504e 	strb.w	r5, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800bbc2:	f880 504f 	strb.w	r5, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 800bbc6:	8105      	strh	r5, [r0, #8]
  usbp->receiving     = 0;
 800bbc8:	8145      	strh	r5, [r0, #10]
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 800bbca:	60c5      	str	r5, [r0, #12]
 800bbcc:	6105      	str	r5, [r0, #16]
 800bbce:	6145      	str	r5, [r0, #20]
 800bbd0:	6185      	str	r5, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800bbd2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800bbd6:	f001 fb83 	bl	800d2e0 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800bbda:	6863      	ldr	r3, [r4, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	b123      	cbz	r3, 800bbea <_usb_reset+0x3a>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4620      	mov	r0, r4
}
 800bbe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800bbe8:	4718      	bx	r3
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
 800bbec:	0000      	movs	r0, r0
	...

0800bbf0 <_usb_suspend>:

  /* State transition.*/
  usbp->state = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800bbf0:	6842      	ldr	r2, [r0, #4]
 800bbf2:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_SUSPENDED;
 800bbf4:	2105      	movs	r1, #5
 800bbf6:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800bbf8:	b10b      	cbz	r3, 800bbfe <_usb_suspend+0xe>
 800bbfa:	2103      	movs	r1, #3
 800bbfc:	4718      	bx	r3
 800bbfe:	4770      	bx	lr

0800bc00 <_usb_wakeup>:

  /* State transition.*/
  usbp->state = USB_ACTIVE;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800bc00:	6842      	ldr	r2, [r0, #4]
 800bc02:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_ACTIVE;
 800bc04:	2104      	movs	r1, #4
 800bc06:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800bc08:	b103      	cbz	r3, 800bc0c <_usb_wakeup+0xc>
 800bc0a:	4718      	bx	r3
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop

0800bc10 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800bc10:	b570      	push	{r4, r5, r6, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800bc12:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800bc14:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800bc16:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800bc1a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800bc1e:	f001 fca7 	bl	800d570 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800bc22:	6863      	ldr	r3, [r4, #4]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	b35b      	cbz	r3, 800bc80 <_usb_ep0setup+0x70>
      !(usbp->config->requests_hook_cb(usbp))) {
 800bc28:	4620      	mov	r0, r4
 800bc2a:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800bc2c:	b340      	cbz	r0, 800bc80 <_usb_ep0setup+0x70>
 800bc2e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800bc30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800bc34:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800bc38:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 800bc3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800bc40:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 800bc42:	bf3c      	itt	cc
 800bc44:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 800bc46:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800bc48:	061a      	lsls	r2, r3, #24
 800bc4a:	f100 8089 	bmi.w	800bd60 <_usb_ep0setup+0x150>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	d151      	bne.n	800bcf6 <_usb_ep0setup+0xe6>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800bc52:	2305      	movs	r3, #5
 800bc54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800bc58:	2320      	movs	r3, #32
 800bc5a:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bc5e:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bc60:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bc62:	695b      	ldr	r3, [r3, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 800bc64:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bc66:	f042 0201 	orr.w	r2, r2, #1
 800bc6a:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800bc6c:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800bc6e:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 800bc70:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800bc72:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800bc74:	4629      	mov	r1, r5
 800bc76:	f001 fd23 	bl	800d6c0 <usb_lld_start_in>
 800bc7a:	f385 8811 	msr	BASEPRI, r5
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800bc80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bc84:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 800bc88:	461a      	mov	r2, r3
 800bc8a:	d011      	beq.n	800bcb0 <_usb_ep0setup+0xa0>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f001 ff16 	bl	800dac0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800bc94:	2100      	movs	r1, #0
 800bc96:	4620      	mov	r0, r4
 800bc98:	f001 ff02 	bl	800daa0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	b113      	cbz	r3, 800bca8 <_usb_ep0setup+0x98>
 800bca2:	2105      	movs	r1, #5
 800bca4:	4620      	mov	r0, r4
 800bca6:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800bca8:	2306      	movs	r3, #6
 800bcaa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800bcb0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800bcb4:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800bcb8:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 800bcbc:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800bcc0:	f000 8102 	beq.w	800bec8 <_usb_ep0setup+0x2b8>
 800bcc4:	d92f      	bls.n	800bd26 <_usb_ep0setup+0x116>
 800bcc6:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800bcca:	f000 80e4 	beq.w	800be96 <_usb_ep0setup+0x286>
 800bcce:	d960      	bls.n	800bd92 <_usb_ep0setup+0x182>
 800bcd0:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 800bcd4:	f000 8089 	beq.w	800bdea <_usb_ep0setup+0x1da>
 800bcd8:	f640 4202 	movw	r2, #3074	; 0xc02
 800bcdc:	4295      	cmp	r5, r2
 800bcde:	f000 8105 	beq.w	800beec <_usb_ep0setup+0x2dc>
 800bce2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800bce6:	d1d1      	bne.n	800bc8c <_usb_ep0setup+0x7c>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800bce8:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800bcec:	2501      	movs	r5, #1
 800bcee:	6426      	str	r6, [r4, #64]	; 0x40
 800bcf0:	63a2      	str	r2, [r4, #56]	; 0x38
 800bcf2:	63e5      	str	r5, [r4, #60]	; 0x3c
 800bcf4:	e79e      	b.n	800bc34 <_usb_ep0setup+0x24>
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800bcf6:	2304      	movs	r3, #4
 800bcf8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bd02:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bd04:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bd06:	699b      	ldr	r3, [r3, #24]
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 800bd08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bd0a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bd0c:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 800bd10:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bd12:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800bd14:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 800bd16:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	f001 fc38 	bl	800d590 <usb_lld_start_out>
 800bd20:	f385 8811 	msr	BASEPRI, r5
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800bd26:	2d02      	cmp	r5, #2
 800bd28:	f000 809e 	beq.w	800be68 <_usb_ep0setup+0x258>
 800bd2c:	f240 8092 	bls.w	800be54 <_usb_ep0setup+0x244>
 800bd30:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800bd34:	d07f      	beq.n	800be36 <_usb_ep0setup+0x226>
 800bd36:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 800bd3a:	d1a7      	bne.n	800bc8c <_usb_ep0setup+0x7c>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800bd3c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1a3      	bne.n	800bc8c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800bd44:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bd48:	f013 010f 	ands.w	r1, r3, #15
 800bd4c:	d02f      	beq.n	800bdae <_usb_ep0setup+0x19e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800bd4e:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800bd50:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800bd52:	f100 80f2 	bmi.w	800bf3a <_usb_ep0setup+0x32a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800bd56:	f001 fec3 	bl	800dae0 <usb_lld_clear_out>
 800bd5a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800bd5e:	e026      	b.n	800bdae <_usb_ep0setup+0x19e>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 800bd60:	b365      	cbz	r5, 800bdbc <_usb_ep0setup+0x1ac>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800bd68:	2320      	movs	r3, #32
 800bd6a:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bd6e:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bd70:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bd72:	695b      	ldr	r3, [r3, #20]
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 800bd74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bd76:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bd78:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 800bd7c:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bd7e:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800bd80:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 800bd82:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800bd86:	4629      	mov	r1, r5
 800bd88:	f001 fc9a 	bl	800d6c0 <usb_lld_start_in>
 800bd8c:	f385 8811 	msr	BASEPRI, r5
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800bd92:	f240 3302 	movw	r3, #770	; 0x302
 800bd96:	429d      	cmp	r5, r3
 800bd98:	d03a      	beq.n	800be10 <_usb_ep0setup+0x200>
 800bd9a:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800bd9e:	f47f af75 	bne.w	800bc8c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800bda2:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800bda6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800bdaa:	f000 80b4 	beq.w	800bf16 <_usb_ep0setup+0x306>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800bdae:	2300      	movs	r3, #0
 800bdb0:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdb2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bdb4:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800bdb6:	0613      	lsls	r3, r2, #24
 800bdb8:	f57f af4b 	bpl.w	800bc52 <_usb_ep0setup+0x42>
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bdc8:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bdca:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bdcc:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 800bdce:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bdd0:	f042 0201 	orr.w	r2, r2, #1
 800bdd4:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800bdd6:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 800bdd8:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 800bdda:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 800bddc:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800bdde:	4629      	mov	r1, r5
 800bde0:	f001 fbd6 	bl	800d590 <usb_lld_start_out>
 800bde4:	f385 8811 	msr	BASEPRI, r5
 800bde8:	bd70      	pop	{r4, r5, r6, pc}
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800bdea:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bdee:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f040 8081 	bne.w	800befa <_usb_ep0setup+0x2ea>
      usbp->state = USB_SELECTED;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800bdfc:	6863      	ldr	r3, [r4, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0d4      	beq.n	800bdae <_usb_ep0setup+0x19e>
 800be04:	2102      	movs	r1, #2
 800be06:	4620      	mov	r0, r4
 800be08:	4798      	blx	r3
 800be0a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800be0e:	e7ce      	b.n	800bdae <_usb_ep0setup+0x19e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800be10:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800be14:	2b00      	cmp	r3, #0
 800be16:	f47f af39 	bne.w	800bc8c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800be1a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800be1e:	f013 010f 	ands.w	r1, r3, #15
 800be22:	d0c4      	beq.n	800bdae <_usb_ep0setup+0x19e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800be24:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800be26:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800be28:	f100 808c 	bmi.w	800bf44 <_usb_ep0setup+0x334>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800be2c:	f001 fe38 	bl	800daa0 <usb_lld_stall_out>
 800be30:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800be34:	e7bb      	b.n	800bdae <_usb_ep0setup+0x19e>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800be36:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	f47f af26 	bne.w	800bc8c <_usb_ep0setup+0x7c>
      usbp->status &= ~2U;
 800be40:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800be44:	63a6      	str	r6, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800be46:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800be4a:	63e6      	str	r6, [r4, #60]	; 0x3c
 800be4c:	6426      	str	r6, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800be4e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800be52:	e7b0      	b.n	800bdb6 <_usb_ep0setup+0x1a6>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800be54:	2d00      	cmp	r5, #0
 800be56:	d146      	bne.n	800bee6 <_usb_ep0setup+0x2d6>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800be58:	2002      	movs	r0, #2
 800be5a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800be5e:	6425      	str	r5, [r4, #64]	; 0x40
 800be60:	63a2      	str	r2, [r4, #56]	; 0x38
 800be62:	63e0      	str	r0, [r4, #60]	; 0x3c
 800be64:	4605      	mov	r5, r0
 800be66:	e6e5      	b.n	800bc34 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800be68:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800be6c:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800be70:	4620      	mov	r0, r4
 800be72:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800be76:	d143      	bne.n	800bf00 <_usb_ep0setup+0x2f0>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800be78:	f001 fb5a 	bl	800d530 <usb_lld_get_status_out>
 800be7c:	2801      	cmp	r0, #1
 800be7e:	d043      	beq.n	800bf08 <_usb_ep0setup+0x2f8>
 800be80:	2802      	cmp	r0, #2
 800be82:	f47f af03 	bne.w	800bc8c <_usb_ep0setup+0x7c>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800be86:	4b32      	ldr	r3, [pc, #200]	; (800bf50 <_usb_ep0setup+0x340>)
 800be88:	63a3      	str	r3, [r4, #56]	; 0x38
 800be8a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800be8c:	6426      	str	r6, [r4, #64]	; 0x40
 800be8e:	4605      	mov	r5, r0
 800be90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be94:	e6ce      	b.n	800bc34 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800be96:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800be9a:	6861      	ldr	r1, [r4, #4]
 800be9c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bea0:	684d      	ldr	r5, [r1, #4]
 800bea2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800bea6:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800beaa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800beae:	4620      	mov	r0, r4
 800beb0:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 800beb2:	2800      	cmp	r0, #0
 800beb4:	f43f aeea 	beq.w	800bc8c <_usb_ep0setup+0x7c>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800beb8:	6843      	ldr	r3, [r0, #4]
 800beba:	6805      	ldr	r5, [r0, #0]
 800bebc:	63e5      	str	r5, [r4, #60]	; 0x3c
 800bebe:	63a3      	str	r3, [r4, #56]	; 0x38
 800bec0:	6426      	str	r6, [r4, #64]	; 0x40
 800bec2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bec6:	e6b5      	b.n	800bc34 <_usb_ep0setup+0x24>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800bec8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800becc:	2b01      	cmp	r3, #1
 800bece:	f47f aedd 	bne.w	800bc8c <_usb_ep0setup+0x7c>
      usbp->status |= 2U;
 800bed2:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800bed6:	63a6      	str	r6, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800bed8:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800bedc:	63e6      	str	r6, [r4, #60]	; 0x3c
 800bede:	6426      	str	r6, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800bee0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800bee4:	e767      	b.n	800bdb6 <_usb_ep0setup+0x1a6>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800bee6:	2d01      	cmp	r5, #1
 800bee8:	f47f aed0 	bne.w	800bc8c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800beec:	4a19      	ldr	r2, [pc, #100]	; (800bf54 <_usb_ep0setup+0x344>)
 800beee:	63a2      	str	r2, [r4, #56]	; 0x38
 800bef0:	2502      	movs	r5, #2
 800bef2:	2200      	movs	r2, #0
 800bef4:	63e5      	str	r5, [r4, #60]	; 0x3c
 800bef6:	6422      	str	r2, [r4, #64]	; 0x40
 800bef8:	e69c      	b.n	800bc34 <_usb_ep0setup+0x24>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800befa:	2304      	movs	r3, #4
 800befc:	7023      	strb	r3, [r4, #0]
 800befe:	e77d      	b.n	800bdfc <_usb_ep0setup+0x1ec>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800bf00:	f001 fb26 	bl	800d550 <usb_lld_get_status_in>
 800bf04:	2801      	cmp	r0, #1
 800bf06:	d1bb      	bne.n	800be80 <_usb_ep0setup+0x270>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800bf08:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <_usb_ep0setup+0x348>)
 800bf0a:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf0c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800bf0e:	6426      	str	r6, [r4, #64]	; 0x40
 800bf10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bf14:	e68e      	b.n	800bc34 <_usb_ep0setup+0x24>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 800bf16:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bf1a:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f001 fa3e 	bl	800d3a0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800bf24:	6863      	ldr	r3, [r4, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	b113      	cbz	r3, 800bf30 <_usb_ep0setup+0x320>
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800bf30:	2303      	movs	r3, #3
 800bf32:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800bf36:	7023      	strb	r3, [r4, #0]
 800bf38:	e739      	b.n	800bdae <_usb_ep0setup+0x19e>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800bf3a:	f001 fde1 	bl	800db00 <usb_lld_clear_in>
 800bf3e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800bf42:	e734      	b.n	800bdae <_usb_ep0setup+0x19e>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800bf44:	f001 fdbc 	bl	800dac0 <usb_lld_stall_in>
 800bf48:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800bf4c:	e72f      	b.n	800bdae <_usb_ep0setup+0x19e>
 800bf4e:	bf00      	nop
 800bf50:	08015aa0 	.word	0x08015aa0
 800bf54:	08015a90 	.word	0x08015a90
 800bf58:	08015ab0 	.word	0x08015ab0
 800bf5c:	00000000 	.word	0x00000000

0800bf60 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800bf60:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800bf62:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800bf66:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800bf68:	2b06      	cmp	r3, #6
 800bf6a:	d815      	bhi.n	800bf98 <_usb_ep0in+0x38>
 800bf6c:	e8df f003 	tbb	[pc, r3]
 800bf70:	04251504 	.word	0x04251504
 800bf74:	3c04      	.short	0x3c04
 800bf76:	04          	.byte	0x04
 800bf77:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800bf78:	2100      	movs	r1, #0
 800bf7a:	f001 fda1 	bl	800dac0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800bf7e:	2100      	movs	r1, #0
 800bf80:	4620      	mov	r0, r4
 800bf82:	f001 fd8d 	bl	800daa0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800bf86:	6863      	ldr	r3, [r4, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	b113      	cbz	r3, 800bf92 <_usb_ep0in+0x32>
 800bf8c:	2105      	movs	r1, #5
 800bf8e:	4620      	mov	r0, r4
 800bf90:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800bf92:	2306      	movs	r3, #6
 800bf94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800bf98:	bd38      	pop	{r3, r4, r5, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800bf9a:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800bf9e:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800bfa2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bfa4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d906      	bls.n	800bfba <_usb_ep0in+0x5a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800bfac:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800bfae:	8a1d      	ldrh	r5, [r3, #16]
 800bfb0:	fbb2 f3f5 	udiv	r3, r2, r5
 800bfb4:	fb05 2513 	mls	r5, r5, r3, r2
 800bfb8:	b1ed      	cbz	r5, 800bff6 <_usb_ep0in+0x96>
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800bfc0:	2320      	movs	r3, #32
 800bfc2:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bfc6:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bfc8:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800bfca:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 800bfcc:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bfce:	f042 0201 	orr.w	r2, r2, #1
 800bfd2:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800bfd4:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 800bfd6:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 800bfd8:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 800bfda:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800bfdc:	4629      	mov	r1, r5
 800bfde:	f001 fad7 	bl	800d590 <usb_lld_start_out>
 800bfe2:	f385 8811 	msr	BASEPRI, r5
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800bfe8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bfea:	b103      	cbz	r3, 800bfee <_usb_ep0in+0x8e>
      usbp->ep0endcb(usbp);
 800bfec:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800bfee:	2300      	movs	r3, #0
 800bff0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800bff4:	bd38      	pop	{r3, r4, r5, pc}
 800bff6:	2320      	movs	r3, #32
 800bff8:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800bffc:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800bffe:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800c000:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800c002:	f042 0201 	orr.w	r2, r2, #1
 800c006:	8102      	strh	r2, [r0, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800c008:	4629      	mov	r1, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800c00a:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 800c00c:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800c00e:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800c010:	f001 fb56 	bl	800d6c0 <usb_lld_start_in>
 800c014:	f385 8811 	msr	BASEPRI, r5
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800c018:	2302      	movs	r3, #2
 800c01a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800c01e:	bd38      	pop	{r3, r4, r5, pc}

0800c020 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800c020:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800c024:	2a06      	cmp	r2, #6
 800c026:	d80c      	bhi.n	800c042 <_usb_ep0out+0x22>
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	2301      	movs	r3, #1
 800c02c:	4093      	lsls	r3, r2
 800c02e:	f013 0f67 	tst.w	r3, #103	; 0x67
 800c032:	4604      	mov	r4, r0
 800c034:	d112      	bne.n	800c05c <_usb_ep0out+0x3c>
 800c036:	f013 0508 	ands.w	r5, r3, #8
 800c03a:	d103      	bne.n	800c044 <_usb_ep0out+0x24>
 800c03c:	06db      	lsls	r3, r3, #27
 800c03e:	d41e      	bmi.n	800c07e <_usb_ep0out+0x5e>
 800c040:	bd38      	pop	{r3, r4, r5, pc}
 800c042:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 800c044:	68c3      	ldr	r3, [r0, #12]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1f8      	bne.n	800c040 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800c04e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c050:	b103      	cbz	r3, 800c054 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 800c052:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800c054:	2300      	movs	r3, #0
 800c056:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800c05c:	2100      	movs	r1, #0
 800c05e:	f001 fd2f 	bl	800dac0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800c062:	2100      	movs	r1, #0
 800c064:	4620      	mov	r0, r4
 800c066:	f001 fd1b 	bl	800daa0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	b113      	cbz	r3, 800c076 <_usb_ep0out+0x56>
 800c070:	2105      	movs	r1, #5
 800c072:	4620      	mov	r0, r4
 800c074:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800c076:	2306      	movs	r3, #6
 800c078:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800c07c:	bd38      	pop	{r3, r4, r5, pc}

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 800c07e:	2305      	movs	r3, #5
 800c080:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 800c084:	2320      	movs	r3, #32
 800c086:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800c08a:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800c08c:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800c08e:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800c090:	f042 0201 	orr.w	r2, r2, #1
 800c094:	8102      	strh	r2, [r0, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800c096:	4629      	mov	r1, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800c098:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 800c09a:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800c09c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800c09e:	f001 fb0f 	bl	800d6c0 <usb_lld_start_in>
 800c0a2:	f385 8811 	msr	BASEPRI, r5
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c0b0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800c0b0:	0943      	lsrs	r3, r0, #5
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	b410      	push	{r4}
 800c0b6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c0ba:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800c0be:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800c0c2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800c0c6:	0109      	lsls	r1, r1, #4
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c0c8:	f000 001f 	and.w	r0, r0, #31
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	fa02 f000 	lsl.w	r0, r2, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c0d2:	b2c9      	uxtb	r1, r1
 800c0d4:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c0d8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c0dc:	6018      	str	r0, [r3, #0]
}
 800c0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e2:	4770      	bx	lr
	...

0800c0f0 <nvicSetSystemHandlerPriority>:
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800c0f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800c0f4:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800c0f8:	0109      	lsls	r1, r1, #4
 800c0fa:	b2c9      	uxtb	r1, r1
 800c0fc:	7601      	strb	r1, [r0, #24]
 800c0fe:	4770      	bx	lr

0800c100 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800c100:	4b17      	ldr	r3, [pc, #92]	; (800c160 <hal_lld_init+0x60>)
 800c102:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c106:	691a      	ldr	r2, [r3, #16]
 800c108:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800c10a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800c10c:	6119      	str	r1, [r3, #16]
 800c10e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800c110:	6958      	ldr	r0, [r3, #20]
 800c112:	6159      	str	r1, [r3, #20]
 800c114:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800c116:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800c118:	4c12      	ldr	r4, [pc, #72]	; (800c164 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800c11a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800c11e:	6218      	str	r0, [r3, #32]
 800c120:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800c122:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c124:	6259      	str	r1, [r3, #36]	; 0x24
 800c126:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800c128:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c12a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800c12e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800c130:	6821      	ldr	r1, [r4, #0]
 800c132:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800c136:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800c138:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c13a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800c13e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c142:	d003      	beq.n	800c14c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800c144:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c148:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800c14a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800c14c:	4a05      	ldr	r2, [pc, #20]	; (800c164 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800c14e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800c152:	6853      	ldr	r3, [r2, #4]
 800c154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c158:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800c15a:	f000 b9f1 	b.w	800c540 <dmaInit>
 800c15e:	bf00      	nop
 800c160:	40023800 	.word	0x40023800
 800c164:	40007000 	.word	0x40007000
	...

0800c170 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800c170:	492c      	ldr	r1, [pc, #176]	; (800c224 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800c172:	4b2d      	ldr	r3, [pc, #180]	; (800c228 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800c174:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800c178:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800c17c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800c17e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800c180:	680b      	ldr	r3, [r1, #0]
 800c182:	f043 0301 	orr.w	r3, r3, #1
 800c186:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800c188:	680a      	ldr	r2, [r1, #0]
 800c18a:	4b26      	ldr	r3, [pc, #152]	; (800c224 <stm32_clock_init+0xb4>)
 800c18c:	0790      	lsls	r0, r2, #30
 800c18e:	d5fb      	bpl.n	800c188 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800c190:	689a      	ldr	r2, [r3, #8]
 800c192:	f022 0203 	bic.w	r2, r2, #3
 800c196:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800c198:	689a      	ldr	r2, [r3, #8]
 800c19a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800c19c:	4619      	mov	r1, r3
 800c19e:	688b      	ldr	r3, [r1, #8]
 800c1a0:	4a20      	ldr	r2, [pc, #128]	; (800c224 <stm32_clock_init+0xb4>)
 800c1a2:	f013 030c 	ands.w	r3, r3, #12
 800c1a6:	d1fa      	bne.n	800c19e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800c1a8:	6811      	ldr	r1, [r2, #0]
 800c1aa:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800c1ae:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800c1b0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 800c1b2:	6813      	ldr	r3, [r2, #0]
 800c1b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1b8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800c1ba:	6811      	ldr	r1, [r2, #0]
 800c1bc:	4b19      	ldr	r3, [pc, #100]	; (800c224 <stm32_clock_init+0xb4>)
 800c1be:	0389      	lsls	r1, r1, #14
 800c1c0:	d5fb      	bpl.n	800c1ba <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800c1c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800c1ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c1cc:	4915      	ldr	r1, [pc, #84]	; (800c224 <stm32_clock_init+0xb4>)
 800c1ce:	0790      	lsls	r0, r2, #30
 800c1d0:	d5fb      	bpl.n	800c1ca <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800c1d2:	4b16      	ldr	r3, [pc, #88]	; (800c22c <stm32_clock_init+0xbc>)
 800c1d4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800c1d6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800c1d8:	4a13      	ldr	r2, [pc, #76]	; (800c228 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800c1da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1de:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800c1e0:	6853      	ldr	r3, [r2, #4]
 800c1e2:	0459      	lsls	r1, r3, #17
 800c1e4:	d5fc      	bpl.n	800c1e0 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800c1e6:	490f      	ldr	r1, [pc, #60]	; (800c224 <stm32_clock_init+0xb4>)
 800c1e8:	680a      	ldr	r2, [r1, #0]
 800c1ea:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <stm32_clock_init+0xb4>)
 800c1ec:	0192      	lsls	r2, r2, #6
 800c1ee:	d5fb      	bpl.n	800c1e8 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800c1f0:	4a0f      	ldr	r2, [pc, #60]	; (800c230 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800c1f2:	4910      	ldr	r1, [pc, #64]	; (800c234 <stm32_clock_init+0xc4>)
 800c1f4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800c1f6:	f240 7105 	movw	r1, #1797	; 0x705
 800c1fa:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800c1fc:	689a      	ldr	r2, [r3, #8]
 800c1fe:	f042 0202 	orr.w	r2, r2, #2
 800c202:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800c204:	461a      	mov	r2, r3
 800c206:	6893      	ldr	r3, [r2, #8]
 800c208:	4906      	ldr	r1, [pc, #24]	; (800c224 <stm32_clock_init+0xb4>)
 800c20a:	f003 030c 	and.w	r3, r3, #12
 800c20e:	2b08      	cmp	r3, #8
 800c210:	d1f9      	bne.n	800c206 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800c212:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c218:	644b      	str	r3, [r1, #68]	; 0x44
 800c21a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c21c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c220:	664b      	str	r3, [r1, #100]	; 0x64
 800c222:	4770      	bx	lr
 800c224:	40023800 	.word	0x40023800
 800c228:	40007000 	.word	0x40007000
 800c22c:	07405408 	.word	0x07405408
 800c230:	40023c00 	.word	0x40023c00
 800c234:	38889400 	.word	0x38889400
	...

0800c240 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 800c240:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800c242:	4b07      	ldr	r3, [pc, #28]	; (800c260 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 800c244:	4a07      	ldr	r2, [pc, #28]	; (800c264 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800c246:	6819      	ldr	r1, [r3, #0]
 800c248:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800c24c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800c24e:	6813      	ldr	r3, [r2, #0]
 800c250:	b10b      	cbz	r3, 800c256 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800c252:	6850      	ldr	r0, [r2, #4]
 800c254:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c25a:	f7fe bef9 	b.w	800b050 <_port_irq_epilogue>
 800c25e:	bf00      	nop
 800c260:	40026000 	.word	0x40026000
 800c264:	20001310 	.word	0x20001310
	...

0800c270 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800c270:	4b08      	ldr	r3, [pc, #32]	; (800c294 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 800c272:	4809      	ldr	r0, [pc, #36]	; (800c298 <Vector70+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800c274:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 800c276:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800c278:	0989      	lsrs	r1, r1, #6
 800c27a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800c27e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
 800c280:	018c      	lsls	r4, r1, #6
 800c282:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800c284:	b10a      	cbz	r2, 800c28a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800c286:	68c0      	ldr	r0, [r0, #12]
 800c288:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c28e:	f7fe bedf 	b.w	800b050 <_port_irq_epilogue>
 800c292:	bf00      	nop
 800c294:	40026000 	.word	0x40026000
 800c298:	20001310 	.word	0x20001310
 800c29c:	00000000 	.word	0x00000000

0800c2a0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800c2a0:	4b08      	ldr	r3, [pc, #32]	; (800c2c4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 800c2a2:	4809      	ldr	r0, [pc, #36]	; (800c2c8 <Vector74+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800c2a4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 800c2a6:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800c2a8:	0c09      	lsrs	r1, r1, #16
 800c2aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800c2ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
 800c2b0:	040c      	lsls	r4, r1, #16
 800c2b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800c2b4:	b10a      	cbz	r2, 800c2ba <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800c2b6:	6940      	ldr	r0, [r0, #20]
 800c2b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c2be:	f7fe bec7 	b.w	800b050 <_port_irq_epilogue>
 800c2c2:	bf00      	nop
 800c2c4:	40026000 	.word	0x40026000
 800c2c8:	20001310 	.word	0x20001310
 800c2cc:	00000000 	.word	0x00000000

0800c2d0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800c2d0:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 800c2d2:	4809      	ldr	r0, [pc, #36]	; (800c2f8 <Vector78+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800c2d4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 800c2d6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800c2d8:	0d89      	lsrs	r1, r1, #22
 800c2da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800c2de:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
 800c2e0:	058c      	lsls	r4, r1, #22
 800c2e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800c2e4:	b10a      	cbz	r2, 800c2ea <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800c2e6:	69c0      	ldr	r0, [r0, #28]
 800c2e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c2ee:	f7fe beaf 	b.w	800b050 <_port_irq_epilogue>
 800c2f2:	bf00      	nop
 800c2f4:	40026000 	.word	0x40026000
 800c2f8:	20001310 	.word	0x20001310
 800c2fc:	00000000 	.word	0x00000000

0800c300 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800c300:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800c302:	4b07      	ldr	r3, [pc, #28]	; (800c320 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 800c304:	4807      	ldr	r0, [pc, #28]	; (800c324 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800c306:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 800c308:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800c30a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800c30e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800c310:	b10a      	cbz	r2, 800c316 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800c312:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c314:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c31a:	f7fe be99 	b.w	800b050 <_port_irq_epilogue>
 800c31e:	bf00      	nop
 800c320:	40026000 	.word	0x40026000
 800c324:	20001310 	.word	0x20001310
	...

0800c330 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800c330:	4b08      	ldr	r3, [pc, #32]	; (800c354 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 800c332:	4809      	ldr	r0, [pc, #36]	; (800c358 <Vector80+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800c334:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 800c336:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800c338:	0989      	lsrs	r1, r1, #6
 800c33a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800c33e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
 800c340:	018c      	lsls	r4, r1, #6
 800c342:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800c344:	b10a      	cbz	r2, 800c34a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800c346:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800c348:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c34e:	f7fe be7f 	b.w	800b050 <_port_irq_epilogue>
 800c352:	bf00      	nop
 800c354:	40026000 	.word	0x40026000
 800c358:	20001310 	.word	0x20001310
 800c35c:	00000000 	.word	0x00000000

0800c360 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800c360:	4b08      	ldr	r3, [pc, #32]	; (800c384 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 800c362:	4809      	ldr	r0, [pc, #36]	; (800c388 <Vector84+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800c364:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 800c366:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800c368:	0c09      	lsrs	r1, r1, #16
 800c36a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800c36e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
 800c370:	040c      	lsls	r4, r1, #16
 800c372:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800c374:	b10a      	cbz	r2, 800c37a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800c376:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c378:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c37e:	f7fe be67 	b.w	800b050 <_port_irq_epilogue>
 800c382:	bf00      	nop
 800c384:	40026000 	.word	0x40026000
 800c388:	20001310 	.word	0x20001310
 800c38c:	00000000 	.word	0x00000000

0800c390 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800c390:	4b08      	ldr	r3, [pc, #32]	; (800c3b4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 800c392:	4809      	ldr	r0, [pc, #36]	; (800c3b8 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800c394:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 800c396:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800c398:	0d89      	lsrs	r1, r1, #22
 800c39a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800c39e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
 800c3a0:	058c      	lsls	r4, r1, #22
 800c3a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800c3a4:	b10a      	cbz	r2, 800c3aa <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800c3a6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800c3a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c3ae:	f7fe be4f 	b.w	800b050 <_port_irq_epilogue>
 800c3b2:	bf00      	nop
 800c3b4:	40026000 	.word	0x40026000
 800c3b8:	20001310 	.word	0x20001310
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 800c3c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800c3c2:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 800c3c4:	4807      	ldr	r0, [pc, #28]	; (800c3e4 <Vector120+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800c3c6:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 800c3c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800c3ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800c3ce:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800c3d0:	b10a      	cbz	r2, 800c3d6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800c3d2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800c3d4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c3da:	f7fe be39 	b.w	800b050 <_port_irq_epilogue>
 800c3de:	bf00      	nop
 800c3e0:	40026400 	.word	0x40026400
 800c3e4:	20001310 	.word	0x20001310
	...

0800c3f0 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800c3f0:	4b08      	ldr	r3, [pc, #32]	; (800c414 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 800c3f2:	4809      	ldr	r0, [pc, #36]	; (800c418 <Vector124+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800c3f4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 800c3f6:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800c3f8:	0989      	lsrs	r1, r1, #6
 800c3fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800c3fe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
 800c400:	018c      	lsls	r4, r1, #6
 800c402:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800c404:	b10a      	cbz	r2, 800c40a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800c406:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c408:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c40e:	f7fe be1f 	b.w	800b050 <_port_irq_epilogue>
 800c412:	bf00      	nop
 800c414:	40026400 	.word	0x40026400
 800c418:	20001310 	.word	0x20001310
 800c41c:	00000000 	.word	0x00000000

0800c420 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800c420:	4b08      	ldr	r3, [pc, #32]	; (800c444 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 800c422:	4809      	ldr	r0, [pc, #36]	; (800c448 <Vector128+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800c424:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 800c426:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800c428:	0c09      	lsrs	r1, r1, #16
 800c42a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800c42e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
 800c430:	040c      	lsls	r4, r1, #16
 800c432:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800c434:	b10a      	cbz	r2, 800c43a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800c436:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800c438:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c43e:	f7fe be07 	b.w	800b050 <_port_irq_epilogue>
 800c442:	bf00      	nop
 800c444:	40026400 	.word	0x40026400
 800c448:	20001310 	.word	0x20001310
 800c44c:	00000000 	.word	0x00000000

0800c450 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800c450:	4b08      	ldr	r3, [pc, #32]	; (800c474 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 800c452:	4809      	ldr	r0, [pc, #36]	; (800c478 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800c454:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 800c456:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800c458:	0d89      	lsrs	r1, r1, #22
 800c45a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800c45e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
 800c460:	058c      	lsls	r4, r1, #22
 800c462:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800c464:	b10a      	cbz	r2, 800c46a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800c466:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800c468:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c46e:	f7fe bdef 	b.w	800b050 <_port_irq_epilogue>
 800c472:	bf00      	nop
 800c474:	40026400 	.word	0x40026400
 800c478:	20001310 	.word	0x20001310
 800c47c:	00000000 	.word	0x00000000

0800c480 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 800c480:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 800c484:	4807      	ldr	r0, [pc, #28]	; (800c4a4 <Vector130+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800c486:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 800c488:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800c48a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800c48e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800c490:	b10a      	cbz	r2, 800c496 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800c492:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800c494:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c49a:	f7fe bdd9 	b.w	800b050 <_port_irq_epilogue>
 800c49e:	bf00      	nop
 800c4a0:	40026400 	.word	0x40026400
 800c4a4:	20001310 	.word	0x20001310
	...

0800c4b0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800c4b0:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 800c4b2:	4809      	ldr	r0, [pc, #36]	; (800c4d8 <Vector150+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800c4b4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 800c4b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800c4b8:	0989      	lsrs	r1, r1, #6
 800c4ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800c4be:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
 800c4c0:	018c      	lsls	r4, r1, #6
 800c4c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800c4c4:	b10a      	cbz	r2, 800c4ca <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800c4c6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800c4c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c4ce:	f7fe bdbf 	b.w	800b050 <_port_irq_epilogue>
 800c4d2:	bf00      	nop
 800c4d4:	40026400 	.word	0x40026400
 800c4d8:	20001310 	.word	0x20001310
 800c4dc:	00000000 	.word	0x00000000

0800c4e0 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800c4e0:	4b08      	ldr	r3, [pc, #32]	; (800c504 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 800c4e2:	4809      	ldr	r0, [pc, #36]	; (800c508 <Vector154+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800c4e4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 800c4e6:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800c4e8:	0c09      	lsrs	r1, r1, #16
 800c4ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800c4ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
 800c4f0:	040c      	lsls	r4, r1, #16
 800c4f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800c4f4:	b10a      	cbz	r2, 800c4fa <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800c4f6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800c4f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c4fe:	f7fe bda7 	b.w	800b050 <_port_irq_epilogue>
 800c502:	bf00      	nop
 800c504:	40026400 	.word	0x40026400
 800c508:	20001310 	.word	0x20001310
 800c50c:	00000000 	.word	0x00000000

0800c510 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800c510:	4b08      	ldr	r3, [pc, #32]	; (800c534 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 800c512:	4809      	ldr	r0, [pc, #36]	; (800c538 <Vector158+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800c514:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 800c516:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800c518:	0d89      	lsrs	r1, r1, #22
 800c51a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800c51e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
 800c520:	058c      	lsls	r4, r1, #22
 800c522:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800c524:	b10a      	cbz	r2, 800c52a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800c526:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c528:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800c52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800c52e:	f7fe bd8f 	b.w	800b050 <_port_irq_epilogue>
 800c532:	bf00      	nop
 800c534:	40026400 	.word	0x40026400
 800c538:	20001310 	.word	0x20001310
 800c53c:	00000000 	.word	0x00000000

0800c540 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 800c540:	490e      	ldr	r1, [pc, #56]	; (800c57c <dmaInit+0x3c>)
 800c542:	4a0f      	ldr	r2, [pc, #60]	; (800c580 <dmaInit+0x40>)
 800c544:	480f      	ldr	r0, [pc, #60]	; (800c584 <dmaInit+0x44>)
 800c546:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800c548:	b410      	push	{r4}
  unsigned i;

  dma_streams_mask = 0U;
 800c54a:	600b      	str	r3, [r1, #0]
 800c54c:	4c0e      	ldr	r4, [pc, #56]	; (800c588 <dmaInit+0x48>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 800c54e:	4619      	mov	r1, r3
 800c550:	e001      	b.n	800c556 <dmaInit+0x16>
 800c552:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800c556:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800c558:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800c55c:	3301      	adds	r3, #1
 800c55e:	2b10      	cmp	r3, #16
 800c560:	f102 020c 	add.w	r2, r2, #12
 800c564:	d1f5      	bne.n	800c552 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800c566:	4909      	ldr	r1, [pc, #36]	; (800c58c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 800c568:	4a09      	ldr	r2, [pc, #36]	; (800c590 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 800c56a:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800c56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c572:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 800c574:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800c576:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 800c578:	60d3      	str	r3, [r2, #12]
}
 800c57a:	4770      	bx	lr
 800c57c:	20001390 	.word	0x20001390
 800c580:	08015acc 	.word	0x08015acc
 800c584:	40026010 	.word	0x40026010
 800c588:	20001310 	.word	0x20001310
 800c58c:	40026000 	.word	0x40026000
 800c590:	40026400 	.word	0x40026400
	...

0800c5a0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 800c5a0:	b508      	push	{r3, lr}
 800c5a2:	2320      	movs	r3, #32
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 800c5a8:	f7fe f97a 	bl	800a8a0 <chSysTimerHandlerI>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800c5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800c5b6:	f7fe bd4b 	b.w	800b050 <_port_irq_epilogue>
 800c5ba:	bf00      	nop
 800c5bc:	0000      	movs	r0, r0
	...

0800c5c0 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800c5c0:	4b05      	ldr	r3, [pc, #20]	; (800c5d8 <st_lld_init+0x18>)
 800c5c2:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 800c5c6:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800c5c8:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800c5ca:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 800c5cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800c5ce:	2108      	movs	r1, #8
 800c5d0:	200b      	movs	r0, #11
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800c5d2:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800c5d4:	f7ff bd8c 	b.w	800c0f0 <nvicSetSystemHandlerPriority>
 800c5d8:	e000e010 	.word	0xe000e010
 800c5dc:	00000000 	.word	0x00000000

0800c5e0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 800c5e2:	4b56      	ldr	r3, [pc, #344]	; (800c73c <Vector88+0x15c>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800c5ea:	0691      	lsls	r1, r2, #26
 800c5ec:	d531      	bpl.n	800c652 <Vector88+0x72>
 800c5ee:	4c54      	ldr	r4, [pc, #336]	; (800c740 <Vector88+0x160>)
 800c5f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c5f2:	680a      	ldr	r2, [r1, #0]
 800c5f4:	6853      	ldr	r3, [r2, #4]
 800c5f6:	b363      	cbz	r3, 800c652 <Vector88+0x72>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 800c5f8:	6925      	ldr	r5, [r4, #16]
 800c5fa:	b355      	cbz	r5, 800c652 <Vector88+0x72>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c5fc:	6813      	ldr	r3, [r2, #0]
 800c5fe:	f023 031f 	bic.w	r3, r3, #31
 800c602:	6013      	str	r3, [r2, #0]
 800c604:	6813      	ldr	r3, [r2, #0]
 800c606:	f013 0301 	ands.w	r3, r3, #1
 800c60a:	d1fb      	bne.n	800c604 <Vector88+0x24>
 800c60c:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800c60e:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c610:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 800c612:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c614:	4d4a      	ldr	r5, [pc, #296]	; (800c740 <Vector88+0x160>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c616:	213d      	movs	r1, #61	; 0x3d
 800c618:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800c61c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c61e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 800c620:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 800c622:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800c624:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800c626:	b146      	cbz	r6, 800c63a <Vector88+0x5a>
 800c628:	2305      	movs	r3, #5
 800c62a:	702b      	strb	r3, [r5, #0]
 800c62c:	4628      	mov	r0, r5
 800c62e:	47b0      	blx	r6
 800c630:	782b      	ldrb	r3, [r5, #0]
 800c632:	2b05      	cmp	r3, #5
 800c634:	bf04      	itt	eq
 800c636:	2302      	moveq	r3, #2
 800c638:	702b      	strbeq	r3, [r5, #0]
 800c63a:	2500      	movs	r5, #0
 800c63c:	6125      	str	r5, [r4, #16]
 800c63e:	2320      	movs	r3, #32
 800c640:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800c644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c648:	483e      	ldr	r0, [pc, #248]	; (800c744 <Vector88+0x164>)
 800c64a:	f7fe fbd1 	bl	800adf0 <chThdResumeI>
 800c64e:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
 800c652:	4b3d      	ldr	r3, [pc, #244]	; (800c748 <Vector88+0x168>)
 800c654:	681a      	ldr	r2, [r3, #0]
  ADC2->SR = 0;
 800c656:	2100      	movs	r1, #0
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 800c658:	0692      	lsls	r2, r2, #26
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
  ADC2->SR = 0;
 800c65a:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 800c65c:	d531      	bpl.n	800c6c2 <Vector88+0xe2>
 800c65e:	4c3b      	ldr	r4, [pc, #236]	; (800c74c <Vector88+0x16c>)
 800c660:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c662:	680a      	ldr	r2, [r1, #0]
 800c664:	6853      	ldr	r3, [r2, #4]
 800c666:	b363      	cbz	r3, 800c6c2 <Vector88+0xe2>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
 800c668:	6925      	ldr	r5, [r4, #16]
 800c66a:	b355      	cbz	r5, 800c6c2 <Vector88+0xe2>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c66c:	6813      	ldr	r3, [r2, #0]
 800c66e:	f023 031f 	bic.w	r3, r3, #31
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	6813      	ldr	r3, [r2, #0]
 800c676:	f013 0301 	ands.w	r3, r3, #1
 800c67a:	d1fb      	bne.n	800c674 <Vector88+0x94>
 800c67c:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
      _adc_isr_error_code(&ADCD2, ADC_ERR_OVERFLOW);
 800c67e:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c680:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 800c682:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c684:	4d31      	ldr	r5, [pc, #196]	; (800c74c <Vector88+0x16c>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c686:	213d      	movs	r1, #61	; 0x3d
 800c688:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800c68c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c68e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 800c690:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 800c692:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800c694:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
      _adc_isr_error_code(&ADCD2, ADC_ERR_OVERFLOW);
 800c696:	b146      	cbz	r6, 800c6aa <Vector88+0xca>
 800c698:	2305      	movs	r3, #5
 800c69a:	702b      	strb	r3, [r5, #0]
 800c69c:	4628      	mov	r0, r5
 800c69e:	47b0      	blx	r6
 800c6a0:	782b      	ldrb	r3, [r5, #0]
 800c6a2:	2b05      	cmp	r3, #5
 800c6a4:	bf04      	itt	eq
 800c6a6:	2302      	moveq	r3, #2
 800c6a8:	702b      	strbeq	r3, [r5, #0]
 800c6aa:	2500      	movs	r5, #0
 800c6ac:	6125      	str	r5, [r4, #16]
 800c6ae:	2320      	movs	r3, #32
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c6b8:	4825      	ldr	r0, [pc, #148]	; (800c750 <Vector88+0x170>)
 800c6ba:	f7fe fb99 	bl	800adf0 <chThdResumeI>
 800c6be:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  sr = ADC3->SR;
 800c6c2:	4b24      	ldr	r3, [pc, #144]	; (800c754 <Vector88+0x174>)
 800c6c4:	681a      	ldr	r2, [r3, #0]
  ADC3->SR = 0;
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
 800c6ca:	0693      	lsls	r3, r2, #26
 800c6cc:	d531      	bpl.n	800c732 <Vector88+0x152>
 800c6ce:	4c22      	ldr	r4, [pc, #136]	; (800c758 <Vector88+0x178>)
 800c6d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c6d2:	680a      	ldr	r2, [r1, #0]
 800c6d4:	6853      	ldr	r3, [r2, #4]
 800c6d6:	b363      	cbz	r3, 800c732 <Vector88+0x152>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
 800c6d8:	6925      	ldr	r5, [r4, #16]
 800c6da:	b355      	cbz	r5, 800c732 <Vector88+0x152>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c6dc:	6813      	ldr	r3, [r2, #0]
 800c6de:	f023 031f 	bic.w	r3, r3, #31
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	6813      	ldr	r3, [r2, #0]
 800c6e6:	f013 0301 	ands.w	r3, r3, #1
 800c6ea:	d1fb      	bne.n	800c6e4 <Vector88+0x104>
 800c6ec:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
 800c6ee:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c6f0:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 800c6f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c6f4:	4d18      	ldr	r5, [pc, #96]	; (800c758 <Vector88+0x178>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c6f6:	213d      	movs	r1, #61	; 0x3d
 800c6f8:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800c6fc:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800c6fe:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 800c700:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 800c702:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800c704:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
 800c706:	b146      	cbz	r6, 800c71a <Vector88+0x13a>
 800c708:	2305      	movs	r3, #5
 800c70a:	702b      	strb	r3, [r5, #0]
 800c70c:	4628      	mov	r0, r5
 800c70e:	47b0      	blx	r6
 800c710:	782b      	ldrb	r3, [r5, #0]
 800c712:	2b05      	cmp	r3, #5
 800c714:	bf04      	itt	eq
 800c716:	2302      	moveq	r3, #2
 800c718:	702b      	strbeq	r3, [r5, #0]
 800c71a:	2500      	movs	r5, #0
 800c71c:	6125      	str	r5, [r4, #16]
 800c71e:	2320      	movs	r3, #32
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c728:	480c      	ldr	r0, [pc, #48]	; (800c75c <Vector88+0x17c>)
 800c72a:	f7fe fb61 	bl	800adf0 <chThdResumeI>
 800c72e:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
}
 800c732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 800c736:	f7fe bc8b 	b.w	800b050 <_port_irq_epilogue>
 800c73a:	bf00      	nop
 800c73c:	40012000 	.word	0x40012000
 800c740:	20001394 	.word	0x20001394
 800c744:	200013a8 	.word	0x200013a8
 800c748:	40012100 	.word	0x40012100
 800c74c:	200013c8 	.word	0x200013c8
 800c750:	200013dc 	.word	0x200013dc
 800c754:	40012200 	.word	0x40012200
 800c758:	200013fc 	.word	0x200013fc
 800c75c:	20001410 	.word	0x20001410

0800c760 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 800c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 800c762:	4f12      	ldr	r7, [pc, #72]	; (800c7ac <adc_lld_init+0x4c>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 800c764:	4e12      	ldr	r6, [pc, #72]	; (800c7b0 <adc_lld_init+0x50>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 800c766:	4d13      	ldr	r5, [pc, #76]	; (800c7b4 <adc_lld_init+0x54>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 800c768:	4c13      	ldr	r4, [pc, #76]	; (800c7b8 <adc_lld_init+0x58>)
 */
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 800c76a:	4638      	mov	r0, r7
 800c76c:	f7fe ff40 	bl	800b5f0 <adcObjectInit>
  ADCD1.adc = ADC1;
 800c770:	4a12      	ldr	r2, [pc, #72]	; (800c7bc <adc_lld_init+0x5c>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 800c772:	4b13      	ldr	r3, [pc, #76]	; (800c7c0 <adc_lld_init+0x60>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 800c774:	62ba      	str	r2, [r7, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 800c776:	4630      	mov	r0, r6
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 800c778:	633b      	str	r3, [r7, #48]	; 0x30

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 800c77a:	62fc      	str	r4, [r7, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 800c77c:	f7fe ff38 	bl	800b5f0 <adcObjectInit>
  ADCD2.adc = ADC2;
 800c780:	4a10      	ldr	r2, [pc, #64]	; (800c7c4 <adc_lld_init+0x64>)
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 800c782:	4b11      	ldr	r3, [pc, #68]	; (800c7c8 <adc_lld_init+0x68>)
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
 800c784:	62b2      	str	r2, [r6, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 800c786:	4628      	mov	r0, r5

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 800c788:	f1a4 0218 	sub.w	r2, r4, #24
 800c78c:	62f2      	str	r2, [r6, #44]	; 0x2c
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 800c78e:	6333      	str	r3, [r6, #48]	; 0x30

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 800c790:	3c24      	subs	r4, #36	; 0x24
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 800c792:	f7fe ff2d 	bl	800b5f0 <adcObjectInit>
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 800c796:	4b0d      	ldr	r3, [pc, #52]	; (800c7cc <adc_lld_init+0x6c>)
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 800c798:	4a0d      	ldr	r2, [pc, #52]	; (800c7d0 <adc_lld_init+0x70>)
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 800c79a:	62ec      	str	r4, [r5, #44]	; 0x2c
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 800c79c:	62aa      	str	r2, [r5, #40]	; 0x28
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 800c79e:	632b      	str	r3, [r5, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 800c7a0:	2106      	movs	r1, #6
 800c7a2:	2012      	movs	r0, #18
}
 800c7a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 800c7a8:	f7ff bc82 	b.w	800c0b0 <nvicEnableVector>
 800c7ac:	20001394 	.word	0x20001394
 800c7b0:	200013c8 	.word	0x200013c8
 800c7b4:	200013fc 	.word	0x200013fc
 800c7b8:	08015b50 	.word	0x08015b50
 800c7bc:	40012000 	.word	0x40012000
 800c7c0:	00022c16 	.word	0x00022c16
 800c7c4:	40012100 	.word	0x40012100
 800c7c8:	02022c16 	.word	0x02022c16
 800c7cc:	04022c16 	.word	0x04022c16
 800c7d0:	40012200 	.word	0x40012200
	...

0800c7e0 <ext_lld_init>:
 * @notapi
 */
void ext_lld_init(void) {

  /* Driver initialization.*/
  extObjectInit(&EXTD1);
 800c7e0:	4801      	ldr	r0, [pc, #4]	; (800c7e8 <ext_lld_init+0x8>)
 800c7e2:	f7fe bf1d 	b.w	800b620 <extObjectInit>
 800c7e6:	bf00      	nop
 800c7e8:	20001430 	.word	0x20001430
 800c7ec:	00000000 	.word	0x00000000

0800c7f0 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c7f0:	4a08      	ldr	r2, [pc, #32]	; (800c814 <Vector58+0x24>)
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 800c7f2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c7f4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 800c7f6:	6813      	ldr	r3, [r2, #0]
 800c7f8:	400b      	ands	r3, r1
 800c7fa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 800c7fe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
 800c800:	b123      	cbz	r3, 800c80c <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
 800c802:	4805      	ldr	r0, [pc, #20]	; (800c818 <Vector58+0x28>)
 800c804:	6843      	ldr	r3, [r0, #4]
 800c806:	2100      	movs	r1, #0
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c80c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 0);
  EXTI->PR = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[0].cb(&EXTD1, 0);

  OSAL_IRQ_EPILOGUE();
 800c810:	f7fe bc1e 	b.w	800b050 <_port_irq_epilogue>
 800c814:	40013c00 	.word	0x40013c00
 800c818:	20001430 	.word	0x20001430
 800c81c:	00000000 	.word	0x00000000

0800c820 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c820:	4a08      	ldr	r2, [pc, #32]	; (800c844 <Vector5C+0x24>)
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 800c822:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c824:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 800c826:	6813      	ldr	r3, [r2, #0]
 800c828:	400b      	ands	r3, r1
 800c82a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800c82e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
 800c830:	b123      	cbz	r3, 800c83c <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
 800c832:	4805      	ldr	r0, [pc, #20]	; (800c848 <Vector5C+0x28>)
 800c834:	6843      	ldr	r3, [r0, #4]
 800c836:	2101      	movs	r1, #1
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c83c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 1);
  EXTI->PR = pr;
  if (pr & (1U << 1))
    EXTD1.config->channels[1].cb(&EXTD1, 1);

  OSAL_IRQ_EPILOGUE();
 800c840:	f7fe bc06 	b.w	800b050 <_port_irq_epilogue>
 800c844:	40013c00 	.word	0x40013c00
 800c848:	20001430 	.word	0x20001430
 800c84c:	00000000 	.word	0x00000000

0800c850 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c850:	4a08      	ldr	r2, [pc, #32]	; (800c874 <Vector60+0x24>)
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 800c852:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c854:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 800c856:	6813      	ldr	r3, [r2, #0]
 800c858:	400b      	ands	r3, r1
 800c85a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 800c85e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
 800c860:	b123      	cbz	r3, 800c86c <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
 800c862:	4805      	ldr	r0, [pc, #20]	; (800c878 <Vector60+0x28>)
 800c864:	6843      	ldr	r3, [r0, #4]
 800c866:	2102      	movs	r1, #2
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c86c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 2);
  EXTI->PR = pr;
  if (pr & (1U << 2))
    EXTD1.config->channels[2].cb(&EXTD1, 2);

  OSAL_IRQ_EPILOGUE();
 800c870:	f7fe bbee 	b.w	800b050 <_port_irq_epilogue>
 800c874:	40013c00 	.word	0x40013c00
 800c878:	20001430 	.word	0x20001430
 800c87c:	00000000 	.word	0x00000000

0800c880 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c880:	4a08      	ldr	r2, [pc, #32]	; (800c8a4 <Vector64+0x24>)
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 800c882:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c884:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 800c886:	6813      	ldr	r3, [r2, #0]
 800c888:	400b      	ands	r3, r1
 800c88a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 800c88e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
 800c890:	b123      	cbz	r3, 800c89c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
 800c892:	4805      	ldr	r0, [pc, #20]	; (800c8a8 <Vector64+0x28>)
 800c894:	6843      	ldr	r3, [r0, #4]
 800c896:	2103      	movs	r1, #3
 800c898:	69db      	ldr	r3, [r3, #28]
 800c89a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c89c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 3);
  EXTI->PR = pr;
  if (pr & (1U << 3))
    EXTD1.config->channels[3].cb(&EXTD1, 3);

  OSAL_IRQ_EPILOGUE();
 800c8a0:	f7fe bbd6 	b.w	800b050 <_port_irq_epilogue>
 800c8a4:	40013c00 	.word	0x40013c00
 800c8a8:	20001430 	.word	0x20001430
 800c8ac:	00000000 	.word	0x00000000

0800c8b0 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c8b0:	4a08      	ldr	r2, [pc, #32]	; (800c8d4 <Vector68+0x24>)
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 800c8b2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c8b4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 800c8b6:	6813      	ldr	r3, [r2, #0]
 800c8b8:	400b      	ands	r3, r1
 800c8ba:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 800c8be:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
 800c8c0:	b123      	cbz	r3, 800c8cc <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
 800c8c2:	4805      	ldr	r0, [pc, #20]	; (800c8d8 <Vector68+0x28>)
 800c8c4:	6843      	ldr	r3, [r0, #4]
 800c8c6:	2104      	movs	r1, #4
 800c8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ca:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c8cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 4);
  EXTI->PR = pr;
  if (pr & (1U << 4))
    EXTD1.config->channels[4].cb(&EXTD1, 4);

  OSAL_IRQ_EPILOGUE();
 800c8d0:	f7fe bbbe 	b.w	800b050 <_port_irq_epilogue>
 800c8d4:	40013c00 	.word	0x40013c00
 800c8d8:	20001430 	.word	0x20001430
 800c8dc:	00000000 	.word	0x00000000

0800c8e0 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c8e0:	4b19      	ldr	r3, [pc, #100]	; (800c948 <Vector9C+0x68>)
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 800c8e2:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c8e4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	4014      	ands	r4, r2
 800c8ea:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 800c8ee:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
 800c8f0:	06a3      	lsls	r3, r4, #26
 800c8f2:	d422      	bmi.n	800c93a <Vector9C+0x5a>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
 800c8f4:	0660      	lsls	r0, r4, #25
 800c8f6:	d41a      	bmi.n	800c92e <Vector9C+0x4e>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
 800c8f8:	0621      	lsls	r1, r4, #24
 800c8fa:	d412      	bmi.n	800c922 <Vector9C+0x42>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
 800c8fc:	05e2      	lsls	r2, r4, #23
 800c8fe:	d40a      	bmi.n	800c916 <Vector9C+0x36>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
 800c900:	05a3      	lsls	r3, r4, #22
 800c902:	d504      	bpl.n	800c90e <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
 800c904:	4811      	ldr	r0, [pc, #68]	; (800c94c <Vector9C+0x6c>)
 800c906:	6843      	ldr	r3, [r0, #4]
 800c908:	2109      	movs	r1, #9
 800c90a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c90c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
    EXTD1.config->channels[9].cb(&EXTD1, 9);

  OSAL_IRQ_EPILOGUE();
 800c912:	f7fe bb9d 	b.w	800b050 <_port_irq_epilogue>
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
 800c916:	480d      	ldr	r0, [pc, #52]	; (800c94c <Vector9C+0x6c>)
 800c918:	6843      	ldr	r3, [r0, #4]
 800c91a:	2108      	movs	r1, #8
 800c91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c91e:	4798      	blx	r3
 800c920:	e7ee      	b.n	800c900 <Vector9C+0x20>
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
 800c922:	480a      	ldr	r0, [pc, #40]	; (800c94c <Vector9C+0x6c>)
 800c924:	6843      	ldr	r3, [r0, #4]
 800c926:	2107      	movs	r1, #7
 800c928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92a:	4798      	blx	r3
 800c92c:	e7e6      	b.n	800c8fc <Vector9C+0x1c>
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
 800c92e:	4807      	ldr	r0, [pc, #28]	; (800c94c <Vector9C+0x6c>)
 800c930:	6843      	ldr	r3, [r0, #4]
 800c932:	2106      	movs	r1, #6
 800c934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c936:	4798      	blx	r3
 800c938:	e7de      	b.n	800c8f8 <Vector9C+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
 800c93a:	4804      	ldr	r0, [pc, #16]	; (800c94c <Vector9C+0x6c>)
 800c93c:	6843      	ldr	r3, [r0, #4]
 800c93e:	2105      	movs	r1, #5
 800c940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c942:	4798      	blx	r3
 800c944:	e7d6      	b.n	800c8f4 <Vector9C+0x14>
 800c946:	bf00      	nop
 800c948:	40013c00 	.word	0x40013c00
 800c94c:	20001430 	.word	0x20001430

0800c950 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c950:	4b1d      	ldr	r3, [pc, #116]	; (800c9c8 <VectorE0+0x78>)
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 800c952:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c954:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	4014      	ands	r4, r2
 800c95a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800c95e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
 800c960:	0562      	lsls	r2, r4, #21
 800c962:	d42a      	bmi.n	800c9ba <VectorE0+0x6a>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
 800c964:	0523      	lsls	r3, r4, #20
 800c966:	d422      	bmi.n	800c9ae <VectorE0+0x5e>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
 800c968:	04e0      	lsls	r0, r4, #19
 800c96a:	d41a      	bmi.n	800c9a2 <VectorE0+0x52>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
 800c96c:	04a1      	lsls	r1, r4, #18
 800c96e:	d412      	bmi.n	800c996 <VectorE0+0x46>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
 800c970:	0462      	lsls	r2, r4, #17
 800c972:	d40a      	bmi.n	800c98a <VectorE0+0x3a>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
 800c974:	0423      	lsls	r3, r4, #16
 800c976:	d504      	bpl.n	800c982 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
 800c978:	4814      	ldr	r0, [pc, #80]	; (800c9cc <VectorE0+0x7c>)
 800c97a:	6843      	ldr	r3, [r0, #4]
 800c97c:	210f      	movs	r1, #15
 800c97e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c980:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
    EXTD1.config->channels[15].cb(&EXTD1, 15);

  OSAL_IRQ_EPILOGUE();
 800c986:	f7fe bb63 	b.w	800b050 <_port_irq_epilogue>
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
 800c98a:	4810      	ldr	r0, [pc, #64]	; (800c9cc <VectorE0+0x7c>)
 800c98c:	6843      	ldr	r3, [r0, #4]
 800c98e:	210e      	movs	r1, #14
 800c990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c992:	4798      	blx	r3
 800c994:	e7ee      	b.n	800c974 <VectorE0+0x24>
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
 800c996:	480d      	ldr	r0, [pc, #52]	; (800c9cc <VectorE0+0x7c>)
 800c998:	6843      	ldr	r3, [r0, #4]
 800c99a:	210d      	movs	r1, #13
 800c99c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c99e:	4798      	blx	r3
 800c9a0:	e7e6      	b.n	800c970 <VectorE0+0x20>
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
 800c9a2:	480a      	ldr	r0, [pc, #40]	; (800c9cc <VectorE0+0x7c>)
 800c9a4:	6843      	ldr	r3, [r0, #4]
 800c9a6:	210c      	movs	r1, #12
 800c9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9aa:	4798      	blx	r3
 800c9ac:	e7de      	b.n	800c96c <VectorE0+0x1c>
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
 800c9ae:	4807      	ldr	r0, [pc, #28]	; (800c9cc <VectorE0+0x7c>)
 800c9b0:	6843      	ldr	r3, [r0, #4]
 800c9b2:	210b      	movs	r1, #11
 800c9b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9b6:	4798      	blx	r3
 800c9b8:	e7d6      	b.n	800c968 <VectorE0+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
 800c9ba:	4804      	ldr	r0, [pc, #16]	; (800c9cc <VectorE0+0x7c>)
 800c9bc:	6843      	ldr	r3, [r0, #4]
 800c9be:	210a      	movs	r1, #10
 800c9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9c2:	4798      	blx	r3
 800c9c4:	e7ce      	b.n	800c964 <VectorE0+0x14>
 800c9c6:	bf00      	nop
 800c9c8:	40013c00 	.word	0x40013c00
 800c9cc:	20001430 	.word	0x20001430

0800c9d0 <Vector44>:
OSAL_IRQ_HANDLER(Vector44) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c9d0:	4a08      	ldr	r2, [pc, #32]	; (800c9f4 <Vector44+0x24>)
/**
 * @brief   EXTI[16] interrupt handler (PVD).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector44) {
 800c9d2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800c9d4:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 16);
 800c9d6:	6813      	ldr	r3, [r2, #0]
 800c9d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
 800c9dc:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
 800c9de:	b12b      	cbz	r3, 800c9ec <Vector44+0x1c>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
 800c9e0:	4805      	ldr	r0, [pc, #20]	; (800c9f8 <Vector44+0x28>)
 800c9e2:	6843      	ldr	r3, [r0, #4]
 800c9e4:	2110      	movs	r1, #16
 800c9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ea:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800c9ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 16);
  EXTI->PR = pr;
  if (pr & (1U << 16))
    EXTD1.config->channels[16].cb(&EXTD1, 16);

  OSAL_IRQ_EPILOGUE();
 800c9f0:	f7fe bb2e 	b.w	800b050 <_port_irq_epilogue>
 800c9f4:	40013c00 	.word	0x40013c00
 800c9f8:	20001430 	.word	0x20001430
 800c9fc:	00000000 	.word	0x00000000

0800ca00 <VectorE4>:
OSAL_IRQ_HANDLER(VectorE4) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca00:	4a08      	ldr	r2, [pc, #32]	; (800ca24 <VectorE4+0x24>)
/**
 * @brief   EXTI[17] interrupt handler (RTC_ALARM).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE4) {
 800ca02:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca04:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 17);
 800ca06:	6813      	ldr	r3, [r2, #0]
 800ca08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
 800ca0c:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
 800ca0e:	b12b      	cbz	r3, 800ca1c <VectorE4+0x1c>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
 800ca10:	4805      	ldr	r0, [pc, #20]	; (800ca28 <VectorE4+0x28>)
 800ca12:	6843      	ldr	r3, [r0, #4]
 800ca14:	2111      	movs	r1, #17
 800ca16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca1a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800ca1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 17);
  EXTI->PR = pr;
  if (pr & (1U << 17))
    EXTD1.config->channels[17].cb(&EXTD1, 17);

  OSAL_IRQ_EPILOGUE();
 800ca20:	f7fe bb16 	b.w	800b050 <_port_irq_epilogue>
 800ca24:	40013c00 	.word	0x40013c00
 800ca28:	20001430 	.word	0x20001430
 800ca2c:	00000000 	.word	0x00000000

0800ca30 <VectorE8>:
OSAL_IRQ_HANDLER(VectorE8) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca30:	4a09      	ldr	r2, [pc, #36]	; (800ca58 <VectorE8+0x28>)
/**
 * @brief   EXTI[18] interrupt handler (OTG_FS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE8) {
 800ca32:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca34:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
 800ca36:	6813      	ldr	r3, [r2, #0]
 800ca38:	400b      	ands	r3, r1
 800ca3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
 800ca3e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
 800ca40:	b12b      	cbz	r3, 800ca4e <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
 800ca42:	4806      	ldr	r0, [pc, #24]	; (800ca5c <VectorE8+0x2c>)
 800ca44:	6843      	ldr	r3, [r0, #4]
 800ca46:	2112      	movs	r1, #18
 800ca48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca4c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800ca4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 18);
  EXTI->PR = pr;
  if (pr & (1U << 18))
    EXTD1.config->channels[18].cb(&EXTD1, 18);

  OSAL_IRQ_EPILOGUE();
 800ca52:	f7fe bafd 	b.w	800b050 <_port_irq_epilogue>
 800ca56:	bf00      	nop
 800ca58:	40013c00 	.word	0x40013c00
 800ca5c:	20001430 	.word	0x20001430

0800ca60 <Vector170>:
OSAL_IRQ_HANDLER(Vector170) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca60:	4a09      	ldr	r2, [pc, #36]	; (800ca88 <Vector170+0x28>)
/**
 * @brief   EXTI[20] interrupt handler (OTG_HS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector170) {
 800ca62:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca64:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
 800ca66:	6813      	ldr	r3, [r2, #0]
 800ca68:	400b      	ands	r3, r1
 800ca6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
 800ca6e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
 800ca70:	b12b      	cbz	r3, 800ca7e <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
 800ca72:	4806      	ldr	r0, [pc, #24]	; (800ca8c <Vector170+0x2c>)
 800ca74:	6843      	ldr	r3, [r0, #4]
 800ca76:	2114      	movs	r1, #20
 800ca78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca7c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800ca7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 20);
  EXTI->PR = pr;
  if (pr & (1U << 20))
    EXTD1.config->channels[20].cb(&EXTD1, 20);

  OSAL_IRQ_EPILOGUE();
 800ca82:	f7fe bae5 	b.w	800b050 <_port_irq_epilogue>
 800ca86:	bf00      	nop
 800ca88:	40013c00 	.word	0x40013c00
 800ca8c:	20001430 	.word	0x20001430

0800ca90 <Vector48>:
OSAL_IRQ_HANDLER(Vector48) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca90:	4a09      	ldr	r2, [pc, #36]	; (800cab8 <Vector48+0x28>)
/**
 * @brief   EXTI[21] interrupt handler (TAMPER_STAMP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector48) {
 800ca92:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800ca94:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
 800ca96:	6813      	ldr	r3, [r2, #0]
 800ca98:	400b      	ands	r3, r1
 800ca9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
 800ca9e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
 800caa0:	b12b      	cbz	r3, 800caae <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
 800caa2:	4806      	ldr	r0, [pc, #24]	; (800cabc <Vector48+0x2c>)
 800caa4:	6843      	ldr	r3, [r0, #4]
 800caa6:	2115      	movs	r1, #21
 800caa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800caac:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800caae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 21);
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);

  OSAL_IRQ_EPILOGUE();
 800cab2:	f7fe bacd 	b.w	800b050 <_port_irq_epilogue>
 800cab6:	bf00      	nop
 800cab8:	40013c00 	.word	0x40013c00
 800cabc:	20001430 	.word	0x20001430

0800cac0 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800cac0:	4a09      	ldr	r2, [pc, #36]	; (800cae8 <Vector4C+0x28>)
/**
 * @brief   EXTI[22] interrupt handler (RTC_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector4C) {
 800cac2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 800cac4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
 800cac6:	6813      	ldr	r3, [r2, #0]
 800cac8:	400b      	ands	r3, r1
 800caca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
 800cace:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
 800cad0:	b12b      	cbz	r3, 800cade <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
 800cad2:	4806      	ldr	r0, [pc, #24]	; (800caec <Vector4C+0x2c>)
 800cad4:	6843      	ldr	r3, [r0, #4]
 800cad6:	2116      	movs	r1, #22
 800cad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cadc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800cade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 22);
  EXTI->PR = pr;
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);

  OSAL_IRQ_EPILOGUE();
 800cae2:	f7fe bab5 	b.w	800b050 <_port_irq_epilogue>
 800cae6:	bf00      	nop
 800cae8:	40013c00 	.word	0x40013c00
 800caec:	20001430 	.word	0x20001430

0800caf0 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 800caf0:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800caf2:	4d65      	ldr	r5, [pc, #404]	; (800cc88 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800caf4:	4c65      	ldr	r4, [pc, #404]	; (800cc8c <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800caf6:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800caf8:	4965      	ldr	r1, [pc, #404]	; (800cc90 <_pal_lld_init+0x1a0>)
 800cafa:	4a66      	ldr	r2, [pc, #408]	; (800cc94 <_pal_lld_init+0x1a4>)
 800cafc:	4b66      	ldr	r3, [pc, #408]	; (800cc98 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800cafe:	f240 16ff 	movw	r6, #511	; 0x1ff
 800cb02:	4337      	orrs	r7, r6
 800cb04:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800cb06:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800cb08:	433e      	orrs	r6, r7
 800cb0a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cb0c:	6845      	ldr	r5, [r0, #4]
 800cb0e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800cb10:	6885      	ldr	r5, [r0, #8]
 800cb12:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800cb14:	68c5      	ldr	r5, [r0, #12]
 800cb16:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 800cb18:	6905      	ldr	r5, [r0, #16]
 800cb1a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800cb1c:	6945      	ldr	r5, [r0, #20]
 800cb1e:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800cb20:	6985      	ldr	r5, [r0, #24]
 800cb22:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800cb24:	6805      	ldr	r5, [r0, #0]
 800cb26:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cb28:	6a04      	ldr	r4, [r0, #32]
 800cb2a:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800cb2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cb2e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800cb30:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cb32:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800cb34:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800cb36:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800cb38:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800cb3a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800cb3c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800cb3e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800cb40:	69c4      	ldr	r4, [r0, #28]
 800cb42:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cb44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800cb46:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800cb48:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800cb4a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800cb4c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800cb4e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800cb50:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800cb52:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800cb54:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800cb56:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800cb58:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800cb5a:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800cb5c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800cb5e:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cb60:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cb62:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800cb64:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cb66:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800cb68:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800cb6a:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800cb6c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800cb6e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800cb70:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800cb72:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800cb74:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800cb76:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800cb78:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800cb7a:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cb7c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800cb7e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800cb82:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800cb84:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800cb88:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800cb8a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800cb8e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800cb92:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800cb96:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800cb9a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800cb9e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800cba2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800cba6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800cba8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cbac:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cbb0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800cbb4:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800cbb8:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800cbbc:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800cbc0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800cbc4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800cbc8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800cbcc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 800cbd0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800cbd4:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800cbd8:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800cbdc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800cbe0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cbe4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800cbe8:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800cbec:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800cbee:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800cbf2:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800cbf4:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800cbf8:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800cbfa:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800cbfe:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800cc00:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800cc04:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800cc06:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800cc0a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800cc0c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 800cc10:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cc12:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800cc16:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800cc1a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800cc1e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800cc22:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800cc26:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800cc2a:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800cc2e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800cc32:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800cc36:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800cc3a:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800cc3e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800cc42:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800cc46:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800cc4a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800cc4e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800cc52:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800cc56:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800cc5a:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800cc5e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800cc62:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800cc66:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800cc6a:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800cc6e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800cc72:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800cc76:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800cc7a:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800cc7e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOJ, &config->PJData);
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
#endif
}
 800cc82:	bcf0      	pop	{r4, r5, r6, r7}
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	40023800 	.word	0x40023800
 800cc8c:	40020000 	.word	0x40020000
 800cc90:	40020400 	.word	0x40020400
 800cc94:	40020800 	.word	0x40020800
 800cc98:	40020c00 	.word	0x40020c00
 800cc9c:	00000000 	.word	0x00000000

0800cca0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 800cca4:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800cca8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800ccac:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800ccb0:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800ccb4:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800ccb6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800ccba:	f04f 0b0f 	mov.w	fp, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800ccbe:	f04f 0a01 	mov.w	sl, #1
 800ccc2:	e00f      	b.n	800cce4 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800ccc4:	6a04      	ldr	r4, [r0, #32]
 800ccc6:	ea24 0303 	bic.w	r3, r4, r3
 800ccca:	431d      	orrs	r5, r3
 800cccc:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800ccce:	0849      	lsrs	r1, r1, #1
 800ccd0:	d039      	beq.n	800cd46 <_pal_lld_setgroupmode+0xa6>
      return;
    otyper <<= 1;
 800ccd2:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 800ccd6:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 800ccda:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 800ccde:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 800cce2:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 800cce4:	07cb      	lsls	r3, r1, #31
 800cce6:	d5f2      	bpl.n	800ccce <_pal_lld_setgroupmode+0x2e>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800cce8:	6843      	ldr	r3, [r0, #4]
 800ccea:	fa0a f407 	lsl.w	r4, sl, r7
 800ccee:	ea23 0304 	bic.w	r3, r3, r4
 800ccf2:	ea43 0309 	orr.w	r3, r3, r9
 800ccf6:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800ccf8:	2503      	movs	r5, #3
 800ccfa:	007c      	lsls	r4, r7, #1
 800ccfc:	6883      	ldr	r3, [r0, #8]
 800ccfe:	fa05 f404 	lsl.w	r4, r5, r4
 800cd02:	43e4      	mvns	r4, r4
 800cd04:	4023      	ands	r3, r4
 800cd06:	ea43 0308 	orr.w	r3, r3, r8
 800cd0a:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800cd0c:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800cd0e:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800cd12:	4025      	ands	r5, r4
 800cd14:	ea45 050c 	orr.w	r5, r5, ip
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800cd18:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800cd1a:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800cd1e:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800cd20:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800cd24:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800cd28:	d00f      	beq.n	800cd4a <_pal_lld_setgroupmode+0xaa>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800cd2a:	6806      	ldr	r6, [r0, #0]
 800cd2c:	4034      	ands	r4, r6
 800cd2e:	ea44 040e 	orr.w	r4, r4, lr
        if (bit < 8)
 800cd32:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800cd34:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 800cd36:	d9c5      	bls.n	800ccc4 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800cd38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cd3a:	ea24 0303 	bic.w	r3, r4, r3
 800cd3e:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 800cd40:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800cd42:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 800cd44:	d1c5      	bne.n	800ccd2 <_pal_lld_setgroupmode+0x32>
 800cd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 800cd4a:	2f07      	cmp	r7, #7
 800cd4c:	d80a      	bhi.n	800cd64 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800cd4e:	6a06      	ldr	r6, [r0, #32]
 800cd50:	ea26 0303 	bic.w	r3, r6, r3
 800cd54:	431d      	orrs	r5, r3
 800cd56:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 800cd58:	6803      	ldr	r3, [r0, #0]
 800cd5a:	401c      	ands	r4, r3
 800cd5c:	f044 0402 	orr.w	r4, r4, #2
 800cd60:	6004      	str	r4, [r0, #0]
 800cd62:	e7b4      	b.n	800ccce <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800cd64:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd66:	ea26 0303 	bic.w	r3, r6, r3
 800cd6a:	431d      	orrs	r5, r3
 800cd6c:	6245      	str	r5, [r0, #36]	; 0x24
 800cd6e:	e7f3      	b.n	800cd58 <_pal_lld_setgroupmode+0xb8>

0800cd70 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800cd70:	483a      	ldr	r0, [pc, #232]	; (800ce5c <VectorBC+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800cd72:	4a3b      	ldr	r2, [pc, #236]	; (800ce60 <VectorBC+0xf0>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 800cd74:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800cd76:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800cd78:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800cd7a:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800cd7c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800cd80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d04c      	beq.n	800ce22 <VectorBC+0xb2>
 800cd88:	d81e      	bhi.n	800cdc8 <VectorBC+0x58>
 800cd8a:	3a07      	subs	r2, #7
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d03c      	beq.n	800ce0a <VectorBC+0x9a>
 800cd90:	3201      	adds	r2, #1
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d110      	bne.n	800cdb8 <VectorBC+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800cd96:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800cd98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800cd9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800cd9e:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800cda0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	f042 0201 	orr.w	r2, r2, #1
 800cda8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800cdaa:	6862      	ldr	r2, [r4, #4]
 800cdac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdb0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d94b      	bls.n	800ce50 <VectorBC+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800cdb8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800cdbc:	bf18      	it	ne
 800cdbe:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 800cdc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 800cdc4:	f7fe b944 	b.w	800b050 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800cdc8:	4a26      	ldr	r2, [pc, #152]	; (800ce64 <VectorBC+0xf4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d012      	beq.n	800cdf4 <VectorBC+0x84>
 800cdce:	3202      	adds	r2, #2
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d1f1      	bne.n	800cdb8 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800cdd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685e      	ldr	r6, [r3, #4]
 800cdda:	b33e      	cbz	r6, 800ce2c <VectorBC+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800cddc:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800cdde:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800cde0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800cde4:	f042 0201 	orr.w	r2, r2, #1
 800cde8:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800cdea:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 800cdec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 800cdf0:	f7fe b92e 	b.w	800b050 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800cdf4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800cdf6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800cdf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800cdfc:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800cdfe:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ce00:	6813      	ldr	r3, [r2, #0]
 800ce02:	f043 0301 	orr.w	r3, r3, #1
 800ce06:	6013      	str	r3, [r2, #0]
 800ce08:	e7d6      	b.n	800cdb8 <VectorBC+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800ce0a:	8c03      	ldrh	r3, [r0, #32]
 800ce0c:	0a1a      	lsrs	r2, r3, #8
 800ce0e:	d00b      	beq.n	800ce28 <VectorBC+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800ce18:	f002 0206 	and.w	r2, r2, #6
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	6123      	str	r3, [r4, #16]
 800ce20:	e7ca      	b.n	800cdb8 <VectorBC+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800ce22:	8c03      	ldrh	r3, [r0, #32]
 800ce24:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800ce28:	6123      	str	r3, [r4, #16]
 800ce2a:	e7c5      	b.n	800cdb8 <VectorBC+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce32:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce3a:	6023      	str	r3, [r4, #0]
 800ce3c:	2320      	movs	r3, #32
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	301c      	adds	r0, #28
 800ce44:	4631      	mov	r1, r6
 800ce46:	f7fd ffd3 	bl	800adf0 <chThdResumeI>
 800ce4a:	f386 8811 	msr	BASEPRI, r6
 800ce4e:	e7b3      	b.n	800cdb8 <VectorBC+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce56:	6023      	str	r3, [r4, #0]
 800ce58:	e7ae      	b.n	800cdb8 <VectorBC+0x48>
 800ce5a:	bf00      	nop
 800ce5c:	20001438 	.word	0x20001438
 800ce60:	00030008 	.word	0x00030008
 800ce64:	00070082 	.word	0x00070082
	...

0800ce70 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800ce70:	4833      	ldr	r0, [pc, #204]	; (800cf40 <VectorC0+0xd0>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 800ce72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 800ce74:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ce76:	6b07      	ldr	r7, [r0, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800ce78:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ce7a:	683a      	ldr	r2, [r7, #0]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800ce7c:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800ce7e:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 800ce82:	43db      	mvns	r3, r3
 800ce84:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	f023 031f 	bic.w	r3, r3, #31
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	6813      	ldr	r3, [r2, #0]
 800ce90:	07db      	lsls	r3, r3, #31
 800ce92:	d4fc      	bmi.n	800ce8e <VectorC0+0x1e>
 800ce94:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800ce96:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ce98:	687f      	ldr	r7, [r7, #4]
 800ce9a:	233d      	movs	r3, #61	; 0x3d
 800ce9c:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800ce9e:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800cea0:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800cea2:	6813      	ldr	r3, [r2, #0]
 800cea4:	f023 031f 	bic.w	r3, r3, #31
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	6813      	ldr	r3, [r2, #0]
 800ceac:	f013 0301 	ands.w	r3, r3, #1
 800ceb0:	d1fb      	bne.n	800ceaa <VectorC0+0x3a>
 800ceb2:	7a2f      	ldrb	r7, [r5, #8]
 800ceb4:	686d      	ldr	r5, [r5, #4]
 800ceb6:	223d      	movs	r2, #61	; 0x3d
 800ceb8:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800ceba:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800cebc:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800cebe:	bf48      	it	mi
 800cec0:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800cec2:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800cec4:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800cec6:	bf44      	itt	mi
 800cec8:	f043 0302 	orrmi.w	r3, r3, #2
 800cecc:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800cece:	054a      	lsls	r2, r1, #21
 800ced0:	d50a      	bpl.n	800cee8 <VectorC0+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800ced2:	6862      	ldr	r2, [r4, #4]
 800ced4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ced8:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800ceda:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800cedc:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800cee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cee4:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800cee6:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800cee8:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800ceea:	bf44      	itt	mi
 800ceec:	f043 0308 	orrmi.w	r3, r3, #8
 800cef0:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800cef2:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800cef4:	bf44      	itt	mi
 800cef6:	f043 0320 	orrmi.w	r3, r3, #32
 800cefa:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800cefc:	04cc      	lsls	r4, r1, #19
 800cefe:	d513      	bpl.n	800cf28 <VectorC0+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 800cf00:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800cf04:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 800cf06:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800cf08:	d416      	bmi.n	800cf38 <VectorC0+0xc8>
 800cf0a:	2320      	movs	r3, #32
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f06f 0101 	mvn.w	r1, #1
 800cf14:	480b      	ldr	r0, [pc, #44]	; (800cf44 <VectorC0+0xd4>)
 800cf16:	f7fd ff6b 	bl	800adf0 <chThdResumeI>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 800cf20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 800cf24:	f7fe b894 	b.w	800b050 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800cf28:	0432      	lsls	r2, r6, #16
 800cf2a:	d405      	bmi.n	800cf38 <VectorC0+0xc8>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1ec      	bne.n	800cf0a <VectorC0+0x9a>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 800cf30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 800cf34:	f7fe b88c 	b.w	800b050 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800cf38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf3c:	6083      	str	r3, [r0, #8]
 800cf3e:	e7e4      	b.n	800cf0a <VectorC0+0x9a>
 800cf40:	20001438 	.word	0x20001438
 800cf44:	20001454 	.word	0x20001454
	...

0800cf50 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800cf50:	b510      	push	{r4, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 800cf52:	4c07      	ldr	r4, [pc, #28]	; (800cf70 <i2c_lld_init+0x20>)
 800cf54:	4620      	mov	r0, r4
 800cf56:	f7fe fb73 	bl	800b640 <i2cObjectInit>
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800cf5a:	4b06      	ldr	r3, [pc, #24]	; (800cf74 <i2c_lld_init+0x24>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 800cf5c:	4a06      	ldr	r2, [pc, #24]	; (800cf78 <i2c_lld_init+0x28>)
 800cf5e:	6362      	str	r2, [r4, #52]	; 0x34
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 800cf60:	2100      	movs	r1, #0
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800cf62:	f103 0248 	add.w	r2, r3, #72	; 0x48
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 800cf66:	61e1      	str	r1, [r4, #28]
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800cf68:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800cf6a:	6322      	str	r2, [r4, #48]	; 0x30
 800cf6c:	bd10      	pop	{r4, pc}
 800cf6e:	bf00      	nop
 800cf70:	20001438 	.word	0x20001438
 800cf74:	08015ac0 	.word	0x08015ac0
 800cf78:	40005400 	.word	0x40005400
 800cf7c:	00000000 	.word	0x00000000

0800cf80 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800cf84:	4b7c      	ldr	r3, [pc, #496]	; (800d178 <usb_lld_pump+0x1f8>)
 800cf86:	497d      	ldr	r1, [pc, #500]	; (800d17c <usb_lld_pump+0x1fc>)
 800cf88:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 800cf8a:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
 800cf8e:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 800cf90:	b083      	sub	sp, #12
 800cf92:	4683      	mov	fp, r0
 800cf94:	2320      	movs	r3, #32
 800cf96:	f383 8811 	msr	BASEPRI, r3
 800cf9a:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800cf9e:	9301      	str	r3, [sp, #4]
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 800cfa0:	f89b 3000 	ldrb.w	r3, [fp]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d006      	beq.n	800cfb6 <usb_lld_pump+0x36>
 800cfa8:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 800cfac:	b963      	cbnz	r3, 800cfc8 <usb_lld_pump+0x48>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 800cfae:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cfb2:	06de      	lsls	r6, r3, #27
 800cfb4:	d408      	bmi.n	800cfc8 <usb_lld_pump+0x48>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 800cfb6:	f8da 3018 	ldr.w	r3, [sl, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 800cfba:	9801      	ldr	r0, [sp, #4]
 800cfbc:	f043 0310 	orr.w	r3, r3, #16
 800cfc0:	f8ca 3018 	str.w	r3, [sl, #24]
 800cfc4:	f7fd ff04 	bl	800add0 <chThdSuspendS>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	469e      	mov	lr, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800cfd0:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cfd4:	f013 0310 	ands.w	r3, r3, #16
 800cfd8:	d050      	beq.n	800d07c <usb_lld_pump+0xfc>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 800cfda:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 800cfde:	6a1a      	ldr	r2, [r3, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800cfe0:	f402 11f0 	and.w	r1, r2, #1966080	; 0x1e0000
 800cfe4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800cfe8:	d01e      	beq.n	800d028 <usb_lld_pump+0xa8>
 800cfea:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800cfee:	d1ef      	bne.n	800cfd0 <usb_lld_pump+0x50>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800cff0:	f002 010f 	and.w	r1, r2, #15
 800cff4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
  sts = usbp->otg->GRXSTSP;
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800cff8:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800cffc:	68c9      	ldr	r1, [r1, #12]
 800cffe:	6a0c      	ldr	r4, [r1, #32]
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800d000:	2a00      	cmp	r2, #0
 800d002:	d0e5      	beq.n	800cfd0 <usb_lld_pump+0x50>
 800d004:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 800d006:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800d00a:	460b      	mov	r3, r1
 800d00c:	e001      	b.n	800d012 <usb_lld_pump+0x92>
 800d00e:	429a      	cmp	r2, r3
 800d010:	d0de      	beq.n	800cfd0 <usb_lld_pump+0x50>
    if ((i & 3) == 0){
 800d012:	079d      	lsls	r5, r3, #30
      w = *fifop;
 800d014:	bf08      	it	eq
 800d016:	6801      	ldreq	r1, [r0, #0]
    }
    if (i < max) {
 800d018:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 800d01a:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 800d01e:	d8f6      	bhi.n	800d00e <usb_lld_pump+0x8e>
      *buf++ = (uint8_t)w;
 800d020:	7021      	strb	r1, [r4, #0]
      w >>= 8;
 800d022:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 800d024:	3401      	adds	r4, #1
 800d026:	e7f2      	b.n	800d00e <usb_lld_pump+0x8e>
 800d028:	f002 060f 	and.w	r6, r2, #15
 800d02c:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800d030:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
 800d034:	68f1      	ldr	r1, [r6, #12]
 800d036:	6989      	ldr	r1, [r1, #24]
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
 800d038:	684c      	ldr	r4, [r1, #4]
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 800d03a:	680d      	ldr	r5, [r1, #0]
 800d03c:	6888      	ldr	r0, [r1, #8]
 800d03e:	1b2d      	subs	r5, r5, r4
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800d040:	b38a      	cbz	r2, 800d0a6 <usb_lld_pump+0x126>
 800d042:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 800d044:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800d048:	460b      	mov	r3, r1
    if ((i & 3) == 0){
 800d04a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 800d04c:	bf08      	it	eq
 800d04e:	6821      	ldreq	r1, [r4, #0]
    }
    if (i < max) {
 800d050:	429d      	cmp	r5, r3
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 800d052:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 800d056:	d902      	bls.n	800d05e <usb_lld_pump+0xde>
      *buf++ = (uint8_t)w;
 800d058:	7001      	strb	r1, [r0, #0]
      w >>= 8;
 800d05a:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 800d05c:	3001      	adds	r0, #1
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800d05e:	429a      	cmp	r2, r3
 800d060:	d1f3      	bne.n	800d04a <usb_lld_pump+0xca>
 800d062:	68f3      	ldr	r3, [r6, #12]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	6898      	ldr	r0, [r3, #8]
 800d068:	685c      	ldr	r4, [r3, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800d06a:	4410      	add	r0, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800d06c:	4422      	add	r2, r4
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800d06e:	6098      	str	r0, [r3, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800d070:	605a      	str	r2, [r3, #4]

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800d072:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d076:	f013 0310 	ands.w	r3, r3, #16
 800d07a:	d1ae      	bne.n	800cfda <usb_lld_pump+0x5a>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
      if (usbp->txpending & epmask) {
 800d07c:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800d080:	2101      	movs	r1, #1
 800d082:	fa01 f10e 	lsl.w	r1, r1, lr
      if (usbp->txpending & epmask) {
 800d086:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800d088:	9100      	str	r1, [sp, #0]
      if (usbp->txpending & epmask) {
 800d08a:	d10e      	bne.n	800d0aa <usb_lld_pump+0x12a>
 800d08c:	f10e 0e01 	add.w	lr, lr, #1
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800d090:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	fa5f fe8e 	uxtb.w	lr, lr
 800d09a:	459e      	cmp	lr, r3
 800d09c:	d998      	bls.n	800cfd0 <usb_lld_pump+0x50>
 800d09e:	2320      	movs	r3, #32
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	e77c      	b.n	800cfa0 <usb_lld_pump+0x20>
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	e7df      	b.n	800d06a <usb_lld_pump+0xea>
 800d0aa:	2220      	movs	r2, #32
 800d0ac:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800d0b0:	f8da 1008 	ldr.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 800d0b4:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 800d0b8:	9800      	ldr	r0, [sp, #0]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800d0ba:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 800d0be:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800d0c2:	f8ca 1008 	str.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 800d0c6:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 800d0ca:	f383 8811 	msr	BASEPRI, r3
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800d0ce:	eb0b 038e 	add.w	r3, fp, lr, lsl #2
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	695f      	ldr	r7, [r3, #20]
 800d0d6:	687d      	ldr	r5, [r7, #4]
 800d0d8:	f8d7 c000 	ldr.w	ip, [r7]
 800d0dc:	45ac      	cmp	ip, r5
 800d0de:	d947      	bls.n	800d170 <usb_lld_pump+0x1f0>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800d0e0:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 800d0e4:	f8b3 9010 	ldrh.w	r9, [r3, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800d0e8:	eb00 184e 	add.w	r8, r0, lr, lsl #5
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800d0ec:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800d0f0:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 800d0f4:	454c      	cmp	r4, r9
 800d0f6:	bf28      	it	cs
 800d0f8:	464c      	movcs	r4, r9
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800d100:	f10e 0e01 	add.w	lr, lr, #1
 800d104:	d81f      	bhi.n	800d146 <usb_lld_pump+0x1c6>
 800d106:	68be      	ldr	r6, [r7, #8]
 800d108:	eb00 300e 	add.w	r0, r0, lr, lsl #12
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800d10c:	6833      	ldr	r3, [r6, #0]
 800d10e:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 800d110:	2c04      	cmp	r4, #4
 800d112:	d907      	bls.n	800d124 <usb_lld_pump+0x1a4>
 800d114:	4623      	mov	r3, r4
 800d116:	4632      	mov	r2, r6
      break;
    }
    n -= 4;
 800d118:	3b04      	subs	r3, #4
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800d11a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800d11e:	6001      	str	r1, [r0, #0]
    if (n <= 4) {
 800d120:	2b04      	cmp	r3, #4
 800d122:	d8f9      	bhi.n	800d118 <usb_lld_pump+0x198>
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800d124:	4425      	add	r5, r4
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 800d126:	4426      	add	r6, r4
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800d128:	4565      	cmp	r5, ip
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 800d12a:	60be      	str	r6, [r7, #8]
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800d12c:	607d      	str	r5, [r7, #4]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800d12e:	d221      	bcs.n	800d174 <usb_lld_pump+0x1f4>
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800d130:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800d134:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 800d138:	454c      	cmp	r4, r9
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	bf28      	it	cs
 800d13e:	464c      	movcs	r4, r9
 800d140:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800d144:	d9e2      	bls.n	800d10c <usb_lld_pump+0x18c>
      return false;
 800d146:	2200      	movs	r2, #0
 800d148:	2320      	movs	r3, #32
 800d14a:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800d14e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d152:	f043 0301 	orr.w	r3, r3, #1
 800d156:	f8ca 3008 	str.w	r3, [sl, #8]
        if (!done)
 800d15a:	b92a      	cbnz	r2, 800d168 <usb_lld_pump+0x1e8>
          otgp->DIEPEMPMSK |= epmask;
 800d15c:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 800d160:	9a00      	ldr	r2, [sp, #0]
 800d162:	431a      	orrs	r2, r3
 800d164:	f8ca 2834 	str.w	r2, [sl, #2100]	; 0x834
 800d168:	2300      	movs	r3, #0
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	e78f      	b.n	800d090 <usb_lld_pump+0x110>
 800d170:	f10e 0e01 	add.w	lr, lr, #1
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;
 800d174:	2201      	movs	r2, #1
 800d176:	e7e7      	b.n	800d148 <usb_lld_pump+0x1c8>
 800d178:	20001090 	.word	0x20001090
 800d17c:	08015b90 	.word	0x08015b90

0800d180 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 800d180:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 800d182:	4c06      	ldr	r4, [pc, #24]	; (800d19c <usb_lld_init+0x1c>)
 800d184:	4620      	mov	r0, r4
 800d186:	f7fe fca3 	bl	800bad0 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800d18a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800d18e:	4a04      	ldr	r2, [pc, #16]	; (800d1a0 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800d190:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800d192:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 800d194:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800d196:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 800d198:	6663      	str	r3, [r4, #100]	; 0x64
 800d19a:	bd10      	pop	{r4, pc}
 800d19c:	20001470 	.word	0x20001470
 800d1a0:	08015b80 	.word	0x08015b80
	...

0800d1b0 <usb_lld_start>:
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 800d1b0:	7803      	ldrb	r3, [r0, #0]
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d000      	beq.n	800d1b8 <usb_lld_start+0x8>
 800d1b6:	4770      	bx	lr
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 800d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800d1ba:	4b3f      	ldr	r3, [pc, #252]	; (800d2b8 <usb_lld_start+0x108>)
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800d1bc:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800d1be:	4298      	cmp	r0, r3
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 800d1c0:	b083      	sub	sp, #12
 800d1c2:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
 800d1c4:	bf18      	it	ne
 800d1c6:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800d1c8:	d050      	beq.n	800d26c <usb_lld_start+0xbc>
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 800d1ca:	2300      	movs	r3, #0

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800d1cc:	21c0      	movs	r1, #192	; 0xc0
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 800d1ce:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 800d1d2:	65eb      	str	r3, [r5, #92]	; 0x5c
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 800d1d4:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 800d1d6:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800d1da:	6031      	str	r1, [r6, #0]
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 800d1dc:	63b2      	str	r2, [r6, #56]	; 0x38
 800d1de:	f7fd fb8f 	bl	800a900 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 800d1e6:	6923      	ldr	r3, [r4, #16]
 800d1e8:	07db      	lsls	r3, r3, #31
 800d1ea:	d4fc      	bmi.n	800d1e6 <usb_lld_start+0x36>
 800d1ec:	2012      	movs	r0, #18
 800d1ee:	f7fd fb87 	bl	800a900 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(18);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 800d1f2:	6923      	ldr	r3, [r4, #16]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dafc      	bge.n	800d1f2 <usb_lld_start+0x42>

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d1f8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800d1fa:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800d1fc:	f8d3 e008 	ldr.w	lr, [r3, #8]

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 800d200:	2300      	movs	r3, #0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d202:	461a      	mov	r2, r3

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 800d204:	60b3      	str	r3, [r6, #8]
static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    otgp->ie[i].DIEPCTL = 0;
 800d206:	4619      	mov	r1, r3
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800d208:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d20c:	eb07 1342 	add.w	r3, r7, r2, lsl #5

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d210:	3201      	adds	r2, #1
 800d212:	4572      	cmp	r2, lr
    otgp->ie[i].DIEPCTL = 0;
 800d214:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
 800d218:	f04f 0000 	mov.w	r0, #0
    otgp->ie[i].DIEPTSIZ = 0;
 800d21c:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800d220:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

    otgp->oe[i].DOEPCTL = 0;
 800d224:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800d228:	f8c3 1b10 	str.w	r1, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800d22c:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d230:	d9ec      	bls.n	800d20c <usb_lld_start+0x5c>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 800d232:	686b      	ldr	r3, [r5, #4]
 800d234:	68db      	ldr	r3, [r3, #12]

    otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800d236:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d23a:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 800d23e:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 800d242:	f8c6 0814 	str.w	r0, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 800d246:	f8c6 081c 	str.w	r0, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800d24a:	b163      	cbz	r3, 800d266 <usb_lld_start+0xb6>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 800d24c:	4b1b      	ldr	r3, [pc, #108]	; (800d2bc <usb_lld_start+0x10c>)
 800d24e:	61b3      	str	r3, [r6, #24]
    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800d250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM |
                       GINTMSK_SOFM;

    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;
 800d252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d256:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800d258:	b1f3      	cbz	r3, 800d298 <usb_lld_start+0xe8>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800d25a:	68b3      	ldr	r3, [r6, #8]
 800d25c:	f043 0301 	orr.w	r3, r3, #1
 800d260:	60b3      	str	r3, [r6, #8]
  }
}
 800d262:	b003      	add	sp, #12
 800d264:	bdf0      	pop	{r4, r5, r6, r7, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 800d266:	4b16      	ldr	r3, [pc, #88]	; (800d2c0 <usb_lld_start+0x110>)
 800d268:	61b3      	str	r3, [r6, #24]
 800d26a:	e7f1      	b.n	800d250 <usb_lld_start+0xa0>
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
 800d26c:	4b15      	ldr	r3, [pc, #84]	; (800d2c4 <usb_lld_start+0x114>)
 800d26e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d274:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 800d276:	695a      	ldr	r2, [r3, #20]
 800d278:	2000      	movs	r0, #0
 800d27a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d27e:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800d280:	210e      	movs	r1, #14

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
      rccResetOTG_FS();
 800d282:	6158      	str	r0, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800d284:	2043      	movs	r0, #67	; 0x43
 800d286:	f7fe ff13 	bl	800c0b0 <nvicEnableVector>

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800d28a:	4a0f      	ldr	r2, [pc, #60]	; (800d2c8 <usb_lld_start+0x118>)
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800d28c:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <usb_lld_start+0x11c>)
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800d28e:	60f2      	str	r2, [r6, #12]
 800d290:	6d2c      	ldr	r4, [r5, #80]	; 0x50
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800d292:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
 800d296:	e798      	b.n	800d1ca <usb_lld_start+0x1a>
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 800d298:	4b0d      	ldr	r3, [pc, #52]	; (800d2d0 <usb_lld_start+0x120>)
 800d29a:	9500      	str	r5, [sp, #0]
 800d29c:	2202      	movs	r2, #2
 800d29e:	f44f 7106 	mov.w	r1, #536	; 0x218
 800d2a2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800d2a6:	f7fd fcf3 	bl	800ac90 <chThdCreateI>
 800d2aa:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 800d2ac:	f7fd fbc8 	bl	800aa40 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 800d2b0:	f7fd fca6 	bl	800ac00 <chSchRescheduleS>
 800d2b4:	e7d1      	b.n	800d25a <usb_lld_start+0xaa>
 800d2b6:	bf00      	nop
 800d2b8:	20001470 	.word	0x20001470
 800d2bc:	c0303c08 	.word	0xc0303c08
 800d2c0:	c0303c00 	.word	0xc0303c00
 800d2c4:	40023800 	.word	0x40023800
 800d2c8:	40001440 	.word	0x40001440
 800d2cc:	02200003 	.word	0x02200003
 800d2d0:	0800cf81 	.word	0x0800cf81
	...

0800d2e0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800d2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 800d2e2:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800d2e4:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800d2e6:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800d2e8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800d2ea:	692b      	ldr	r3, [r5, #16]
 800d2ec:	f013 0420 	ands.w	r4, r3, #32
 800d2f0:	d1fb      	bne.n	800d2ea <usb_lld_reset+0xa>
 800d2f2:	2012      	movs	r0, #18
 800d2f4:	f7fd fb04 	bl	800a900 <chSysPolledDelayX>
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d2f8:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
 800d2fc:	f8c5 4834 	str.w	r4, [r5, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800d300:	f04f 1201 	mov.w	r2, #65537	; 0x10001

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d304:	f8de 6008 	ldr.w	r6, [lr, #8]
  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800d308:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d30c:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800d30e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800d312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d316:	eb05 1243 	add.w	r2, r5, r3, lsl #5
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d31a:	3301      	adds	r3, #1
 800d31c:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800d31e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800d322:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800d326:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800d32a:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800d32e:	d9f2      	bls.n	800d316 <usb_lld_reset+0x36>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800d330:	f8de 3000 	ldr.w	r3, [lr]
 800d334:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800d336:	f8de 3000 	ldr.w	r3, [lr]
 800d33a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d33c:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800d33e:	2310      	movs	r3, #16
 800d340:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800d342:	6913      	ldr	r3, [r2, #16]
 800d344:	f013 0410 	ands.w	r4, r3, #16
 800d348:	d1fb      	bne.n	800d342 <usb_lld_reset+0x62>
 800d34a:	2012      	movs	r0, #18
 800d34c:	f7fd fad8 	bl	800a900 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800d350:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800d354:	4a10      	ldr	r2, [pc, #64]	; (800d398 <usb_lld_reset+0xb8>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800d356:	4811      	ldr	r0, [pc, #68]	; (800d39c <usb_lld_reset+0xbc>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800d358:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d35c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800d360:	69ab      	ldr	r3, [r5, #24]
 800d362:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800d366:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800d36a:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800d36c:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800d36e:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800d372:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800d376:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800d378:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800d37c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 800d380:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800d384:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800d388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800d38a:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800d38e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800d392:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800d394:	62ab      	str	r3, [r5, #40]	; 0x28
 800d396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d398:	10008040 	.word	0x10008040
 800d39c:	08015ba0 	.word	0x08015ba0

0800d3a0 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800d3a0:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800d3a2:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800d3a6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800d3aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d3ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800d3b2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800d3b6:	4770      	bx	lr
	...

0800d3c0 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 800d3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c4:	fa0f f881 	sxth.w	r8, r1
 800d3c8:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 800d3cc:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	f002 0203 	and.w	r2, r2, #3
 800d3d6:	2a02      	cmp	r2, #2
 800d3d8:	d05e      	beq.n	800d498 <usb_lld_init_endpoint+0xd8>
 800d3da:	2a03      	cmp	r2, #3
 800d3dc:	d05e      	beq.n	800d49c <usb_lld_init_endpoint+0xdc>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 800d3de:	4e4c      	ldr	r6, [pc, #304]	; (800d510 <usb_lld_init_endpoint+0x150>)
 800d3e0:	494c      	ldr	r1, [pc, #304]	; (800d514 <usb_lld_init_endpoint+0x154>)
 800d3e2:	2a01      	cmp	r2, #1
 800d3e4:	bf18      	it	ne
 800d3e6:	460e      	movne	r6, r1
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 800d3e8:	6d04      	ldr	r4, [r0, #80]	; 0x50
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
  if (usbp->epc[ep]->out_state != NULL) {
 800d3ea:	6999      	ldr	r1, [r3, #24]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 800d3ec:	016a      	lsls	r2, r5, #5
 800d3ee:	eb04 0e02 	add.w	lr, r4, r2
 800d3f2:	f04f 0c00 	mov.w	ip, #0
 800d3f6:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_state != NULL) {
 800d3fa:	2900      	cmp	r1, #0
 800d3fc:	d073      	beq.n	800d4e6 <usb_lld_init_endpoint+0x126>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 800d3fe:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800d402:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800d406:	0149      	lsls	r1, r1, #5
 800d408:	ea4e 0e06 	orr.w	lr, lr, r6
 800d40c:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 800d410:	f105 0c10 	add.w	ip, r5, #16
 800d414:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 800d418:	f04f 0e01 	mov.w	lr, #1
 800d41c:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d420:	ea4e 0101 	orr.w	r1, lr, r1
 800d424:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800d428:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_state != NULL) {
 800d42a:	6959      	ldr	r1, [r3, #20]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800d42c:	f04f 0e00 	mov.w	lr, #0
 800d430:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 800d434:	2900      	cmp	r1, #0
 800d436:	d033      	beq.n	800d4a0 <usb_lld_init_endpoint+0xe0>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 800d438:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800d43a:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 800d43c:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800d43e:	ea4f 0392 	mov.w	r3, r2, lsr #2
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800d442:	6d82      	ldr	r2, [r0, #88]	; 0x58
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 800d444:	bf88      	it	hi
 800d446:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800d448:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800d44c:	eb03 0e02 	add.w	lr, r3, r2
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800d450:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d454:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800d458:	01aa      	lsls	r2, r5, #6
 800d45a:	f042 0220 	orr.w	r2, r2, #32
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800d45e:	f8c0 e058 	str.w	lr, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800d462:	604b      	str	r3, [r1, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800d464:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800d466:	6923      	ldr	r3, [r4, #16]
 800d468:	069a      	lsls	r2, r3, #26
 800d46a:	d4fc      	bmi.n	800d466 <usb_lld_init_endpoint+0xa6>
 800d46c:	2012      	movs	r0, #18
 800d46e:	f7fd fa47 	bl	800a900 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 800d472:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 800d474:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800d476:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800d47a:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800d47e:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 800d480:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800d482:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 800d484:	2101      	movs	r1, #1
 800d486:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 800d48a:	fa01 f505 	lsl.w	r5, r1, r5
 800d48e:	431d      	orrs	r5, r3
 800d490:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
 800d494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 800d498:	4e1f      	ldr	r6, [pc, #124]	; (800d518 <usb_lld_init_endpoint+0x158>)
    break;
 800d49a:	e7a5      	b.n	800d3e8 <usb_lld_init_endpoint+0x28>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 800d49c:	4e1f      	ldr	r6, [pc, #124]	; (800d51c <usb_lld_init_endpoint+0x15c>)
    break;
 800d49e:	e7a3      	b.n	800d3e8 <usb_lld_init_endpoint+0x28>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800d4a0:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 800d4a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800d4a8:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800d4aa:	491d      	ldr	r1, [pc, #116]	; (800d520 <usb_lld_init_endpoint+0x160>)
 800d4ac:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800d4ae:	f043 0320 	orr.w	r3, r3, #32
 800d4b2:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800d4b4:	6923      	ldr	r3, [r4, #16]
 800d4b6:	069b      	lsls	r3, r3, #26
 800d4b8:	d4fc      	bmi.n	800d4b4 <usb_lld_init_endpoint+0xf4>
 800d4ba:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 800d4be:	2012      	movs	r0, #18
 800d4c0:	f7fd fa1e 	bl	800a900 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800d4c4:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 800d4c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4cc:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 800d4d0:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	fa02 f505 	lsl.w	r5, r2, r5
 800d4da:	ea23 0305 	bic.w	r3, r3, r5
 800d4de:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 800d4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4e6:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800d4ea:	f105 0910 	add.w	r9, r5, #16
  if (usbp->epc[ep]->out_state != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800d4ee:	f8d1 cb00 	ldr.w	ip, [r1, #2816]	; 0xb00
 800d4f2:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800d4f6:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800d4fa:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 800d4fe:	f04f 0e01 	mov.w	lr, #1
 800d502:	fa0e fe09 	lsl.w	lr, lr, r9
 800d506:	ea21 010e 	bic.w	r1, r1, lr
 800d50a:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 800d50e:	e78b      	b.n	800d428 <usb_lld_init_endpoint+0x68>
 800d510:	10048000 	.word	0x10048000
 800d514:	10008000 	.word	0x10008000
 800d518:	10088000 	.word	0x10088000
 800d51c:	100c8000 	.word	0x100c8000
 800d520:	02000400 	.word	0x02000400
	...

0800d530 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800d530:	3158      	adds	r1, #88	; 0x58
 800d532:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d534:	0149      	lsls	r1, r1, #5
 800d536:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800d538:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800d53c:	d004      	beq.n	800d548 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800d53e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800d542:	bf14      	ite	ne
 800d544:	2001      	movne	r0, #1
 800d546:	2002      	moveq	r0, #2
}
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	0000      	movs	r0, r0
	...

0800d550 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800d550:	3148      	adds	r1, #72	; 0x48
 800d552:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d554:	0149      	lsls	r1, r1, #5
 800d556:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 800d558:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800d55c:	d004      	beq.n	800d568 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800d55e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800d562:	bf14      	ite	ne
 800d564:	2001      	movne	r0, #1
 800d566:	2002      	moveq	r0, #2
}
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	0000      	movs	r0, r0
	...

0800d570 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 800d570:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d574:	68cb      	ldr	r3, [r1, #12]
 800d576:	6a1b      	ldr	r3, [r3, #32]
 800d578:	6819      	ldr	r1, [r3, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	6053      	str	r3, [r2, #4]
 800d57e:	6011      	str	r1, [r2, #0]
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
	...

0800d590 <usb_lld_start_out>:
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800d590:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800d594:	b430      	push	{r4, r5}
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800d596:	68dc      	ldr	r4, [r3, #12]
 800d598:	69a2      	ldr	r2, [r4, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800d59a:	6813      	ldr	r3, [r2, #0]
 800d59c:	60d3      	str	r3, [r2, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 800d59e:	b909      	cbnz	r1, 800d5a4 <usb_lld_start_out+0x14>
 800d5a0:	2b40      	cmp	r3, #64	; 0x40
 800d5a2:	d822      	bhi.n	800d5ea <usb_lld_start_out+0x5a>
 800d5a4:	1e5a      	subs	r2, r3, #1
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800d5a6:	8a63      	ldrh	r3, [r4, #18]
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800d5a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800d5aa:	6824      	ldr	r4, [r4, #0]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800d5ac:	441a      	add	r2, r3
 800d5ae:	fbb2 f2f3 	udiv	r2, r2, r3
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
 800d5b6:	3303      	adds	r3, #3
 800d5b8:	f023 0303 	bic.w	r3, r3, #3
 800d5bc:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800d5c0:	eb00 1541 	add.w	r5, r0, r1, lsl #5
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800d5c4:	f004 0203 	and.w	r2, r4, #3
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800d5c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800d5cc:	2a01      	cmp	r2, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800d5ce:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800d5d2:	d00e      	beq.n	800d5f2 <usb_lld_start_out+0x62>
 800d5d4:	b209      	sxth	r1, r1
 800d5d6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
}
 800d5da:	bc30      	pop	{r4, r5}
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 800d5dc:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800d5e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d5e4:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800d5e8:	4770      	bx	lr
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;
 800d5ea:	2340      	movs	r3, #64	; 0x40
 800d5ec:	6013      	str	r3, [r2, #0]
 800d5ee:	223f      	movs	r2, #63	; 0x3f
 800d5f0:	e7d9      	b.n	800d5a6 <usb_lld_start_out+0x16>
 800d5f2:	b209      	sxth	r1, r1
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
    /* Odd/even bit toggling for isochronous endpoint.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800d5f4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d5f8:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 800d5fc:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 800d600:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800d604:	bf14      	ite	ne
 800d606:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 800d60a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800d60e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800d612:	e7e0      	b.n	800d5d6 <usb_lld_start_out+0x46>
	...

0800d620 <otg_epout_handler.constprop.9>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800d620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800d624:	4d24      	ldr	r5, [pc, #144]	; (800d6b8 <otg_epout_handler.constprop.9+0x98>)
 800d626:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800d628:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800d62c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800d62e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 800d632:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800d636:	0720      	lsls	r0, r4, #28
 800d638:	d503      	bpl.n	800d642 <otg_epout_handler.constprop.9+0x22>
 800d63a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800d63e:	0719      	lsls	r1, r3, #28
 800d640:	d431      	bmi.n	800d6a6 <otg_epout_handler.constprop.9+0x86>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800d642:	07e2      	lsls	r2, r4, #31
 800d644:	d51b      	bpl.n	800d67e <otg_epout_handler.constprop.9+0x5e>
 800d646:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800d64a:	07db      	lsls	r3, r3, #31
 800d64c:	d517      	bpl.n	800d67e <otg_epout_handler.constprop.9+0x5e>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800d64e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800d652:	68da      	ldr	r2, [r3, #12]
 800d654:	6991      	ldr	r1, [r2, #24]

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 800d656:	8a50      	ldrh	r0, [r2, #18]
 800d658:	684c      	ldr	r4, [r1, #4]
 800d65a:	fbb4 f3f0 	udiv	r3, r4, r0
 800d65e:	fb00 4413 	mls	r4, r0, r3, r4
 800d662:	b174      	cbz	r4, 800d682 <otg_epout_handler.constprop.9+0x62>
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800d664:	8969      	ldrh	r1, [r5, #10]
 800d666:	68d2      	ldr	r2, [r2, #12]
 800d668:	2301      	movs	r3, #1
 800d66a:	40b3      	lsls	r3, r6
 800d66c:	ea21 0303 	bic.w	r3, r1, r3
 800d670:	816b      	strh	r3, [r5, #10]
 800d672:	b122      	cbz	r2, 800d67e <otg_epout_handler.constprop.9+0x5e>
 800d674:	4631      	mov	r1, r6
 800d676:	4810      	ldr	r0, [pc, #64]	; (800d6b8 <otg_epout_handler.constprop.9+0x98>)
    }
  }
}
 800d678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800d67c:	4710      	bx	r2
 800d67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
        (osp->rxsize < osp->totsize)) {
 800d682:	6808      	ldr	r0, [r1, #0]
 800d684:	68cb      	ldr	r3, [r1, #12]
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 800d686:	4298      	cmp	r0, r3
 800d688:	d2ec      	bcs.n	800d664 <otg_epout_handler.constprop.9+0x44>
        (osp->rxsize < osp->totsize)) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800d68a:	1a1b      	subs	r3, r3, r0
      osp->rxcnt  = 0;
 800d68c:	e881 0018 	stmia.w	r1, {r3, r4}
 800d690:	2320      	movs	r3, #32
 800d692:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_out(usbp, ep);
 800d696:	4808      	ldr	r0, [pc, #32]	; (800d6b8 <otg_epout_handler.constprop.9+0x98>)
 800d698:	4631      	mov	r1, r6
 800d69a:	f7ff ff79 	bl	800d590 <usb_lld_start_out>
 800d69e:	f384 8811 	msr	BASEPRI, r4
 800d6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 800d6a6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	4798      	blx	r3
 800d6b4:	e7c5      	b.n	800d642 <otg_epout_handler.constprop.9+0x22>
 800d6b6:	bf00      	nop
 800d6b8:	20001470 	.word	0x20001470
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d6c0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 800d6c4:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d6c6:	68dc      	ldr	r4, [r3, #12]
 800d6c8:	6965      	ldr	r5, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800d6ca:	682b      	ldr	r3, [r5, #0]
 800d6cc:	60eb      	str	r3, [r5, #12]
  if (isp->txsize == 0) {
 800d6ce:	b9f3      	cbnz	r3, 800d70e <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800d6d0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800d6d2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800d6d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d6da:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	f003 0303 	and.w	r3, r3, #3
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d026      	beq.n	800d736 <usb_lld_start_in+0x76>
 800d6e8:	b20b      	sxth	r3, r1
 800d6ea:	eb00 1343 	add.w	r3, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800d6ee:	2201      	movs	r2, #1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800d6f0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800d6f4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800d6f8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800d6fc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800d700:	fa02 f101 	lsl.w	r1, r2, r1
 800d704:	4319      	orrs	r1, r3
 800d706:	f8c0 1834 	str.w	r1, [r0, #2100]	; 0x834
}
 800d70a:	bcf0      	pop	{r4, r5, r6, r7}
 800d70c:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800d70e:	b319      	cbz	r1, 800d758 <usb_lld_start_in+0x98>
 800d710:	1e5d      	subs	r5, r3, #1
 800d712:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800d716:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800d718:	8a26      	ldrh	r6, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800d71a:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 800d71e:	1973      	adds	r3, r6, r5
 800d720:	fbb3 f3f6 	udiv	r3, r3, r6
 800d724:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 800d728:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	f003 0303 	and.w	r3, r3, #3
 800d732:	2b01      	cmp	r3, #1
 800d734:	d1d8      	bne.n	800d6e8 <usb_lld_start_in+0x28>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800d736:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d73a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d73e:	b20b      	sxth	r3, r1
 800d740:	eb00 1443 	add.w	r4, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 800d744:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 800d748:	bf14      	ite	ne
 800d74a:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 800d74e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 800d752:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
 800d756:	e7c8      	b.n	800d6ea <usb_lld_start_in+0x2a>
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800d758:	2b40      	cmp	r3, #64	; 0x40
 800d75a:	d9d9      	bls.n	800d710 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 800d75c:	2340      	movs	r3, #64	; 0x40
 800d75e:	602b      	str	r3, [r5, #0]
 800d760:	4a01      	ldr	r2, [pc, #4]	; (800d768 <usb_lld_start_in+0xa8>)
 800d762:	253f      	movs	r5, #63	; 0x3f
 800d764:	e7d7      	b.n	800d716 <usb_lld_start_in+0x56>
 800d766:	bf00      	nop
 800d768:	20000040 	.word	0x20000040
 800d76c:	00000000 	.word	0x00000000

0800d770 <otg_epin_handler.constprop.10>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800d770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800d774:	4e29      	ldr	r6, [pc, #164]	; (800d81c <otg_epin_handler.constprop.10+0xac>)
 800d776:	6d35      	ldr	r5, [r6, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800d778:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800d77c:	4607      	mov	r7, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800d77e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 800d782:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800d786:	07e1      	lsls	r1, r4, #31
 800d788:	d503      	bpl.n	800d792 <otg_epin_handler.constprop.10+0x22>
 800d78a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800d78e:	07da      	lsls	r2, r3, #31
 800d790:	d409      	bmi.n	800d7a6 <otg_epin_handler.constprop.10+0x36>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800d792:	0623      	lsls	r3, r4, #24
 800d794:	d505      	bpl.n	800d7a2 <otg_epin_handler.constprop.10+0x32>
 800d796:	2101      	movs	r1, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 800d798:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800d79c:	40b9      	lsls	r1, r7
 800d79e:	4219      	tst	r1, r3
 800d7a0:	d118      	bne.n	800d7d4 <otg_epin_handler.constprop.10+0x64>
 800d7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d7a6:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 800d7aa:	68d9      	ldr	r1, [r3, #12]
 800d7ac:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 800d7ae:	6818      	ldr	r0, [r3, #0]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	4290      	cmp	r0, r2
 800d7b4:	d323      	bcc.n	800d7fe <otg_epin_handler.constprop.10+0x8e>
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 800d7b6:	8932      	ldrh	r2, [r6, #8]
 800d7b8:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800d7bc:	2301      	movs	r3, #1
 800d7be:	40bb      	lsls	r3, r7
 800d7c0:	ea22 0303 	bic.w	r3, r2, r3
 800d7c4:	8133      	strh	r3, [r6, #8]
 800d7c6:	f1b8 0f00 	cmp.w	r8, #0
 800d7ca:	d0e2      	beq.n	800d792 <otg_epin_handler.constprop.10+0x22>
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	47c0      	blx	r8
 800d7d2:	e7de      	b.n	800d792 <otg_epin_handler.constprop.10+0x22>
 800d7d4:	2320      	movs	r3, #32
 800d7d6:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800d7da:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800d7de:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800d7e0:	480f      	ldr	r0, [pc, #60]	; (800d820 <otg_epin_handler.constprop.10+0xb0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800d7e2:	ea22 0201 	bic.w	r2, r2, r1
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800d7e6:	430b      	orrs	r3, r1
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800d7e8:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
 800d7ec:	2100      	movs	r1, #0
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800d7ee:	65f3      	str	r3, [r6, #92]	; 0x5c
 800d7f0:	f7fd fafe 	bl	800adf0 <chThdResumeI>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f383 8811 	msr	BASEPRI, r3
 800d7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800d7fe:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800d800:	f04f 0800 	mov.w	r8, #0
 800d804:	e883 0104 	stmia.w	r3, {r2, r8}
 800d808:	2320      	movs	r3, #32
 800d80a:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_in(usbp, ep);
 800d80e:	4639      	mov	r1, r7
 800d810:	4630      	mov	r0, r6
 800d812:	f7ff ff55 	bl	800d6c0 <usb_lld_start_in>
 800d816:	f388 8811 	msr	BASEPRI, r8
 800d81a:	e7ba      	b.n	800d792 <otg_epin_handler.constprop.10+0x22>
 800d81c:	20001470 	.word	0x20001470
 800d820:	200014d0 	.word	0x200014d0
	...

0800d830 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 800d830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800d834:	4e95      	ldr	r6, [pc, #596]	; (800da8c <Vector14C+0x25c>)
 800d836:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 800d838:	697d      	ldr	r5, [r7, #20]
  sts &= otgp->GINTMSK;
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	401d      	ands	r5, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800d83e:	f415 5980 	ands.w	r9, r5, #4096	; 0x1000
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 800d842:	617d      	str	r5, [r7, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800d844:	f040 80c8 	bne.w	800d9d8 <Vector14C+0x1a8>
    /* Preventing execution of more handlers, the core has been reset.*/
    return;
  }

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
 800d848:	2d00      	cmp	r5, #0
 800d84a:	db55      	blt.n	800d8f8 <Vector14C+0xc8>

    _usb_wakeup(usbp);
  }

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {
 800d84c:	052b      	lsls	r3, r5, #20
 800d84e:	d44d      	bmi.n	800d8ec <Vector14C+0xbc>
    /* Default suspend action.*/
    _usb_suspend(usbp);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 800d850:	04ac      	lsls	r4, r5, #18
 800d852:	d50c      	bpl.n	800d86e <Vector14C+0x3e>
    /* Full or High speed timing selection.*/
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 800d854:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800d858:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800d862:	bf0c      	ite	eq
 800d864:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
                      GUSBCFG_TRDT(TRDT_VALUE_HS);
    }
    else {
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800d868:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 800d86c:	60fb      	str	r3, [r7, #12]
                      GUSBCFG_TRDT(TRDT_VALUE_FS);
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 800d86e:	0728      	lsls	r0, r5, #28
 800d870:	d504      	bpl.n	800d87c <Vector14C+0x4c>
    _usb_isr_invoke_sof_cb(usbp);
 800d872:	6873      	ldr	r3, [r6, #4]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	b10b      	cbz	r3, 800d87c <Vector14C+0x4c>
 800d878:	4884      	ldr	r0, [pc, #528]	; (800da8c <Vector14C+0x25c>)
 800d87a:	4798      	blx	r3
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 800d87c:	02ea      	lsls	r2, r5, #11
 800d87e:	d44f      	bmi.n	800d920 <Vector14C+0xf0>
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 800d880:	02aa      	lsls	r2, r5, #10
 800d882:	f100 80b9 	bmi.w	800d9f8 <Vector14C+0x1c8>
    otg_isoc_out_failed_handler(usbp);
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 800d886:	06eb      	lsls	r3, r5, #27
 800d888:	d421      	bmi.n	800d8ce <Vector14C+0x9e>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 800d88a:	036e      	lsls	r6, r5, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 800d88c:	f8d7 4818 	ldr.w	r4, [r7, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800d890:	d50b      	bpl.n	800d8aa <Vector14C+0x7a>
    if (src & (1 << 0))
 800d892:	07e0      	lsls	r0, r4, #31
 800d894:	f100 80f5 	bmi.w	800da82 <Vector14C+0x252>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 800d898:	07a1      	lsls	r1, r4, #30
 800d89a:	f100 80ee 	bmi.w	800da7a <Vector14C+0x24a>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 800d89e:	0762      	lsls	r2, r4, #29
 800d8a0:	f100 80e7 	bmi.w	800da72 <Vector14C+0x242>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 800d8a4:	0723      	lsls	r3, r4, #28
 800d8a6:	f100 80d1 	bmi.w	800da4c <Vector14C+0x21c>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 800d8aa:	032f      	lsls	r7, r5, #12
 800d8ac:	d50b      	bpl.n	800d8c6 <Vector14C+0x96>
    if (src & (1 << 16))
 800d8ae:	03e6      	lsls	r6, r4, #15
 800d8b0:	f100 80db 	bmi.w	800da6a <Vector14C+0x23a>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 800d8b4:	03a5      	lsls	r5, r4, #14
 800d8b6:	f100 80d4 	bmi.w	800da62 <Vector14C+0x232>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 800d8ba:	0360      	lsls	r0, r4, #13
 800d8bc:	f100 80cd 	bmi.w	800da5a <Vector14C+0x22a>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 800d8c0:	0321      	lsls	r1, r4, #12
 800d8c2:	f100 8092 	bmi.w	800d9ea <Vector14C+0x1ba>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800d8c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800d8ca:	f7fd bbc1 	b.w	800b050 <_port_irq_epilogue>
 800d8ce:	2320      	movs	r3, #32
 800d8d0:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	486e      	ldr	r0, [pc, #440]	; (800da90 <Vector14C+0x260>)
 800d8d8:	f023 0310 	bic.w	r3, r3, #16
 800d8dc:	61bb      	str	r3, [r7, #24]
 800d8de:	2100      	movs	r1, #0
 800d8e0:	f7fd fa86 	bl	800adf0 <chThdResumeI>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	e7ce      	b.n	800d88a <Vector14C+0x5a>

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 800d8ec:	2300      	movs	r3, #0

    /* Default suspend action.*/
    _usb_suspend(usbp);
 800d8ee:	4867      	ldr	r0, [pc, #412]	; (800da8c <Vector14C+0x25c>)

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 800d8f0:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default suspend action.*/
    _usb_suspend(usbp);
 800d8f2:	f7fe f97d 	bl	800bbf0 <_usb_suspend>
 800d8f6:	e7ab      	b.n	800d850 <Vector14C+0x20>

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
    /* If clocks are gated off, turn them back on (may be the case if
       coming out of suspend mode).*/
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 800d8f8:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 800d8fc:	079a      	lsls	r2, r3, #30
 800d8fe:	d005      	beq.n	800d90c <Vector14C+0xdc>
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 800d900:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 800d904:	f023 0303 	bic.w	r3, r3, #3
 800d908:	f8c7 3e00 	str.w	r3, [r7, #3584]	; 0xe00
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 800d90c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 800d910:	485e      	ldr	r0, [pc, #376]	; (800da8c <Vector14C+0x25c>)
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 800d912:	f043 0301 	orr.w	r3, r3, #1
 800d916:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 800d91a:	f7fe f971 	bl	800bc00 <_usb_wakeup>
 800d91e:	e795      	b.n	800d84c <Vector14C+0x1c>
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800d920:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 800d924:	2400      	movs	r4, #0
 800d926:	e007      	b.n	800d938 <Vector14C+0x108>

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800d928:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d92a:	4a58      	ldr	r2, [pc, #352]	; (800da8c <Vector14C+0x25c>)
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	3401      	adds	r4, #1
 800d930:	b2e4      	uxtb	r4, r4
 800d932:	429c      	cmp	r4, r3
 800d934:	46a1      	mov	r9, r4
 800d936:	d849      	bhi.n	800d9cc <Vector14C+0x19c>
 800d938:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800d93c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800d940:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800d944:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d948:	d1ee      	bne.n	800d928 <Vector14C+0xf8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 800d94a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800d94e:	2b00      	cmp	r3, #0
 800d950:	daea      	bge.n	800d928 <Vector14C+0xf8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
      /* Endpoint enabled -> ISOC IN transfer failed */
      /* Disable endpoint */
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 800d952:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800d956:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 800d95a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 800d95e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800d962:	2b00      	cmp	r3, #0
 800d964:	dbfb      	blt.n	800d95e <Vector14C+0x12e>
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800d966:	ea4f 1989 	mov.w	r9, r9, lsl #6
 800d96a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800d96c:	f049 0320 	orr.w	r3, r9, #32
 800d970:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800d972:	6913      	ldr	r3, [r2, #16]
 800d974:	0699      	lsls	r1, r3, #26
 800d976:	d4fc      	bmi.n	800d972 <Vector14C+0x142>
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 800d978:	2012      	movs	r0, #18
 800d97a:	f7fc ffc1 	bl	800a900 <chSysPolledDelayX>

      /* Flush FIFO */
      otg_txfifo_flush(usbp, ep);

      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);
 800d97e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d982:	f04f 0901 	mov.w	r9, #1
 800d986:	68da      	ldr	r2, [r3, #12]
 800d988:	8933      	ldrh	r3, [r6, #8]
 800d98a:	6892      	ldr	r2, [r2, #8]
 800d98c:	fa09 f904 	lsl.w	r9, r9, r4
 800d990:	ea6f 0a09 	mvn.w	sl, r9
 800d994:	ea0a 0303 	and.w	r3, sl, r3
 800d998:	8133      	strh	r3, [r6, #8]
 800d99a:	b112      	cbz	r2, 800d9a2 <Vector14C+0x172>
 800d99c:	4621      	mov	r1, r4
 800d99e:	483b      	ldr	r0, [pc, #236]	; (800da8c <Vector14C+0x25c>)
 800d9a0:	4790      	blx	r2
 800d9a2:	2320      	movs	r3, #32
 800d9a4:	f383 8811 	msr	BASEPRI, r3

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 800d9a8:	f8d8 2834 	ldr.w	r2, [r8, #2100]	; 0x834
      usbp->txpending |= (1 << ep);
 800d9ac:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800d9ae:	4838      	ldr	r0, [pc, #224]	; (800da90 <Vector14C+0x260>)
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 800d9b0:	ea0a 0202 	and.w	r2, sl, r2
      usbp->txpending |= (1 << ep);
 800d9b4:	ea43 0309 	orr.w	r3, r3, r9
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 800d9b8:	f8c8 2834 	str.w	r2, [r8, #2100]	; 0x834
 800d9bc:	2100      	movs	r1, #0
      usbp->txpending |= (1 << ep);
 800d9be:	65f3      	str	r3, [r6, #92]	; 0x5c
 800d9c0:	f7fd fa16 	bl	800adf0 <chThdResumeI>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f383 8811 	msr	BASEPRI, r3
 800d9ca:	e7ad      	b.n	800d928 <Vector14C+0xf8>
  if (sts & GINTSTS_IISOIXFR) {
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 800d9cc:	02ab      	lsls	r3, r5, #10
 800d9ce:	f57f af5a 	bpl.w	800d886 <Vector14C+0x56>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800d9d2:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
 800d9d6:	e011      	b.n	800d9fc <Vector14C+0x1cc>

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 800d9d8:	2300      	movs	r3, #0

    /* Default reset action.*/
    _usb_reset(usbp);
 800d9da:	4630      	mov	r0, r6

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 800d9dc:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default reset action.*/
    _usb_reset(usbp);
 800d9de:	f7fe f8e7 	bl	800bbb0 <_usb_reset>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800d9e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800d9e6:	f7fd bb33 	b.w	800b050 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 800d9ea:	2003      	movs	r0, #3
 800d9ec:	f7ff fe18 	bl	800d620 <otg_epout_handler.constprop.9>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800d9f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800d9f4:	f7fd bb2c 	b.w	800b050 <_port_irq_epilogue>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800d9f8:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800d9fc:	2400      	movs	r4, #0
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 800d9fe:	f04f 0901 	mov.w	r9, #1
 800da02:	e006      	b.n	800da12 <Vector14C+0x1e2>
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800da04:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800da06:	3401      	adds	r4, #1
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	b2e4      	uxtb	r4, r4
 800da0c:	429c      	cmp	r4, r3
 800da0e:	f63f af3a 	bhi.w	800d886 <Vector14C+0x56>
 800da12:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800da16:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800da1a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800da1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da22:	d1ef      	bne.n	800da04 <Vector14C+0x1d4>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 800da24:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800da28:	2b00      	cmp	r3, #0
 800da2a:	daeb      	bge.n	800da04 <Vector14C+0x1d4>
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 800da2c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800da30:	8973      	ldrh	r3, [r6, #10]
 800da32:	68d2      	ldr	r2, [r2, #12]
 800da34:	4815      	ldr	r0, [pc, #84]	; (800da8c <Vector14C+0x25c>)
 800da36:	68d2      	ldr	r2, [r2, #12]
 800da38:	fa09 f104 	lsl.w	r1, r9, r4
 800da3c:	ea23 0301 	bic.w	r3, r3, r1
 800da40:	8173      	strh	r3, [r6, #10]
 800da42:	4621      	mov	r1, r4
 800da44:	2a00      	cmp	r2, #0
 800da46:	d0dd      	beq.n	800da04 <Vector14C+0x1d4>
 800da48:	4790      	blx	r2
 800da4a:	e7db      	b.n	800da04 <Vector14C+0x1d4>
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
      otg_epin_handler(usbp, 3);
 800da4c:	2003      	movs	r0, #3
 800da4e:	f7ff fe8f 	bl	800d770 <otg_epin_handler.constprop.10>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 800da52:	032f      	lsls	r7, r5, #12
 800da54:	f57f af37 	bpl.w	800d8c6 <Vector14C+0x96>
 800da58:	e729      	b.n	800d8ae <Vector14C+0x7e>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 800da5a:	2002      	movs	r0, #2
 800da5c:	f7ff fde0 	bl	800d620 <otg_epout_handler.constprop.9>
 800da60:	e72e      	b.n	800d8c0 <Vector14C+0x90>
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
 800da62:	2001      	movs	r0, #1
 800da64:	f7ff fddc 	bl	800d620 <otg_epout_handler.constprop.9>
 800da68:	e727      	b.n	800d8ba <Vector14C+0x8a>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800da6a:	2000      	movs	r0, #0
 800da6c:	f7ff fdd8 	bl	800d620 <otg_epout_handler.constprop.9>
 800da70:	e720      	b.n	800d8b4 <Vector14C+0x84>
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
 800da72:	2002      	movs	r0, #2
 800da74:	f7ff fe7c 	bl	800d770 <otg_epin_handler.constprop.10>
 800da78:	e714      	b.n	800d8a4 <Vector14C+0x74>
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
 800da7a:	2001      	movs	r0, #1
 800da7c:	f7ff fe78 	bl	800d770 <otg_epin_handler.constprop.10>
 800da80:	e70d      	b.n	800d89e <Vector14C+0x6e>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 800da82:	2000      	movs	r0, #0
 800da84:	f7ff fe74 	bl	800d770 <otg_epin_handler.constprop.10>
 800da88:	e706      	b.n	800d898 <Vector14C+0x68>
 800da8a:	bf00      	nop
 800da8c:	20001470 	.word	0x20001470
 800da90:	200014d0 	.word	0x200014d0
	...

0800daa0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 800daa0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800daa2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800daa6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800daaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800daae:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800dab2:	4770      	bx	lr
	...

0800dac0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 800dac0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dac2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800dac6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800daca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dace:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800dad2:	4770      	bx	lr
	...

0800dae0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 800dae0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dae2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800dae6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800daea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800daee:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800daf2:	4770      	bx	lr
	...

0800db00 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 800db00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800db02:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 800db06:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800db0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db0e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800db12:	4770      	bx	lr
	...

0800db20 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 800db20:	b510      	push	{r4, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 800db22:	4c0a      	ldr	r4, [pc, #40]	; (800db4c <spi_lld_init+0x2c>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800db24:	4b0a      	ldr	r3, [pc, #40]	; (800db50 <spi_lld_init+0x30>)
 800db26:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 800db2a:	4620      	mov	r0, r4
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800db2c:	801a      	strh	r2, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 800db2e:	f7fd ffbf 	bl	800bab0 <spiObjectInit>
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800db32:	4b08      	ldr	r3, [pc, #32]	; (800db54 <spi_lld_init+0x34>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800db34:	4808      	ldr	r0, [pc, #32]	; (800db58 <spi_lld_init+0x38>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800db36:	4909      	ldr	r1, [pc, #36]	; (800db5c <spi_lld_init+0x3c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800db38:	4a09      	ldr	r2, [pc, #36]	; (800db60 <spi_lld_init+0x40>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800db3a:	61e0      	str	r0, [r4, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800db3c:	f103 0024 	add.w	r0, r3, #36	; 0x24
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800db40:	6223      	str	r3, [r4, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800db42:	6260      	str	r0, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800db44:	62a1      	str	r1, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800db46:	62e2      	str	r2, [r4, #44]	; 0x2c
 800db48:	bd10      	pop	{r4, pc}
 800db4a:	bf00      	nop
 800db4c:	2000170c 	.word	0x2000170c
 800db50:	20001708 	.word	0x20001708
 800db54:	08015b20 	.word	0x08015b20
 800db58:	40013000 	.word	0x40013000
 800db5c:	06010016 	.word	0x06010016
 800db60:	06010046 	.word	0x06010046
	...

0800db70 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 800db70:	b510      	push	{r4, lr}
  PWMD4.tim = STM32_TIM4;
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
 800db72:	4c04      	ldr	r4, [pc, #16]	; (800db84 <pwm_lld_init+0x14>)
 800db74:	4620      	mov	r0, r4
 800db76:	f7fd fd73 	bl	800b660 <pwmObjectInit>
  PWMD5.channels = STM32_TIM5_CHANNELS;
 800db7a:	2204      	movs	r2, #4
  PWMD5.tim = STM32_TIM5;
 800db7c:	4b02      	ldr	r3, [pc, #8]	; (800db88 <pwm_lld_init+0x18>)
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
  PWMD5.channels = STM32_TIM5_CHANNELS;
 800db7e:	7422      	strb	r2, [r4, #16]
  PWMD5.tim = STM32_TIM5;
 800db80:	61a3      	str	r3, [r4, #24]
 800db82:	bd10      	pop	{r4, pc}
 800db84:	2000173c 	.word	0x2000173c
 800db88:	40000c00 	.word	0x40000c00
 800db8c:	00000000 	.word	0x00000000

0800db90 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 800db90:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 800db92:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 800db94:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800db96:	68da      	ldr	r2, [r3, #12]
 800db98:	4014      	ands	r4, r2
  pwmp->tim->SR = ~sr;
 800db9a:	b2e2      	uxtb	r2, r4
 800db9c:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800db9e:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 800dba0:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 800dba2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800dba4:	d503      	bpl.n	800dbae <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 800dba6:	6843      	ldr	r3, [r0, #4]
 800dba8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800dbaa:	b103      	cbz	r3, 800dbae <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 800dbac:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800dbae:	0760      	lsls	r0, r4, #29
 800dbb0:	d504      	bpl.n	800dbbc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 800dbb2:	686b      	ldr	r3, [r5, #4]
 800dbb4:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800dbb6:	b10b      	cbz	r3, 800dbbc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 800dbb8:	4628      	mov	r0, r5
 800dbba:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800dbbc:	0721      	lsls	r1, r4, #28
 800dbbe:	d504      	bpl.n	800dbca <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 800dbc0:	686b      	ldr	r3, [r5, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800dbc4:	b10b      	cbz	r3, 800dbca <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800dbca:	06e2      	lsls	r2, r4, #27
 800dbcc:	d504      	bpl.n	800dbd8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800dbce:	686b      	ldr	r3, [r5, #4]
 800dbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800dbd2:	b10b      	cbz	r3, 800dbd8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800dbd8:	07e3      	lsls	r3, r4, #31
 800dbda:	d506      	bpl.n	800dbea <pwm_lld_serve_interrupt+0x5a>
 800dbdc:	686b      	ldr	r3, [r5, #4]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	b11b      	cbz	r3, 800dbea <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 800dbe2:	4628      	mov	r0, r5
}
 800dbe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 800dbe8:	4718      	bx	r3
 800dbea:	bd70      	pop	{r4, r5, r6, pc}
 800dbec:	0000      	movs	r0, r0
	...

0800dbf0 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 800dbf0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);
 800dbf2:	4803      	ldr	r0, [pc, #12]	; (800dc00 <Vector108+0x10>)
 800dbf4:	f7ff ffcc 	bl	800db90 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 800dbf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);

  OSAL_IRQ_EPILOGUE();
 800dbfc:	f7fd ba28 	b.w	800b050 <_port_irq_epilogue>
 800dc00:	2000173c 	.word	0x2000173c
	...

0800dc10 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 800dc10:	f7fe baae 	b.w	800c170 <stm32_clock_init>
	...

0800dc20 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
	...

0800dc30 <ch_ltoa>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 800dc30:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800dc32:	f100 070b 	add.w	r7, r0, #11
 800dc36:	463c      	mov	r4, r7
 800dc38:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 800dc3a:	fbb1 f6f2 	udiv	r6, r1, r2
 800dc3e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 800dc42:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 800dc46:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800dc48:	bfc8      	it	gt
 800dc4a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 800dc54:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 800dc58:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800dc5a:	2d00      	cmp	r5, #0
 800dc5c:	d1ed      	bne.n	800dc3a <ch_ltoa+0xa>
 800dc5e:	1b3a      	subs	r2, r7, r4
 800dc60:	4402      	add	r2, r0
 800dc62:	e001      	b.n	800dc68 <ch_ltoa+0x38>
 800dc64:	f814 3f01 	ldrb.w	r3, [r4, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 800dc68:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800dc6c:	4290      	cmp	r0, r2
 800dc6e:	d1f9      	bne.n	800dc64 <ch_ltoa+0x34>
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
}
 800dc70:	bcf0      	pop	{r4, r5, r6, r7}
 800dc72:	4770      	bx	lr
	...

0800dc80 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	ed2d 8b02 	vpush	{d8}
 800dc88:	b091      	sub	sp, #68	; 0x44
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800dc8a:	2300      	movs	r3, #0
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	468b      	mov	fp, r1
 800dc90:	4692      	mov	sl, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800dc92:	9300      	str	r3, [sp, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800dc94:	f89b 1000 	ldrb.w	r1, [fp]
 800dc98:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 800dc9c:	b179      	cbz	r1, 800dcbe <chvprintf+0x3e>
      return n;
    if (c != '%') {
 800dc9e:	2925      	cmp	r1, #37	; 0x25
 800dca0:	d013      	beq.n	800dcca <chvprintf+0x4a>
      streamPut(chp, (uint8_t)c);
      n++;
 800dca2:	9c00      	ldr	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 800dca4:	6832      	ldr	r2, [r6, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800dca6:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 800dca8:	6892      	ldr	r2, [r2, #8]
 800dcaa:	4630      	mov	r0, r6
      n++;
 800dcac:	3401      	adds	r4, #1
 800dcae:	9400      	str	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 800dcb0:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800dcb2:	f89b 1000 	ldrb.w	r1, [fp]
 800dcb6:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 800dcba:	2900      	cmp	r1, #0
 800dcbc:	d1ef      	bne.n	800dc9e <chvprintf+0x1e>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800dcbe:	9800      	ldr	r0, [sp, #0]
 800dcc0:	b011      	add	sp, #68	; 0x44
 800dcc2:	ecbd 8b02 	vpop	{d8}
 800dcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800dcca:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800dcce:	2a2d      	cmp	r2, #45	; 0x2d
 800dcd0:	bf03      	ittte	eq
 800dcd2:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 800dcd6:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 800dcda:	2101      	moveq	r1, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800dcdc:	2100      	movne	r1, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 800dcde:	2a30      	cmp	r2, #48	; 0x30
 800dce0:	bf08      	it	eq
 800dce2:	785a      	ldrbeq	r2, [r3, #1]
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800dce4:	9101      	str	r1, [sp, #4]
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 800dce6:	bf06      	itte	eq
 800dce8:	3301      	addeq	r3, #1
      filler = '0';
 800dcea:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 800dcec:	2720      	movne	r7, #32
 800dcee:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 800dcf0:	2400      	movs	r4, #0
 800dcf2:	e008      	b.n	800dd06 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 800dcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800dcf8:	f10a 0a04 	add.w	sl, sl, #4
 800dcfc:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 800dd00:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 800dd04:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 800dd06:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800dd0e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800dd10:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 800dd14:	d9f2      	bls.n	800dcfc <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 800dd16:	2a2a      	cmp	r2, #42	; 0x2a
 800dd18:	d0ec      	beq.n	800dcf4 <chvprintf+0x74>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800dd1a:	2a2e      	cmp	r2, #46	; 0x2e
 800dd1c:	f04f 0800 	mov.w	r8, #0
 800dd20:	d045      	beq.n	800ddae <chvprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800dd22:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800dd26:	2b4c      	cmp	r3, #76	; 0x4c
 800dd28:	d050      	beq.n	800ddcc <chvprintf+0x14c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800dd2a:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 800dd2e:	2b34      	cmp	r3, #52	; 0x34
 800dd30:	f200 81c9 	bhi.w	800e0c6 <chvprintf+0x446>
 800dd34:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dd38:	01c701b7 	.word	0x01c701b7
 800dd3c:	01c701c7 	.word	0x01c701c7
 800dd40:	01b701c7 	.word	0x01b701c7
 800dd44:	01c701c7 	.word	0x01c701c7
 800dd48:	01c701c7 	.word	0x01c701c7
 800dd4c:	01b501c7 	.word	0x01b501c7
 800dd50:	01c701c7 	.word	0x01c701c7
 800dd54:	01c701c7 	.word	0x01c701c7
 800dd58:	010601c7 	.word	0x010601c7
 800dd5c:	01c701c7 	.word	0x01c701c7
 800dd60:	01c7008d 	.word	0x01c7008d
 800dd64:	01c701c7 	.word	0x01c701c7
 800dd68:	01c701c7 	.word	0x01c701c7
 800dd6c:	01c701c7 	.word	0x01c701c7
 800dd70:	01c701c7 	.word	0x01c701c7
 800dd74:	01a701c7 	.word	0x01a701c7
 800dd78:	01c701b7 	.word	0x01c701b7
 800dd7c:	01c70108 	.word	0x01c70108
 800dd80:	01b701c7 	.word	0x01b701c7
 800dd84:	01c701c7 	.word	0x01c701c7
 800dd88:	01c701c7 	.word	0x01c701c7
 800dd8c:	01b501c7 	.word	0x01b501c7
 800dd90:	01c701c7 	.word	0x01c701c7
 800dd94:	00db01c7 	.word	0x00db01c7
 800dd98:	010601c7 	.word	0x010601c7
 800dd9c:	01c701c7 	.word	0x01c701c7
 800dda0:	008d      	.short	0x008d
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 800dda2:	f89a 3000 	ldrb.w	r3, [sl]
 800dda6:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 800ddaa:	eb03 0841 	add.w	r8, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800ddae:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 800ddb2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800ddba:	eb08 0188 	add.w	r1, r8, r8, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800ddbe:	d9f4      	bls.n	800ddaa <chvprintf+0x12a>
          c -= '0';
        else if (c == '*')
 800ddc0:	2a2a      	cmp	r2, #42	; 0x2a
 800ddc2:	d0ee      	beq.n	800dda2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800ddc4:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800ddc8:	2b4c      	cmp	r3, #76	; 0x4c
 800ddca:	d1ae      	bne.n	800dd2a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 800ddcc:	f89b 1000 	ldrb.w	r1, [fp]
 800ddd0:	2900      	cmp	r1, #0
 800ddd2:	f000 8178 	beq.w	800e0c6 <chvprintf+0x446>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800ddd6:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 800ddda:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800ddde:	2b34      	cmp	r3, #52	; 0x34
 800dde0:	f200 8170 	bhi.w	800e0c4 <chvprintf+0x444>
 800dde4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dde8:	016e015f 	.word	0x016e015f
 800ddec:	016e016e 	.word	0x016e016e
 800ddf0:	015f016e 	.word	0x015f016e
 800ddf4:	016e016e 	.word	0x016e016e
 800ddf8:	016e016e 	.word	0x016e016e
 800ddfc:	015d016e 	.word	0x015d016e
 800de00:	016e016e 	.word	0x016e016e
 800de04:	016e016e 	.word	0x016e016e
 800de08:	00ae016e 	.word	0x00ae016e
 800de0c:	016e016e 	.word	0x016e016e
 800de10:	016e0035 	.word	0x016e0035
 800de14:	016e016e 	.word	0x016e016e
 800de18:	016e016e 	.word	0x016e016e
 800de1c:	016e016e 	.word	0x016e016e
 800de20:	016e016e 	.word	0x016e016e
 800de24:	014f016e 	.word	0x014f016e
 800de28:	016e015f 	.word	0x016e015f
 800de2c:	016e00b0 	.word	0x016e00b0
 800de30:	015f016e 	.word	0x015f016e
 800de34:	016e016e 	.word	0x016e016e
 800de38:	016e016e 	.word	0x016e016e
 800de3c:	015d016e 	.word	0x015d016e
 800de40:	016e016e 	.word	0x016e016e
 800de44:	0083016e 	.word	0x0083016e
 800de48:	00ae016e 	.word	0x00ae016e
 800de4c:	016e016e 	.word	0x016e016e
 800de50:	0035      	.short	0x0035
 800de52:	2210      	movs	r2, #16
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
 800de54:	ad0a      	add	r5, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800de56:	f8da 1000 	ldr.w	r1, [sl]
      p = ch_ltoa(p, l, c);
 800de5a:	4628      	mov	r0, r5
 800de5c:	f7ff fee8 	bl	800dc30 <ch_ltoa>
 800de60:	1b40      	subs	r0, r0, r5
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800de62:	f10a 0a04 	add.w	sl, sl, #4
 800de66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800de6a:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800de6c:	1a24      	subs	r4, r4, r0
 800de6e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 800de72:	2b00      	cmp	r3, #0
 800de74:	d162      	bne.n	800df3c <chvprintf+0x2bc>
      width = -width;
 800de76:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
 800de7a:	f1b9 0f00 	cmp.w	r9, #0
 800de7e:	f000 812b 	beq.w	800e0d8 <chvprintf+0x458>
      if (*s == '-' && filler == '0') {
 800de82:	7829      	ldrb	r1, [r5, #0]
 800de84:	292d      	cmp	r1, #45	; 0x2d
 800de86:	f000 813a 	beq.w	800e0fe <chvprintf+0x47e>
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 800de8a:	6833      	ldr	r3, [r6, #0]
 800de8c:	4639      	mov	r1, r7
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	4630      	mov	r0, r6
 800de92:	4798      	blx	r3
        n++;
      } while (++width != 0);
 800de94:	f119 0901 	adds.w	r9, r9, #1
 800de98:	d1f7      	bne.n	800de8a <chvprintf+0x20a>
 800de9a:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 800de9c:	f1b8 0f00 	cmp.w	r8, #0
 800dea0:	4423      	add	r3, r4
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	f6ff aef6 	blt.w	800dc94 <chvprintf+0x14>
 800dea8:	464c      	mov	r4, r9
 800deaa:	46c1      	mov	r9, r8
      streamPut(chp, (uint8_t)*s++);
 800deac:	6833      	ldr	r3, [r6, #0]
 800deae:	f815 1b01 	ldrb.w	r1, [r5], #1
 800deb2:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800deb4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 800deb8:	4630      	mov	r0, r6
 800deba:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800debc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800dec0:	d1f4      	bne.n	800deac <chvprintf+0x22c>
 800dec2:	9b00      	ldr	r3, [sp, #0]
 800dec4:	3301      	adds	r3, #1
 800dec6:	f1b8 0f00 	cmp.w	r8, #0
 800deca:	bfa8      	it	ge
 800decc:	4443      	addge	r3, r8
 800dece:	9300      	str	r3, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800ded0:	2c00      	cmp	r4, #0
 800ded2:	f43f aedf 	beq.w	800dc94 <chvprintf+0x14>
 800ded6:	4625      	mov	r5, r4
      streamPut(chp, (uint8_t)filler);
 800ded8:	6833      	ldr	r3, [r6, #0]
 800deda:	4639      	mov	r1, r7
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	4630      	mov	r0, r6
 800dee0:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800dee2:	3d01      	subs	r5, #1
 800dee4:	d1f8      	bne.n	800ded8 <chvprintf+0x258>
 800dee6:	9b00      	ldr	r3, [sp, #0]
 800dee8:	4423      	add	r3, r4
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	e6d2      	b.n	800dc94 <chvprintf+0x14>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800deee:	f8da 5000 	ldr.w	r5, [sl]
        s = "(null)";
 800def2:	4b9b      	ldr	r3, [pc, #620]	; (800e160 <chvprintf+0x4e0>)
 800def4:	2d00      	cmp	r5, #0
 800def6:	bf08      	it	eq
 800def8:	461d      	moveq	r5, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800defa:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800defe:	782b      	ldrb	r3, [r5, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 800df00:	f1b8 0f00 	cmp.w	r8, #0
 800df04:	f000 80ee 	beq.w	800e0e4 <chvprintf+0x464>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 80f0 	beq.w	800e0ee <chvprintf+0x46e>
 800df0e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800df12:	4628      	mov	r0, r5
 800df14:	e002      	b.n	800df1c <chvprintf+0x29c>
 800df16:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800df1a:	d005      	beq.n	800df28 <chvprintf+0x2a8>
 800df1c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800df20:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1f6      	bne.n	800df16 <chvprintf+0x296>
 800df28:	1b40      	subs	r0, r0, r5
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800df2a:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800df2c:	1a24      	subs	r4, r4, r0
 800df2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800df32:	2720      	movs	r7, #32
 800df34:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d09c      	beq.n	800de76 <chvprintf+0x1f6>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800df3c:	f1b8 0f00 	cmp.w	r8, #0
 800df40:	dab3      	bge.n	800deaa <chvprintf+0x22a>
 800df42:	e7c5      	b.n	800ded0 <chvprintf+0x250>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 800df44:	220a      	movs	r2, #10
 800df46:	e785      	b.n	800de54 <chvprintf+0x1d4>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 800df48:	f10a 0a07 	add.w	sl, sl, #7
 800df4c:	f02a 0a07 	bic.w	sl, sl, #7
 800df50:	e9da 0100 	ldrd	r0, r1, [sl]
 800df54:	f7fa ffbc 	bl	8008ed0 <__aeabi_d2f>
 800df58:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 800df5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800df60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 800df64:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 800df68:	f100 80e8 	bmi.w	800e13c <chvprintf+0x4bc>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 800df6c:	ad0a      	add	r5, sp, #40	; 0x28
 800df6e:	462a      	mov	r2, r5
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 800df70:	ee18 0a10 	vmov	r0, s16
 800df74:	9204      	str	r2, [sp, #16]
 800df76:	f7fa fc8f 	bl	8008898 <__aeabi_f2d>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800df7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800df7e:	f1b8 0f08 	cmp.w	r8, #8
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 800df82:	e9cd 0102 	strd	r0, r1, [sp, #8]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800df86:	9a04      	ldr	r2, [sp, #16]
 800df88:	f200 80c7 	bhi.w	800e11a <chvprintf+0x49a>
 800df8c:	4b75      	ldr	r3, [pc, #468]	; (800e164 <chvprintf+0x4e4>)
 800df8e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800df92:	4640      	mov	r0, r8
 800df94:	f7fa fc5e 	bl	8008854 <__aeabi_ui2d>
 800df98:	4b73      	ldr	r3, [pc, #460]	; (800e168 <chvprintf+0x4e8>)
 800df9a:	9a04      	ldr	r2, [sp, #16]
 800df9c:	fba3 3808 	umull	r3, r8, r3, r8
 800dfa0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dfa4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800dfa8:	9309      	str	r3, [sp, #36]	; 0x24
 800dfaa:	4698      	mov	r8, r3
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 800dfac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800dfb0:	f102 030b 	add.w	r3, r2, #11
 800dfb4:	ee17 1a90 	vmov	r1, s15
                                         long divisor) {
  int i;
  char *q;
  long l, ll;

  l = num;
 800dfb8:	ee17 ea90 	vmov	lr, s15

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 800dfbc:	edcd 7a04 	vstr	s15, [sp, #16]
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800dfc0:	9305      	str	r3, [sp, #20]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	9208      	str	r2, [sp, #32]
  do {
    i = (int)(l % radix);
 800dfc6:	4b68      	ldr	r3, [pc, #416]	; (800e168 <chvprintf+0x4e8>)
 800dfc8:	fba3 230e 	umull	r2, r3, r3, lr
 800dfcc:	08db      	lsrs	r3, r3, #3
 800dfce:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800dfd2:	4a65      	ldr	r2, [pc, #404]	; (800e168 <chvprintf+0x4e8>)
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 800dfd4:	469c      	mov	ip, r3
 800dfd6:	ebae 0349 	sub.w	r3, lr, r9, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800dfda:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 800dfdc:	fba2 2101 	umull	r2, r1, r2, r1
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800dfe0:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 800dfe2:	08c9      	lsrs	r1, r1, #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800dfe4:	f800 3d01 	strb.w	r3, [r0, #-1]!
    l /= radix;
 800dfe8:	46e6      	mov	lr, ip
  } while ((ll /= radix) != 0);
 800dfea:	d1ec      	bne.n	800dfc6 <chvprintf+0x346>
 800dfec:	9905      	ldr	r1, [sp, #20]
 800dfee:	9a08      	ldr	r2, [sp, #32]
 800dff0:	ebc0 0901 	rsb	r9, r0, r1
 800dff4:	4491      	add	r9, r2
 800dff6:	e001      	b.n	800dffc <chvprintf+0x37c>
 800dff8:	f810 3f01 	ldrb.w	r3, [r0, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 800dffc:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 800e000:	454a      	cmp	r2, r9
 800e002:	d1f9      	bne.n	800dff8 <chvprintf+0x378>
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800e004:	464a      	mov	r2, r9
 800e006:	232e      	movs	r3, #46	; 0x2e
 800e008:	f802 3b0c 	strb.w	r3, [r2], #12
  l = (long)((num - l) * precision);
 800e00c:	9804      	ldr	r0, [sp, #16]
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800e00e:	9204      	str	r2, [sp, #16]
  l = (long)((num - l) * precision);
 800e010:	f7fa fc30 	bl	8008874 <__aeabi_i2d>
 800e014:	4602      	mov	r2, r0
 800e016:	460b      	mov	r3, r1
 800e018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e01c:	f7fa fadc 	bl	80085d8 <__aeabi_dsub>
 800e020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e024:	f7fa fc8c 	bl	8008940 <__aeabi_dmul>
 800e028:	f7fa ff2a 	bl	8008e80 <__aeabi_d2iz>
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 800e02c:	9909      	ldr	r1, [sp, #36]	; 0x24
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800e02e:	9a04      	ldr	r2, [sp, #16]
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 800e030:	2900      	cmp	r1, #0
 800e032:	bf08      	it	eq
 800e034:	4680      	moveq	r8, r0
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800e036:	f109 0e01 	add.w	lr, r9, #1
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 800e03a:	4b4b      	ldr	r3, [pc, #300]	; (800e168 <chvprintf+0x4e8>)
 800e03c:	fba3 1300 	umull	r1, r3, r3, r0
 800e040:	08db      	lsrs	r3, r3, #3
 800e042:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800e046:	4619      	mov	r1, r3
 800e048:	eba0 034c 	sub.w	r3, r0, ip, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800e04c:	4846      	ldr	r0, [pc, #280]	; (800e168 <chvprintf+0x4e8>)
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800e04e:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 800e050:	fba0 0808 	umull	r0, r8, r0, r8
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800e054:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 800e056:	ea5f 08d8 	movs.w	r8, r8, lsr #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800e05a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 800e05e:	4608      	mov	r0, r1
  } while ((ll /= radix) != 0);
 800e060:	d1eb      	bne.n	800e03a <chvprintf+0x3ba>
 800e062:	9904      	ldr	r1, [sp, #16]
 800e064:	1a89      	subs	r1, r1, r2
 800e066:	1c48      	adds	r0, r1, #1
 800e068:	4481      	add	r9, r0

  i = (int)(p + MAX_FILLER - q);
 800e06a:	4670      	mov	r0, lr
 800e06c:	e001      	b.n	800e072 <chvprintf+0x3f2>
 800e06e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  do
    *p++ = *q++;
 800e072:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800e076:	4581      	cmp	r9, r0
 800e078:	d1f9      	bne.n	800e06e <chvprintf+0x3ee>
 800e07a:	eb0e 0001 	add.w	r0, lr, r1
 800e07e:	1b40      	subs	r0, r0, r5
 800e080:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800e084:	e6f1      	b.n	800de6a <chvprintf+0x1ea>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800e086:	ad10      	add	r5, sp, #64	; 0x40
 800e088:	f8da 3000 	ldr.w	r3, [sl]
 800e08c:	f805 3d18 	strb.w	r3, [r5, #-24]!
 800e090:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800e094:	1b40      	subs	r0, r0, r5
 800e096:	f10a 0a04 	add.w	sl, sl, #4
 800e09a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 800e09e:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
      break;
 800e0a0:	e6e3      	b.n	800de6a <chvprintf+0x1ea>
 800e0a2:	2208      	movs	r2, #8
 800e0a4:	e6d6      	b.n	800de54 <chvprintf+0x1d4>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800e0a6:	f8da 1000 	ldr.w	r1, [sl]
      if (l < 0) {
 800e0aa:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800e0ac:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 800e0b0:	db3c      	blt.n	800e12c <chvprintf+0x4ac>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 800e0b2:	ad0a      	add	r5, sp, #40	; 0x28
 800e0b4:	4628      	mov	r0, r5
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
      }
      p = ch_ltoa(p, l, 10);
 800e0b6:	220a      	movs	r2, #10
 800e0b8:	f7ff fdba 	bl	800dc30 <ch_ltoa>
 800e0bc:	1b40      	subs	r0, r0, r5
 800e0be:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 800e0c2:	e6d2      	b.n	800de6a <chvprintf+0x1ea>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800e0c4:	460a      	mov	r2, r1
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 800e0c6:	ad10      	add	r5, sp, #64	; 0x40
 800e0c8:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800e0cc:	f805 2d18 	strb.w	r2, [r5, #-24]!
 800e0d0:	1b40      	subs	r0, r0, r5
 800e0d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 800e0d6:	e6c8      	b.n	800de6a <chvprintf+0x1ea>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800e0d8:	f1b8 0f00 	cmp.w	r8, #0
 800e0dc:	f6ff adda 	blt.w	800dc94 <chvprintf+0x14>
 800e0e0:	464c      	mov	r4, r9
 800e0e2:	e6e2      	b.n	800deaa <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800e0e4:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f47f af12 	bne.w	800df12 <chvprintf+0x292>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800e0ee:	9b01      	ldr	r3, [sp, #4]
 800e0f0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e0f4:	bb5b      	cbnz	r3, 800e14e <chvprintf+0x4ce>
 800e0f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e0fa:	2720      	movs	r7, #32
 800e0fc:	e6bb      	b.n	800de76 <chvprintf+0x1f6>
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800e0fe:	2f30      	cmp	r7, #48	; 0x30
 800e100:	f47f aec3 	bne.w	800de8a <chvprintf+0x20a>
        streamPut(chp, (uint8_t)*s++);
 800e104:	6833      	ldr	r3, [r6, #0]
 800e106:	4630      	mov	r0, r6
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	4798      	blx	r3
        n++;
 800e10c:	9b00      	ldr	r3, [sp, #0]
 800e10e:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 800e110:	3501      	adds	r5, #1
        n++;
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e118:	e6b7      	b.n	800de8a <chvprintf+0x20a>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800e11a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800e158 <chvprintf+0x4d8>
 800e11e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800e16c <chvprintf+0x4ec>
 800e122:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800e126:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e12a:	e73f      	b.n	800dfac <chvprintf+0x32c>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800e12c:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800e12e:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800e130:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e134:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800e138:	ad0a      	add	r5, sp, #40	; 0x28
 800e13a:	e7bc      	b.n	800e0b6 <chvprintf+0x436>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800e13c:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 800e13e:	eeb1 8a48 	vneg.f32	s16, s16
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800e142:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e146:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 800e14a:	ad0a      	add	r5, sp, #40	; 0x28
 800e14c:	e710      	b.n	800df70 <chvprintf+0x2f0>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800e14e:	2720      	movs	r7, #32
 800e150:	e6be      	b.n	800ded0 <chvprintf+0x250>
 800e152:	bf00      	nop
 800e154:	f3af 8000 	nop.w
 800e158:	00000000 	.word	0x00000000
 800e15c:	41cdcd65 	.word	0x41cdcd65
 800e160:	08015cd0 	.word	0x08015cd0
 800e164:	08015ce0 	.word	0x08015ce0
 800e168:	cccccccd 	.word	0xcccccccd
 800e16c:	05f5e100 	.word	0x05f5e100

0800e170 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 800e170:	b40e      	push	{r1, r2, r3}
 800e172:	b500      	push	{lr}
 800e174:	b082      	sub	sp, #8
 800e176:	aa03      	add	r2, sp, #12
 800e178:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800e17c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800e17e:	f7ff fd7f 	bl	800dc80 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 800e182:	b002      	add	sp, #8
 800e184:	f85d eb04 	ldr.w	lr, [sp], #4
 800e188:	b003      	add	sp, #12
 800e18a:	4770      	bx	lr
 800e18c:	0000      	movs	r0, r0
	...

0800e190 <_read_r>:
  return len;
#else
  (void)file;
  (void)ptr;
  (void)len;
  __errno_r(r) = EINVAL;
 800e190:	2316      	movs	r3, #22
 800e192:	6003      	str	r3, [r0, #0]
  return -1;
#endif
}
 800e194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	0000      	movs	r0, r0
	...

0800e1a0 <_lseek_r>:
  (void)file;
  (void)ptr;
  (void)dir;

  return 0;
}
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	4770      	bx	lr
	...

0800e1b0 <_write_r>:
    return -1;
  }
  sdWrite(&STDOUT_SD, (uint8_t *)ptr, (size_t)len);
#endif
  return len;
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	4770      	bx	lr
	...

0800e1c0 <_close_r>:
{
  (void)r;
  (void)file;

  return 0;
}
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	4770      	bx	lr
	...

0800e1d0 <_sbrk_r>:

/***************************************************************************/

caddr_t _sbrk_r(struct _reent *r, int incr)
{
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	4604      	mov	r4, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);

  p = chCoreAlloc((size_t)incr);
 800e1d4:	4608      	mov	r0, r1
 800e1d6:	f7fc fefb 	bl	800afd0 <chCoreAlloc>
  if (p == NULL) {
 800e1da:	b100      	cbz	r0, 800e1de <_sbrk_r+0xe>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 800e1dc:	bd10      	pop	{r4, pc}

  chDbgCheck(incr >= 0);

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
    __errno_r(r) = ENOMEM;
 800e1de:	230c      	movs	r3, #12
 800e1e0:	6023      	str	r3, [r4, #0]
    return (caddr_t)-1;
 800e1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 800e1e6:	bd10      	pop	{r4, pc}
	...

0800e1f0 <_fstat_r>:

/***************************************************************************/

int _fstat_r(struct _reent *r, int file, struct stat * st)
{
 800e1f0:	b510      	push	{r4, lr}
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 800e1f2:	4610      	mov	r0, r2
}

/***************************************************************************/

int _fstat_r(struct _reent *r, int file, struct stat * st)
{
 800e1f4:	4614      	mov	r4, r2
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	223c      	movs	r2, #60	; 0x3c
 800e1fa:	f003 f911 	bl	8011420 <memset>
  st->st_mode = S_IFCHR;
 800e1fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e202:	6063      	str	r3, [r4, #4]
  return 0;
}
 800e204:	2000      	movs	r0, #0
 800e206:	bd10      	pop	{r4, pc}
	...

0800e210 <_isatty_r>:
{
  (void)r;
  (void)fd;

  return 1;
}
 800e210:	2001      	movs	r0, #1
 800e212:	4770      	bx	lr
	...

0800e220 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800e220:	6802      	ldr	r2, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800e222:	4937      	ldr	r1, [pc, #220]	; (800e300 <DMA_DeInit+0xe0>)

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800e224:	2300      	movs	r3, #0
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800e226:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800e228:	f022 0201 	bic.w	r2, r2, #1

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800e22c:	2421      	movs	r4, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800e22e:	4288      	cmp	r0, r1
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800e230:	6002      	str	r2, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800e232:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800e234:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800e236:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800e238:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800e23a:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800e23c:	6144      	str	r4, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800e23e:	d04d      	beq.n	800e2dc <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800e240:	4b30      	ldr	r3, [pc, #192]	; (800e304 <DMA_DeInit+0xe4>)
 800e242:	4298      	cmp	r0, r3
 800e244:	d035      	beq.n	800e2b2 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800e246:	4b30      	ldr	r3, [pc, #192]	; (800e308 <DMA_DeInit+0xe8>)
 800e248:	4298      	cmp	r0, r3
 800e24a:	d039      	beq.n	800e2c0 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800e24c:	4b2f      	ldr	r3, [pc, #188]	; (800e30c <DMA_DeInit+0xec>)
 800e24e:	4298      	cmp	r0, r3
 800e250:	d03d      	beq.n	800e2ce <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800e252:	4b2f      	ldr	r3, [pc, #188]	; (800e310 <DMA_DeInit+0xf0>)
 800e254:	4298      	cmp	r0, r3
 800e256:	d047      	beq.n	800e2e8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800e258:	4b2e      	ldr	r3, [pc, #184]	; (800e314 <DMA_DeInit+0xf4>)
 800e25a:	4298      	cmp	r0, r3
 800e25c:	d048      	beq.n	800e2f0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800e25e:	4b2e      	ldr	r3, [pc, #184]	; (800e318 <DMA_DeInit+0xf8>)
 800e260:	4298      	cmp	r0, r3
 800e262:	d01d      	beq.n	800e2a0 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800e264:	4b2d      	ldr	r3, [pc, #180]	; (800e31c <DMA_DeInit+0xfc>)
 800e266:	4298      	cmp	r0, r3
 800e268:	d01e      	beq.n	800e2a8 <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800e26a:	4b2d      	ldr	r3, [pc, #180]	; (800e320 <DMA_DeInit+0x100>)
 800e26c:	4298      	cmp	r0, r3
 800e26e:	d043      	beq.n	800e2f8 <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800e270:	4b2c      	ldr	r3, [pc, #176]	; (800e324 <DMA_DeInit+0x104>)
 800e272:	4298      	cmp	r0, r3
 800e274:	d01d      	beq.n	800e2b2 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800e276:	4b2c      	ldr	r3, [pc, #176]	; (800e328 <DMA_DeInit+0x108>)
 800e278:	4298      	cmp	r0, r3
 800e27a:	d021      	beq.n	800e2c0 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800e27c:	4b2b      	ldr	r3, [pc, #172]	; (800e32c <DMA_DeInit+0x10c>)
 800e27e:	4298      	cmp	r0, r3
 800e280:	d025      	beq.n	800e2ce <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800e282:	4b2b      	ldr	r3, [pc, #172]	; (800e330 <DMA_DeInit+0x110>)
 800e284:	4298      	cmp	r0, r3
 800e286:	d02f      	beq.n	800e2e8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800e288:	4b2a      	ldr	r3, [pc, #168]	; (800e334 <DMA_DeInit+0x114>)
 800e28a:	4298      	cmp	r0, r3
 800e28c:	d030      	beq.n	800e2f0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800e28e:	4b2a      	ldr	r3, [pc, #168]	; (800e338 <DMA_DeInit+0x118>)
 800e290:	4298      	cmp	r0, r3
 800e292:	d005      	beq.n	800e2a0 <DMA_DeInit+0x80>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800e294:	4b29      	ldr	r3, [pc, #164]	; (800e33c <DMA_DeInit+0x11c>)
 800e296:	4298      	cmp	r0, r3
 800e298:	d006      	beq.n	800e2a8 <DMA_DeInit+0x88>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800e29a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e29e:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800e2a0:	4a27      	ldr	r2, [pc, #156]	; (800e340 <DMA_DeInit+0x120>)
 800e2a2:	f843 2c94 	str.w	r2, [r3, #-148]
 800e2a6:	e7f8      	b.n	800e29a <DMA_DeInit+0x7a>
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800e2a8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800e2ac:	f843 2cac 	str.w	r2, [r3, #-172]
    }
  }
}
 800e2b0:	e7f3      	b.n	800e29a <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800e2b2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800e2b6:	f843 2c20 	str.w	r2, [r3, #-32]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800e2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2be:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800e2c0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800e2c4:	f843 2c38 	str.w	r2, [r3, #-56]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800e2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2cc:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800e2ce:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800e2d2:	f843 2c50 	str.w	r2, [r3, #-80]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800e2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2da:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800e2dc:	4b19      	ldr	r3, [pc, #100]	; (800e344 <DMA_DeInit+0x124>)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800e2de:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800e2e2:	223d      	movs	r2, #61	; 0x3d
 800e2e4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800e2e6:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800e2e8:	4a17      	ldr	r2, [pc, #92]	; (800e348 <DMA_DeInit+0x128>)
 800e2ea:	f843 2c64 	str.w	r2, [r3, #-100]
 800e2ee:	e7d4      	b.n	800e29a <DMA_DeInit+0x7a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800e2f0:	4a16      	ldr	r2, [pc, #88]	; (800e34c <DMA_DeInit+0x12c>)
 800e2f2:	f843 2c7c 	str.w	r2, [r3, #-124]
 800e2f6:	e7d0      	b.n	800e29a <DMA_DeInit+0x7a>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800e2f8:	223d      	movs	r2, #61	; 0x3d
 800e2fa:	f843 2c08 	str.w	r2, [r3, #-8]
 800e2fe:	e7cc      	b.n	800e29a <DMA_DeInit+0x7a>
 800e300:	40026010 	.word	0x40026010
 800e304:	40026028 	.word	0x40026028
 800e308:	40026040 	.word	0x40026040
 800e30c:	40026058 	.word	0x40026058
 800e310:	40026070 	.word	0x40026070
 800e314:	40026088 	.word	0x40026088
 800e318:	400260a0 	.word	0x400260a0
 800e31c:	400260b8 	.word	0x400260b8
 800e320:	40026410 	.word	0x40026410
 800e324:	40026428 	.word	0x40026428
 800e328:	40026440 	.word	0x40026440
 800e32c:	40026458 	.word	0x40026458
 800e330:	40026470 	.word	0x40026470
 800e334:	40026488 	.word	0x40026488
 800e338:	400264a0 	.word	0x400264a0
 800e33c:	400264b8 	.word	0x400264b8
 800e340:	203d0000 	.word	0x203d0000
 800e344:	40026000 	.word	0x40026000
 800e348:	2000003d 	.word	0x2000003d
 800e34c:	20000f40 	.word	0x20000f40

0800e350 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e350:	f101 0218 	add.w	r2, r1, #24
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800e354:	b4f0      	push	{r4, r5, r6, r7}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e356:	ca8c      	ldmia	r2, {r2, r3, r7}
 800e358:	68cd      	ldr	r5, [r1, #12]
 800e35a:	680e      	ldr	r6, [r1, #0]
 800e35c:	694c      	ldr	r4, [r1, #20]
 800e35e:	432e      	orrs	r6, r5
 800e360:	4326      	orrs	r6, r4
 800e362:	4316      	orrs	r6, r2
 800e364:	431e      	orrs	r6, r3
 800e366:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800e368:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e36a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800e36c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800e36e:	433e      	orrs	r6, r7
 800e370:	4316      	orrs	r6, r2
 800e372:	431e      	orrs	r6, r3
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e374:	4a0b      	ldr	r2, [pc, #44]	; (800e3a4 <DMA_Init+0x54>)
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800e376:	6803      	ldr	r3, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800e378:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e37a:	4335      	orrs	r5, r6
 800e37c:	432c      	orrs	r4, r5
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e37e:	401a      	ands	r2, r3
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e380:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800e382:	6002      	str	r2, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800e384:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800e386:	6942      	ldr	r2, [r0, #20]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800e388:	690d      	ldr	r5, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800e38a:	684c      	ldr	r4, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800e38c:	6889      	ldr	r1, [r1, #8]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800e38e:	433b      	orrs	r3, r7
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e390:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800e394:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800e396:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800e398:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800e39a:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800e39c:	60c1      	str	r1, [r0, #12]
}
 800e39e:	bcf0      	pop	{r4, r5, r6, r7}
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	f01c803f 	.word	0xf01c803f
	...

0800e3b0 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800e3b0:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e3b2:	b919      	cbnz	r1, 800e3bc <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800e3b4:	f023 0301 	bic.w	r3, r3, #1
 800e3b8:	6003      	str	r3, [r0, #0]
 800e3ba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800e3bc:	f043 0301 	orr.w	r3, r3, #1
 800e3c0:	6003      	str	r3, [r0, #0]
 800e3c2:	4770      	bx	lr
	...

0800e3d0 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e3d0:	b929      	cbnz	r1, 800e3de <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800e3d2:	4a05      	ldr	r2, [pc, #20]	; (800e3e8 <RCC_AHB1PeriphClockCmd+0x18>)
 800e3d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e3d6:	ea23 0000 	bic.w	r0, r3, r0
 800e3da:	6310      	str	r0, [r2, #48]	; 0x30
 800e3dc:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800e3de:	4b02      	ldr	r3, [pc, #8]	; (800e3e8 <RCC_AHB1PeriphClockCmd+0x18>)
 800e3e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3e2:	4310      	orrs	r0, r2
 800e3e4:	6318      	str	r0, [r3, #48]	; 0x30
 800e3e6:	4770      	bx	lr
 800e3e8:	40023800 	.word	0x40023800
 800e3ec:	00000000 	.word	0x00000000

0800e3f0 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e3f0:	b929      	cbnz	r1, 800e3fe <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800e3f2:	4a05      	ldr	r2, [pc, #20]	; (800e408 <RCC_APB1PeriphClockCmd+0x18>)
 800e3f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e3f6:	ea23 0000 	bic.w	r0, r3, r0
 800e3fa:	6410      	str	r0, [r2, #64]	; 0x40
 800e3fc:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800e3fe:	4b02      	ldr	r3, [pc, #8]	; (800e408 <RCC_APB1PeriphClockCmd+0x18>)
 800e400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e402:	4310      	orrs	r0, r2
 800e404:	6418      	str	r0, [r3, #64]	; 0x40
 800e406:	4770      	bx	lr
 800e408:	40023800 	.word	0x40023800
 800e40c:	00000000 	.word	0x00000000

0800e410 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800e410:	4a22      	ldr	r2, [pc, #136]	; (800e49c <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800e412:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800e414:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800e416:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800e418:	d012      	beq.n	800e440 <TIM_TimeBaseInit+0x30>
 800e41a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e41e:	4290      	cmp	r0, r2
 800e420:	d00e      	beq.n	800e440 <TIM_TimeBaseInit+0x30>
 800e422:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800e426:	d00b      	beq.n	800e440 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800e428:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800e42c:	4290      	cmp	r0, r2
 800e42e:	d007      	beq.n	800e440 <TIM_TimeBaseInit+0x30>
 800e430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e434:	4290      	cmp	r0, r2
 800e436:	d003      	beq.n	800e440 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800e438:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e43c:	4290      	cmp	r0, r2
 800e43e:	d103      	bne.n	800e448 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800e440:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800e442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800e446:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800e448:	4a15      	ldr	r2, [pc, #84]	; (800e4a0 <TIM_TimeBaseInit+0x90>)
 800e44a:	4290      	cmp	r0, r2
 800e44c:	d01e      	beq.n	800e48c <TIM_TimeBaseInit+0x7c>
 800e44e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e452:	4290      	cmp	r0, r2
 800e454:	d01a      	beq.n	800e48c <TIM_TimeBaseInit+0x7c>
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800e456:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800e458:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800e45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800e45e:	4c0f      	ldr	r4, [pc, #60]	; (800e49c <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800e460:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800e462:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800e464:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800e466:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800e468:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800e46a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800e46c:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800e46e:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800e470:	d006      	beq.n	800e480 <TIM_TimeBaseInit+0x70>
 800e472:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <TIM_TimeBaseInit+0x94>)
 800e474:	4298      	cmp	r0, r3
 800e476:	d003      	beq.n	800e480 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800e478:	2301      	movs	r3, #1
 800e47a:	6143      	str	r3, [r0, #20]
}
 800e47c:	bc70      	pop	{r4, r5, r6}
 800e47e:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800e480:	7a8b      	ldrb	r3, [r1, #10]
 800e482:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800e484:	2301      	movs	r3, #1
 800e486:	6143      	str	r3, [r0, #20]
}
 800e488:	bc70      	pop	{r4, r5, r6}
 800e48a:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800e48c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800e48e:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800e490:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800e492:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800e494:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800e496:	2301      	movs	r3, #1
 800e498:	6143      	str	r3, [r0, #20]
 800e49a:	4770      	bx	lr
 800e49c:	40010000 	.word	0x40010000
 800e4a0:	40001000 	.word	0x40001000
 800e4a4:	40010400 	.word	0x40010400
	...

0800e4b0 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e4b0:	b929      	cbnz	r1, 800e4be <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800e4b2:	6802      	ldr	r2, [r0, #0]
 800e4b4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	6003      	str	r3, [r0, #0]
 800e4bc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800e4be:	6803      	ldr	r3, [r0, #0]
 800e4c0:	f043 0301 	orr.w	r3, r3, #1
 800e4c4:	6003      	str	r3, [r0, #0]
 800e4c6:	4770      	bx	lr
	...

0800e4d0 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800e4d0:	6a02      	ldr	r2, [r0, #32]
 800e4d2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800e4da:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800e4dc:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4de:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800e4e2:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4e4:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800e4e6:	4e1a      	ldr	r6, [pc, #104]	; (800e550 <TIM_OC3Init+0x80>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4e8:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800e4ea:	f64f 53ff 	movw	r3, #65023	; 0xfdff
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800e4ee:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800e4f0:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800e4f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800e4f8:	f64f 728c 	movw	r2, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800e4fc:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800e4fe:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800e500:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800e502:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e504:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800e506:	ea42 0204 	orr.w	r2, r2, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800e50a:	d009      	beq.n	800e520 <TIM_OC3Init+0x50>
 800e50c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800e510:	42b0      	cmp	r0, r6
 800e512:	d005      	beq.n	800e520 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800e514:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e516:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e518:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800e51a:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e51c:	6203      	str	r3, [r0, #32]
 800e51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800e520:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800e522:	8a0c      	ldrh	r4, [r1, #16]
 800e524:	f8b1 e012 	ldrh.w	lr, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800e528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800e52c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800e530:	f64f 36ff 	movw	r6, #64511	; 0xfbff
 800e534:	401e      	ands	r6, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800e536:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800e538:	f425 5740 	bic.w	r7, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800e53c:	ea44 050e 	orr.w	r5, r4, lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800e540:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800e544:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800e548:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800e54a:	b2ad      	uxth	r5, r5
 800e54c:	e7e2      	b.n	800e514 <TIM_OC3Init+0x44>
 800e54e:	bf00      	nop
 800e550:	40010000 	.word	0x40010000
	...

0800e560 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800e560:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800e562:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800e566:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800e568:	4319      	orrs	r1, r3
 800e56a:	61c1      	str	r1, [r0, #28]
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop

0800e570 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800e570:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e572:	b919      	cbnz	r1, 800e57c <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800e574:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e578:	6443      	str	r3, [r0, #68]	; 0x44
 800e57a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800e57c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e580:	6443      	str	r3, [r0, #68]	; 0x44
 800e582:	4770      	bx	lr
	...

0800e590 <TIM_DMACmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e590:	b92a      	cbnz	r2, 800e59e <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800e592:	68c3      	ldr	r3, [r0, #12]
 800e594:	43c9      	mvns	r1, r1
 800e596:	b289      	uxth	r1, r1
 800e598:	4019      	ands	r1, r3
 800e59a:	60c1      	str	r1, [r0, #12]
 800e59c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800e59e:	68c3      	ldr	r3, [r0, #12]
 800e5a0:	4319      	orrs	r1, r3
 800e5a2:	60c1      	str	r1, [r0, #12]
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
	...

0800e5b0 <main>:
#include "chprintf.h"
#include <stdio.h>
#include <string.h>
#include "math.h"

int main(void) {
 800e5b0:	b570      	push	{r4, r5, r6, lr}
 800e5b2:	b086      	sub	sp, #24
	halInit();
 800e5b4:	f7fc fd7c 	bl	800b0b0 <halInit>
	chSysInit();
 800e5b8:	f7fc f91a 	bl	800a7f0 <chSysInit>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800e5bc:	2101      	movs	r1, #1
 800e5be:	4608      	mov	r0, r1
 800e5c0:	f7ff ff06 	bl	800e3d0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800e5c4:	2101      	movs	r1, #1
 800e5c6:	2002      	movs	r0, #2
 800e5c8:	f7ff ff02 	bl	800e3d0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800e5cc:	2101      	movs	r1, #1
 800e5ce:	2004      	movs	r0, #4
 800e5d0:	f7ff fefe 	bl	800e3d0 <RCC_AHB1PeriphClockCmd>
	chThdSleepMilliseconds(1000);
 800e5d4:	f242 7010 	movw	r0, #10000	; 0x2710
 800e5d8:	f7fc fbc2 	bl	800ad60 <chThdSleep>

	comm_usb_serial_init();
 800e5dc:	f000 f880 	bl	800e6e0 <_Z20comm_usb_serial_initv>
	WS2812B* led = new WS2812B();
 800e5e0:	f44f 701a 	mov.w	r0, #616	; 0x268
 800e5e4:	f000 f99c 	bl	800e920 <_Znwj>
 800e5e8:	f000 f8c2 	bl	800e770 <_ZN7WS2812BC1Ev>
 800e5ec:	4d0b      	ldr	r5, [pc, #44]	; (800e61c <main+0x6c>)
 800e5ee:	ac01      	add	r4, sp, #4
	for(;;)
	{
		if (comm_usb_serial_is_active())
		{
			uint8_t test[20] = "Hello world";
 800e5f0:	2600      	movs	r6, #0
 800e5f2:	e003      	b.n	800e5fc <main+0x4c>
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
		}
		chThdSleepMilliseconds(1000);
 800e5f4:	f242 7010 	movw	r0, #10000	; 0x2710
 800e5f8:	f7fc fbb2 	bl	800ad60 <chThdSleep>

	comm_usb_serial_init();
	WS2812B* led = new WS2812B();
	for(;;)
	{
		if (comm_usb_serial_is_active())
 800e5fc:	f000 f8a8 	bl	800e750 <_Z25comm_usb_serial_is_activev>
 800e600:	2800      	cmp	r0, #0
 800e602:	d0f7      	beq.n	800e5f4 <main+0x44>
		{
			uint8_t test[20] = "Hello world";
 800e604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
 800e60c:	4622      	mov	r2, r4
 800e60e:	4904      	ldr	r1, [pc, #16]	; (800e620 <main+0x70>)
 800e610:	4804      	ldr	r0, [pc, #16]	; (800e624 <main+0x74>)
	WS2812B* led = new WS2812B();
	for(;;)
	{
		if (comm_usb_serial_is_active())
		{
			uint8_t test[20] = "Hello world";
 800e612:	9604      	str	r6, [sp, #16]
 800e614:	9605      	str	r6, [sp, #20]
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
 800e616:	f7ff fdab 	bl	800e170 <chprintf>
 800e61a:	e7eb      	b.n	800e5f4 <main+0x44>
 800e61c:	08015260 	.word	0x08015260
 800e620:	08015d10 	.word	0x08015d10
 800e624:	20001768 	.word	0x20001768
	...

0800e630 <_ZL14get_descriptorP9USBDriverhht>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 800e630:	2902      	cmp	r1, #2
 800e632:	d006      	beq.n	800e642 <_ZL14get_descriptorP9USBDriverhht+0x12>
 800e634:	2903      	cmp	r1, #3
 800e636:	d006      	beq.n	800e646 <_ZL14get_descriptorP9USBDriverhht+0x16>
 800e638:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 800e63a:	4806      	ldr	r0, [pc, #24]	; (800e654 <_ZL14get_descriptorP9USBDriverhht+0x24>)
 800e63c:	bf18      	it	ne
 800e63e:	2000      	movne	r0, #0
 800e640:	4770      	bx	lr
	(void)lang;
	switch (dtype) {
	case USB_DESCRIPTOR_DEVICE:
		return &vcom_device_descriptor;
	case USB_DESCRIPTOR_CONFIGURATION:
		return &vcom_configuration_descriptor;
 800e642:	4805      	ldr	r0, [pc, #20]	; (800e658 <_ZL14get_descriptorP9USBDriverhht+0x28>)
 800e644:	4770      	bx	lr
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
 800e646:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 800e648:	bf9a      	itte	ls
 800e64a:	4b04      	ldrls	r3, [pc, #16]	; (800e65c <_ZL14get_descriptorP9USBDriverhht+0x2c>)
 800e64c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
	}
	return NULL;
 800e650:	2000      	movhi	r0, #0
}
 800e652:	4770      	bx	lr
 800e654:	08015da0 	.word	0x08015da0
 800e658:	08015e60 	.word	0x08015e60
 800e65c:	08015d30 	.word	0x08015d30

0800e660 <_ZL11sof_handlerP9USBDriver>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 800e660:	b508      	push	{r3, lr}
 800e662:	2320      	movs	r3, #32
 800e664:	f383 8811 	msr	BASEPRI, r3

  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
 800e668:	4803      	ldr	r0, [pc, #12]	; (800e678 <_ZL11sof_handlerP9USBDriver+0x18>)
 800e66a:	f7fd f979 	bl	800b960 <sduSOFHookI>
 800e66e:	2300      	movs	r3, #0
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	bd08      	pop	{r3, pc}
 800e676:	bf00      	nop
 800e678:	20001768 	.word	0x20001768
 800e67c:	00000000 	.word	0x00000000

0800e680 <_ZL9usb_eventP9USBDriver10usbevent_t>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 	extern SerialUSBDriver SDU1;

	switch (event) {
 800e680:	2902      	cmp	r1, #2
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 800e682:	b538      	push	{r3, r4, r5, lr}
 800e684:	460c      	mov	r4, r1
 	extern SerialUSBDriver SDU1;

	switch (event) {
 800e686:	d00c      	beq.n	800e6a2 <_ZL9usb_eventP9USBDriver10usbevent_t+0x22>
 800e688:	2903      	cmp	r1, #3
 800e68a:	d109      	bne.n	800e6a0 <_ZL9usb_eventP9USBDriver10usbevent_t+0x20>
 800e68c:	2320      	movs	r3, #32
 800e68e:	f383 8811 	msr	BASEPRI, r3
		return;
	case USB_EVENT_SUSPEND:
	    chSysLockFromISR();

	    /* Disconnection event on suspend.*/
	    sduDisconnectI(&SDU1);
 800e692:	480e      	ldr	r0, [pc, #56]	; (800e6cc <_ZL9usb_eventP9USBDriver10usbevent_t+0x4c>)
 800e694:	f7fd f914 	bl	800b8c0 <sduDisconnectI>
 800e698:	2300      	movs	r3, #0
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	bd38      	pop	{r3, r4, r5, pc}
 800e6a0:	bd38      	pop	{r3, r4, r5, pc}
 800e6a2:	4605      	mov	r5, r0
 800e6a4:	2320      	movs	r3, #32
 800e6a6:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800e6aa:	4a09      	ldr	r2, [pc, #36]	; (800e6d0 <_ZL9usb_eventP9USBDriver10usbevent_t+0x50>)
 800e6ac:	2101      	movs	r1, #1
 800e6ae:	f7fd fa37 	bl	800bb20 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	4a07      	ldr	r2, [pc, #28]	; (800e6d4 <_ZL9usb_eventP9USBDriver10usbevent_t+0x54>)
 800e6b8:	f7fd fa32 	bl	800bb20 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 800e6bc:	4803      	ldr	r0, [pc, #12]	; (800e6cc <_ZL9usb_eventP9USBDriver10usbevent_t+0x4c>)
 800e6be:	f7fd f90f 	bl	800b8e0 <sduConfigureHookI>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f383 8811 	msr	BASEPRI, r3
 800e6c8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20001768 	.word	0x20001768
 800e6d0:	08015dd0 	.word	0x08015dd0
 800e6d4:	08015e70 	.word	0x08015e70
	...

0800e6e0 <_Z20comm_usb_serial_initv>:
		USBD1_DATA_REQUEST_EP,
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
 800e6e0:	b570      	push	{r4, r5, r6, lr}
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 800e6e2:	4e15      	ldr	r6, [pc, #84]	; (800e738 <_Z20comm_usb_serial_initv+0x58>)
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
	sduObjectInit(&SDU1);
 800e6e4:	4d15      	ldr	r5, [pc, #84]	; (800e73c <_Z20comm_usb_serial_initv+0x5c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 800e6e6:	4c16      	ldr	r4, [pc, #88]	; (800e740 <_Z20comm_usb_serial_initv+0x60>)
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	f240 5202 	movw	r2, #1282	; 0x502
 800e6ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e6f2:	f7fe fad5 	bl	800cca0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
 800e6f6:	f240 5202 	movw	r2, #1282	; 0x502
 800e6fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e6fe:	4630      	mov	r0, r6
 800e700:	f7fe face 	bl	800cca0 <_pal_lld_setgroupmode>
	sduObjectInit(&SDU1);
 800e704:	4628      	mov	r0, r5
 800e706:	f7fd f88b 	bl	800b820 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 800e70a:	490e      	ldr	r1, [pc, #56]	; (800e744 <_Z20comm_usb_serial_initv+0x64>)
 800e70c:	4628      	mov	r0, r5
 800e70e:	f7fd f8b7 	bl	800b880 <sduStart>
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 800e712:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e714:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e716:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e71a:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 800e71c:	f643 2098 	movw	r0, #15000	; 0x3a98
 800e720:	f7fc fb1e 	bl	800ad60 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 800e724:	4620      	mov	r0, r4
 800e726:	4908      	ldr	r1, [pc, #32]	; (800e748 <_Z20comm_usb_serial_initv+0x68>)
 800e728:	f7fd f9e2 	bl	800baf0 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 800e72c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e72e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e734:	6393      	str	r3, [r2, #56]	; 0x38
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	40020000 	.word	0x40020000
 800e73c:	20001768 	.word	0x20001768
 800e740:	20001470 	.word	0x20001470
 800e744:	08015e00 	.word	0x08015e00
 800e748:	08015d50 	.word	0x08015d50
 800e74c:	00000000 	.word	0x00000000

0800e750 <_Z25comm_usb_serial_is_activev>:
}

int comm_usb_serial_is_active(void) {
	return SDU1.config->usbp->state == USB_ACTIVE;
 800e750:	4b05      	ldr	r3, [pc, #20]	; (800e768 <_Z25comm_usb_serial_is_activev+0x18>)
 800e752:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	7818      	ldrb	r0, [r3, #0]
 800e75a:	f1a0 0004 	sub.w	r0, r0, #4
 800e75e:	fab0 f080 	clz	r0, r0
 800e762:	0940      	lsrs	r0, r0, #5
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	20001768 	.word	0x20001768
 800e76c:	00000000 	.word	0x00000000

0800e770 <_ZN7WS2812BC1Ev>:
#include "hal.h"
#include <math.h>
#include "ws2812b.h"
#include "stm32f4xx_conf.h"

WS2812B::WS2812B() {
 800e770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e772:	ed2d 8b02 	vpush	{d8}

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
 800e77c:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 800e780:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
 800e784:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
 800e788:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
#include "hal.h"
#include <math.h>
#include "ws2812b.h"
#include "stm32f4xx_conf.h"

WS2812B::WS2812B() {
 800e78c:	4606      	mov	r6, r0

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 800e78e:	461d      	mov	r5, r3
 800e790:	4619      	mov	r1, r3
 800e792:	f500 77aa 	add.w	r7, r0, #340	; 0x154
 800e796:	4603      	mov	r3, r0
#include "hal.h"
#include <math.h>
#include "ws2812b.h"
#include "stm32f4xx_conf.h"

WS2812B::WS2812B() {
 800e798:	b099      	sub	sp, #100	; 0x64

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 800e79a:	2421      	movs	r4, #33	; 0x21
	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = RGBToLocal(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 800e79c:	2042      	movs	r0, #66	; 0x42
uint32_t WS2812B::RGBToLocal(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 800e79e:	f3c1 4207 	ubfx	r2, r1, #16, #8
	g = gamma_table[g];
 800e7a2:	f3c1 2e07 	ubfx	lr, r1, #8, #8
uint32_t WS2812B::RGBToLocal(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 800e7a6:	4432      	add	r2, r6
	g = gamma_table[g];
 800e7a8:	44b6      	add	lr, r6
uint32_t WS2812B::RGBToLocal(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 800e7aa:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
	g = gamma_table[g];
 800e7ae:	f89e e168 	ldrb.w	lr, [lr, #360]	; 0x168
	b = gamma_table[b];
 800e7b2:	fa56 f181 	uxtab	r1, r6, r1

	return (g << 16) | (r << 8) | b;
 800e7b6:	0212      	lsls	r2, r2, #8
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
	g = gamma_table[g];
	b = gamma_table[b];
 800e7b8:	f891 1168 	ldrb.w	r1, [r1, #360]	; 0x168

	return (g << 16) | (r << 8) | b;
 800e7bc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800e7c0:	430a      	orrs	r2, r1
 800e7c2:	f103 0130 	add.w	r1, r3, #48	; 0x30

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = RGBToLocal(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
 800e7c6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 800e7ca:	bf14      	ite	ne
 800e7cc:	8018      	strhne	r0, [r3, #0]
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 800e7ce:	801c      	strheq	r4, [r3, #0]
 800e7d0:	3302      	adds	r3, #2
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = RGBToLocal(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 800e7d2:	428b      	cmp	r3, r1
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
			}
			tmp_color <<= 1;
 800e7d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = RGBToLocal(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 800e7d8:	d1f5      	bne.n	800e7c6 <_ZN7WS2812BC1Ev+0x56>
 800e7da:	3518      	adds	r5, #24

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
 800e7dc:	2d78      	cmp	r5, #120	; 0x78
 800e7de:	d002      	beq.n	800e7e6 <_ZN7WS2812BC1Ev+0x76>
 800e7e0:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800e7e4:	e7db      	b.n	800e79e <_ZN7WS2812BC1Ev+0x2e>
 800e7e6:	f106 03ec 	add.w	r3, r6, #236	; 0xec
 800e7ea:	f506 71a8 	add.w	r1, r6, #336	; 0x150
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f823 2f02 	strh.w	r2, [r3, #2]!
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 800e7f4:	4299      	cmp	r1, r3
 800e7f6:	d1fb      	bne.n	800e7f0 <_ZN7WS2812BC1Ev+0x80>
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 800e7f8:	ed9f 8a43 	vldr	s16, [pc, #268]	; 800e908 <_ZN7WS2812BC1Ev+0x198>
 800e7fc:	f206 1567 	addw	r5, r6, #359	; 0x167
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 800e800:	2400      	movs	r4, #0
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 800e802:	ee07 4a90 	vmov	s15, r4
 800e806:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e80a:	eddf 0a40 	vldr	s1, [pc, #256]	; 800e90c <_ZN7WS2812BC1Ev+0x19c>
 800e80e:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800e812:	f001 fa1d 	bl	800fc50 <powf>
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 800e816:	3401      	adds	r4, #1
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 800e818:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e81c:	f001 f9e8 	bl	800fbf0 <roundf>
 800e820:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 800e824:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 800e828:	ee17 3a90 	vmov	r3, s15
 800e82c:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 800e830:	d1e7      	bne.n	800e802 <_ZN7WS2812BC1Ev+0x92>
	}

	palSetPadMode(GPIOB, 8,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM4) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 800e832:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800e836:	4621      	mov	r1, r4
 800e838:	4835      	ldr	r0, [pc, #212]	; (800e910 <_ZN7WS2812BC1Ev+0x1a0>)

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;
 800e83a:	4f36      	ldr	r7, [pc, #216]	; (800e914 <_ZN7WS2812BC1Ev+0x1a4>)
	}

	palSetPadMode(GPIOB, 8,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM4) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 800e83c:	f7fe fa30 	bl	800cca0 <_pal_lld_setgroupmode>

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 800e840:	2101      	movs	r1, #1
 800e842:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e846:	f7ff fdc3 	bl	800e3d0 <RCC_AHB1PeriphClockCmd>

	DMA_DeInit(DMA1_Stream7);
 800e84a:	4833      	ldr	r0, [pc, #204]	; (800e918 <_ZN7WS2812BC1Ev+0x1a8>)
 800e84c:	f7ff fce8 	bl	800e220 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800e850:	2240      	movs	r2, #64	; 0x40
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 800e852:	23aa      	movs	r3, #170	; 0xaa
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800e854:	f44f 6180 	mov.w	r1, #1024	; 0x400
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 800e858:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800e85c:	2500      	movs	r5, #0
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800e85e:	9412      	str	r4, [sp, #72]	; 0x48

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;
 800e860:	970a      	str	r7, [sp, #40]	; 0x28

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800e862:	920c      	str	r2, [sp, #48]	; 0x30
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800e864:	f44f 6700 	mov.w	r7, #2048	; 0x800
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800e868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 800e86c:	930d      	str	r3, [sp, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800e86e:	910f      	str	r1, [sp, #60]	; 0x3c
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800e870:	2303      	movs	r3, #3
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 800e872:	a909      	add	r1, sp, #36	; 0x24
 800e874:	4828      	ldr	r0, [pc, #160]	; (800e918 <_ZN7WS2812BC1Ev+0x1a8>)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 800e876:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800e87a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800e87e:	9213      	str	r2, [sp, #76]	; 0x4c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800e880:	9315      	str	r3, [sp, #84]	; 0x54
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800e882:	9411      	str	r4, [sp, #68]	; 0x44

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
 800e884:	960b      	str	r6, [sp, #44]	; 0x2c
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800e886:	950e      	str	r5, [sp, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800e888:	9514      	str	r5, [sp, #80]	; 0x50
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800e88a:	9516      	str	r5, [sp, #88]	; 0x58
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800e88c:	9517      	str	r5, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800e88e:	9710      	str	r7, [sp, #64]	; 0x40
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 800e890:	f7ff fd5e 	bl	800e350 <DMA_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800e894:	2101      	movs	r1, #1
 800e896:	2004      	movs	r0, #4
 800e898:	f7ff fdaa 	bl	800e3f0 <RCC_APB1PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 800e89c:	2368      	movs	r3, #104	; 0x68
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800e89e:	a901      	add	r1, sp, #4
 800e8a0:	481e      	ldr	r0, [pc, #120]	; (800e91c <_ZN7WS2812BC1Ev+0x1ac>)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 800e8a2:	9302      	str	r3, [sp, #8]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800e8a4:	2401      	movs	r4, #1
	DMA_Init(DMA1_Stream7, &DMA_InitStructure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800e8a6:	f8ad 5004 	strh.w	r5, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800e8aa:	f8ad 5006 	strh.w	r5, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800e8ae:	f8ad 500c 	strh.w	r5, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 800e8b2:	f88d 500e 	strb.w	r5, [sp, #14]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800e8b6:	f7ff fdab 	bl	800e410 <TIM_TimeBaseInit>

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 800e8ba:	8833      	ldrh	r3, [r6, #0]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800e8bc:	4817      	ldr	r0, [pc, #92]	; (800e91c <_ZN7WS2812BC1Ev+0x1ac>)
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 800e8be:	9306      	str	r3, [sp, #24]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800e8c0:	2260      	movs	r2, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800e8c2:	a904      	add	r1, sp, #16
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800e8c4:	f8ad 2010 	strh.w	r2, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800e8c8:	f8ad 501c 	strh.w	r5, [sp, #28]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800e8cc:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800e8d0:	f7ff fdfe 	bl	800e4d0 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800e8d4:	2108      	movs	r1, #8
 800e8d6:	4811      	ldr	r0, [pc, #68]	; (800e91c <_ZN7WS2812BC1Ev+0x1ac>)
 800e8d8:	f7ff fe42 	bl	800e560 <TIM_OC3PreloadConfig>

	// TIM4 counter enable
	TIM_Cmd(TIM4, ENABLE);
 800e8dc:	4621      	mov	r1, r4
 800e8de:	480f      	ldr	r0, [pc, #60]	; (800e91c <_ZN7WS2812BC1Ev+0x1ac>)
 800e8e0:	f7ff fde6 	bl	800e4b0 <TIM_Cmd>

	DMA_Cmd(DMA1_Stream7, ENABLE);
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	480c      	ldr	r0, [pc, #48]	; (800e918 <_ZN7WS2812BC1Ev+0x1a8>)
 800e8e8:	f7ff fd62 	bl	800e3b0 <DMA_Cmd>

	// TIM4 Update DMA Request enable
	TIM_DMACmd(TIM4, TIM_DMA_CC3, ENABLE);
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	4639      	mov	r1, r7
 800e8f0:	480a      	ldr	r0, [pc, #40]	; (800e91c <_ZN7WS2812BC1Ev+0x1ac>)
 800e8f2:	f7ff fe4d 	bl	800e590 <TIM_DMACmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM4, ENABLE);
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	4808      	ldr	r0, [pc, #32]	; (800e91c <_ZN7WS2812BC1Ev+0x1ac>)
 800e8fa:	f7ff fe39 	bl	800e570 <TIM_CtrlPWMOutputs>
}
 800e8fe:	4630      	mov	r0, r6
 800e900:	b019      	add	sp, #100	; 0x64
 800e902:	ecbd 8b02 	vpop	{d8}
 800e906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e908:	437f0000 	.word	0x437f0000
 800e90c:	400e38e4 	.word	0x400e38e4
 800e910:	40020400 	.word	0x40020400
 800e914:	4000083c 	.word	0x4000083c
 800e918:	400260b8 	.word	0x400260b8
 800e91c:	40000800 	.word	0x40000800

0800e920 <_Znwj>:
 800e920:	b510      	push	{r4, lr}
 800e922:	2800      	cmp	r0, #0
 800e924:	bf14      	ite	ne
 800e926:	4604      	movne	r4, r0
 800e928:	2401      	moveq	r4, #1
 800e92a:	4620      	mov	r0, r4
 800e92c:	f002 fa10 	bl	8010d50 <malloc>
 800e930:	b100      	cbz	r0, 800e934 <_Znwj+0x14>
 800e932:	bd10      	pop	{r4, pc}
 800e934:	f000 fa0c 	bl	800ed50 <_ZSt15get_new_handlerv>
 800e938:	b108      	cbz	r0, 800e93e <_Znwj+0x1e>
 800e93a:	4780      	blx	r0
 800e93c:	e7f5      	b.n	800e92a <_Znwj+0xa>
 800e93e:	2004      	movs	r0, #4
 800e940:	f000 f8b6 	bl	800eab0 <__cxa_allocate_exception>
 800e944:	4b02      	ldr	r3, [pc, #8]	; (800e950 <_Znwj+0x30>)
 800e946:	6003      	str	r3, [r0, #0]
 800e948:	4a02      	ldr	r2, [pc, #8]	; (800e954 <_Znwj+0x34>)
 800e94a:	4903      	ldr	r1, [pc, #12]	; (800e958 <_Znwj+0x38>)
 800e94c:	f000 f988 	bl	800ec60 <__cxa_throw>
 800e950:	08015ee8 	.word	0x08015ee8
 800e954:	0800e971 	.word	0x0800e971
 800e958:	08015f00 	.word	0x08015f00
 800e95c:	00000000 	.word	0x00000000

0800e960 <_ZNKSt9bad_alloc4whatEv>:
 800e960:	4800      	ldr	r0, [pc, #0]	; (800e964 <_ZNKSt9bad_alloc4whatEv+0x4>)
 800e962:	4770      	bx	lr
 800e964:	08015f10 	.word	0x08015f10
	...

0800e970 <_ZNSt9bad_allocD1Ev>:
 800e970:	b510      	push	{r4, lr}
 800e972:	4b03      	ldr	r3, [pc, #12]	; (800e980 <_ZNSt9bad_allocD1Ev+0x10>)
 800e974:	6003      	str	r3, [r0, #0]
 800e976:	4604      	mov	r4, r0
 800e978:	f000 f8da 	bl	800eb30 <_ZNSt9exceptionD1Ev>
 800e97c:	4620      	mov	r0, r4
 800e97e:	bd10      	pop	{r4, pc}
 800e980:	08015ee8 	.word	0x08015ee8
	...

0800e990 <_ZNSt9bad_allocD0Ev>:
 800e990:	b510      	push	{r4, lr}
 800e992:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <_ZNSt9bad_allocD0Ev+0x18>)
 800e994:	6003      	str	r3, [r0, #0]
 800e996:	4604      	mov	r4, r0
 800e998:	f000 f8ca 	bl	800eb30 <_ZNSt9exceptionD1Ev>
 800e99c:	4620      	mov	r0, r4
 800e99e:	f000 f807 	bl	800e9b0 <_ZdlPv>
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	bf00      	nop
 800e9a8:	08015ee8 	.word	0x08015ee8
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <_ZdlPv>:
 800e9b0:	f002 b9d6 	b.w	8010d60 <free>
	...

0800e9c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 800e9c0:	b4f0      	push	{r4, r5, r6, r7}
 800e9c2:	4c1b      	ldr	r4, [pc, #108]	; (800ea30 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
 800e9c4:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800e9c8:	6861      	ldr	r1, [r4, #4]
 800e9ca:	f1a0 0608 	sub.w	r6, r0, #8
 800e9ce:	b1c9      	cbz	r1, 800ea04 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800e9d0:	19f5      	adds	r5, r6, r7
 800e9d2:	42a9      	cmp	r1, r5
 800e9d4:	d01b      	beq.n	800ea0e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 800e9d6:	684a      	ldr	r2, [r1, #4]
 800e9d8:	b32a      	cbz	r2, 800ea26 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 800e9da:	4295      	cmp	r5, r2
 800e9dc:	d303      	bcc.n	800e9e6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
 800e9de:	e022      	b.n	800ea26 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 800e9e0:	429d      	cmp	r5, r3
 800e9e2:	d205      	bcs.n	800e9f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	6853      	ldr	r3, [r2, #4]
 800e9e8:	1d0c      	adds	r4, r1, #4
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1f7      	bne.n	800e9e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 800e9f0:	6811      	ldr	r1, [r2, #0]
 800e9f2:	1855      	adds	r5, r2, r1
 800e9f4:	42ae      	cmp	r6, r5
 800e9f6:	d013      	beq.n	800ea20 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 800e9f8:	f840 3c04 	str.w	r3, [r0, #-4]
 800e9fc:	6823      	ldr	r3, [r4, #0]
 800e9fe:	605e      	str	r6, [r3, #4]
 800ea00:	bcf0      	pop	{r4, r5, r6, r7}
 800ea02:	4770      	bx	lr
 800ea04:	f840 1c04 	str.w	r1, [r0, #-4]
 800ea08:	6066      	str	r6, [r4, #4]
 800ea0a:	bcf0      	pop	{r4, r5, r6, r7}
 800ea0c:	4770      	bx	lr
 800ea0e:	680b      	ldr	r3, [r1, #0]
 800ea10:	684a      	ldr	r2, [r1, #4]
 800ea12:	f840 2c04 	str.w	r2, [r0, #-4]
 800ea16:	441f      	add	r7, r3
 800ea18:	f840 7c08 	str.w	r7, [r0, #-8]
 800ea1c:	6066      	str	r6, [r4, #4]
 800ea1e:	e7ef      	b.n	800ea00 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800ea20:	4439      	add	r1, r7
 800ea22:	6011      	str	r1, [r2, #0]
 800ea24:	e7ec      	b.n	800ea00 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800ea26:	4613      	mov	r3, r2
 800ea28:	3404      	adds	r4, #4
 800ea2a:	460a      	mov	r2, r1
 800ea2c:	e7e0      	b.n	800e9f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800ea2e:	bf00      	nop
 800ea30:	20001c10 	.word	0x20001c10
	...

0800ea40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 800ea40:	b430      	push	{r4, r5}
 800ea42:	4c17      	ldr	r4, [pc, #92]	; (800eaa0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 800ea44:	f100 0308 	add.w	r3, r0, #8
 800ea48:	2b07      	cmp	r3, #7
 800ea4a:	6863      	ldr	r3, [r4, #4]
 800ea4c:	bf86      	itte	hi
 800ea4e:	f100 010f 	addhi.w	r1, r0, #15
 800ea52:	f021 0107 	bichi.w	r1, r1, #7
 800ea56:	2108      	movls	r1, #8
 800ea58:	b1eb      	cbz	r3, 800ea96 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x56>
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	4291      	cmp	r1, r2
 800ea5e:	d804      	bhi.n	800ea6a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2a>
 800ea60:	e01b      	b.n	800ea9a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5a>
 800ea62:	6802      	ldr	r2, [r0, #0]
 800ea64:	428a      	cmp	r2, r1
 800ea66:	d205      	bcs.n	800ea74 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	6858      	ldr	r0, [r3, #4]
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d1f8      	bne.n	800ea62 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x22>
 800ea70:	bc30      	pop	{r4, r5}
 800ea72:	4770      	bx	lr
 800ea74:	3304      	adds	r3, #4
 800ea76:	1a52      	subs	r2, r2, r1
 800ea78:	2a07      	cmp	r2, #7
 800ea7a:	d909      	bls.n	800ea90 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 800ea7c:	1844      	adds	r4, r0, r1
 800ea7e:	6845      	ldr	r5, [r0, #4]
 800ea80:	6065      	str	r5, [r4, #4]
 800ea82:	5042      	str	r2, [r0, r1]
 800ea84:	6818      	ldr	r0, [r3, #0]
 800ea86:	6001      	str	r1, [r0, #0]
 800ea88:	601c      	str	r4, [r3, #0]
 800ea8a:	3008      	adds	r0, #8
 800ea8c:	bc30      	pop	{r4, r5}
 800ea8e:	4770      	bx	lr
 800ea90:	6842      	ldr	r2, [r0, #4]
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	e7f9      	b.n	800ea8a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4a>
 800ea96:	4618      	mov	r0, r3
 800ea98:	e7ea      	b.n	800ea70 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x30>
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	1d23      	adds	r3, r4, #4
 800ea9e:	e7ea      	b.n	800ea76 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x36>
 800eaa0:	20001c10 	.word	0x20001c10
	...

0800eab0 <__cxa_allocate_exception>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	f100 0580 	add.w	r5, r0, #128	; 0x80
 800eab6:	4628      	mov	r0, r5
 800eab8:	f002 f94a 	bl	8010d50 <malloc>
 800eabc:	4604      	mov	r4, r0
 800eabe:	b138      	cbz	r0, 800ead0 <__cxa_allocate_exception+0x20>
 800eac0:	2280      	movs	r2, #128	; 0x80
 800eac2:	2100      	movs	r1, #0
 800eac4:	4620      	mov	r0, r4
 800eac6:	f002 fcab 	bl	8011420 <memset>
 800eaca:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	4628      	mov	r0, r5
 800ead2:	f7ff ffb5 	bl	800ea40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 800ead6:	4604      	mov	r4, r0
 800ead8:	2800      	cmp	r0, #0
 800eada:	d1f1      	bne.n	800eac0 <__cxa_allocate_exception+0x10>
 800eadc:	f000 f860 	bl	800eba0 <_ZSt9terminatev>

0800eae0 <__cxa_free_exception>:
 800eae0:	4a06      	ldr	r2, [pc, #24]	; (800eafc <__cxa_free_exception+0x1c>)
 800eae2:	6893      	ldr	r3, [r2, #8]
 800eae4:	3880      	subs	r0, #128	; 0x80
 800eae6:	4298      	cmp	r0, r3
 800eae8:	d905      	bls.n	800eaf6 <__cxa_free_exception+0x16>
 800eaea:	68d2      	ldr	r2, [r2, #12]
 800eaec:	4413      	add	r3, r2
 800eaee:	4298      	cmp	r0, r3
 800eaf0:	d201      	bcs.n	800eaf6 <__cxa_free_exception+0x16>
 800eaf2:	f7ff bf65 	b.w	800e9c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 800eaf6:	f002 b933 	b.w	8010d60 <free>
 800eafa:	bf00      	nop
 800eafc:	20001c10 	.word	0x20001c10

0800eb00 <_GLOBAL__sub_I___cxa_allocate_exception>:
 800eb00:	b538      	push	{r3, r4, r5, lr}
 800eb02:	4c08      	ldr	r4, [pc, #32]	; (800eb24 <_GLOBAL__sub_I___cxa_allocate_exception+0x24>)
 800eb04:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800eb08:	4628      	mov	r0, r5
 800eb0a:	60e5      	str	r5, [r4, #12]
 800eb0c:	f002 f920 	bl	8010d50 <malloc>
 800eb10:	60a0      	str	r0, [r4, #8]
 800eb12:	b120      	cbz	r0, 800eb1e <_GLOBAL__sub_I___cxa_allocate_exception+0x1e>
 800eb14:	2300      	movs	r3, #0
 800eb16:	6060      	str	r0, [r4, #4]
 800eb18:	6005      	str	r5, [r0, #0]
 800eb1a:	6043      	str	r3, [r0, #4]
 800eb1c:	bd38      	pop	{r3, r4, r5, pc}
 800eb1e:	60e0      	str	r0, [r4, #12]
 800eb20:	6060      	str	r0, [r4, #4]
 800eb22:	bd38      	pop	{r3, r4, r5, pc}
 800eb24:	20001c10 	.word	0x20001c10
	...

0800eb30 <_ZNSt9exceptionD1Ev>:
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
	...

0800eb40 <_ZNSt13bad_exceptionD1Ev>:
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop
	...

0800eb50 <_ZNKSt13bad_exception4whatEv>:
 800eb50:	4800      	ldr	r0, [pc, #0]	; (800eb54 <_ZNKSt13bad_exception4whatEv+0x4>)
 800eb52:	4770      	bx	lr
 800eb54:	08015fb0 	.word	0x08015fb0
	...

0800eb60 <_ZNSt13bad_exceptionD0Ev>:
 800eb60:	b510      	push	{r4, lr}
 800eb62:	4604      	mov	r4, r0
 800eb64:	f7ff ff24 	bl	800e9b0 <_ZdlPv>
 800eb68:	4620      	mov	r0, r4
 800eb6a:	bd10      	pop	{r4, pc}
 800eb6c:	0000      	movs	r0, r0
	...

0800eb70 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eb70:	b508      	push	{r3, lr}
 800eb72:	4780      	blx	r0
 800eb74:	f001 fecc 	bl	8010910 <abort>
 800eb78:	f000 fbc2 	bl	800f300 <__cxa_begin_catch>
 800eb7c:	f001 fec8 	bl	8010910 <abort>
 800eb80:	460d      	mov	r5, r1
 800eb82:	4604      	mov	r4, r0
 800eb84:	f000 fc04 	bl	800f390 <__cxa_end_catch>
 800eb88:	3501      	adds	r5, #1
 800eb8a:	d001      	beq.n	800eb90 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 800eb8c:	f000 fa40 	bl	800f010 <__cxa_end_cleanup>
 800eb90:	4620      	mov	r0, r4
 800eb92:	f000 fb3d 	bl	800f210 <__cxa_call_unexpected>
 800eb96:	bf00      	nop
	...

0800eba0 <_ZSt9terminatev>:
 800eba0:	b508      	push	{r3, lr}
 800eba2:	4b03      	ldr	r3, [pc, #12]	; (800ebb0 <_ZSt9terminatev+0x10>)
 800eba4:	6818      	ldr	r0, [r3, #0]
 800eba6:	f3bf 8f5f 	dmb	sy
 800ebaa:	f7ff ffe1 	bl	800eb70 <_ZN10__cxxabiv111__terminateEPFvvE>
 800ebae:	bf00      	nop
 800ebb0:	2000080c 	.word	0x2000080c
	...

0800ebc0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800ebc0:	b508      	push	{r3, lr}
 800ebc2:	4780      	blx	r0
 800ebc4:	f7ff ffec 	bl	800eba0 <_ZSt9terminatev>
	...

0800ebd0 <_ZSt10unexpectedv>:
 800ebd0:	b508      	push	{r3, lr}
 800ebd2:	4b03      	ldr	r3, [pc, #12]	; (800ebe0 <_ZSt10unexpectedv+0x10>)
 800ebd4:	6818      	ldr	r0, [r3, #0]
 800ebd6:	f3bf 8f5f 	dmb	sy
 800ebda:	f7ff fff1 	bl	800ebc0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800ebde:	bf00      	nop
 800ebe0:	20000808 	.word	0x20000808
	...

0800ebf0 <_ZSt13get_terminatev>:
 800ebf0:	4b02      	ldr	r3, [pc, #8]	; (800ebfc <_ZSt13get_terminatev+0xc>)
 800ebf2:	6818      	ldr	r0, [r3, #0]
 800ebf4:	f3bf 8f5f 	dmb	sy
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	2000080c 	.word	0x2000080c

0800ec00 <_ZSt14get_unexpectedv>:
 800ec00:	4b02      	ldr	r3, [pc, #8]	; (800ec0c <_ZSt14get_unexpectedv+0xc>)
 800ec02:	6818      	ldr	r0, [r3, #0]
 800ec04:	f3bf 8f5f 	dmb	sy
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	20000808 	.word	0x20000808

0800ec10 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800ec10:	2801      	cmp	r0, #1
 800ec12:	b510      	push	{r4, lr}
 800ec14:	d81a      	bhi.n	800ec4c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 800ec16:	f3bf 8f5f 	dmb	sy
 800ec1a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800ec1e:	e853 2f00 	ldrex	r2, [r3]
 800ec22:	3a01      	subs	r2, #1
 800ec24:	e843 2000 	strex	r0, r2, [r3]
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d1f8      	bne.n	800ec1e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800ec2c:	f3bf 8f5f 	dmb	sy
 800ec30:	b95a      	cbnz	r2, 800ec4a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800ec32:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800ec36:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800ec3a:	b10b      	cbz	r3, 800ec40 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	4798      	blx	r3
 800ec40:	4620      	mov	r0, r4
 800ec42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec46:	f7ff bf4b 	b.w	800eae0 <__cxa_free_exception>
 800ec4a:	bd10      	pop	{r4, pc}
 800ec4c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800ec50:	f7ff ff8e 	bl	800eb70 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800ec60 <__cxa_throw>:
 800ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec62:	4604      	mov	r4, r0
 800ec64:	460f      	mov	r7, r1
 800ec66:	4616      	mov	r6, r2
 800ec68:	f000 fbe2 	bl	800f430 <__cxa_get_globals>
 800ec6c:	6843      	ldr	r3, [r0, #4]
 800ec6e:	2501      	movs	r5, #1
 800ec70:	442b      	add	r3, r5
 800ec72:	6043      	str	r3, [r0, #4]
 800ec74:	f844 7c78 	str.w	r7, [r4, #-120]
 800ec78:	f844 6c74 	str.w	r6, [r4, #-116]
 800ec7c:	f844 5c80 	str.w	r5, [r4, #-128]
 800ec80:	f7ff ffbe 	bl	800ec00 <_ZSt14get_unexpectedv>
 800ec84:	f844 0c70 	str.w	r0, [r4, #-112]
 800ec88:	f7ff ffb2 	bl	800ebf0 <_ZSt13get_terminatev>
 800ec8c:	2347      	movs	r3, #71	; 0x47
 800ec8e:	2243      	movs	r2, #67	; 0x43
 800ec90:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 800ec94:	4910      	ldr	r1, [pc, #64]	; (800ecd8 <__cxa_throw+0x78>)
 800ec96:	f804 3c58 	strb.w	r3, [r4, #-88]
 800ec9a:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 800ec9e:	232b      	movs	r3, #43	; 0x2b
 800eca0:	2755      	movs	r7, #85	; 0x55
 800eca2:	2600      	movs	r6, #0
 800eca4:	f844 0c6c 	str.w	r0, [r4, #-108]
 800eca8:	f804 ec57 	strb.w	lr, [r4, #-87]
 800ecac:	f844 1c50 	str.w	r1, [r4, #-80]
 800ecb0:	f804 2c55 	strb.w	r2, [r4, #-85]
 800ecb4:	f804 2c54 	strb.w	r2, [r4, #-84]
 800ecb8:	f804 3c53 	strb.w	r3, [r4, #-83]
 800ecbc:	f804 3c52 	strb.w	r3, [r4, #-82]
 800ecc0:	f804 7c56 	strb.w	r7, [r4, #-86]
 800ecc4:	f804 6c51 	strb.w	r6, [r4, #-81]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	f7fa febd 	bl	8009a48 <_Unwind_RaiseException>
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f000 fb16 	bl	800f300 <__cxa_begin_catch>
 800ecd4:	f7ff ff64 	bl	800eba0 <_ZSt9terminatev>
 800ecd8:	0800ec11 	.word	0x0800ec11
 800ecdc:	00000000 	.word	0x00000000

0800ece0 <__cxa_rethrow>:
 800ece0:	b510      	push	{r4, lr}
 800ece2:	f000 fba5 	bl	800f430 <__cxa_get_globals>
 800ece6:	6842      	ldr	r2, [r0, #4]
 800ece8:	6803      	ldr	r3, [r0, #0]
 800ecea:	3201      	adds	r2, #1
 800ecec:	6042      	str	r2, [r0, #4]
 800ecee:	b16b      	cbz	r3, 800ed0c <__cxa_rethrow+0x2c>
 800ecf0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ecf4:	2a47      	cmp	r2, #71	; 0x47
 800ecf6:	d00b      	beq.n	800ed10 <__cxa_rethrow+0x30>
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	6002      	str	r2, [r0, #0]
 800ecfc:	f103 0420 	add.w	r4, r3, #32
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7fa fec5 	bl	8009a90 <_Unwind_Resume_or_Rethrow>
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 fafa 	bl	800f300 <__cxa_begin_catch>
 800ed0c:	f7ff ff48 	bl	800eba0 <_ZSt9terminatev>
 800ed10:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ed14:	2a4e      	cmp	r2, #78	; 0x4e
 800ed16:	d1ef      	bne.n	800ecf8 <__cxa_rethrow+0x18>
 800ed18:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800ed1c:	2a55      	cmp	r2, #85	; 0x55
 800ed1e:	d1eb      	bne.n	800ecf8 <__cxa_rethrow+0x18>
 800ed20:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800ed24:	2a43      	cmp	r2, #67	; 0x43
 800ed26:	d1e7      	bne.n	800ecf8 <__cxa_rethrow+0x18>
 800ed28:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800ed2c:	2a43      	cmp	r2, #67	; 0x43
 800ed2e:	d1e3      	bne.n	800ecf8 <__cxa_rethrow+0x18>
 800ed30:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800ed34:	2a2b      	cmp	r2, #43	; 0x2b
 800ed36:	d1df      	bne.n	800ecf8 <__cxa_rethrow+0x18>
 800ed38:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800ed3c:	2a2b      	cmp	r2, #43	; 0x2b
 800ed3e:	d1db      	bne.n	800ecf8 <__cxa_rethrow+0x18>
 800ed40:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800ed44:	2a01      	cmp	r2, #1
 800ed46:	d8d7      	bhi.n	800ecf8 <__cxa_rethrow+0x18>
 800ed48:	695a      	ldr	r2, [r3, #20]
 800ed4a:	4252      	negs	r2, r2
 800ed4c:	615a      	str	r2, [r3, #20]
 800ed4e:	e7d5      	b.n	800ecfc <__cxa_rethrow+0x1c>

0800ed50 <_ZSt15get_new_handlerv>:
 800ed50:	4b02      	ldr	r3, [pc, #8]	; (800ed5c <_ZSt15get_new_handlerv+0xc>)
 800ed52:	6818      	ldr	r0, [r3, #0]
 800ed54:	f3bf 8f5f 	dmb	sy
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	20001c20 	.word	0x20001c20

0800ed60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800ed60:	b510      	push	{r4, lr}
 800ed62:	4b03      	ldr	r3, [pc, #12]	; (800ed70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800ed64:	6003      	str	r3, [r0, #0]
 800ed66:	4604      	mov	r4, r0
 800ed68:	f000 f8ea 	bl	800ef40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	bd10      	pop	{r4, pc}
 800ed70:	08016048 	.word	0x08016048
	...

0800ed80 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	4b05      	ldr	r3, [pc, #20]	; (800ed98 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800ed84:	6003      	str	r3, [r0, #0]
 800ed86:	4604      	mov	r4, r0
 800ed88:	f000 f8da 	bl	800ef40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f7ff fe0f 	bl	800e9b0 <_ZdlPv>
 800ed92:	4620      	mov	r0, r4
 800ed94:	bd10      	pop	{r4, pc}
 800ed96:	bf00      	nop
 800ed98:	08016048 	.word	0x08016048
 800ed9c:	00000000 	.word	0x00000000

0800eda0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	b081      	sub	sp, #4
 800eda6:	460e      	mov	r6, r1
 800eda8:	4619      	mov	r1, r3
 800edaa:	461f      	mov	r7, r3
 800edac:	4691      	mov	r9, r2
 800edae:	4683      	mov	fp, r0
 800edb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800edb2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800edb6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800edba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800edbc:	f000 f880 	bl	800eec0 <_ZNKSt9type_infoeqERKS_>
 800edc0:	b170      	cbz	r0, 800ede0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800edc2:	2e00      	cmp	r6, #0
 800edc4:	602c      	str	r4, [r5, #0]
 800edc6:	f885 9004 	strb.w	r9, [r5, #4]
 800edca:	db1f      	blt.n	800ee0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 800edcc:	4434      	add	r4, r6
 800edce:	45a0      	cmp	r8, r4
 800edd0:	bf0c      	ite	eq
 800edd2:	2406      	moveq	r4, #6
 800edd4:	2401      	movne	r4, #1
 800edd6:	71ac      	strb	r4, [r5, #6]
 800edd8:	2000      	movs	r0, #0
 800edda:	b001      	add	sp, #4
 800eddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede0:	4544      	cmp	r4, r8
 800ede2:	d018      	beq.n	800ee16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 800ede4:	f8db 0008 	ldr.w	r0, [fp, #8]
 800ede8:	f8d0 e000 	ldr.w	lr, [r0]
 800edec:	950d      	str	r5, [sp, #52]	; 0x34
 800edee:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800edf2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800edf6:	940a      	str	r4, [sp, #40]	; 0x28
 800edf8:	f8de 401c 	ldr.w	r4, [lr, #28]
 800edfc:	463b      	mov	r3, r7
 800edfe:	464a      	mov	r2, r9
 800ee00:	4631      	mov	r1, r6
 800ee02:	46a4      	mov	ip, r4
 800ee04:	b001      	add	sp, #4
 800ee06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0a:	4760      	bx	ip
 800ee0c:	3602      	adds	r6, #2
 800ee0e:	d1e3      	bne.n	800edd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800ee10:	2301      	movs	r3, #1
 800ee12:	71ab      	strb	r3, [r5, #6]
 800ee14:	e7e0      	b.n	800edd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800ee16:	4651      	mov	r1, sl
 800ee18:	4658      	mov	r0, fp
 800ee1a:	f000 f851 	bl	800eec0 <_ZNKSt9type_infoeqERKS_>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d0e0      	beq.n	800ede4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 800ee22:	2000      	movs	r0, #0
 800ee24:	f885 9005 	strb.w	r9, [r5, #5]
 800ee28:	b001      	add	sp, #4
 800ee2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee2e:	bf00      	nop

0800ee30 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	460d      	mov	r5, r1
 800ee36:	9c06      	ldr	r4, [sp, #24]
 800ee38:	4294      	cmp	r4, r2
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	d009      	beq.n	800ee52 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800ee3e:	68b0      	ldr	r0, [r6, #8]
 800ee40:	6806      	ldr	r6, [r0, #0]
 800ee42:	9406      	str	r4, [sp, #24]
 800ee44:	6a34      	ldr	r4, [r6, #32]
 800ee46:	4629      	mov	r1, r5
 800ee48:	46a4      	mov	ip, r4
 800ee4a:	b002      	add	sp, #8
 800ee4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee50:	4760      	bx	ip
 800ee52:	4619      	mov	r1, r3
 800ee54:	9201      	str	r2, [sp, #4]
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	f000 f832 	bl	800eec0 <_ZNKSt9type_infoeqERKS_>
 800ee5c:	9b00      	ldr	r3, [sp, #0]
 800ee5e:	9a01      	ldr	r2, [sp, #4]
 800ee60:	2800      	cmp	r0, #0
 800ee62:	d0ec      	beq.n	800ee3e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800ee64:	2006      	movs	r0, #6
 800ee66:	b002      	add	sp, #8
 800ee68:	bd70      	pop	{r4, r5, r6, pc}
 800ee6a:	bf00      	nop
 800ee6c:	0000      	movs	r0, r0
	...

0800ee70 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800ee70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee74:	4607      	mov	r7, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	4615      	mov	r5, r2
 800ee7a:	461e      	mov	r6, r3
 800ee7c:	f000 f880 	bl	800ef80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800ee80:	b108      	cbz	r0, 800ee86 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800ee82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee86:	68b8      	ldr	r0, [r7, #8]
 800ee88:	6807      	ldr	r7, [r0, #0]
 800ee8a:	4621      	mov	r1, r4
 800ee8c:	69bc      	ldr	r4, [r7, #24]
 800ee8e:	4633      	mov	r3, r6
 800ee90:	462a      	mov	r2, r5
 800ee92:	46a4      	mov	ip, r4
 800ee94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee98:	4760      	bx	ip
 800ee9a:	bf00      	nop
 800ee9c:	0000      	movs	r0, r0
	...

0800eea0 <_ZNSt9type_infoD1Ev>:
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
	...

0800eeb0 <_ZNKSt9type_info14__is_pointer_pEv>:
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	4770      	bx	lr
	...

0800eec0 <_ZNKSt9type_infoeqERKS_>:
 800eec0:	4281      	cmp	r1, r0
 800eec2:	d011      	beq.n	800eee8 <_ZNKSt9type_infoeqERKS_+0x28>
 800eec4:	b508      	push	{r3, lr}
 800eec6:	6840      	ldr	r0, [r0, #4]
 800eec8:	7803      	ldrb	r3, [r0, #0]
 800eeca:	2b2a      	cmp	r3, #42	; 0x2a
 800eecc:	d00a      	beq.n	800eee4 <_ZNKSt9type_infoeqERKS_+0x24>
 800eece:	6849      	ldr	r1, [r1, #4]
 800eed0:	780b      	ldrb	r3, [r1, #0]
 800eed2:	2b2a      	cmp	r3, #42	; 0x2a
 800eed4:	bf08      	it	eq
 800eed6:	3101      	addeq	r1, #1
 800eed8:	f7fb f8b6 	bl	800a048 <strcmp>
 800eedc:	fab0 f080 	clz	r0, r0
 800eee0:	0940      	lsrs	r0, r0, #5
 800eee2:	bd08      	pop	{r3, pc}
 800eee4:	2000      	movs	r0, #0
 800eee6:	bd08      	pop	{r3, pc}
 800eee8:	2001      	movs	r0, #1
 800eeea:	4770      	bx	lr
 800eeec:	0000      	movs	r0, r0
	...

0800eef0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	6803      	ldr	r3, [r0, #0]
 800eef4:	b084      	sub	sp, #16
 800eef6:	2400      	movs	r4, #0
 800eef8:	699e      	ldr	r6, [r3, #24]
 800eefa:	9400      	str	r4, [sp, #0]
 800eefc:	2310      	movs	r3, #16
 800eefe:	4615      	mov	r5, r2
 800ef00:	9302      	str	r3, [sp, #8]
 800ef02:	6812      	ldr	r2, [r2, #0]
 800ef04:	f88d 4004 	strb.w	r4, [sp, #4]
 800ef08:	466b      	mov	r3, sp
 800ef0a:	9403      	str	r4, [sp, #12]
 800ef0c:	47b0      	blx	r6
 800ef0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef12:	f003 0306 	and.w	r3, r3, #6
 800ef16:	2b06      	cmp	r3, #6
 800ef18:	bf03      	ittte	eq
 800ef1a:	9b00      	ldreq	r3, [sp, #0]
 800ef1c:	602b      	streq	r3, [r5, #0]
 800ef1e:	2001      	moveq	r0, #1
 800ef20:	4620      	movne	r0, r4
 800ef22:	b004      	add	sp, #16
 800ef24:	bd70      	pop	{r4, r5, r6, pc}
 800ef26:	bf00      	nop
	...

0800ef30 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800ef30:	9800      	ldr	r0, [sp, #0]
 800ef32:	4290      	cmp	r0, r2
 800ef34:	bf0c      	ite	eq
 800ef36:	2006      	moveq	r0, #6
 800ef38:	2001      	movne	r0, #1
 800ef3a:	4770      	bx	lr
 800ef3c:	0000      	movs	r0, r0
	...

0800ef40 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800ef40:	b510      	push	{r4, lr}
 800ef42:	4b03      	ldr	r3, [pc, #12]	; (800ef50 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800ef44:	6003      	str	r3, [r0, #0]
 800ef46:	4604      	mov	r4, r0
 800ef48:	f7ff ffaa 	bl	800eea0 <_ZNSt9type_infoD1Ev>
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	bd10      	pop	{r4, pc}
 800ef50:	080160d8 	.word	0x080160d8
	...

0800ef60 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800ef60:	b510      	push	{r4, lr}
 800ef62:	4b05      	ldr	r3, [pc, #20]	; (800ef78 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800ef64:	6003      	str	r3, [r0, #0]
 800ef66:	4604      	mov	r4, r0
 800ef68:	f7ff ff9a 	bl	800eea0 <_ZNSt9type_infoD1Ev>
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f7ff fd1f 	bl	800e9b0 <_ZdlPv>
 800ef72:	4620      	mov	r0, r4
 800ef74:	bd10      	pop	{r4, pc}
 800ef76:	bf00      	nop
 800ef78:	080160d8 	.word	0x080160d8
 800ef7c:	00000000 	.word	0x00000000

0800ef80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	4615      	mov	r5, r2
 800ef84:	461c      	mov	r4, r3
 800ef86:	f7ff ff9b 	bl	800eec0 <_ZNKSt9type_infoeqERKS_>
 800ef8a:	b120      	cbz	r0, 800ef96 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800ef8c:	2208      	movs	r2, #8
 800ef8e:	2306      	movs	r3, #6
 800ef90:	6025      	str	r5, [r4, #0]
 800ef92:	60e2      	str	r2, [r4, #12]
 800ef94:	7123      	strb	r3, [r4, #4]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
	...

0800efa0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800efa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efa2:	b083      	sub	sp, #12
 800efa4:	4617      	mov	r7, r2
 800efa6:	9d08      	ldr	r5, [sp, #32]
 800efa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800efaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800efac:	428d      	cmp	r5, r1
 800efae:	4606      	mov	r6, r0
 800efb0:	d00b      	beq.n	800efca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800efb2:	4619      	mov	r1, r3
 800efb4:	4630      	mov	r0, r6
 800efb6:	f7ff ff83 	bl	800eec0 <_ZNKSt9type_infoeqERKS_>
 800efba:	b118      	cbz	r0, 800efc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800efbc:	2301      	movs	r3, #1
 800efbe:	6025      	str	r5, [r4, #0]
 800efc0:	7127      	strb	r7, [r4, #4]
 800efc2:	71a3      	strb	r3, [r4, #6]
 800efc4:	2000      	movs	r0, #0
 800efc6:	b003      	add	sp, #12
 800efc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efcc:	9301      	str	r3, [sp, #4]
 800efce:	f7ff ff77 	bl	800eec0 <_ZNKSt9type_infoeqERKS_>
 800efd2:	b118      	cbz	r0, 800efdc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800efd4:	2000      	movs	r0, #0
 800efd6:	7167      	strb	r7, [r4, #5]
 800efd8:	b003      	add	sp, #12
 800efda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efdc:	9b01      	ldr	r3, [sp, #4]
 800efde:	e7e8      	b.n	800efb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0800efe0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800efe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe4:	4617      	mov	r7, r2
 800efe6:	461c      	mov	r4, r3
 800efe8:	4606      	mov	r6, r0
 800efea:	460d      	mov	r5, r1
 800efec:	f7ff ff68 	bl	800eec0 <_ZNKSt9type_infoeqERKS_>
 800eff0:	b908      	cbnz	r0, 800eff6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800eff2:	2c03      	cmp	r4, #3
 800eff4:	d901      	bls.n	800effa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800eff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effa:	682b      	ldr	r3, [r5, #0]
 800effc:	463a      	mov	r2, r7
 800effe:	4631      	mov	r1, r6
 800f000:	4628      	mov	r0, r5
 800f002:	695b      	ldr	r3, [r3, #20]
 800f004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f008:	4718      	bx	r3
 800f00a:	bf00      	nop
 800f00c:	0000      	movs	r0, r0
	...

0800f010 <__cxa_end_cleanup>:
 800f010:	b41e      	push	{r1, r2, r3, r4}
 800f012:	f000 f895 	bl	800f140 <__gnu_end_cleanup>
 800f016:	bc1e      	pop	{r1, r2, r3, r4}
 800f018:	f7fa fd28 	bl	8009a6c <_Unwind_Resume>
 800f01c:	0000      	movs	r0, r0
	...

0800f020 <__cxa_type_match>:
 800f020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f022:	7802      	ldrb	r2, [r0, #0]
 800f024:	2a47      	cmp	r2, #71	; 0x47
 800f026:	b083      	sub	sp, #12
 800f028:	460e      	mov	r6, r1
 800f02a:	461f      	mov	r7, r3
 800f02c:	d01a      	beq.n	800f064 <__cxa_type_match+0x44>
 800f02e:	2300      	movs	r3, #0
 800f030:	4c25      	ldr	r4, [pc, #148]	; (800f0c8 <__cxa_type_match+0xa8>)
 800f032:	9301      	str	r3, [sp, #4]
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	4620      	mov	r0, r4
 800f038:	689b      	ldr	r3, [r3, #8]
 800f03a:	4798      	blx	r3
 800f03c:	b180      	cbz	r0, 800f060 <__cxa_type_match+0x40>
 800f03e:	9b01      	ldr	r3, [sp, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	2502      	movs	r5, #2
 800f046:	6833      	ldr	r3, [r6, #0]
 800f048:	4621      	mov	r1, r4
 800f04a:	4630      	mov	r0, r6
 800f04c:	691c      	ldr	r4, [r3, #16]
 800f04e:	aa01      	add	r2, sp, #4
 800f050:	2301      	movs	r3, #1
 800f052:	47a0      	blx	r4
 800f054:	b110      	cbz	r0, 800f05c <__cxa_type_match+0x3c>
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	603b      	str	r3, [r7, #0]
 800f05a:	4628      	mov	r0, r5
 800f05c:	b003      	add	sp, #12
 800f05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f060:	2501      	movs	r5, #1
 800f062:	e7f0      	b.n	800f046 <__cxa_type_match+0x26>
 800f064:	7843      	ldrb	r3, [r0, #1]
 800f066:	2b4e      	cmp	r3, #78	; 0x4e
 800f068:	d1e1      	bne.n	800f02e <__cxa_type_match+0xe>
 800f06a:	7883      	ldrb	r3, [r0, #2]
 800f06c:	2b55      	cmp	r3, #85	; 0x55
 800f06e:	d1de      	bne.n	800f02e <__cxa_type_match+0xe>
 800f070:	78c3      	ldrb	r3, [r0, #3]
 800f072:	2b43      	cmp	r3, #67	; 0x43
 800f074:	d019      	beq.n	800f0aa <__cxa_type_match+0x8a>
 800f076:	78c3      	ldrb	r3, [r0, #3]
 800f078:	2b43      	cmp	r3, #67	; 0x43
 800f07a:	d1d8      	bne.n	800f02e <__cxa_type_match+0xe>
 800f07c:	7903      	ldrb	r3, [r0, #4]
 800f07e:	2b43      	cmp	r3, #67	; 0x43
 800f080:	d1d5      	bne.n	800f02e <__cxa_type_match+0xe>
 800f082:	7943      	ldrb	r3, [r0, #5]
 800f084:	2b2b      	cmp	r3, #43	; 0x2b
 800f086:	d1d2      	bne.n	800f02e <__cxa_type_match+0xe>
 800f088:	7983      	ldrb	r3, [r0, #6]
 800f08a:	2b2b      	cmp	r3, #43	; 0x2b
 800f08c:	d1cf      	bne.n	800f02e <__cxa_type_match+0xe>
 800f08e:	79c3      	ldrb	r3, [r0, #7]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d8cc      	bhi.n	800f02e <__cxa_type_match+0xe>
 800f094:	d004      	beq.n	800f0a0 <__cxa_type_match+0x80>
 800f096:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800f09a:	3058      	adds	r0, #88	; 0x58
 800f09c:	9001      	str	r0, [sp, #4]
 800f09e:	e7c9      	b.n	800f034 <__cxa_type_match+0x14>
 800f0a0:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800f0a4:	f850 4c78 	ldr.w	r4, [r0, #-120]
 800f0a8:	e7f8      	b.n	800f09c <__cxa_type_match+0x7c>
 800f0aa:	7903      	ldrb	r3, [r0, #4]
 800f0ac:	2b46      	cmp	r3, #70	; 0x46
 800f0ae:	d1e2      	bne.n	800f076 <__cxa_type_match+0x56>
 800f0b0:	7943      	ldrb	r3, [r0, #5]
 800f0b2:	2b4f      	cmp	r3, #79	; 0x4f
 800f0b4:	d1df      	bne.n	800f076 <__cxa_type_match+0x56>
 800f0b6:	7983      	ldrb	r3, [r0, #6]
 800f0b8:	2b52      	cmp	r3, #82	; 0x52
 800f0ba:	d1dc      	bne.n	800f076 <__cxa_type_match+0x56>
 800f0bc:	79c3      	ldrb	r3, [r0, #7]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1d9      	bne.n	800f076 <__cxa_type_match+0x56>
 800f0c2:	9301      	str	r3, [sp, #4]
 800f0c4:	4c01      	ldr	r4, [pc, #4]	; (800f0cc <__cxa_type_match+0xac>)
 800f0c6:	e7b5      	b.n	800f034 <__cxa_type_match+0x14>
 800f0c8:	08015fd0 	.word	0x08015fd0
 800f0cc:	08015f50 	.word	0x08015f50

0800f0d0 <__cxa_begin_cleanup>:
 800f0d0:	b510      	push	{r4, lr}
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	f000 f9ac 	bl	800f430 <__cxa_get_globals>
 800f0d8:	7823      	ldrb	r3, [r4, #0]
 800f0da:	2b47      	cmp	r3, #71	; 0x47
 800f0dc:	f1a4 0220 	sub.w	r2, r4, #32
 800f0e0:	d004      	beq.n	800f0ec <__cxa_begin_cleanup+0x1c>
 800f0e2:	6883      	ldr	r3, [r0, #8]
 800f0e4:	bb23      	cbnz	r3, 800f130 <__cxa_begin_cleanup+0x60>
 800f0e6:	6082      	str	r2, [r0, #8]
 800f0e8:	2001      	movs	r0, #1
 800f0ea:	bd10      	pop	{r4, pc}
 800f0ec:	7863      	ldrb	r3, [r4, #1]
 800f0ee:	2b4e      	cmp	r3, #78	; 0x4e
 800f0f0:	d1f7      	bne.n	800f0e2 <__cxa_begin_cleanup+0x12>
 800f0f2:	78a3      	ldrb	r3, [r4, #2]
 800f0f4:	2b55      	cmp	r3, #85	; 0x55
 800f0f6:	d1f4      	bne.n	800f0e2 <__cxa_begin_cleanup+0x12>
 800f0f8:	78e3      	ldrb	r3, [r4, #3]
 800f0fa:	2b43      	cmp	r3, #67	; 0x43
 800f0fc:	d1f1      	bne.n	800f0e2 <__cxa_begin_cleanup+0x12>
 800f0fe:	7923      	ldrb	r3, [r4, #4]
 800f100:	2b43      	cmp	r3, #67	; 0x43
 800f102:	d1ee      	bne.n	800f0e2 <__cxa_begin_cleanup+0x12>
 800f104:	7963      	ldrb	r3, [r4, #5]
 800f106:	2b2b      	cmp	r3, #43	; 0x2b
 800f108:	d1eb      	bne.n	800f0e2 <__cxa_begin_cleanup+0x12>
 800f10a:	79a3      	ldrb	r3, [r4, #6]
 800f10c:	2b2b      	cmp	r3, #43	; 0x2b
 800f10e:	d1e8      	bne.n	800f0e2 <__cxa_begin_cleanup+0x12>
 800f110:	79e3      	ldrb	r3, [r4, #7]
 800f112:	2b01      	cmp	r3, #1
 800f114:	d8e5      	bhi.n	800f0e2 <__cxa_begin_cleanup+0x12>
 800f116:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f11a:	3301      	adds	r3, #1
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f122:	d1e1      	bne.n	800f0e8 <__cxa_begin_cleanup+0x18>
 800f124:	6883      	ldr	r3, [r0, #8]
 800f126:	f844 3c08 	str.w	r3, [r4, #-8]
 800f12a:	6082      	str	r2, [r0, #8]
 800f12c:	2001      	movs	r0, #1
 800f12e:	bd10      	pop	{r4, pc}
 800f130:	f7ff fd36 	bl	800eba0 <_ZSt9terminatev>
	...

0800f140 <__gnu_end_cleanup>:
 800f140:	b508      	push	{r3, lr}
 800f142:	f000 f975 	bl	800f430 <__cxa_get_globals>
 800f146:	6883      	ldr	r3, [r0, #8]
 800f148:	b383      	cbz	r3, 800f1ac <__gnu_end_cleanup+0x6c>
 800f14a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f14e:	2a47      	cmp	r2, #71	; 0x47
 800f150:	d004      	beq.n	800f15c <__gnu_end_cleanup+0x1c>
 800f152:	2200      	movs	r2, #0
 800f154:	6082      	str	r2, [r0, #8]
 800f156:	f103 0020 	add.w	r0, r3, #32
 800f15a:	bd08      	pop	{r3, pc}
 800f15c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f160:	2a4e      	cmp	r2, #78	; 0x4e
 800f162:	d1f6      	bne.n	800f152 <__gnu_end_cleanup+0x12>
 800f164:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f168:	2a55      	cmp	r2, #85	; 0x55
 800f16a:	d1f2      	bne.n	800f152 <__gnu_end_cleanup+0x12>
 800f16c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f170:	2a43      	cmp	r2, #67	; 0x43
 800f172:	d1ee      	bne.n	800f152 <__gnu_end_cleanup+0x12>
 800f174:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f178:	2a43      	cmp	r2, #67	; 0x43
 800f17a:	d1ea      	bne.n	800f152 <__gnu_end_cleanup+0x12>
 800f17c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f180:	2a2b      	cmp	r2, #43	; 0x2b
 800f182:	d1e6      	bne.n	800f152 <__gnu_end_cleanup+0x12>
 800f184:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f188:	2a2b      	cmp	r2, #43	; 0x2b
 800f18a:	d1e2      	bne.n	800f152 <__gnu_end_cleanup+0x12>
 800f18c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f190:	2a01      	cmp	r2, #1
 800f192:	d8de      	bhi.n	800f152 <__gnu_end_cleanup+0x12>
 800f194:	69da      	ldr	r2, [r3, #28]
 800f196:	3a01      	subs	r2, #1
 800f198:	61da      	str	r2, [r3, #28]
 800f19a:	2a00      	cmp	r2, #0
 800f19c:	d1db      	bne.n	800f156 <__gnu_end_cleanup+0x16>
 800f19e:	699a      	ldr	r2, [r3, #24]
 800f1a0:	6082      	str	r2, [r0, #8]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	619a      	str	r2, [r3, #24]
 800f1a6:	f103 0020 	add.w	r0, r3, #32
 800f1aa:	bd08      	pop	{r3, pc}
 800f1ac:	f7ff fcf8 	bl	800eba0 <_ZSt9terminatev>

0800f1b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800f1b0:	7803      	ldrb	r3, [r0, #0]
 800f1b2:	2b47      	cmp	r3, #71	; 0x47
 800f1b4:	d001      	beq.n	800f1ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 800f1b6:	2000      	movs	r0, #0
 800f1b8:	4770      	bx	lr
 800f1ba:	7843      	ldrb	r3, [r0, #1]
 800f1bc:	2b4e      	cmp	r3, #78	; 0x4e
 800f1be:	d1fa      	bne.n	800f1b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800f1c0:	7883      	ldrb	r3, [r0, #2]
 800f1c2:	2b55      	cmp	r3, #85	; 0x55
 800f1c4:	d1f7      	bne.n	800f1b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800f1c6:	78c3      	ldrb	r3, [r0, #3]
 800f1c8:	2b43      	cmp	r3, #67	; 0x43
 800f1ca:	d1f4      	bne.n	800f1b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800f1cc:	7903      	ldrb	r3, [r0, #4]
 800f1ce:	2b43      	cmp	r3, #67	; 0x43
 800f1d0:	d1f1      	bne.n	800f1b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800f1d2:	7943      	ldrb	r3, [r0, #5]
 800f1d4:	2b2b      	cmp	r3, #43	; 0x2b
 800f1d6:	d1ee      	bne.n	800f1b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800f1d8:	7983      	ldrb	r3, [r0, #6]
 800f1da:	2b2b      	cmp	r3, #43	; 0x2b
 800f1dc:	d1eb      	bne.n	800f1b6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800f1de:	79c0      	ldrb	r0, [r0, #7]
 800f1e0:	2801      	cmp	r0, #1
 800f1e2:	bf8c      	ite	hi
 800f1e4:	2000      	movhi	r0, #0
 800f1e6:	2001      	movls	r0, #1
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	0000      	movs	r0, r0
	...

0800f1f0 <__cxa_call_terminate>:
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	b130      	cbz	r0, 800f202 <__cxa_call_terminate+0x12>
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	f000 f883 	bl	800f300 <__cxa_begin_catch>
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f7ff ffd8 	bl	800f1b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800f200:	b908      	cbnz	r0, 800f206 <__cxa_call_terminate+0x16>
 800f202:	f7ff fccd 	bl	800eba0 <_ZSt9terminatev>
 800f206:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800f20a:	f7ff fcb1 	bl	800eb70 <_ZN10__cxxabiv111__terminateEPFvvE>
 800f20e:	bf00      	nop

0800f210 <__cxa_call_unexpected>:
 800f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	b085      	sub	sp, #20
 800f216:	4602      	mov	r2, r0
 800f218:	f7ff ffca 	bl	800f1b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800f21c:	b160      	cbz	r0, 800f238 <__cxa_call_unexpected+0x28>
 800f21e:	f852 8c18 	ldr.w	r8, [r2, #-24]
 800f222:	f852 5c14 	ldr.w	r5, [r2, #-20]
 800f226:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800f228:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800f22a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f22c:	4610      	mov	r0, r2
 800f22e:	f000 f867 	bl	800f300 <__cxa_begin_catch>
 800f232:	4640      	mov	r0, r8
 800f234:	f7ff fcc4 	bl	800ebc0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800f238:	4610      	mov	r0, r2
 800f23a:	f000 f861 	bl	800f300 <__cxa_begin_catch>
 800f23e:	f7ff fcc7 	bl	800ebd0 <_ZSt10unexpectedv>
 800f242:	f000 f85d 	bl	800f300 <__cxa_begin_catch>
 800f246:	f7ff fcab 	bl	800eba0 <_ZSt9terminatev>
 800f24a:	f000 f859 	bl	800f300 <__cxa_begin_catch>
 800f24e:	f000 f8e7 	bl	800f420 <__cxa_get_globals_fast>
 800f252:	f8d0 8000 	ldr.w	r8, [r0]
 800f256:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d038      	beq.n	800f2d0 <__cxa_call_unexpected+0xc0>
 800f25e:	f108 0378 	add.w	r3, r8, #120	; 0x78
 800f262:	f10d 0a10 	add.w	sl, sp, #16
 800f266:	f04f 0900 	mov.w	r9, #0
 800f26a:	f84a 3d08 	str.w	r3, [sl, #-8]!
 800f26e:	f027 0303 	bic.w	r3, r7, #3
 800f272:	9300      	str	r3, [sp, #0]
 800f274:	46cb      	mov	fp, r9
 800f276:	45b3      	cmp	fp, r6
 800f278:	da1e      	bge.n	800f2b8 <__cxa_call_unexpected+0xa8>
 800f27a:	6827      	ldr	r7, [r4, #0]
 800f27c:	b107      	cbz	r7, 800f280 <__cxa_call_unexpected+0x70>
 800f27e:	4427      	add	r7, r4
 800f280:	4653      	mov	r3, sl
 800f282:	2200      	movs	r2, #0
 800f284:	4639      	mov	r1, r7
 800f286:	f108 0020 	add.w	r0, r8, #32
 800f28a:	f7ff fec9 	bl	800f020 <__cxa_type_match>
 800f28e:	bb28      	cbnz	r0, 800f2dc <__cxa_call_unexpected+0xcc>
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	4916      	ldr	r1, [pc, #88]	; (800f2ec <__cxa_call_unexpected+0xdc>)
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	aa04      	add	r2, sp, #16
 800f29a:	2301      	movs	r3, #1
 800f29c:	f842 0d04 	str.w	r0, [r2, #-4]!
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	9f01      	ldr	r7, [sp, #4]
 800f2a4:	47b8      	blx	r7
 800f2a6:	9b00      	ldr	r3, [sp, #0]
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	bf18      	it	ne
 800f2ac:	f04f 0901 	movne.w	r9, #1
 800f2b0:	f10b 0b01 	add.w	fp, fp, #1
 800f2b4:	441c      	add	r4, r3
 800f2b6:	e7de      	b.n	800f276 <__cxa_call_unexpected+0x66>
 800f2b8:	f1b9 0f00 	cmp.w	r9, #0
 800f2bc:	d00b      	beq.n	800f2d6 <__cxa_call_unexpected+0xc6>
 800f2be:	2004      	movs	r0, #4
 800f2c0:	f7ff fbf6 	bl	800eab0 <__cxa_allocate_exception>
 800f2c4:	4b0a      	ldr	r3, [pc, #40]	; (800f2f0 <__cxa_call_unexpected+0xe0>)
 800f2c6:	6003      	str	r3, [r0, #0]
 800f2c8:	4a0a      	ldr	r2, [pc, #40]	; (800f2f4 <__cxa_call_unexpected+0xe4>)
 800f2ca:	4908      	ldr	r1, [pc, #32]	; (800f2ec <__cxa_call_unexpected+0xdc>)
 800f2cc:	f7ff fcc8 	bl	800ec60 <__cxa_throw>
 800f2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800f2d4:	e7c5      	b.n	800f262 <__cxa_call_unexpected+0x52>
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	f7ff fc4a 	bl	800eb70 <_ZN10__cxxabiv111__terminateEPFvvE>
 800f2dc:	f7ff fd00 	bl	800ece0 <__cxa_rethrow>
 800f2e0:	f000 f856 	bl	800f390 <__cxa_end_catch>
 800f2e4:	f000 f854 	bl	800f390 <__cxa_end_catch>
 800f2e8:	f7ff fe92 	bl	800f010 <__cxa_end_cleanup>
 800f2ec:	08016030 	.word	0x08016030
 800f2f0:	08015fe8 	.word	0x08015fe8
 800f2f4:	0800eb41 	.word	0x0800eb41
	...

0800f300 <__cxa_begin_catch>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4604      	mov	r4, r0
 800f304:	f000 f894 	bl	800f430 <__cxa_get_globals>
 800f308:	7822      	ldrb	r2, [r4, #0]
 800f30a:	6803      	ldr	r3, [r0, #0]
 800f30c:	2a47      	cmp	r2, #71	; 0x47
 800f30e:	f1a4 0120 	sub.w	r1, r4, #32
 800f312:	d005      	beq.n	800f320 <__cxa_begin_catch+0x20>
 800f314:	2b00      	cmp	r3, #0
 800f316:	d131      	bne.n	800f37c <__cxa_begin_catch+0x7c>
 800f318:	461c      	mov	r4, r3
 800f31a:	6001      	str	r1, [r0, #0]
 800f31c:	4620      	mov	r0, r4
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	7862      	ldrb	r2, [r4, #1]
 800f322:	2a4e      	cmp	r2, #78	; 0x4e
 800f324:	d1f6      	bne.n	800f314 <__cxa_begin_catch+0x14>
 800f326:	78a2      	ldrb	r2, [r4, #2]
 800f328:	2a55      	cmp	r2, #85	; 0x55
 800f32a:	d1f3      	bne.n	800f314 <__cxa_begin_catch+0x14>
 800f32c:	78e2      	ldrb	r2, [r4, #3]
 800f32e:	2a43      	cmp	r2, #67	; 0x43
 800f330:	d1f0      	bne.n	800f314 <__cxa_begin_catch+0x14>
 800f332:	7922      	ldrb	r2, [r4, #4]
 800f334:	2a43      	cmp	r2, #67	; 0x43
 800f336:	d1ed      	bne.n	800f314 <__cxa_begin_catch+0x14>
 800f338:	7962      	ldrb	r2, [r4, #5]
 800f33a:	2a2b      	cmp	r2, #43	; 0x2b
 800f33c:	d1ea      	bne.n	800f314 <__cxa_begin_catch+0x14>
 800f33e:	79a2      	ldrb	r2, [r4, #6]
 800f340:	2a2b      	cmp	r2, #43	; 0x2b
 800f342:	d1e7      	bne.n	800f314 <__cxa_begin_catch+0x14>
 800f344:	79e2      	ldrb	r2, [r4, #7]
 800f346:	2a01      	cmp	r2, #1
 800f348:	d8e4      	bhi.n	800f314 <__cxa_begin_catch+0x14>
 800f34a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800f34e:	2a00      	cmp	r2, #0
 800f350:	db11      	blt.n	800f376 <__cxa_begin_catch+0x76>
 800f352:	3201      	adds	r2, #1
 800f354:	6845      	ldr	r5, [r0, #4]
 800f356:	f844 2c0c 	str.w	r2, [r4, #-12]
 800f35a:	428b      	cmp	r3, r1
 800f35c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f360:	6042      	str	r2, [r0, #4]
 800f362:	bf1c      	itt	ne
 800f364:	f844 3c10 	strne.w	r3, [r4, #-16]
 800f368:	6001      	strne	r1, [r0, #0]
 800f36a:	4620      	mov	r0, r4
 800f36c:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800f36e:	f7f9 ffc3 	bl	80092f8 <_Unwind_Complete>
 800f372:	4620      	mov	r0, r4
 800f374:	bd38      	pop	{r3, r4, r5, pc}
 800f376:	f1c2 0201 	rsb	r2, r2, #1
 800f37a:	e7eb      	b.n	800f354 <__cxa_begin_catch+0x54>
 800f37c:	f7ff fc10 	bl	800eba0 <_ZSt9terminatev>
 800f380:	3101      	adds	r1, #1
 800f382:	d001      	beq.n	800f388 <__cxa_begin_catch+0x88>
 800f384:	f7ff fe44 	bl	800f010 <__cxa_end_cleanup>
 800f388:	f7ff ff42 	bl	800f210 <__cxa_call_unexpected>
 800f38c:	0000      	movs	r0, r0
	...

0800f390 <__cxa_end_catch>:
 800f390:	b508      	push	{r3, lr}
 800f392:	f000 f845 	bl	800f420 <__cxa_get_globals_fast>
 800f396:	4602      	mov	r2, r0
 800f398:	6800      	ldr	r0, [r0, #0]
 800f39a:	2800      	cmp	r0, #0
 800f39c:	d03d      	beq.n	800f41a <__cxa_end_catch+0x8a>
 800f39e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f3a2:	2b47      	cmp	r3, #71	; 0x47
 800f3a4:	d006      	beq.n	800f3b4 <__cxa_end_catch+0x24>
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	6013      	str	r3, [r2, #0]
 800f3aa:	3020      	adds	r0, #32
 800f3ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f3b0:	f7f9 bfa4 	b.w	80092fc <_Unwind_DeleteException>
 800f3b4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800f3b8:	2b4e      	cmp	r3, #78	; 0x4e
 800f3ba:	d1f4      	bne.n	800f3a6 <__cxa_end_catch+0x16>
 800f3bc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800f3c0:	2b55      	cmp	r3, #85	; 0x55
 800f3c2:	d1f0      	bne.n	800f3a6 <__cxa_end_catch+0x16>
 800f3c4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800f3c8:	2b43      	cmp	r3, #67	; 0x43
 800f3ca:	d1ec      	bne.n	800f3a6 <__cxa_end_catch+0x16>
 800f3cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800f3d0:	2b43      	cmp	r3, #67	; 0x43
 800f3d2:	d1e8      	bne.n	800f3a6 <__cxa_end_catch+0x16>
 800f3d4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f3d8:	2b2b      	cmp	r3, #43	; 0x2b
 800f3da:	d1e4      	bne.n	800f3a6 <__cxa_end_catch+0x16>
 800f3dc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800f3e0:	2b2b      	cmp	r3, #43	; 0x2b
 800f3e2:	d1e0      	bne.n	800f3a6 <__cxa_end_catch+0x16>
 800f3e4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d8dc      	bhi.n	800f3a6 <__cxa_end_catch+0x16>
 800f3ec:	6943      	ldr	r3, [r0, #20]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	db05      	blt.n	800f3fe <__cxa_end_catch+0x6e>
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	d008      	beq.n	800f408 <__cxa_end_catch+0x78>
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	d00d      	beq.n	800f416 <__cxa_end_catch+0x86>
 800f3fa:	6143      	str	r3, [r0, #20]
 800f3fc:	bd08      	pop	{r3, pc}
 800f3fe:	3301      	adds	r3, #1
 800f400:	d1fb      	bne.n	800f3fa <__cxa_end_catch+0x6a>
 800f402:	6901      	ldr	r1, [r0, #16]
 800f404:	6011      	str	r1, [r2, #0]
 800f406:	e7f8      	b.n	800f3fa <__cxa_end_catch+0x6a>
 800f408:	6903      	ldr	r3, [r0, #16]
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	3020      	adds	r0, #32
 800f40e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f412:	f7f9 bf73 	b.w	80092fc <_Unwind_DeleteException>
 800f416:	f7ff fbc3 	bl	800eba0 <_ZSt9terminatev>
 800f41a:	bd08      	pop	{r3, pc}
 800f41c:	0000      	movs	r0, r0
	...

0800f420 <__cxa_get_globals_fast>:
 800f420:	4800      	ldr	r0, [pc, #0]	; (800f424 <__cxa_get_globals_fast+0x4>)
 800f422:	4770      	bx	lr
 800f424:	20001c24 	.word	0x20001c24
	...

0800f430 <__cxa_get_globals>:
 800f430:	4800      	ldr	r0, [pc, #0]	; (800f434 <__cxa_get_globals+0x4>)
 800f432:	4770      	bx	lr
 800f434:	20001c24 	.word	0x20001c24
	...

0800f440 <_ZL28read_encoded_value_with_basehjPKhPj>:
 800f440:	2850      	cmp	r0, #80	; 0x50
 800f442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f444:	d054      	beq.n	800f4f0 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 800f446:	f000 040f 	and.w	r4, r0, #15
 800f44a:	2c0c      	cmp	r4, #12
 800f44c:	d84e      	bhi.n	800f4ec <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 800f44e:	e8df f004 	tbb	[pc, r4]
 800f452:	3907      	.short	0x3907
 800f454:	4d170749 	.word	0x4d170749
 800f458:	1f4d4d4d 	.word	0x1f4d4d4d
 800f45c:	071b      	.short	0x071b
 800f45e:	17          	.byte	0x17
 800f45f:	00          	.byte	0x00
 800f460:	4615      	mov	r5, r2
 800f462:	f855 4b04 	ldr.w	r4, [r5], #4
 800f466:	b144      	cbz	r4, 800f47a <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 800f468:	f000 0670 	and.w	r6, r0, #112	; 0x70
 800f46c:	2e10      	cmp	r6, #16
 800f46e:	bf18      	it	ne
 800f470:	460a      	movne	r2, r1
 800f472:	4414      	add	r4, r2
 800f474:	0602      	lsls	r2, r0, #24
 800f476:	bf48      	it	mi
 800f478:	6824      	ldrmi	r4, [r4, #0]
 800f47a:	601c      	str	r4, [r3, #0]
 800f47c:	4628      	mov	r0, r5
 800f47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f480:	4615      	mov	r5, r2
 800f482:	f855 4b08 	ldr.w	r4, [r5], #8
 800f486:	e7ee      	b.n	800f466 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f488:	4615      	mov	r5, r2
 800f48a:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800f48e:	e7ea      	b.n	800f466 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f490:	2400      	movs	r4, #0
 800f492:	4627      	mov	r7, r4
 800f494:	4615      	mov	r5, r2
 800f496:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f49a:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f49e:	40be      	lsls	r6, r7
 800f4a0:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f4a4:	ea44 0406 	orr.w	r4, r4, r6
 800f4a8:	f107 0707 	add.w	r7, r7, #7
 800f4ac:	d1f3      	bne.n	800f496 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 800f4ae:	2f1f      	cmp	r7, #31
 800f4b0:	d8d9      	bhi.n	800f466 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4b2:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f4b6:	d0d6      	beq.n	800f466 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f4bc:	fa06 f707 	lsl.w	r7, r6, r7
 800f4c0:	433c      	orrs	r4, r7
 800f4c2:	e7d1      	b.n	800f468 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800f4c4:	2400      	movs	r4, #0
 800f4c6:	4627      	mov	r7, r4
 800f4c8:	4615      	mov	r5, r2
 800f4ca:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f4ce:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f4d2:	40be      	lsls	r6, r7
 800f4d4:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f4d8:	ea44 0406 	orr.w	r4, r4, r6
 800f4dc:	f107 0707 	add.w	r7, r7, #7
 800f4e0:	d1f3      	bne.n	800f4ca <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 800f4e2:	e7c0      	b.n	800f466 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4e4:	4615      	mov	r5, r2
 800f4e6:	f835 4b02 	ldrh.w	r4, [r5], #2
 800f4ea:	e7bc      	b.n	800f466 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4ec:	f001 fa10 	bl	8010910 <abort>
 800f4f0:	3203      	adds	r2, #3
 800f4f2:	f022 0503 	bic.w	r5, r2, #3
 800f4f6:	f855 4b04 	ldr.w	r4, [r5], #4
 800f4fa:	601c      	str	r4, [r3, #0]
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800f500:	28ff      	cmp	r0, #255	; 0xff
 800f502:	d015      	beq.n	800f530 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 800f504:	b508      	push	{r3, lr}
 800f506:	f000 0370 	and.w	r3, r0, #112	; 0x70
 800f50a:	2b20      	cmp	r3, #32
 800f50c:	d012      	beq.n	800f534 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 800f50e:	d90a      	bls.n	800f526 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 800f510:	2b40      	cmp	r3, #64	; 0x40
 800f512:	d014      	beq.n	800f53e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 800f514:	2b50      	cmp	r3, #80	; 0x50
 800f516:	d017      	beq.n	800f548 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 800f518:	2b30      	cmp	r3, #48	; 0x30
 800f51a:	d107      	bne.n	800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800f51c:	4608      	mov	r0, r1
 800f51e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f522:	f7fa bc93 	b.w	8009e4c <_Unwind_GetDataRelBase>
 800f526:	b17b      	cbz	r3, 800f548 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 800f528:	2b10      	cmp	r3, #16
 800f52a:	d00d      	beq.n	800f548 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 800f52c:	f001 f9f0 	bl	8010910 <abort>
 800f530:	2000      	movs	r0, #0
 800f532:	4770      	bx	lr
 800f534:	4608      	mov	r0, r1
 800f536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f53a:	f7fa bc83 	b.w	8009e44 <_Unwind_GetTextRelBase>
 800f53e:	4608      	mov	r0, r1
 800f540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f544:	f7fa bc6e 	b.w	8009e24 <_Unwind_GetRegionStart>
 800f548:	2000      	movs	r0, #0
 800f54a:	bd08      	pop	{r3, pc}
 800f54c:	0000      	movs	r0, r0
	...

0800f550 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800f550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f552:	460c      	mov	r4, r1
 800f554:	4615      	mov	r5, r2
 800f556:	4607      	mov	r7, r0
 800f558:	2800      	cmp	r0, #0
 800f55a:	d044      	beq.n	800f5e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
 800f55c:	f7fa fc62 	bl	8009e24 <_Unwind_GetRegionStart>
 800f560:	6028      	str	r0, [r5, #0]
 800f562:	7826      	ldrb	r6, [r4, #0]
 800f564:	2eff      	cmp	r6, #255	; 0xff
 800f566:	f104 0401 	add.w	r4, r4, #1
 800f56a:	d032      	beq.n	800f5d2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 800f56c:	4639      	mov	r1, r7
 800f56e:	4630      	mov	r0, r6
 800f570:	f7ff ffc6 	bl	800f500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f574:	4622      	mov	r2, r4
 800f576:	4601      	mov	r1, r0
 800f578:	1d2b      	adds	r3, r5, #4
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7ff ff60 	bl	800f440 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f580:	4604      	mov	r4, r0
 800f582:	1c60      	adds	r0, r4, #1
 800f584:	7823      	ldrb	r3, [r4, #0]
 800f586:	752b      	strb	r3, [r5, #20]
 800f588:	2bff      	cmp	r3, #255	; 0xff
 800f58a:	d029      	beq.n	800f5e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 800f58c:	2310      	movs	r3, #16
 800f58e:	2400      	movs	r4, #0
 800f590:	752b      	strb	r3, [r5, #20]
 800f592:	4622      	mov	r2, r4
 800f594:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f598:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f59c:	4093      	lsls	r3, r2
 800f59e:	0609      	lsls	r1, r1, #24
 800f5a0:	ea44 0403 	orr.w	r4, r4, r3
 800f5a4:	f102 0207 	add.w	r2, r2, #7
 800f5a8:	d4f4      	bmi.n	800f594 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
 800f5aa:	4404      	add	r4, r0
 800f5ac:	60ec      	str	r4, [r5, #12]
 800f5ae:	7803      	ldrb	r3, [r0, #0]
 800f5b0:	756b      	strb	r3, [r5, #21]
 800f5b2:	2400      	movs	r4, #0
 800f5b4:	3001      	adds	r0, #1
 800f5b6:	4622      	mov	r2, r4
 800f5b8:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f5bc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f5c0:	4093      	lsls	r3, r2
 800f5c2:	431c      	orrs	r4, r3
 800f5c4:	060b      	lsls	r3, r1, #24
 800f5c6:	f102 0207 	add.w	r2, r2, #7
 800f5ca:	d4f5      	bmi.n	800f5b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
 800f5cc:	4404      	add	r4, r0
 800f5ce:	612c      	str	r4, [r5, #16]
 800f5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d2:	6068      	str	r0, [r5, #4]
 800f5d4:	7823      	ldrb	r3, [r4, #0]
 800f5d6:	752b      	strb	r3, [r5, #20]
 800f5d8:	2bff      	cmp	r3, #255	; 0xff
 800f5da:	f104 0001 	add.w	r0, r4, #1
 800f5de:	d1d5      	bne.n	800f58c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	60eb      	str	r3, [r5, #12]
 800f5e4:	e7e3      	b.n	800f5ae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 800f5e6:	e7bb      	b.n	800f560 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
	...

0800f5f0 <__gxx_personality_v0>:
 800f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f4:	f000 0403 	and.w	r4, r0, #3
 800f5f8:	b097      	sub	sp, #92	; 0x5c
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	2c01      	cmp	r4, #1
 800f5fe:	4689      	mov	r9, r1
 800f600:	4690      	mov	r8, r2
 800f602:	930a      	str	r3, [sp, #40]	; 0x28
 800f604:	d021      	beq.n	800f64a <__gxx_personality_v0+0x5a>
 800f606:	d30e      	bcc.n	800f626 <__gxx_personality_v0+0x36>
 800f608:	2c02      	cmp	r4, #2
 800f60a:	d10a      	bne.n	800f622 <__gxx_personality_v0+0x32>
 800f60c:	4641      	mov	r1, r8
 800f60e:	4648      	mov	r0, r9
 800f610:	f7fa fbf4 	bl	8009dfc <__gnu_unwind_frame>
 800f614:	2800      	cmp	r0, #0
 800f616:	f000 80d4 	beq.w	800f7c2 <__gxx_personality_v0+0x1d2>
 800f61a:	2009      	movs	r0, #9
 800f61c:	b017      	add	sp, #92	; 0x5c
 800f61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f622:	f001 f975 	bl	8010910 <abort>
 800f626:	f000 0008 	and.w	r0, r0, #8
 800f62a:	f000 03ff 	and.w	r3, r0, #255	; 0xff
 800f62e:	2800      	cmp	r0, #0
 800f630:	d1ec      	bne.n	800f60c <__gxx_personality_v0+0x1c>
 800f632:	aa16      	add	r2, sp, #88	; 0x58
 800f634:	4640      	mov	r0, r8
 800f636:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800f63a:	4619      	mov	r1, r3
 800f63c:	9200      	str	r2, [sp, #0]
 800f63e:	220c      	movs	r2, #12
 800f640:	f7f9 fe88 	bl	8009354 <_Unwind_VRS_Set>
 800f644:	2301      	movs	r3, #1
 800f646:	9304      	str	r3, [sp, #16]
 800f648:	e013      	b.n	800f672 <__gxx_personality_v0+0x82>
 800f64a:	f000 0008 	and.w	r0, r0, #8
 800f64e:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 800f652:	2800      	cmp	r0, #0
 800f654:	f000 80b9 	beq.w	800f7ca <__gxx_personality_v0+0x1da>
 800f658:	aa16      	add	r2, sp, #88	; 0x58
 800f65a:	f044 0402 	orr.w	r4, r4, #2
 800f65e:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800f662:	b2e4      	uxtb	r4, r4
 800f664:	9200      	str	r2, [sp, #0]
 800f666:	4619      	mov	r1, r3
 800f668:	220c      	movs	r2, #12
 800f66a:	4640      	mov	r0, r8
 800f66c:	9404      	str	r4, [sp, #16]
 800f66e:	f7f9 fe71 	bl	8009354 <_Unwind_VRS_Set>
 800f672:	4640      	mov	r0, r8
 800f674:	f7fa fbdc 	bl	8009e30 <_Unwind_GetLanguageSpecificData>
 800f678:	9005      	str	r0, [sp, #20]
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d0c6      	beq.n	800f60c <__gxx_personality_v0+0x1c>
 800f67e:	ab10      	add	r3, sp, #64	; 0x40
 800f680:	461a      	mov	r2, r3
 800f682:	9905      	ldr	r1, [sp, #20]
 800f684:	9306      	str	r3, [sp, #24]
 800f686:	4640      	mov	r0, r8
 800f688:	f7ff ff62 	bl	800f550 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800f68c:	4641      	mov	r1, r8
 800f68e:	4604      	mov	r4, r0
 800f690:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f694:	f7ff ff34 	bl	800f500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f698:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 800f69c:	2300      	movs	r3, #0
 800f69e:	9012      	str	r0, [sp, #72]	; 0x48
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	220f      	movs	r2, #15
 800f6a4:	f8cd b000 	str.w	fp, [sp]
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	f7f9 fe2d 	bl	8009308 <_Unwind_VRS_Get>
 800f6ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6b2:	f023 0301 	bic.w	r3, r3, #1
 800f6b6:	4294      	cmp	r4, r2
 800f6b8:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 800f6bc:	d243      	bcs.n	800f746 <__gxx_personality_v0+0x156>
 800f6be:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800f6c2:	af0e      	add	r7, sp, #56	; 0x38
 800f6c4:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f7ff ff18 	bl	800f500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	4653      	mov	r3, sl
 800f6d4:	4601      	mov	r1, r0
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f7ff feb2 	bl	800f440 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f6dc:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800f6e0:	4605      	mov	r5, r0
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f7ff ff0b 	bl	800f500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	463b      	mov	r3, r7
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f7ff fea5 	bl	800f440 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f6f6:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	4620      	mov	r0, r4
 800f700:	f7ff fefe 	bl	800f500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f704:	462a      	mov	r2, r5
 800f706:	4601      	mov	r1, r0
 800f708:	465b      	mov	r3, fp
 800f70a:	4620      	mov	r0, r4
 800f70c:	f7ff fe98 	bl	800f440 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f710:	4604      	mov	r4, r0
 800f712:	2000      	movs	r0, #0
 800f714:	4602      	mov	r2, r0
 800f716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f71a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f71e:	4093      	lsls	r3, r2
 800f720:	060d      	lsls	r5, r1, #24
 800f722:	ea40 0003 	orr.w	r0, r0, r3
 800f726:	f102 0207 	add.w	r2, r2, #7
 800f72a:	d4f4      	bmi.n	800f716 <__gxx_personality_v0+0x126>
 800f72c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f730:	4413      	add	r3, r2
 800f732:	429e      	cmp	r6, r3
 800f734:	d307      	bcc.n	800f746 <__gxx_personality_v0+0x156>
 800f736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f738:	4413      	add	r3, r2
 800f73a:	429e      	cmp	r6, r3
 800f73c:	f0c0 80ba 	bcc.w	800f8b4 <__gxx_personality_v0+0x2c4>
 800f740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f742:	42a3      	cmp	r3, r4
 800f744:	d8be      	bhi.n	800f6c4 <__gxx_personality_v0+0xd4>
 800f746:	2500      	movs	r5, #0
 800f748:	9503      	str	r5, [sp, #12]
 800f74a:	2401      	movs	r4, #1
 800f74c:	9b04      	ldr	r3, [sp, #16]
 800f74e:	07db      	lsls	r3, r3, #31
 800f750:	d456      	bmi.n	800f800 <__gxx_personality_v0+0x210>
 800f752:	9b04      	ldr	r3, [sp, #16]
 800f754:	0719      	lsls	r1, r3, #28
 800f756:	f140 80a8 	bpl.w	800f8aa <__gxx_personality_v0+0x2ba>
 800f75a:	2c01      	cmp	r4, #1
 800f75c:	f000 819d 	beq.w	800fa9a <__gxx_personality_v0+0x4aa>
 800f760:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800f764:	af0e      	add	r7, sp, #56	; 0x38
 800f766:	a916      	add	r1, sp, #88	; 0x58
 800f768:	2300      	movs	r3, #0
 800f76a:	f841 9d28 	str.w	r9, [r1, #-40]!
 800f76e:	461a      	mov	r2, r3
 800f770:	9100      	str	r1, [sp, #0]
 800f772:	4640      	mov	r0, r8
 800f774:	4619      	mov	r1, r3
 800f776:	f7f9 fded 	bl	8009354 <_Unwind_VRS_Set>
 800f77a:	2300      	movs	r3, #0
 800f77c:	4619      	mov	r1, r3
 800f77e:	2201      	movs	r2, #1
 800f780:	f8cd a000 	str.w	sl, [sp]
 800f784:	4640      	mov	r0, r8
 800f786:	950d      	str	r5, [sp, #52]	; 0x34
 800f788:	f7f9 fde4 	bl	8009354 <_Unwind_VRS_Set>
 800f78c:	2300      	movs	r3, #0
 800f78e:	4619      	mov	r1, r3
 800f790:	220f      	movs	r2, #15
 800f792:	9700      	str	r7, [sp, #0]
 800f794:	4640      	mov	r0, r8
 800f796:	f7f9 fdb7 	bl	8009308 <_Unwind_VRS_Get>
 800f79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f79c:	9a03      	ldr	r2, [sp, #12]
 800f79e:	9700      	str	r7, [sp, #0]
 800f7a0:	f003 0501 	and.w	r5, r3, #1
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	4315      	orrs	r5, r2
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	220f      	movs	r2, #15
 800f7ae:	950e      	str	r5, [sp, #56]	; 0x38
 800f7b0:	f7f9 fdd0 	bl	8009354 <_Unwind_VRS_Set>
 800f7b4:	2c02      	cmp	r4, #2
 800f7b6:	f000 80f5 	beq.w	800f9a4 <__gxx_personality_v0+0x3b4>
 800f7ba:	2007      	movs	r0, #7
 800f7bc:	b017      	add	sp, #92	; 0x5c
 800f7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c2:	2008      	movs	r0, #8
 800f7c4:	b017      	add	sp, #92	; 0x5c
 800f7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ca:	ab10      	add	r3, sp, #64	; 0x40
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	9306      	str	r3, [sp, #24]
 800f7d0:	220d      	movs	r2, #13
 800f7d2:	4623      	mov	r3, r4
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800f7dc:	f7f9 fd94 	bl	8009308 <_Unwind_VRS_Get>
 800f7e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7e2:	429d      	cmp	r5, r3
 800f7e4:	d024      	beq.n	800f830 <__gxx_personality_v0+0x240>
 800f7e6:	aa16      	add	r2, sp, #88	; 0x58
 800f7e8:	4623      	mov	r3, r4
 800f7ea:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	9200      	str	r2, [sp, #0]
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	220c      	movs	r2, #12
 800f7f6:	f7f9 fdad 	bl	8009354 <_Unwind_VRS_Set>
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	9304      	str	r3, [sp, #16]
 800f7fe:	e738      	b.n	800f672 <__gxx_personality_v0+0x82>
 800f800:	af0e      	add	r7, sp, #56	; 0x38
 800f802:	2300      	movs	r3, #0
 800f804:	4619      	mov	r1, r3
 800f806:	220d      	movs	r2, #13
 800f808:	9700      	str	r7, [sp, #0]
 800f80a:	4640      	mov	r0, r8
 800f80c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f80e:	f7f9 fd7b 	bl	8009308 <_Unwind_VRS_Get>
 800f812:	9a05      	ldr	r2, [sp, #20]
 800f814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f816:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 800f81a:	9a03      	ldr	r2, [sp, #12]
 800f81c:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 800f820:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 800f824:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800f828:	f8c9 3020 	str.w	r3, [r9, #32]
 800f82c:	2006      	movs	r0, #6
 800f82e:	e6f5      	b.n	800f61c <__gxx_personality_v0+0x2c>
 800f830:	aa16      	add	r2, sp, #88	; 0x58
 800f832:	4623      	mov	r3, r4
 800f834:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800f838:	4621      	mov	r1, r4
 800f83a:	9200      	str	r2, [sp, #0]
 800f83c:	4640      	mov	r0, r8
 800f83e:	220c      	movs	r2, #12
 800f840:	f7f9 fd88 	bl	8009354 <_Unwind_VRS_Set>
 800f844:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800f848:	9303      	str	r3, [sp, #12]
 800f84a:	b383      	cbz	r3, 800f8ae <__gxx_personality_v0+0x2be>
 800f84c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800f850:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 800f854:	9305      	str	r3, [sp, #20]
 800f856:	2403      	movs	r4, #3
 800f858:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800f85c:	af0e      	add	r7, sp, #56	; 0x38
 800f85e:	2d00      	cmp	r5, #0
 800f860:	da81      	bge.n	800f766 <__gxx_personality_v0+0x176>
 800f862:	9a06      	ldr	r2, [sp, #24]
 800f864:	9905      	ldr	r1, [sp, #20]
 800f866:	4640      	mov	r0, r8
 800f868:	f7ff fe72 	bl	800f550 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800f86c:	4641      	mov	r1, r8
 800f86e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f872:	f7ff fe45 	bl	800f500 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f876:	00aa      	lsls	r2, r5, #2
 800f878:	f082 0203 	eor.w	r2, r2, #3
 800f87c:	43d2      	mvns	r2, r2
 800f87e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f880:	9012      	str	r0, [sp, #72]	; 0x48
 800f882:	58b3      	ldr	r3, [r6, r2]
 800f884:	4416      	add	r6, r2
 800f886:	b133      	cbz	r3, 800f896 <__gxx_personality_v0+0x2a6>
 800f888:	4632      	mov	r2, r6
 800f88a:	2300      	movs	r3, #0
 800f88c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800f890:	3301      	adds	r3, #1
 800f892:	2900      	cmp	r1, #0
 800f894:	d1fa      	bne.n	800f88c <__gxx_personality_v0+0x29c>
 800f896:	2204      	movs	r2, #4
 800f898:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800f89c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800f8a0:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 800f8a4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800f8a8:	e75d      	b.n	800f766 <__gxx_personality_v0+0x176>
 800f8aa:	2c01      	cmp	r4, #1
 800f8ac:	d1d4      	bne.n	800f858 <__gxx_personality_v0+0x268>
 800f8ae:	4648      	mov	r0, r9
 800f8b0:	f7ff fc9e 	bl	800f1f0 <__cxa_call_terminate>
 800f8b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	f43f aea8 	beq.w	800f60c <__gxx_personality_v0+0x1c>
 800f8bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f8be:	4413      	add	r3, r2
 800f8c0:	9303      	str	r3, [sp, #12]
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	f000 80d6 	beq.w	800fa74 <__gxx_personality_v0+0x484>
 800f8c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800f8ca:	3801      	subs	r0, #1
 800f8cc:	4404      	add	r4, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f43f ae9c 	beq.w	800f60c <__gxx_personality_v0+0x1c>
 800f8d4:	2c00      	cmp	r4, #0
 800f8d6:	f000 80d1 	beq.w	800fa7c <__gxx_personality_v0+0x48c>
 800f8da:	9b04      	ldr	r3, [sp, #16]
 800f8dc:	f013 0308 	ands.w	r3, r3, #8
 800f8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f8e2:	f000 80bd 	beq.w	800fa60 <__gxx_personality_v0+0x470>
 800f8e6:	2247      	movs	r2, #71	; 0x47
 800f8e8:	234e      	movs	r3, #78	; 0x4e
 800f8ea:	f889 2000 	strb.w	r2, [r9]
 800f8ee:	f889 3001 	strb.w	r3, [r9, #1]
 800f8f2:	2255      	movs	r2, #85	; 0x55
 800f8f4:	2343      	movs	r3, #67	; 0x43
 800f8f6:	f889 2002 	strb.w	r2, [r9, #2]
 800f8fa:	f889 3003 	strb.w	r3, [r9, #3]
 800f8fe:	2246      	movs	r2, #70	; 0x46
 800f900:	234f      	movs	r3, #79	; 0x4f
 800f902:	f889 2004 	strb.w	r2, [r9, #4]
 800f906:	f889 3005 	strb.w	r3, [r9, #5]
 800f90a:	2252      	movs	r2, #82	; 0x52
 800f90c:	2300      	movs	r3, #0
 800f90e:	f889 2006 	strb.w	r2, [r9, #6]
 800f912:	f889 3007 	strb.w	r3, [r9, #7]
 800f916:	2300      	movs	r3, #0
 800f918:	9307      	str	r3, [sp, #28]
 800f91a:	f8cd 8020 	str.w	r8, [sp, #32]
 800f91e:	2500      	movs	r5, #0
 800f920:	462a      	mov	r2, r5
 800f922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f926:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f92a:	4093      	lsls	r3, r2
 800f92c:	0608      	lsls	r0, r1, #24
 800f92e:	ea45 0503 	orr.w	r5, r5, r3
 800f932:	f102 0207 	add.w	r2, r2, #7
 800f936:	d4f4      	bmi.n	800f922 <__gxx_personality_v0+0x332>
 800f938:	2a1f      	cmp	r2, #31
 800f93a:	d805      	bhi.n	800f948 <__gxx_personality_v0+0x358>
 800f93c:	0649      	lsls	r1, r1, #25
 800f93e:	d503      	bpl.n	800f948 <__gxx_personality_v0+0x358>
 800f940:	2301      	movs	r3, #1
 800f942:	4093      	lsls	r3, r2
 800f944:	425b      	negs	r3, r3
 800f946:	431d      	orrs	r5, r3
 800f948:	2600      	movs	r6, #0
 800f94a:	4632      	mov	r2, r6
 800f94c:	4620      	mov	r0, r4
 800f94e:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f952:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f956:	4093      	lsls	r3, r2
 800f958:	431e      	orrs	r6, r3
 800f95a:	060b      	lsls	r3, r1, #24
 800f95c:	f102 0207 	add.w	r2, r2, #7
 800f960:	d4f5      	bmi.n	800f94e <__gxx_personality_v0+0x35e>
 800f962:	2a1f      	cmp	r2, #31
 800f964:	d805      	bhi.n	800f972 <__gxx_personality_v0+0x382>
 800f966:	0648      	lsls	r0, r1, #25
 800f968:	d503      	bpl.n	800f972 <__gxx_personality_v0+0x382>
 800f96a:	2301      	movs	r3, #1
 800f96c:	4093      	lsls	r3, r2
 800f96e:	425b      	negs	r3, r3
 800f970:	431e      	orrs	r6, r3
 800f972:	2d00      	cmp	r5, #0
 800f974:	d03d      	beq.n	800f9f2 <__gxx_personality_v0+0x402>
 800f976:	dd3f      	ble.n	800f9f8 <__gxx_personality_v0+0x408>
 800f978:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f97c:	28ff      	cmp	r0, #255	; 0xff
 800f97e:	d06d      	beq.n	800fa5c <__gxx_personality_v0+0x46c>
 800f980:	f000 0307 	and.w	r3, r0, #7
 800f984:	2b04      	cmp	r3, #4
 800f986:	f63f ae4c 	bhi.w	800f622 <__gxx_personality_v0+0x32>
 800f98a:	a201      	add	r2, pc, #4	; (adr r2, 800f990 <__gxx_personality_v0+0x3a0>)
 800f98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f990:	0800f9d7 	.word	0x0800f9d7
 800f994:	0800f623 	.word	0x0800f623
 800f998:	0800f9d1 	.word	0x0800f9d1
 800f99c:	0800f9d7 	.word	0x0800f9d7
 800f9a0:	0800f9af 	.word	0x0800f9af
 800f9a4:	4648      	mov	r0, r9
 800f9a6:	f7ff fb93 	bl	800f0d0 <__cxa_begin_cleanup>
 800f9aa:	2007      	movs	r0, #7
 800f9ac:	e636      	b.n	800f61c <__gxx_personality_v0+0x2c>
 800f9ae:	00eb      	lsls	r3, r5, #3
 800f9b0:	425b      	negs	r3, r3
 800f9b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f9b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f9b6:	441a      	add	r2, r3
 800f9b8:	463b      	mov	r3, r7
 800f9ba:	f7ff fd41 	bl	800f440 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f9be:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f9c0:	b199      	cbz	r1, 800f9ea <__gxx_personality_v0+0x3fa>
 800f9c2:	f1b9 0f00 	cmp.w	r9, #0
 800f9c6:	d109      	bne.n	800f9dc <__gxx_personality_v0+0x3ec>
 800f9c8:	2e00      	cmp	r6, #0
 800f9ca:	d05e      	beq.n	800fa8a <__gxx_personality_v0+0x49a>
 800f9cc:	4434      	add	r4, r6
 800f9ce:	e7a6      	b.n	800f91e <__gxx_personality_v0+0x32e>
 800f9d0:	006b      	lsls	r3, r5, #1
 800f9d2:	425b      	negs	r3, r3
 800f9d4:	e7ed      	b.n	800f9b2 <__gxx_personality_v0+0x3c2>
 800f9d6:	00ab      	lsls	r3, r5, #2
 800f9d8:	425b      	negs	r3, r3
 800f9da:	e7ea      	b.n	800f9b2 <__gxx_personality_v0+0x3c2>
 800f9dc:	ab0a      	add	r3, sp, #40	; 0x28
 800f9de:	2200      	movs	r2, #0
 800f9e0:	4648      	mov	r0, r9
 800f9e2:	f7ff fb1d 	bl	800f020 <__cxa_type_match>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d0ee      	beq.n	800f9c8 <__gxx_personality_v0+0x3d8>
 800f9ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9ee:	2403      	movs	r4, #3
 800f9f0:	e6ac      	b.n	800f74c <__gxx_personality_v0+0x15c>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	9307      	str	r3, [sp, #28]
 800f9f6:	e7e7      	b.n	800f9c8 <__gxx_personality_v0+0x3d8>
 800f9f8:	f1b9 0f00 	cmp.w	r9, #0
 800f9fc:	d001      	beq.n	800fa02 <__gxx_personality_v0+0x412>
 800f9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa00:	b193      	cbz	r3, 800fa28 <__gxx_personality_v0+0x438>
 800fa02:	1c6b      	adds	r3, r5, #1
 800fa04:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800fa08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1da      	bne.n	800f9c8 <__gxx_personality_v0+0x3d8>
 800fa12:	9b04      	ldr	r3, [sp, #16]
 800fa14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa18:	07da      	lsls	r2, r3, #31
 800fa1a:	f53f aef2 	bmi.w	800f802 <__gxx_personality_v0+0x212>
 800fa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d03c      	beq.n	800fa9e <__gxx_personality_v0+0x4ae>
 800fa24:	f7ff f8d4 	bl	800ebd0 <_ZSt10unexpectedv>
 800fa28:	f105 0801 	add.w	r8, r5, #1
 800fa2c:	ebc8 7388 	rsb	r3, r8, r8, lsl #30
 800fa30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa32:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fa38:	900f      	str	r0, [sp, #60]	; 0x3c
 800fa3a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 800fa3e:	b921      	cbnz	r1, 800fa4a <__gxx_personality_v0+0x45a>
 800fa40:	e7e7      	b.n	800fa12 <__gxx_personality_v0+0x422>
 800fa42:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800fa46:	2900      	cmp	r1, #0
 800fa48:	d0e3      	beq.n	800fa12 <__gxx_personality_v0+0x422>
 800fa4a:	4441      	add	r1, r8
 800fa4c:	465b      	mov	r3, fp
 800fa4e:	2200      	movs	r2, #0
 800fa50:	4648      	mov	r0, r9
 800fa52:	f7ff fae5 	bl	800f020 <__cxa_type_match>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d0f3      	beq.n	800fa42 <__gxx_personality_v0+0x452>
 800fa5a:	e7b5      	b.n	800f9c8 <__gxx_personality_v0+0x3d8>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e7a8      	b.n	800f9b2 <__gxx_personality_v0+0x3c2>
 800fa60:	f899 3007 	ldrb.w	r3, [r9, #7]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	bf0c      	ite	eq
 800fa68:	f859 3c20 	ldreq.w	r3, [r9, #-32]
 800fa6c:	f109 0358 	addne.w	r3, r9, #88	; 0x58
 800fa70:	930a      	str	r3, [sp, #40]	; 0x28
 800fa72:	e750      	b.n	800f916 <__gxx_personality_v0+0x326>
 800fa74:	9b03      	ldr	r3, [sp, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	f43f adc8 	beq.w	800f60c <__gxx_personality_v0+0x1c>
 800fa7c:	9b04      	ldr	r3, [sp, #16]
 800fa7e:	f013 0501 	ands.w	r5, r3, #1
 800fa82:	f47f adc3 	bne.w	800f60c <__gxx_personality_v0+0x1c>
 800fa86:	2402      	movs	r4, #2
 800fa88:	e663      	b.n	800f752 <__gxx_personality_v0+0x162>
 800fa8a:	9b07      	ldr	r3, [sp, #28]
 800fa8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1f3      	bne.n	800fa7c <__gxx_personality_v0+0x48c>
 800fa94:	e5ba      	b.n	800f60c <__gxx_personality_v0+0x1c>
 800fa96:	f7ff fc33 	bl	800f300 <__cxa_begin_catch>
 800fa9a:	f7ff f881 	bl	800eba0 <_ZSt9terminatev>
 800fa9e:	2403      	movs	r4, #3
 800faa0:	e6dd      	b.n	800f85e <__gxx_personality_v0+0x26e>
 800faa2:	bf00      	nop
	...

0800fab0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 800fab0:	b570      	push	{r4, r5, r6, lr}
 800fab2:	4b3d      	ldr	r3, [pc, #244]	; (800fba8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800fab4:	781a      	ldrb	r2, [r3, #0]
 800fab6:	b082      	sub	sp, #8
 800fab8:	2a00      	cmp	r2, #0
 800faba:	d136      	bne.n	800fb2a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
 800fabc:	2401      	movs	r4, #1
 800fabe:	701c      	strb	r4, [r3, #0]
 800fac0:	f000 f886 	bl	800fbd0 <__cxa_current_exception_type>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d05c      	beq.n	800fb82 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd2>
 800fac8:	6840      	ldr	r0, [r0, #4]
 800faca:	4d38      	ldr	r5, [pc, #224]	; (800fbac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800facc:	7803      	ldrb	r3, [r0, #0]
 800face:	2b2a      	cmp	r3, #42	; 0x2a
 800fad0:	ab02      	add	r3, sp, #8
 800fad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fad6:	bf0c      	ite	eq
 800fad8:	1904      	addeq	r4, r0, r4
 800fada:	4604      	movne	r4, r0
 800fadc:	f843 2d04 	str.w	r2, [r3, #-4]!
 800fae0:	2200      	movs	r2, #0
 800fae2:	4611      	mov	r1, r2
 800fae4:	4620      	mov	r0, r4
 800fae6:	f7f8 fcfd 	bl	80084e4 <__cxa_demangle>
 800faea:	682b      	ldr	r3, [r5, #0]
 800faec:	4606      	mov	r6, r0
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	482f      	ldr	r0, [pc, #188]	; (800fbb0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 800faf2:	2230      	movs	r2, #48	; 0x30
 800faf4:	2101      	movs	r1, #1
 800faf6:	f001 f91b 	bl	8010d30 <fwrite>
 800fafa:	9b01      	ldr	r3, [sp, #4]
 800fafc:	b17b      	cbz	r3, 800fb1e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	4620      	mov	r0, r4
 800fb02:	68d9      	ldr	r1, [r3, #12]
 800fb04:	f000 ff54 	bl	80109b0 <fputs>
 800fb08:	682b      	ldr	r3, [r5, #0]
 800fb0a:	482a      	ldr	r0, [pc, #168]	; (800fbb4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	2202      	movs	r2, #2
 800fb10:	2101      	movs	r1, #1
 800fb12:	f001 f90d 	bl	8010d30 <fwrite>
 800fb16:	9b01      	ldr	r3, [sp, #4]
 800fb18:	b18b      	cbz	r3, 800fb3e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
 800fb1a:	f7ff f8e1 	bl	800ece0 <__cxa_rethrow>
 800fb1e:	682b      	ldr	r3, [r5, #0]
 800fb20:	4630      	mov	r0, r6
 800fb22:	68d9      	ldr	r1, [r3, #12]
 800fb24:	f000 ff44 	bl	80109b0 <fputs>
 800fb28:	e7ee      	b.n	800fb08 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x58>
 800fb2a:	4b20      	ldr	r3, [pc, #128]	; (800fbac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800fb2c:	4822      	ldr	r0, [pc, #136]	; (800fbb8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	221d      	movs	r2, #29
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	2101      	movs	r1, #1
 800fb36:	f001 f8fb 	bl	8010d30 <fwrite>
 800fb3a:	f000 fee9 	bl	8010910 <abort>
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f001 f90e 	bl	8010d60 <free>
 800fb44:	e7e9      	b.n	800fb1a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6a>
 800fb46:	2901      	cmp	r1, #1
 800fb48:	460c      	mov	r4, r1
 800fb4a:	d127      	bne.n	800fb9c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>
 800fb4c:	f7ff fbd8 	bl	800f300 <__cxa_begin_catch>
 800fb50:	6803      	ldr	r3, [r0, #0]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	4798      	blx	r3
 800fb56:	682b      	ldr	r3, [r5, #0]
 800fb58:	4606      	mov	r6, r0
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	4817      	ldr	r0, [pc, #92]	; (800fbbc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 800fb5e:	4621      	mov	r1, r4
 800fb60:	220b      	movs	r2, #11
 800fb62:	f001 f8e5 	bl	8010d30 <fwrite>
 800fb66:	682b      	ldr	r3, [r5, #0]
 800fb68:	4630      	mov	r0, r6
 800fb6a:	68d9      	ldr	r1, [r3, #12]
 800fb6c:	f000 ff20 	bl	80109b0 <fputs>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	200a      	movs	r0, #10
 800fb74:	68d9      	ldr	r1, [r3, #12]
 800fb76:	f000 fedb 	bl	8010930 <fputc>
 800fb7a:	f7ff fc09 	bl	800f390 <__cxa_end_catch>
 800fb7e:	f000 fec7 	bl	8010910 <abort>
 800fb82:	4b0a      	ldr	r3, [pc, #40]	; (800fbac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800fb84:	480e      	ldr	r0, [pc, #56]	; (800fbc0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4621      	mov	r1, r4
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	222d      	movs	r2, #45	; 0x2d
 800fb8e:	f001 f8cf 	bl	8010d30 <fwrite>
 800fb92:	e7f4      	b.n	800fb7e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 800fb94:	f7ff fbfc 	bl	800f390 <__cxa_end_catch>
 800fb98:	f7ff fa3a 	bl	800f010 <__cxa_end_cleanup>
 800fb9c:	f7ff fbb0 	bl	800f300 <__cxa_begin_catch>
 800fba0:	f7ff fbf6 	bl	800f390 <__cxa_end_catch>
 800fba4:	e7eb      	b.n	800fb7e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 800fba6:	bf00      	nop
 800fba8:	20001c30 	.word	0x20001c30
 800fbac:	20000c40 	.word	0x20000c40
 800fbb0:	08016160 	.word	0x08016160
 800fbb4:	08016194 	.word	0x08016194
 800fbb8:	08016140 	.word	0x08016140
 800fbbc:	080161c8 	.word	0x080161c8
 800fbc0:	08016198 	.word	0x08016198
	...

0800fbd0 <__cxa_current_exception_type>:
 800fbd0:	b508      	push	{r3, lr}
 800fbd2:	f7ff fc2d 	bl	800f430 <__cxa_get_globals>
 800fbd6:	6800      	ldr	r0, [r0, #0]
 800fbd8:	b130      	cbz	r0, 800fbe8 <__cxa_current_exception_type+0x18>
 800fbda:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	bf04      	itt	eq
 800fbe2:	6800      	ldreq	r0, [r0, #0]
 800fbe4:	3878      	subeq	r0, #120	; 0x78
 800fbe6:	6800      	ldr	r0, [r0, #0]
 800fbe8:	bd08      	pop	{r3, pc}
 800fbea:	bf00      	nop
 800fbec:	0000      	movs	r0, r0
	...

0800fbf0 <roundf>:
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fbf6:	9901      	ldr	r1, [sp, #4]
 800fbf8:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800fbfc:	3b7f      	subs	r3, #127	; 0x7f
 800fbfe:	2b16      	cmp	r3, #22
 800fc00:	dc10      	bgt.n	800fc24 <roundf+0x34>
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	db1a      	blt.n	800fc3c <roundf+0x4c>
 800fc06:	4a11      	ldr	r2, [pc, #68]	; (800fc4c <roundf+0x5c>)
 800fc08:	fa42 f003 	asr.w	r0, r2, r3
 800fc0c:	4201      	tst	r1, r0
 800fc0e:	d00b      	beq.n	800fc28 <roundf+0x38>
 800fc10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800fc14:	411a      	asrs	r2, r3
 800fc16:	440a      	add	r2, r1
 800fc18:	ea22 0200 	bic.w	r2, r2, r0
 800fc1c:	ee00 2a10 	vmov	s0, r2
 800fc20:	b002      	add	sp, #8
 800fc22:	4770      	bx	lr
 800fc24:	2b80      	cmp	r3, #128	; 0x80
 800fc26:	d003      	beq.n	800fc30 <roundf+0x40>
 800fc28:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fc2c:	b002      	add	sp, #8
 800fc2e:	4770      	bx	lr
 800fc30:	eddd 7a01 	vldr	s15, [sp, #4]
 800fc34:	ee37 0aa7 	vadd.f32	s0, s15, s15
 800fc38:	b002      	add	sp, #8
 800fc3a:	4770      	bx	lr
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800fc42:	d1eb      	bne.n	800fc1c <roundf+0x2c>
 800fc44:	f042 527e 	orr.w	r2, r2, #1065353216	; 0x3f800000
 800fc48:	e7e8      	b.n	800fc1c <roundf+0x2c>
 800fc4a:	bf00      	nop
 800fc4c:	007fffff 	.word	0x007fffff

0800fc50 <powf>:
 800fc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc52:	ed2d 8b04 	vpush	{d8-d9}
 800fc56:	4caf      	ldr	r4, [pc, #700]	; (800ff14 <powf+0x2c4>)
 800fc58:	b08b      	sub	sp, #44	; 0x2c
 800fc5a:	eeb0 9a40 	vmov.f32	s18, s0
 800fc5e:	eef0 8a60 	vmov.f32	s17, s1
 800fc62:	f000 f9a5 	bl	800ffb0 <__ieee754_powf>
 800fc66:	f994 3000 	ldrsb.w	r3, [r4]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	eeb0 8a40 	vmov.f32	s16, s0
 800fc70:	d004      	beq.n	800fc7c <powf+0x2c>
 800fc72:	eeb0 0a68 	vmov.f32	s0, s17
 800fc76:	f000 fdab 	bl	80107d0 <__fpclassifyf>
 800fc7a:	b928      	cbnz	r0, 800fc88 <powf+0x38>
 800fc7c:	eeb0 0a48 	vmov.f32	s0, s16
 800fc80:	b00b      	add	sp, #44	; 0x2c
 800fc82:	ecbd 8b04 	vpop	{d8-d9}
 800fc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc88:	eeb0 0a49 	vmov.f32	s0, s18
 800fc8c:	f000 fda0 	bl	80107d0 <__fpclassifyf>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d132      	bne.n	800fcfa <powf+0xaa>
 800fc94:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9c:	d1ee      	bne.n	800fc7c <powf+0x2c>
 800fc9e:	4b9e      	ldr	r3, [pc, #632]	; (800ff18 <powf+0x2c8>)
 800fca0:	9008      	str	r0, [sp, #32]
 800fca2:	2201      	movs	r2, #1
 800fca4:	ee19 0a10 	vmov	r0, s18
 800fca8:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fcac:	f7f8 fdf4 	bl	8008898 <__aeabi_f2d>
 800fcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcb4:	ee18 0a90 	vmov	r0, s17
 800fcb8:	f7f8 fdee 	bl	8008898 <__aeabi_f2d>
 800fcbc:	f994 3000 	ldrsb.w	r3, [r4]
 800fcc0:	4f96      	ldr	r7, [pc, #600]	; (800ff1c <powf+0x2cc>)
 800fcc2:	2600      	movs	r6, #0
 800fcc4:	1c5a      	adds	r2, r3, #1
 800fcc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fcce:	d038      	beq.n	800fd42 <powf+0xf2>
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d036      	beq.n	800fd42 <powf+0xf2>
 800fcd4:	4668      	mov	r0, sp
 800fcd6:	f000 fcc3 	bl	8010660 <matherr>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	f000 809f 	beq.w	800fe1e <powf+0x1ce>
 800fce0:	9b08      	ldr	r3, [sp, #32]
 800fce2:	b11b      	cbz	r3, 800fcec <powf+0x9c>
 800fce4:	f000 fe1c 	bl	8010920 <__errno>
 800fce8:	9b08      	ldr	r3, [sp, #32]
 800fcea:	6003      	str	r3, [r0, #0]
 800fcec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fcf0:	f7f9 f8ee 	bl	8008ed0 <__aeabi_d2f>
 800fcf4:	ee00 0a10 	vmov	s0, r0
 800fcf8:	e7c2      	b.n	800fc80 <powf+0x30>
 800fcfa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	d121      	bne.n	800fd48 <powf+0xf8>
 800fd04:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0c:	d157      	bne.n	800fdbe <powf+0x16e>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	4a81      	ldr	r2, [pc, #516]	; (800ff18 <powf+0x2c8>)
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	ee19 0a10 	vmov	r0, s18
 800fd18:	2300      	movs	r3, #0
 800fd1a:	9308      	str	r3, [sp, #32]
 800fd1c:	9201      	str	r2, [sp, #4]
 800fd1e:	f7f8 fdbb 	bl	8008898 <__aeabi_f2d>
 800fd22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd26:	ee18 0a90 	vmov	r0, s17
 800fd2a:	f7f8 fdb5 	bl	8008898 <__aeabi_f2d>
 800fd2e:	f994 3000 	ldrsb.w	r3, [r4]
 800fd32:	2600      	movs	r6, #0
 800fd34:	2700      	movs	r7, #0
 800fd36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d0c8      	beq.n	800fcd4 <powf+0x84>
 800fd42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fd46:	e79b      	b.n	800fc80 <powf+0x30>
 800fd48:	eeb0 0a48 	vmov.f32	s0, s16
 800fd4c:	f000 fd30 	bl	80107b0 <finitef>
 800fd50:	4605      	mov	r5, r0
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d068      	beq.n	800fe28 <powf+0x1d8>
 800fd56:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd5e:	d18d      	bne.n	800fc7c <powf+0x2c>
 800fd60:	eeb0 0a49 	vmov.f32	s0, s18
 800fd64:	f000 fd24 	bl	80107b0 <finitef>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	d087      	beq.n	800fc7c <powf+0x2c>
 800fd6c:	eeb0 0a68 	vmov.f32	s0, s17
 800fd70:	f000 fd1e 	bl	80107b0 <finitef>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d081      	beq.n	800fc7c <powf+0x2c>
 800fd78:	2304      	movs	r3, #4
 800fd7a:	4a67      	ldr	r2, [pc, #412]	; (800ff18 <powf+0x2c8>)
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	ee19 0a10 	vmov	r0, s18
 800fd82:	2300      	movs	r3, #0
 800fd84:	9308      	str	r3, [sp, #32]
 800fd86:	9201      	str	r2, [sp, #4]
 800fd88:	f7f8 fd86 	bl	8008898 <__aeabi_f2d>
 800fd8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd90:	ee18 0a90 	vmov	r0, s17
 800fd94:	f7f8 fd80 	bl	8008898 <__aeabi_f2d>
 800fd98:	f994 3000 	ldrsb.w	r3, [r4]
 800fd9c:	2600      	movs	r6, #0
 800fd9e:	2700      	movs	r7, #0
 800fda0:	2b02      	cmp	r3, #2
 800fda2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fda6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fdaa:	d06e      	beq.n	800fe8a <powf+0x23a>
 800fdac:	4668      	mov	r0, sp
 800fdae:	f000 fc57 	bl	8010660 <matherr>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	d069      	beq.n	800fe8a <powf+0x23a>
 800fdb6:	9b08      	ldr	r3, [sp, #32]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d097      	beq.n	800fcec <powf+0x9c>
 800fdbc:	e792      	b.n	800fce4 <powf+0x94>
 800fdbe:	eeb0 0a68 	vmov.f32	s0, s17
 800fdc2:	f000 fcf5 	bl	80107b0 <finitef>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f43f af58 	beq.w	800fc7c <powf+0x2c>
 800fdcc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800fdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd4:	f57f af52 	bpl.w	800fc7c <powf+0x2c>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	4a4f      	ldr	r2, [pc, #316]	; (800ff18 <powf+0x2c8>)
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	ee19 0a10 	vmov	r0, s18
 800fde2:	2300      	movs	r3, #0
 800fde4:	9308      	str	r3, [sp, #32]
 800fde6:	9201      	str	r2, [sp, #4]
 800fde8:	f7f8 fd56 	bl	8008898 <__aeabi_f2d>
 800fdec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdf0:	ee18 0a90 	vmov	r0, s17
 800fdf4:	f7f8 fd50 	bl	8008898 <__aeabi_f2d>
 800fdf8:	7823      	ldrb	r3, [r4, #0]
 800fdfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d13c      	bne.n	800fe7c <powf+0x22c>
 800fe02:	2200      	movs	r2, #0
 800fe04:	2300      	movs	r3, #0
 800fe06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fe0a:	4668      	mov	r0, sp
 800fe0c:	f000 fc28 	bl	8010660 <matherr>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d1d0      	bne.n	800fdb6 <powf+0x166>
 800fe14:	f000 fd84 	bl	8010920 <__errno>
 800fe18:	2321      	movs	r3, #33	; 0x21
 800fe1a:	6003      	str	r3, [r0, #0]
 800fe1c:	e7cb      	b.n	800fdb6 <powf+0x166>
 800fe1e:	f000 fd7f 	bl	8010920 <__errno>
 800fe22:	2321      	movs	r3, #33	; 0x21
 800fe24:	6003      	str	r3, [r0, #0]
 800fe26:	e75b      	b.n	800fce0 <powf+0x90>
 800fe28:	eeb0 0a49 	vmov.f32	s0, s18
 800fe2c:	f000 fcc0 	bl	80107b0 <finitef>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	d090      	beq.n	800fd56 <powf+0x106>
 800fe34:	eeb0 0a68 	vmov.f32	s0, s17
 800fe38:	f000 fcba 	bl	80107b0 <finitef>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	d08a      	beq.n	800fd56 <powf+0x106>
 800fe40:	eeb0 0a48 	vmov.f32	s0, s16
 800fe44:	f000 fcc4 	bl	80107d0 <__fpclassifyf>
 800fe48:	bb20      	cbnz	r0, 800fe94 <powf+0x244>
 800fe4a:	4b33      	ldr	r3, [pc, #204]	; (800ff18 <powf+0x2c8>)
 800fe4c:	9008      	str	r0, [sp, #32]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	ee19 0a10 	vmov	r0, s18
 800fe54:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fe58:	f7f8 fd1e 	bl	8008898 <__aeabi_f2d>
 800fe5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe60:	ee18 0a90 	vmov	r0, s17
 800fe64:	f7f8 fd18 	bl	8008898 <__aeabi_f2d>
 800fe68:	7824      	ldrb	r4, [r4, #0]
 800fe6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	2300      	movs	r3, #0
 800fe72:	2c00      	cmp	r4, #0
 800fe74:	d137      	bne.n	800fee6 <powf+0x296>
 800fe76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fe7a:	e7c6      	b.n	800fe0a <powf+0x1ba>
 800fe7c:	4928      	ldr	r1, [pc, #160]	; (800ff20 <powf+0x2d0>)
 800fe7e:	2000      	movs	r0, #0
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fe86:	d0c5      	beq.n	800fe14 <powf+0x1c4>
 800fe88:	e7bf      	b.n	800fe0a <powf+0x1ba>
 800fe8a:	f000 fd49 	bl	8010920 <__errno>
 800fe8e:	2322      	movs	r3, #34	; 0x22
 800fe90:	6003      	str	r3, [r0, #0]
 800fe92:	e790      	b.n	800fdb6 <powf+0x166>
 800fe94:	4b20      	ldr	r3, [pc, #128]	; (800ff18 <powf+0x2c8>)
 800fe96:	9508      	str	r5, [sp, #32]
 800fe98:	2203      	movs	r2, #3
 800fe9a:	ee19 0a10 	vmov	r0, s18
 800fe9e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fea2:	f7f8 fcf9 	bl	8008898 <__aeabi_f2d>
 800fea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800feaa:	ee18 0a90 	vmov	r0, s17
 800feae:	f7f8 fcf3 	bl	8008898 <__aeabi_f2d>
 800feb2:	f994 3000 	ldrsb.w	r3, [r4]
 800feb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800feba:	b9eb      	cbnz	r3, 800fef8 <powf+0x2a8>
 800febc:	4b19      	ldr	r3, [pc, #100]	; (800ff24 <powf+0x2d4>)
 800febe:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800fec2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800fec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fece:	d42d      	bmi.n	800ff2c <powf+0x2dc>
 800fed0:	4668      	mov	r0, sp
 800fed2:	f000 fbc5 	bl	8010660 <matherr>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	f47f af02 	bne.w	800fce0 <powf+0x90>
 800fedc:	f000 fd20 	bl	8010920 <__errno>
 800fee0:	2322      	movs	r3, #34	; 0x22
 800fee2:	6003      	str	r3, [r0, #0]
 800fee4:	e6fc      	b.n	800fce0 <powf+0x90>
 800fee6:	4610      	mov	r0, r2
 800fee8:	4619      	mov	r1, r3
 800feea:	f7f8 fe53 	bl	8008b94 <__aeabi_ddiv>
 800feee:	2c02      	cmp	r4, #2
 800fef0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fef4:	d08e      	beq.n	800fe14 <powf+0x1c4>
 800fef6:	e788      	b.n	800fe0a <powf+0x1ba>
 800fef8:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <powf+0x2d8>)
 800fefa:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800fefe:	2200      	movs	r2, #0
 800ff00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ff08:	d42c      	bmi.n	800ff64 <powf+0x314>
 800ff0a:	f994 3000 	ldrsb.w	r3, [r4]
 800ff0e:	2b02      	cmp	r3, #2
 800ff10:	d1de      	bne.n	800fed0 <powf+0x280>
 800ff12:	e7e3      	b.n	800fedc <powf+0x28c>
 800ff14:	20000810 	.word	0x20000810
 800ff18:	080169e0 	.word	0x080169e0
 800ff1c:	3ff00000 	.word	0x3ff00000
 800ff20:	fff00000 	.word	0xfff00000
 800ff24:	47efffff 	.word	0x47efffff
 800ff28:	7ff00000 	.word	0x7ff00000
 800ff2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff30:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ff34:	ee17 0a90 	vmov	r0, s15
 800ff38:	f7f8 fcae 	bl	8008898 <__aeabi_f2d>
 800ff3c:	4606      	mov	r6, r0
 800ff3e:	460f      	mov	r7, r1
 800ff40:	ec47 6b10 	vmov	d0, r6, r7
 800ff44:	f000 fb94 	bl	8010670 <rint>
 800ff48:	4630      	mov	r0, r6
 800ff4a:	ec53 2b10 	vmov	r2, r3, d0
 800ff4e:	4639      	mov	r1, r7
 800ff50:	f7f8 ff64 	bl	8008e1c <__aeabi_dcmpeq>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d1d8      	bne.n	800ff0a <powf+0x2ba>
 800ff58:	4b10      	ldr	r3, [pc, #64]	; (800ff9c <powf+0x34c>)
 800ff5a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ff5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ff62:	e7d2      	b.n	800ff0a <powf+0x2ba>
 800ff64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff68:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ff6c:	ee17 0a90 	vmov	r0, s15
 800ff70:	f7f8 fc92 	bl	8008898 <__aeabi_f2d>
 800ff74:	4606      	mov	r6, r0
 800ff76:	460f      	mov	r7, r1
 800ff78:	ec47 6b10 	vmov	d0, r6, r7
 800ff7c:	f000 fb78 	bl	8010670 <rint>
 800ff80:	4630      	mov	r0, r6
 800ff82:	ec53 2b10 	vmov	r2, r3, d0
 800ff86:	4639      	mov	r1, r7
 800ff88:	f7f8 ff48 	bl	8008e1c <__aeabi_dcmpeq>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d1bc      	bne.n	800ff0a <powf+0x2ba>
 800ff90:	4b03      	ldr	r3, [pc, #12]	; (800ffa0 <powf+0x350>)
 800ff92:	2200      	movs	r2, #0
 800ff94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ff98:	e7b7      	b.n	800ff0a <powf+0x2ba>
 800ff9a:	bf00      	nop
 800ff9c:	c7efffff 	.word	0xc7efffff
 800ffa0:	fff00000 	.word	0xfff00000
	...

0800ffb0 <__ieee754_powf>:
 800ffb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffb4:	ed2d 8b02 	vpush	{d8}
 800ffb8:	b082      	sub	sp, #8
 800ffba:	edcd 0a00 	vstr	s1, [sp]
 800ffbe:	9c00      	ldr	r4, [sp, #0]
 800ffc0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ffc4:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
 800ffc8:	d014      	beq.n	800fff4 <__ieee754_powf+0x44>
 800ffca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ffce:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
 800ffd2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ffd6:	dd07      	ble.n	800ffe8 <__ieee754_powf+0x38>
 800ffd8:	4858      	ldr	r0, [pc, #352]	; (801013c <__ieee754_powf+0x18c>)
 800ffda:	b002      	add	sp, #8
 800ffdc:	ecbd 8b02 	vpop	{d8}
 800ffe0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe4:	f000 bc14 	b.w	8010810 <nanf>
 800ffe8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ffec:	dd09      	ble.n	8010002 <__ieee754_powf+0x52>
 800ffee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800fff2:	d1f1      	bne.n	800ffd8 <__ieee754_powf+0x28>
 800fff4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fff8:	b002      	add	sp, #8
 800fffa:	ecbd 8b02 	vpop	{d8}
 800fffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010002:	f1b8 0f00 	cmp.w	r8, #0
 8010006:	db4d      	blt.n	80100a4 <__ieee754_powf+0xf4>
 8010008:	f04f 0a00 	mov.w	sl, #0
 801000c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8010010:	d03f      	beq.n	8010092 <__ieee754_powf+0xe2>
 8010012:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8010016:	d058      	beq.n	80100ca <__ieee754_powf+0x11a>
 8010018:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801001c:	d06e      	beq.n	80100fc <__ieee754_powf+0x14c>
 801001e:	9d01      	ldr	r5, [sp, #4]
 8010020:	f8dd 9000 	ldr.w	r9, [sp]
 8010024:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8010028:	ee00 5a10 	vmov	s0, r5
 801002c:	d01c      	beq.n	8010068 <__ieee754_powf+0xb8>
 801002e:	f000 fbb7 	bl	80107a0 <fabsf>
 8010032:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010036:	d04d      	beq.n	80100d4 <__ieee754_powf+0x124>
 8010038:	2f00      	cmp	r7, #0
 801003a:	d04b      	beq.n	80100d4 <__ieee754_powf+0x124>
 801003c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010040:	d048      	beq.n	80100d4 <__ieee754_powf+0x124>
 8010042:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8010046:	3b01      	subs	r3, #1
 8010048:	ea5a 0203 	orrs.w	r2, sl, r3
 801004c:	d06e      	beq.n	801012c <__ieee754_powf+0x17c>
 801004e:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
 8010052:	dd7b      	ble.n	801014c <__ieee754_powf+0x19c>
 8010054:	4a3a      	ldr	r2, [pc, #232]	; (8010140 <__ieee754_powf+0x190>)
 8010056:	4297      	cmp	r7, r2
 8010058:	f300 81d1 	bgt.w	80103fe <__ieee754_powf+0x44e>
 801005c:	2c00      	cmp	r4, #0
 801005e:	f2c0 81d4 	blt.w	801040a <__ieee754_powf+0x45a>
 8010062:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8010144 <__ieee754_powf+0x194>
 8010066:	e7c7      	b.n	800fff8 <__ieee754_powf+0x48>
 8010068:	f1b8 0f00 	cmp.w	r8, #0
 801006c:	da4b      	bge.n	8010106 <__ieee754_powf+0x156>
 801006e:	f000 fb97 	bl	80107a0 <fabsf>
 8010072:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010076:	d001      	beq.n	801007c <__ieee754_powf+0xcc>
 8010078:	2f00      	cmp	r7, #0
 801007a:	d1df      	bne.n	801003c <__ieee754_powf+0x8c>
 801007c:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 8010080:	ea57 030a 	orrs.w	r3, r7, sl
 8010084:	d04d      	beq.n	8010122 <__ieee754_powf+0x172>
 8010086:	f1ba 0f01 	cmp.w	sl, #1
 801008a:	d1b5      	bne.n	800fff8 <__ieee754_powf+0x48>
 801008c:	eeb1 0a40 	vneg.f32	s0, s0
 8010090:	e7b2      	b.n	800fff8 <__ieee754_powf+0x48>
 8010092:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010096:	d0ad      	beq.n	800fff4 <__ieee754_powf+0x44>
 8010098:	dd29      	ble.n	80100ee <__ieee754_powf+0x13e>
 801009a:	2c00      	cmp	r4, #0
 801009c:	dbe1      	blt.n	8010062 <__ieee754_powf+0xb2>
 801009e:	ed9d 0a00 	vldr	s0, [sp]
 80100a2:	e7a9      	b.n	800fff8 <__ieee754_powf+0x48>
 80100a4:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
 80100a8:	da1e      	bge.n	80100e8 <__ieee754_powf+0x138>
 80100aa:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80100ae:	db09      	blt.n	80100c4 <__ieee754_powf+0x114>
 80100b0:	15f3      	asrs	r3, r6, #23
 80100b2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80100b6:	fa46 f203 	asr.w	r2, r6, r3
 80100ba:	fa02 f303 	lsl.w	r3, r2, r3
 80100be:	429e      	cmp	r6, r3
 80100c0:	f000 8198 	beq.w	80103f4 <__ieee754_powf+0x444>
 80100c4:	f04f 0a00 	mov.w	sl, #0
 80100c8:	e7a3      	b.n	8010012 <__ieee754_powf+0x62>
 80100ca:	2c00      	cmp	r4, #0
 80100cc:	db22      	blt.n	8010114 <__ieee754_powf+0x164>
 80100ce:	ed9d 0a01 	vldr	s0, [sp, #4]
 80100d2:	e791      	b.n	800fff8 <__ieee754_powf+0x48>
 80100d4:	2c00      	cmp	r4, #0
 80100d6:	bfbc      	itt	lt
 80100d8:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80100dc:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80100e0:	f1b8 0f00 	cmp.w	r8, #0
 80100e4:	da88      	bge.n	800fff8 <__ieee754_powf+0x48>
 80100e6:	e7c9      	b.n	801007c <__ieee754_powf+0xcc>
 80100e8:	f04f 0a02 	mov.w	sl, #2
 80100ec:	e78e      	b.n	801000c <__ieee754_powf+0x5c>
 80100ee:	2c00      	cmp	r4, #0
 80100f0:	dab7      	bge.n	8010062 <__ieee754_powf+0xb2>
 80100f2:	eddd 7a00 	vldr	s15, [sp]
 80100f6:	eeb1 0a67 	vneg.f32	s0, s15
 80100fa:	e77d      	b.n	800fff8 <__ieee754_powf+0x48>
 80100fc:	eddd 7a01 	vldr	s15, [sp, #4]
 8010100:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8010104:	e778      	b.n	800fff8 <__ieee754_powf+0x48>
 8010106:	b002      	add	sp, #8
 8010108:	ecbd 8b02 	vpop	{d8}
 801010c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010110:	f000 ba4e 	b.w	80105b0 <__ieee754_sqrtf>
 8010114:	ed9d 7a01 	vldr	s14, [sp, #4]
 8010118:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801011c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010120:	e76a      	b.n	800fff8 <__ieee754_powf+0x48>
 8010122:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010126:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801012a:	e765      	b.n	800fff8 <__ieee754_powf+0x48>
 801012c:	ee07 5a90 	vmov	s15, r5
 8010130:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8010134:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010138:	e75e      	b.n	800fff8 <__ieee754_powf+0x48>
 801013a:	bf00      	nop
 801013c:	08016488 	.word	0x08016488
 8010140:	3f7ffff7 	.word	0x3f7ffff7
 8010144:	00000000 	.word	0x00000000
 8010148:	4b800000 	.word	0x4b800000
 801014c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8010150:	f280 8168 	bge.w	8010424 <__ieee754_powf+0x474>
 8010154:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 8010148 <__ieee754_powf+0x198>
 8010158:	ee60 7a27 	vmul.f32	s15, s0, s15
 801015c:	f06f 0217 	mvn.w	r2, #23
 8010160:	ee17 7a90 	vmov	r7, s15
 8010164:	48f2      	ldr	r0, [pc, #968]	; (8010530 <__ieee754_powf+0x580>)
 8010166:	15f9      	asrs	r1, r7, #23
 8010168:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801016c:	397f      	subs	r1, #127	; 0x7f
 801016e:	4287      	cmp	r7, r0
 8010170:	440a      	add	r2, r1
 8010172:	f047 517e 	orr.w	r1, r7, #1065353216	; 0x3f800000
 8010176:	f340 814d 	ble.w	8010414 <__ieee754_powf+0x464>
 801017a:	48ee      	ldr	r0, [pc, #952]	; (8010534 <__ieee754_powf+0x584>)
 801017c:	4287      	cmp	r7, r0
 801017e:	f340 819b 	ble.w	80104b8 <__ieee754_powf+0x508>
 8010182:	ed9f 4aed 	vldr	s8, [pc, #948]	; 8010538 <__ieee754_powf+0x588>
 8010186:	3201      	adds	r2, #1
 8010188:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801018c:	eeb0 3a44 	vmov.f32	s6, s8
 8010190:	2000      	movs	r0, #0
 8010192:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010196:	ee07 1a10 	vmov	s14, r1
 801019a:	ee77 7a06 	vadd.f32	s15, s14, s12
 801019e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101a2:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 80101a6:	1049      	asrs	r1, r1, #1
 80101a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80101ac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80101b0:	4401      	add	r1, r0
 80101b2:	ee77 6a46 	vsub.f32	s13, s14, s12
 80101b6:	ee02 1a10 	vmov	s4, r1
 80101ba:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80101be:	ee72 4a46 	vsub.f32	s9, s4, s12
 80101c2:	eddf 8ade 	vldr	s17, [pc, #888]	; 801053c <__ieee754_powf+0x58c>
 80101c6:	ed9f 8ade 	vldr	s16, [pc, #888]	; 8010540 <__ieee754_powf+0x590>
 80101ca:	eddf 1ade 	vldr	s3, [pc, #888]	; 8010544 <__ieee754_powf+0x594>
 80101ce:	ed9f 0ade 	vldr	s0, [pc, #888]	; 8010548 <__ieee754_powf+0x598>
 80101d2:	eddf 0ade 	vldr	s1, [pc, #888]	; 801054c <__ieee754_powf+0x59c>
 80101d6:	ed9f 1ade 	vldr	s2, [pc, #888]	; 8010550 <__ieee754_powf+0x5a0>
 80101da:	eddf 7ade 	vldr	s15, [pc, #888]	; 8010554 <__ieee754_powf+0x5a4>
 80101de:	eddf 2ade 	vldr	s5, [pc, #888]	; 8010558 <__ieee754_powf+0x5a8>
 80101e2:	ee23 6aa3 	vmul.f32	s12, s7, s7
 80101e6:	ee13 1a90 	vmov	r1, s7
 80101ea:	eea6 8a28 	vfma.f32	s16, s12, s17
 80101ee:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80101f2:	f021 010f 	bic.w	r1, r1, #15
 80101f6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80101fa:	eef0 4a61 	vmov.f32	s9, s3
 80101fe:	ee05 1a10 	vmov	s10, r1
 8010202:	eee6 4a08 	vfma.f32	s9, s12, s16
 8010206:	eef1 1a45 	vneg.f32	s3, s10
 801020a:	eee1 6a82 	vfma.f32	s13, s3, s4
 801020e:	eea6 0a24 	vfma.f32	s0, s12, s9
 8010212:	eee1 6a87 	vfma.f32	s13, s3, s14
 8010216:	eee6 0a00 	vfma.f32	s1, s12, s0
 801021a:	ee66 5aa5 	vmul.f32	s11, s13, s11
 801021e:	eef0 6a41 	vmov.f32	s13, s2
 8010222:	eee6 6a20 	vfma.f32	s13, s12, s1
 8010226:	ee33 7a85 	vadd.f32	s14, s7, s10
 801022a:	ee26 6a06 	vmul.f32	s12, s12, s12
 801022e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010232:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8010236:	eea6 7a26 	vfma.f32	s14, s12, s13
 801023a:	eef0 6a64 	vmov.f32	s13, s9
 801023e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8010242:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 801055c <__ieee754_powf+0x5ac>
 8010246:	ee36 6a87 	vadd.f32	s12, s13, s14
 801024a:	ee06 2a90 	vmov	s13, r2
 801024e:	ee16 2a10 	vmov	r2, s12
 8010252:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8010256:	f022 020f 	bic.w	r2, r2, #15
 801025a:	ee06 2a10 	vmov	s12, r2
 801025e:	ee76 4a64 	vsub.f32	s9, s12, s9
 8010262:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010266:	eee1 4a85 	vfma.f32	s9, s3, s10
 801026a:	ee37 7a64 	vsub.f32	s14, s14, s9
 801026e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010272:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010276:	eef0 5a47 	vmov.f32	s11, s14
 801027a:	eee5 5a06 	vfma.f32	s11, s10, s12
 801027e:	ee15 2a90 	vmov	r2, s11
 8010282:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8010286:	f022 020f 	bic.w	r2, r2, #15
 801028a:	ee05 2a10 	vmov	s10, r2
 801028e:	eea1 5a86 	vfma.f32	s10, s3, s12
 8010292:	ee05 2a90 	vmov	s11, r2
 8010296:	ee37 7a45 	vsub.f32	s14, s14, s10
 801029a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801029e:	eee5 7aa2 	vfma.f32	s15, s11, s5
 80102a2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80102a6:	eeb0 7a67 	vmov.f32	s14, s15
 80102aa:	eea5 7a82 	vfma.f32	s14, s11, s4
 80102ae:	ee37 7a04 	vadd.f32	s14, s14, s8
 80102b2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80102b6:	ee17 2a10 	vmov	r2, s14
 80102ba:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80102be:	f022 020f 	bic.w	r2, r2, #15
 80102c2:	ee07 2a10 	vmov	s14, r2
 80102c6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80102ca:	ee36 7ac4 	vsub.f32	s14, s13, s8
 80102ce:	eea5 7ac2 	vfms.f32	s14, s11, s4
 80102d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80102d6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80102da:	f024 040f 	bic.w	r4, r4, #15
 80102de:	ee07 9a90 	vmov	s15, r9
 80102e2:	ee06 4a90 	vmov	s13, r4
 80102e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102ea:	ee06 4a10 	vmov	s12, r4
 80102ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102f2:	ee06 2a90 	vmov	s13, r2
 80102f6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80102fa:	ee06 2a10 	vmov	s12, r2
 80102fe:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010302:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010306:	ea5a 0303 	orrs.w	r3, sl, r3
 801030a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801030e:	ee37 6a26 	vadd.f32	s12, s14, s13
 8010312:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010316:	ee16 2a10 	vmov	r2, s12
 801031a:	bf14      	ite	ne
 801031c:	eeb0 8a67 	vmovne.f32	s16, s15
 8010320:	eeb0 8a40 	vmoveq.f32	s16, s0
 8010324:	2a00      	cmp	r2, #0
 8010326:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801032a:	f340 80b2 	ble.w	8010492 <__ieee754_powf+0x4e2>
 801032e:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8010332:	f300 8084 	bgt.w	801043e <__ieee754_powf+0x48e>
 8010336:	d077      	beq.n	8010428 <__ieee754_powf+0x478>
 8010338:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801033c:	f300 8086 	bgt.w	801044c <__ieee754_powf+0x49c>
 8010340:	2300      	movs	r3, #0
 8010342:	4618      	mov	r0, r3
 8010344:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8010348:	f022 020f 	bic.w	r2, r2, #15
 801034c:	ee05 2a90 	vmov	s11, r2
 8010350:	ed9f 6a83 	vldr	s12, [pc, #524]	; 8010560 <__ieee754_powf+0x5b0>
 8010354:	eddf 7a83 	vldr	s15, [pc, #524]	; 8010564 <__ieee754_powf+0x5b4>
 8010358:	eddf 2a83 	vldr	s5, [pc, #524]	; 8010568 <__ieee754_powf+0x5b8>
 801035c:	ed9f 3a83 	vldr	s6, [pc, #524]	; 801056c <__ieee754_powf+0x5bc>
 8010360:	ed9f 2a83 	vldr	s4, [pc, #524]	; 8010570 <__ieee754_powf+0x5c0>
 8010364:	eddf 3a83 	vldr	s7, [pc, #524]	; 8010574 <__ieee754_powf+0x5c4>
 8010368:	ed9f 4a83 	vldr	s8, [pc, #524]	; 8010578 <__ieee754_powf+0x5c8>
 801036c:	eddf 4a83 	vldr	s9, [pc, #524]	; 801057c <__ieee754_powf+0x5cc>
 8010370:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010374:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010378:	ee37 7a66 	vsub.f32	s14, s14, s13
 801037c:	ee65 6a86 	vmul.f32	s13, s11, s12
 8010380:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8010384:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010388:	eeb0 7a66 	vmov.f32	s14, s13
 801038c:	eee5 6aa2 	vfma.f32	s13, s11, s5
 8010390:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8010394:	eef0 1a66 	vmov.f32	s3, s13
 8010398:	eee5 1ae2 	vfms.f32	s3, s11, s5
 801039c:	eef0 5a43 	vmov.f32	s11, s6
 80103a0:	eee7 5a82 	vfma.f32	s11, s15, s4
 80103a4:	ee37 7a61 	vsub.f32	s14, s14, s3
 80103a8:	eee7 3aa5 	vfma.f32	s7, s15, s11
 80103ac:	eea6 7a87 	vfma.f32	s14, s13, s14
 80103b0:	eea7 4aa3 	vfma.f32	s8, s15, s7
 80103b4:	eee7 4a84 	vfma.f32	s9, s15, s8
 80103b8:	eef0 5a64 	vmov.f32	s11, s9
 80103bc:	eef0 4a66 	vmov.f32	s9, s13
 80103c0:	eee7 4ae5 	vfms.f32	s9, s15, s11
 80103c4:	ee66 5aa4 	vmul.f32	s11, s13, s9
 80103c8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80103cc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80103d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80103d4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80103d8:	ee35 0a66 	vsub.f32	s0, s10, s13
 80103dc:	ee10 2a10 	vmov	r2, s0
 80103e0:	4413      	add	r3, r2
 80103e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80103e6:	f2c0 809f 	blt.w	8010528 <__ieee754_powf+0x578>
 80103ea:	ee00 3a10 	vmov	s0, r3
 80103ee:	ee20 0a08 	vmul.f32	s0, s0, s16
 80103f2:	e601      	b.n	800fff8 <__ieee754_powf+0x48>
 80103f4:	f002 0201 	and.w	r2, r2, #1
 80103f8:	f1c2 0a02 	rsb	sl, r2, #2
 80103fc:	e609      	b.n	8010012 <__ieee754_powf+0x62>
 80103fe:	4a60      	ldr	r2, [pc, #384]	; (8010580 <__ieee754_powf+0x5d0>)
 8010400:	4297      	cmp	r7, r2
 8010402:	dd62      	ble.n	80104ca <__ieee754_powf+0x51a>
 8010404:	2c00      	cmp	r4, #0
 8010406:	f77f ae2c 	ble.w	8010062 <__ieee754_powf+0xb2>
 801040a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8010584 <__ieee754_powf+0x5d4>
 801040e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010412:	e5f1      	b.n	800fff8 <__ieee754_powf+0x48>
 8010414:	ed9f 4a48 	vldr	s8, [pc, #288]	; 8010538 <__ieee754_powf+0x588>
 8010418:	2000      	movs	r0, #0
 801041a:	eeb0 3a44 	vmov.f32	s6, s8
 801041e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010422:	e6b8      	b.n	8010196 <__ieee754_powf+0x1e6>
 8010424:	2200      	movs	r2, #0
 8010426:	e69d      	b.n	8010164 <__ieee754_powf+0x1b4>
 8010428:	eddf 7a57 	vldr	s15, [pc, #348]	; 8010588 <__ieee754_powf+0x5d8>
 801042c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010434:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043c:	dd06      	ble.n	801044c <__ieee754_powf+0x49c>
 801043e:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8010584 <__ieee754_powf+0x5d4>
 8010442:	ee68 7a00 	vmul.f32	s15, s16, s0
 8010446:	ee27 0a80 	vmul.f32	s0, s15, s0
 801044a:	e5d5      	b.n	800fff8 <__ieee754_powf+0x48>
 801044c:	15db      	asrs	r3, r3, #23
 801044e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8010452:	3b7e      	subs	r3, #126	; 0x7e
 8010454:	fa41 f303 	asr.w	r3, r1, r3
 8010458:	1899      	adds	r1, r3, r2
 801045a:	f3c1 50c7 	ubfx	r0, r1, #23, #8
 801045e:	4c4b      	ldr	r4, [pc, #300]	; (801058c <__ieee754_powf+0x5dc>)
 8010460:	387f      	subs	r0, #127	; 0x7f
 8010462:	4104      	asrs	r4, r0
 8010464:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8010468:	ea21 0104 	bic.w	r1, r1, r4
 801046c:	ee07 1a90 	vmov	s15, r1
 8010470:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010474:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010478:	f1c0 0017 	rsb	r0, r0, #23
 801047c:	fa43 f000 	asr.w	r0, r3, r0
 8010480:	2a00      	cmp	r2, #0
 8010482:	ee77 7a26 	vadd.f32	s15, s14, s13
 8010486:	bfb8      	it	lt
 8010488:	4240      	neglt	r0, r0
 801048a:	05c3      	lsls	r3, r0, #23
 801048c:	ee17 2a90 	vmov	r2, s15
 8010490:	e758      	b.n	8010344 <__ieee754_powf+0x394>
 8010492:	493f      	ldr	r1, [pc, #252]	; (8010590 <__ieee754_powf+0x5e0>)
 8010494:	428b      	cmp	r3, r1
 8010496:	dc08      	bgt.n	80104aa <__ieee754_powf+0x4fa>
 8010498:	f47f af4e 	bne.w	8010338 <__ieee754_powf+0x388>
 801049c:	ee36 6a66 	vsub.f32	s12, s12, s13
 80104a0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a8:	d8d0      	bhi.n	801044c <__ieee754_powf+0x49c>
 80104aa:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8010594 <__ieee754_powf+0x5e4>
 80104ae:	ee68 7a00 	vmul.f32	s15, s16, s0
 80104b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80104b6:	e59f      	b.n	800fff8 <__ieee754_powf+0x48>
 80104b8:	ed9f 4a37 	vldr	s8, [pc, #220]	; 8010598 <__ieee754_powf+0x5e8>
 80104bc:	ed9f 3a37 	vldr	s6, [pc, #220]	; 801059c <__ieee754_powf+0x5ec>
 80104c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80104c4:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80104c8:	e665      	b.n	8010196 <__ieee754_powf+0x1e6>
 80104ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80104ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104d2:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8010548 <__ieee754_powf+0x598>
 80104d6:	eddf 7a32 	vldr	s15, [pc, #200]	; 80105a0 <__ieee754_powf+0x5f0>
 80104da:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80105a4 <__ieee754_powf+0x5f4>
 80104de:	eddf 5a32 	vldr	s11, [pc, #200]	; 80105a8 <__ieee754_powf+0x5f8>
 80104e2:	eef1 6a40 	vneg.f32	s13, s0
 80104e6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80104ea:	eea6 6a87 	vfma.f32	s12, s13, s14
 80104ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80104f2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80104f6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80104fa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80104fe:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010502:	eee0 7a05 	vfma.f32	s15, s0, s10
 8010506:	eeb0 7a67 	vmov.f32	s14, s15
 801050a:	eea0 7a25 	vfma.f32	s14, s0, s11
 801050e:	ee17 2a10 	vmov	r2, s14
 8010512:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8010516:	f022 020f 	bic.w	r2, r2, #15
 801051a:	ee07 2a10 	vmov	s14, r2
 801051e:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8010522:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010526:	e6d6      	b.n	80102d6 <__ieee754_powf+0x326>
 8010528:	f000 f97a 	bl	8010820 <scalbnf>
 801052c:	e75f      	b.n	80103ee <__ieee754_powf+0x43e>
 801052e:	bf00      	nop
 8010530:	001cc471 	.word	0x001cc471
 8010534:	005db3d6 	.word	0x005db3d6
 8010538:	00000000 	.word	0x00000000
 801053c:	3e53f142 	.word	0x3e53f142
 8010540:	3e6c3255 	.word	0x3e6c3255
 8010544:	3e8ba305 	.word	0x3e8ba305
 8010548:	3eaaaaab 	.word	0x3eaaaaab
 801054c:	3edb6db7 	.word	0x3edb6db7
 8010550:	3f19999a 	.word	0x3f19999a
 8010554:	3f76384f 	.word	0x3f76384f
 8010558:	369dc3a0 	.word	0x369dc3a0
 801055c:	3f763800 	.word	0x3f763800
 8010560:	35bfbe8c 	.word	0x35bfbe8c
 8010564:	3f317218 	.word	0x3f317218
 8010568:	3f317200 	.word	0x3f317200
 801056c:	b5ddea0e 	.word	0xb5ddea0e
 8010570:	3331bb4c 	.word	0x3331bb4c
 8010574:	388ab355 	.word	0x388ab355
 8010578:	bb360b61 	.word	0xbb360b61
 801057c:	3e2aaaab 	.word	0x3e2aaaab
 8010580:	3f800007 	.word	0x3f800007
 8010584:	7149f2ca 	.word	0x7149f2ca
 8010588:	3338aa3c 	.word	0x3338aa3c
 801058c:	007fffff 	.word	0x007fffff
 8010590:	43160000 	.word	0x43160000
 8010594:	0da24260 	.word	0x0da24260
 8010598:	3f15c000 	.word	0x3f15c000
 801059c:	35d1cfdc 	.word	0x35d1cfdc
 80105a0:	3fb8aa3b 	.word	0x3fb8aa3b
 80105a4:	36eca570 	.word	0x36eca570
 80105a8:	3fb8aa00 	.word	0x3fb8aa00
 80105ac:	00000000 	.word	0x00000000

080105b0 <__ieee754_sqrtf>:
 80105b0:	ee10 3a10 	vmov	r3, s0
 80105b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80105b8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80105bc:	b470      	push	{r4, r5, r6}
 80105be:	d230      	bcs.n	8010622 <__ieee754_sqrtf+0x72>
 80105c0:	b36a      	cbz	r2, 801061e <__ieee754_sqrtf+0x6e>
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	db3d      	blt.n	8010642 <__ieee754_sqrtf+0x92>
 80105c6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80105ca:	ea4f 50e3 	mov.w	r0, r3, asr #23
 80105ce:	d32c      	bcc.n	801062a <__ieee754_sqrtf+0x7a>
 80105d0:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
 80105d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80105d8:	07d1      	lsls	r1, r2, #31
 80105da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80105de:	bf48      	it	mi
 80105e0:	005b      	lslmi	r3, r3, #1
 80105e2:	2400      	movs	r4, #0
 80105e4:	1056      	asrs	r6, r2, #1
 80105e6:	005b      	lsls	r3, r3, #1
 80105e8:	4625      	mov	r5, r4
 80105ea:	2119      	movs	r1, #25
 80105ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80105f0:	18a8      	adds	r0, r5, r2
 80105f2:	4298      	cmp	r0, r3
 80105f4:	dc02      	bgt.n	80105fc <__ieee754_sqrtf+0x4c>
 80105f6:	1a1b      	subs	r3, r3, r0
 80105f8:	1885      	adds	r5, r0, r2
 80105fa:	4414      	add	r4, r2
 80105fc:	3901      	subs	r1, #1
 80105fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010602:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010606:	d1f3      	bne.n	80105f0 <__ieee754_sqrtf+0x40>
 8010608:	b113      	cbz	r3, 8010610 <__ieee754_sqrtf+0x60>
 801060a:	f004 0301 	and.w	r3, r4, #1
 801060e:	441c      	add	r4, r3
 8010610:	1064      	asrs	r4, r4, #1
 8010612:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8010616:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 801061a:	ee00 3a10 	vmov	s0, r3
 801061e:	bc70      	pop	{r4, r5, r6}
 8010620:	4770      	bx	lr
 8010622:	eea0 0a00 	vfma.f32	s0, s0, s0
 8010626:	bc70      	pop	{r4, r5, r6}
 8010628:	4770      	bx	lr
 801062a:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 801062e:	d001      	beq.n	8010634 <__ieee754_sqrtf+0x84>
 8010630:	e00c      	b.n	801064c <__ieee754_sqrtf+0x9c>
 8010632:	460a      	mov	r2, r1
 8010634:	005b      	lsls	r3, r3, #1
 8010636:	021c      	lsls	r4, r3, #8
 8010638:	f102 0101 	add.w	r1, r2, #1
 801063c:	d5f9      	bpl.n	8010632 <__ieee754_sqrtf+0x82>
 801063e:	1a80      	subs	r0, r0, r2
 8010640:	e7c6      	b.n	80105d0 <__ieee754_sqrtf+0x20>
 8010642:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010646:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801064a:	e7e8      	b.n	801061e <__ieee754_sqrtf+0x6e>
 801064c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010650:	e7f5      	b.n	801063e <__ieee754_sqrtf+0x8e>
 8010652:	bf00      	nop
	...

08010660 <matherr>:
 8010660:	2000      	movs	r0, #0
 8010662:	4770      	bx	lr
	...

08010670 <rint>:
 8010670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010672:	ec53 2b10 	vmov	r2, r3, d0
 8010676:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801067a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 801067e:	2813      	cmp	r0, #19
 8010680:	b083      	sub	sp, #12
 8010682:	4619      	mov	r1, r3
 8010684:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8010688:	ee10 5a10 	vmov	r5, s0
 801068c:	dc2f      	bgt.n	80106ee <rint+0x7e>
 801068e:	2800      	cmp	r0, #0
 8010690:	db49      	blt.n	8010726 <rint+0xb6>
 8010692:	4e3f      	ldr	r6, [pc, #252]	; (8010790 <rint+0x120>)
 8010694:	4106      	asrs	r6, r0
 8010696:	ea03 0706 	and.w	r7, r3, r6
 801069a:	4317      	orrs	r7, r2
 801069c:	d02c      	beq.n	80106f8 <rint+0x88>
 801069e:	0876      	lsrs	r6, r6, #1
 80106a0:	4033      	ands	r3, r6
 80106a2:	431d      	orrs	r5, r3
 80106a4:	d00c      	beq.n	80106c0 <rint+0x50>
 80106a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80106aa:	2813      	cmp	r0, #19
 80106ac:	ea21 0606 	bic.w	r6, r1, r6
 80106b0:	fa43 f100 	asr.w	r1, r3, r0
 80106b4:	ea41 0106 	orr.w	r1, r1, r6
 80106b8:	bf0c      	ite	eq
 80106ba:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80106be:	2500      	movne	r5, #0
 80106c0:	4834      	ldr	r0, [pc, #208]	; (8010794 <rint+0x124>)
 80106c2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80106c6:	462a      	mov	r2, r5
 80106c8:	e9d4 4500 	ldrd	r4, r5, [r4]
 80106cc:	4610      	mov	r0, r2
 80106ce:	462b      	mov	r3, r5
 80106d0:	4622      	mov	r2, r4
 80106d2:	f7f7 ff83 	bl	80085dc <__adddf3>
 80106d6:	e9cd 0100 	strd	r0, r1, [sp]
 80106da:	4622      	mov	r2, r4
 80106dc:	462b      	mov	r3, r5
 80106de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106e2:	f7f7 ff79 	bl	80085d8 <__aeabi_dsub>
 80106e6:	ec41 0b10 	vmov	d0, r0, r1
 80106ea:	b003      	add	sp, #12
 80106ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106ee:	2833      	cmp	r0, #51	; 0x33
 80106f0:	dd06      	ble.n	8010700 <rint+0x90>
 80106f2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80106f6:	d042      	beq.n	801077e <rint+0x10e>
 80106f8:	ec43 2b10 	vmov	d0, r2, r3
 80106fc:	b003      	add	sp, #12
 80106fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010700:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8010704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010708:	40f0      	lsrs	r0, r6
 801070a:	4202      	tst	r2, r0
 801070c:	d0f4      	beq.n	80106f8 <rint+0x88>
 801070e:	0840      	lsrs	r0, r0, #1
 8010710:	4202      	tst	r2, r0
 8010712:	d0d5      	beq.n	80106c0 <rint+0x50>
 8010714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010718:	ea25 0000 	bic.w	r0, r5, r0
 801071c:	fa43 f606 	asr.w	r6, r3, r6
 8010720:	ea46 0500 	orr.w	r5, r6, r0
 8010724:	e7cc      	b.n	80106c0 <rint+0x50>
 8010726:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801072a:	4310      	orrs	r0, r2
 801072c:	ee10 7a10 	vmov	r7, s0
 8010730:	d0e2      	beq.n	80106f8 <rint+0x88>
 8010732:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8010736:	4307      	orrs	r7, r0
 8010738:	4278      	negs	r0, r7
 801073a:	4307      	orrs	r7, r0
 801073c:	4815      	ldr	r0, [pc, #84]	; (8010794 <rint+0x124>)
 801073e:	0c59      	lsrs	r1, r3, #17
 8010740:	0b3f      	lsrs	r7, r7, #12
 8010742:	0449      	lsls	r1, r1, #17
 8010744:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8010748:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801074c:	ea47 0301 	orr.w	r3, r7, r1
 8010750:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010754:	4619      	mov	r1, r3
 8010756:	4610      	mov	r0, r2
 8010758:	463b      	mov	r3, r7
 801075a:	4632      	mov	r2, r6
 801075c:	f7f7 ff3e 	bl	80085dc <__adddf3>
 8010760:	e9cd 0100 	strd	r0, r1, [sp]
 8010764:	463b      	mov	r3, r7
 8010766:	4632      	mov	r2, r6
 8010768:	e9dd 0100 	ldrd	r0, r1, [sp]
 801076c:	f7f7 ff34 	bl	80085d8 <__aeabi_dsub>
 8010770:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010774:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8010778:	ec41 0b10 	vmov	d0, r0, r1
 801077c:	e7be      	b.n	80106fc <rint+0x8c>
 801077e:	ee10 0a10 	vmov	r0, s0
 8010782:	4619      	mov	r1, r3
 8010784:	f7f7 ff2a 	bl	80085dc <__adddf3>
 8010788:	ec41 0b10 	vmov	d0, r0, r1
 801078c:	e7b6      	b.n	80106fc <rint+0x8c>
 801078e:	bf00      	nop
 8010790:	000fffff 	.word	0x000fffff
 8010794:	080169f0 	.word	0x080169f0
	...

080107a0 <fabsf>:
 80107a0:	ee10 3a10 	vmov	r3, s0
 80107a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107a8:	ee00 3a10 	vmov	s0, r3
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop

080107b0 <finitef>:
 80107b0:	ee10 3a10 	vmov	r3, s0
 80107b4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80107b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80107bc:	bfac      	ite	ge
 80107be:	2000      	movge	r0, #0
 80107c0:	2001      	movlt	r0, #1
 80107c2:	4770      	bx	lr
	...

080107d0 <__fpclassifyf>:
 80107d0:	ee10 3a10 	vmov	r3, s0
 80107d4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80107d8:	d101      	bne.n	80107de <__fpclassifyf+0xe>
 80107da:	2002      	movs	r0, #2
 80107dc:	4770      	bx	lr
 80107de:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80107e2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80107e6:	d201      	bcs.n	80107ec <__fpclassifyf+0x1c>
 80107e8:	2004      	movs	r0, #4
 80107ea:	4770      	bx	lr
 80107ec:	4b05      	ldr	r3, [pc, #20]	; (8010804 <__fpclassifyf+0x34>)
 80107ee:	1e42      	subs	r2, r0, #1
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d801      	bhi.n	80107f8 <__fpclassifyf+0x28>
 80107f4:	2003      	movs	r0, #3
 80107f6:	4770      	bx	lr
 80107f8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 80107fc:	fab0 f080 	clz	r0, r0
 8010800:	0940      	lsrs	r0, r0, #5
 8010802:	4770      	bx	lr
 8010804:	007ffffe 	.word	0x007ffffe
	...

08010810 <nanf>:
 8010810:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010818 <nanf+0x8>
 8010814:	4770      	bx	lr
 8010816:	bf00      	nop
 8010818:	7fc00000 	.word	0x7fc00000
 801081c:	00000000 	.word	0x00000000

08010820 <scalbnf>:
 8010820:	b508      	push	{r3, lr}
 8010822:	ee10 3a10 	vmov	r3, s0
 8010826:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801082a:	ed2d 8b02 	vpush	{d8}
 801082e:	d011      	beq.n	8010854 <scalbnf+0x34>
 8010830:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010834:	d211      	bcs.n	801085a <scalbnf+0x3a>
 8010836:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801083a:	d313      	bcc.n	8010864 <scalbnf+0x44>
 801083c:	0dd2      	lsrs	r2, r2, #23
 801083e:	4402      	add	r2, r0
 8010840:	2afe      	cmp	r2, #254	; 0xfe
 8010842:	dc2e      	bgt.n	80108a2 <scalbnf+0x82>
 8010844:	2a00      	cmp	r2, #0
 8010846:	dd1a      	ble.n	801087e <scalbnf+0x5e>
 8010848:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801084c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010850:	ee00 3a10 	vmov	s0, r3
 8010854:	ecbd 8b02 	vpop	{d8}
 8010858:	bd08      	pop	{r3, pc}
 801085a:	ecbd 8b02 	vpop	{d8}
 801085e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010862:	bd08      	pop	{r3, pc}
 8010864:	4b1d      	ldr	r3, [pc, #116]	; (80108dc <scalbnf+0xbc>)
 8010866:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80108e0 <scalbnf+0xc0>
 801086a:	4298      	cmp	r0, r3
 801086c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010870:	db22      	blt.n	80108b8 <scalbnf+0x98>
 8010872:	ee10 3a10 	vmov	r3, s0
 8010876:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801087a:	3a19      	subs	r2, #25
 801087c:	e7df      	b.n	801083e <scalbnf+0x1e>
 801087e:	f112 0f16 	cmn.w	r2, #22
 8010882:	da1e      	bge.n	80108c2 <scalbnf+0xa2>
 8010884:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010888:	4298      	cmp	r0, r3
 801088a:	dc0a      	bgt.n	80108a2 <scalbnf+0x82>
 801088c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80108e4 <scalbnf+0xc4>
 8010890:	eef0 0a40 	vmov.f32	s1, s0
 8010894:	eeb0 0a48 	vmov.f32	s0, s16
 8010898:	f000 f82a 	bl	80108f0 <copysignf>
 801089c:	ee20 0a08 	vmul.f32	s0, s0, s16
 80108a0:	e7d8      	b.n	8010854 <scalbnf+0x34>
 80108a2:	ed9f 8a11 	vldr	s16, [pc, #68]	; 80108e8 <scalbnf+0xc8>
 80108a6:	eef0 0a40 	vmov.f32	s1, s0
 80108aa:	eeb0 0a48 	vmov.f32	s0, s16
 80108ae:	f000 f81f 	bl	80108f0 <copysignf>
 80108b2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80108b6:	e7cd      	b.n	8010854 <scalbnf+0x34>
 80108b8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80108e4 <scalbnf+0xc4>
 80108bc:	ee20 0a20 	vmul.f32	s0, s0, s1
 80108c0:	e7c8      	b.n	8010854 <scalbnf+0x34>
 80108c2:	3219      	adds	r2, #25
 80108c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80108c8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80108cc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80108ec <scalbnf+0xcc>
 80108d0:	ee00 3a10 	vmov	s0, r3
 80108d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80108d8:	e7bc      	b.n	8010854 <scalbnf+0x34>
 80108da:	bf00      	nop
 80108dc:	ffff3cb0 	.word	0xffff3cb0
 80108e0:	4c000000 	.word	0x4c000000
 80108e4:	0da24260 	.word	0x0da24260
 80108e8:	7149f2ca 	.word	0x7149f2ca
 80108ec:	33000000 	.word	0x33000000

080108f0 <copysignf>:
 80108f0:	ee10 3a10 	vmov	r3, s0
 80108f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80108f8:	ee10 3a90 	vmov	r3, s1
 80108fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010900:	4313      	orrs	r3, r2
 8010902:	ee00 3a10 	vmov	s0, r3
 8010906:	4770      	bx	lr
	...

08010910 <abort>:
 8010910:	b508      	push	{r3, lr}
 8010912:	2006      	movs	r0, #6
 8010914:	f001 f83c 	bl	8011990 <raise>
 8010918:	2001      	movs	r0, #1
 801091a:	f004 fc89 	bl	8015230 <_exit>
 801091e:	bf00      	nop

08010920 <__errno>:
 8010920:	4b01      	ldr	r3, [pc, #4]	; (8010928 <__errno+0x8>)
 8010922:	6818      	ldr	r0, [r3, #0]
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	20000c40 	.word	0x20000c40
 801092c:	00000000 	.word	0x00000000

08010930 <fputc>:
 8010930:	4b08      	ldr	r3, [pc, #32]	; (8010954 <fputc+0x24>)
 8010932:	b570      	push	{r4, r5, r6, lr}
 8010934:	681c      	ldr	r4, [r3, #0]
 8010936:	4605      	mov	r5, r0
 8010938:	460e      	mov	r6, r1
 801093a:	b124      	cbz	r4, 8010946 <fputc+0x16>
 801093c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801093e:	b913      	cbnz	r3, 8010946 <fputc+0x16>
 8010940:	4620      	mov	r0, r4
 8010942:	f003 fdcd 	bl	80144e0 <__sinit>
 8010946:	4632      	mov	r2, r6
 8010948:	4629      	mov	r1, r5
 801094a:	4620      	mov	r0, r4
 801094c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010950:	f000 bdc6 	b.w	80114e0 <_putc_r>
 8010954:	20000c40 	.word	0x20000c40
	...

08010960 <_fputs_r>:
 8010960:	b530      	push	{r4, r5, lr}
 8010962:	b087      	sub	sp, #28
 8010964:	4605      	mov	r5, r0
 8010966:	4608      	mov	r0, r1
 8010968:	4614      	mov	r4, r2
 801096a:	9101      	str	r1, [sp, #4]
 801096c:	f7f9 fcd8 	bl	800a320 <strlen>
 8010970:	aa01      	add	r2, sp, #4
 8010972:	2301      	movs	r3, #1
 8010974:	9005      	str	r0, [sp, #20]
 8010976:	9002      	str	r0, [sp, #8]
 8010978:	9203      	str	r2, [sp, #12]
 801097a:	9304      	str	r3, [sp, #16]
 801097c:	b10d      	cbz	r5, 8010982 <_fputs_r+0x22>
 801097e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010980:	b183      	cbz	r3, 80109a4 <_fputs_r+0x44>
 8010982:	89a3      	ldrh	r3, [r4, #12]
 8010984:	049a      	lsls	r2, r3, #18
 8010986:	d406      	bmi.n	8010996 <_fputs_r+0x36>
 8010988:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801098a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801098e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010992:	81a3      	strh	r3, [r4, #12]
 8010994:	6662      	str	r2, [r4, #100]	; 0x64
 8010996:	4621      	mov	r1, r4
 8010998:	4628      	mov	r0, r5
 801099a:	aa03      	add	r2, sp, #12
 801099c:	f000 f810 	bl	80109c0 <__sfvwrite_r>
 80109a0:	b007      	add	sp, #28
 80109a2:	bd30      	pop	{r4, r5, pc}
 80109a4:	4628      	mov	r0, r5
 80109a6:	f003 fd9b 	bl	80144e0 <__sinit>
 80109aa:	e7ea      	b.n	8010982 <_fputs_r+0x22>
 80109ac:	0000      	movs	r0, r0
	...

080109b0 <fputs>:
 80109b0:	4b02      	ldr	r3, [pc, #8]	; (80109bc <fputs+0xc>)
 80109b2:	460a      	mov	r2, r1
 80109b4:	4601      	mov	r1, r0
 80109b6:	6818      	ldr	r0, [r3, #0]
 80109b8:	f7ff bfd2 	b.w	8010960 <_fputs_r>
 80109bc:	20000c40 	.word	0x20000c40

080109c0 <__sfvwrite_r>:
 80109c0:	6893      	ldr	r3, [r2, #8]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d076      	beq.n	8010ab4 <__sfvwrite_r+0xf4>
 80109c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ca:	898b      	ldrh	r3, [r1, #12]
 80109cc:	b085      	sub	sp, #20
 80109ce:	460c      	mov	r4, r1
 80109d0:	0719      	lsls	r1, r3, #28
 80109d2:	9001      	str	r0, [sp, #4]
 80109d4:	4616      	mov	r6, r2
 80109d6:	d529      	bpl.n	8010a2c <__sfvwrite_r+0x6c>
 80109d8:	6922      	ldr	r2, [r4, #16]
 80109da:	b33a      	cbz	r2, 8010a2c <__sfvwrite_r+0x6c>
 80109dc:	f003 0802 	and.w	r8, r3, #2
 80109e0:	fa1f f088 	uxth.w	r0, r8
 80109e4:	6835      	ldr	r5, [r6, #0]
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d02f      	beq.n	8010a4a <__sfvwrite_r+0x8a>
 80109ea:	f04f 0900 	mov.w	r9, #0
 80109ee:	4fb3      	ldr	r7, [pc, #716]	; (8010cbc <__sfvwrite_r+0x2fc>)
 80109f0:	46c8      	mov	r8, r9
 80109f2:	46b2      	mov	sl, r6
 80109f4:	45b8      	cmp	r8, r7
 80109f6:	4643      	mov	r3, r8
 80109f8:	464a      	mov	r2, r9
 80109fa:	bf28      	it	cs
 80109fc:	463b      	movcs	r3, r7
 80109fe:	9801      	ldr	r0, [sp, #4]
 8010a00:	f1b8 0f00 	cmp.w	r8, #0
 8010a04:	d050      	beq.n	8010aa8 <__sfvwrite_r+0xe8>
 8010a06:	69e1      	ldr	r1, [r4, #28]
 8010a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a0a:	47b0      	blx	r6
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	dd71      	ble.n	8010af4 <__sfvwrite_r+0x134>
 8010a10:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010a14:	1a1b      	subs	r3, r3, r0
 8010a16:	4481      	add	r9, r0
 8010a18:	ebc0 0808 	rsb	r8, r0, r8
 8010a1c:	f8ca 3008 	str.w	r3, [sl, #8]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d1e7      	bne.n	80109f4 <__sfvwrite_r+0x34>
 8010a24:	2000      	movs	r0, #0
 8010a26:	b005      	add	sp, #20
 8010a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a2c:	4621      	mov	r1, r4
 8010a2e:	9801      	ldr	r0, [sp, #4]
 8010a30:	f002 fbf6 	bl	8013220 <__swsetup_r>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	f040 8139 	bne.w	8010cac <__sfvwrite_r+0x2ec>
 8010a3a:	89a3      	ldrh	r3, [r4, #12]
 8010a3c:	6835      	ldr	r5, [r6, #0]
 8010a3e:	f003 0802 	and.w	r8, r3, #2
 8010a42:	fa1f f088 	uxth.w	r0, r8
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d1cf      	bne.n	80109ea <__sfvwrite_r+0x2a>
 8010a4a:	f013 0901 	ands.w	r9, r3, #1
 8010a4e:	d15a      	bne.n	8010b06 <__sfvwrite_r+0x146>
 8010a50:	464f      	mov	r7, r9
 8010a52:	9602      	str	r6, [sp, #8]
 8010a54:	b31f      	cbz	r7, 8010a9e <__sfvwrite_r+0xde>
 8010a56:	059a      	lsls	r2, r3, #22
 8010a58:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8010a5c:	d52c      	bpl.n	8010ab8 <__sfvwrite_r+0xf8>
 8010a5e:	4547      	cmp	r7, r8
 8010a60:	46c2      	mov	sl, r8
 8010a62:	f0c0 80a3 	bcc.w	8010bac <__sfvwrite_r+0x1ec>
 8010a66:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8010a6a:	f040 80b0 	bne.w	8010bce <__sfvwrite_r+0x20e>
 8010a6e:	6820      	ldr	r0, [r4, #0]
 8010a70:	4652      	mov	r2, sl
 8010a72:	4649      	mov	r1, r9
 8010a74:	f000 fc6c 	bl	8011350 <memmove>
 8010a78:	68a0      	ldr	r0, [r4, #8]
 8010a7a:	6823      	ldr	r3, [r4, #0]
 8010a7c:	ebc8 0000 	rsb	r0, r8, r0
 8010a80:	4453      	add	r3, sl
 8010a82:	60a0      	str	r0, [r4, #8]
 8010a84:	6023      	str	r3, [r4, #0]
 8010a86:	4638      	mov	r0, r7
 8010a88:	9a02      	ldr	r2, [sp, #8]
 8010a8a:	6893      	ldr	r3, [r2, #8]
 8010a8c:	1a1b      	subs	r3, r3, r0
 8010a8e:	4481      	add	r9, r0
 8010a90:	1a3f      	subs	r7, r7, r0
 8010a92:	6093      	str	r3, [r2, #8]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d0c5      	beq.n	8010a24 <__sfvwrite_r+0x64>
 8010a98:	89a3      	ldrh	r3, [r4, #12]
 8010a9a:	2f00      	cmp	r7, #0
 8010a9c:	d1db      	bne.n	8010a56 <__sfvwrite_r+0x96>
 8010a9e:	f8d5 9000 	ldr.w	r9, [r5]
 8010aa2:	686f      	ldr	r7, [r5, #4]
 8010aa4:	3508      	adds	r5, #8
 8010aa6:	e7d5      	b.n	8010a54 <__sfvwrite_r+0x94>
 8010aa8:	f8d5 9000 	ldr.w	r9, [r5]
 8010aac:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8010ab0:	3508      	adds	r5, #8
 8010ab2:	e79f      	b.n	80109f4 <__sfvwrite_r+0x34>
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	4770      	bx	lr
 8010ab8:	6820      	ldr	r0, [r4, #0]
 8010aba:	6923      	ldr	r3, [r4, #16]
 8010abc:	4298      	cmp	r0, r3
 8010abe:	d803      	bhi.n	8010ac8 <__sfvwrite_r+0x108>
 8010ac0:	6961      	ldr	r1, [r4, #20]
 8010ac2:	428f      	cmp	r7, r1
 8010ac4:	f080 80b6 	bcs.w	8010c34 <__sfvwrite_r+0x274>
 8010ac8:	45b8      	cmp	r8, r7
 8010aca:	bf28      	it	cs
 8010acc:	46b8      	movcs	r8, r7
 8010ace:	4642      	mov	r2, r8
 8010ad0:	4649      	mov	r1, r9
 8010ad2:	f000 fc3d 	bl	8011350 <memmove>
 8010ad6:	68a3      	ldr	r3, [r4, #8]
 8010ad8:	6822      	ldr	r2, [r4, #0]
 8010ada:	ebc8 0303 	rsb	r3, r8, r3
 8010ade:	4442      	add	r2, r8
 8010ae0:	60a3      	str	r3, [r4, #8]
 8010ae2:	6022      	str	r2, [r4, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d148      	bne.n	8010b7a <__sfvwrite_r+0x1ba>
 8010ae8:	4621      	mov	r1, r4
 8010aea:	9801      	ldr	r0, [sp, #4]
 8010aec:	f003 fc60 	bl	80143b0 <_fflush_r>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d042      	beq.n	8010b7a <__sfvwrite_r+0x1ba>
 8010af4:	89a3      	ldrh	r3, [r4, #12]
 8010af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010afe:	81a3      	strh	r3, [r4, #12]
 8010b00:	b005      	add	sp, #20
 8010b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b06:	4680      	mov	r8, r0
 8010b08:	9002      	str	r0, [sp, #8]
 8010b0a:	4682      	mov	sl, r0
 8010b0c:	4681      	mov	r9, r0
 8010b0e:	f1b9 0f00 	cmp.w	r9, #0
 8010b12:	d02a      	beq.n	8010b6a <__sfvwrite_r+0x1aa>
 8010b14:	9b02      	ldr	r3, [sp, #8]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d04c      	beq.n	8010bb4 <__sfvwrite_r+0x1f4>
 8010b1a:	6820      	ldr	r0, [r4, #0]
 8010b1c:	6923      	ldr	r3, [r4, #16]
 8010b1e:	6962      	ldr	r2, [r4, #20]
 8010b20:	45c8      	cmp	r8, r9
 8010b22:	46c3      	mov	fp, r8
 8010b24:	bf28      	it	cs
 8010b26:	46cb      	movcs	fp, r9
 8010b28:	4298      	cmp	r0, r3
 8010b2a:	465f      	mov	r7, fp
 8010b2c:	d904      	bls.n	8010b38 <__sfvwrite_r+0x178>
 8010b2e:	68a3      	ldr	r3, [r4, #8]
 8010b30:	4413      	add	r3, r2
 8010b32:	459b      	cmp	fp, r3
 8010b34:	f300 8090 	bgt.w	8010c58 <__sfvwrite_r+0x298>
 8010b38:	4593      	cmp	fp, r2
 8010b3a:	db20      	blt.n	8010b7e <__sfvwrite_r+0x1be>
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010b40:	69e1      	ldr	r1, [r4, #28]
 8010b42:	9801      	ldr	r0, [sp, #4]
 8010b44:	4652      	mov	r2, sl
 8010b46:	47b8      	blx	r7
 8010b48:	1e07      	subs	r7, r0, #0
 8010b4a:	ddd3      	ble.n	8010af4 <__sfvwrite_r+0x134>
 8010b4c:	ebb8 0807 	subs.w	r8, r8, r7
 8010b50:	d023      	beq.n	8010b9a <__sfvwrite_r+0x1da>
 8010b52:	68b3      	ldr	r3, [r6, #8]
 8010b54:	1bdb      	subs	r3, r3, r7
 8010b56:	44ba      	add	sl, r7
 8010b58:	ebc7 0909 	rsb	r9, r7, r9
 8010b5c:	60b3      	str	r3, [r6, #8]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f43f af60 	beq.w	8010a24 <__sfvwrite_r+0x64>
 8010b64:	f1b9 0f00 	cmp.w	r9, #0
 8010b68:	d1d4      	bne.n	8010b14 <__sfvwrite_r+0x154>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f8d5 a000 	ldr.w	sl, [r5]
 8010b70:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8010b74:	9302      	str	r3, [sp, #8]
 8010b76:	3508      	adds	r5, #8
 8010b78:	e7c9      	b.n	8010b0e <__sfvwrite_r+0x14e>
 8010b7a:	4640      	mov	r0, r8
 8010b7c:	e784      	b.n	8010a88 <__sfvwrite_r+0xc8>
 8010b7e:	465a      	mov	r2, fp
 8010b80:	4651      	mov	r1, sl
 8010b82:	f000 fbe5 	bl	8011350 <memmove>
 8010b86:	68a2      	ldr	r2, [r4, #8]
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	ebcb 0202 	rsb	r2, fp, r2
 8010b8e:	445b      	add	r3, fp
 8010b90:	ebb8 0807 	subs.w	r8, r8, r7
 8010b94:	60a2      	str	r2, [r4, #8]
 8010b96:	6023      	str	r3, [r4, #0]
 8010b98:	d1db      	bne.n	8010b52 <__sfvwrite_r+0x192>
 8010b9a:	4621      	mov	r1, r4
 8010b9c:	9801      	ldr	r0, [sp, #4]
 8010b9e:	f003 fc07 	bl	80143b0 <_fflush_r>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d1a6      	bne.n	8010af4 <__sfvwrite_r+0x134>
 8010ba6:	f8cd 8008 	str.w	r8, [sp, #8]
 8010baa:	e7d2      	b.n	8010b52 <__sfvwrite_r+0x192>
 8010bac:	6820      	ldr	r0, [r4, #0]
 8010bae:	46b8      	mov	r8, r7
 8010bb0:	46ba      	mov	sl, r7
 8010bb2:	e75d      	b.n	8010a70 <__sfvwrite_r+0xb0>
 8010bb4:	464a      	mov	r2, r9
 8010bb6:	210a      	movs	r1, #10
 8010bb8:	4650      	mov	r0, sl
 8010bba:	f7f9 f951 	bl	8009e60 <memchr>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d06f      	beq.n	8010ca2 <__sfvwrite_r+0x2e2>
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	ebca 0800 	rsb	r8, sl, r0
 8010bca:	9302      	str	r3, [sp, #8]
 8010bcc:	e7a5      	b.n	8010b1a <__sfvwrite_r+0x15a>
 8010bce:	6962      	ldr	r2, [r4, #20]
 8010bd0:	6820      	ldr	r0, [r4, #0]
 8010bd2:	6921      	ldr	r1, [r4, #16]
 8010bd4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8010bd8:	ebc1 0a00 	rsb	sl, r1, r0
 8010bdc:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8010be0:	f10a 0001 	add.w	r0, sl, #1
 8010be4:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010be8:	4438      	add	r0, r7
 8010bea:	4540      	cmp	r0, r8
 8010bec:	4642      	mov	r2, r8
 8010bee:	bf84      	itt	hi
 8010bf0:	4680      	movhi	r8, r0
 8010bf2:	4642      	movhi	r2, r8
 8010bf4:	055b      	lsls	r3, r3, #21
 8010bf6:	d542      	bpl.n	8010c7e <__sfvwrite_r+0x2be>
 8010bf8:	4611      	mov	r1, r2
 8010bfa:	9801      	ldr	r0, [sp, #4]
 8010bfc:	f000 f8b8 	bl	8010d70 <_malloc_r>
 8010c00:	4683      	mov	fp, r0
 8010c02:	2800      	cmp	r0, #0
 8010c04:	d055      	beq.n	8010cb2 <__sfvwrite_r+0x2f2>
 8010c06:	4652      	mov	r2, sl
 8010c08:	6921      	ldr	r1, [r4, #16]
 8010c0a:	f7f9 f979 	bl	8009f00 <memcpy>
 8010c0e:	89a3      	ldrh	r3, [r4, #12]
 8010c10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c18:	81a3      	strh	r3, [r4, #12]
 8010c1a:	ebca 0308 	rsb	r3, sl, r8
 8010c1e:	eb0b 000a 	add.w	r0, fp, sl
 8010c22:	f8c4 8014 	str.w	r8, [r4, #20]
 8010c26:	f8c4 b010 	str.w	fp, [r4, #16]
 8010c2a:	6020      	str	r0, [r4, #0]
 8010c2c:	60a3      	str	r3, [r4, #8]
 8010c2e:	46b8      	mov	r8, r7
 8010c30:	46ba      	mov	sl, r7
 8010c32:	e71d      	b.n	8010a70 <__sfvwrite_r+0xb0>
 8010c34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010c38:	42bb      	cmp	r3, r7
 8010c3a:	bf28      	it	cs
 8010c3c:	463b      	movcs	r3, r7
 8010c3e:	464a      	mov	r2, r9
 8010c40:	fb93 f3f1 	sdiv	r3, r3, r1
 8010c44:	9801      	ldr	r0, [sp, #4]
 8010c46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010c48:	fb01 f303 	mul.w	r3, r1, r3
 8010c4c:	69e1      	ldr	r1, [r4, #28]
 8010c4e:	47b0      	blx	r6
 8010c50:	2800      	cmp	r0, #0
 8010c52:	f73f af19 	bgt.w	8010a88 <__sfvwrite_r+0xc8>
 8010c56:	e74d      	b.n	8010af4 <__sfvwrite_r+0x134>
 8010c58:	461a      	mov	r2, r3
 8010c5a:	4651      	mov	r1, sl
 8010c5c:	9303      	str	r3, [sp, #12]
 8010c5e:	f000 fb77 	bl	8011350 <memmove>
 8010c62:	6822      	ldr	r2, [r4, #0]
 8010c64:	9b03      	ldr	r3, [sp, #12]
 8010c66:	9801      	ldr	r0, [sp, #4]
 8010c68:	441a      	add	r2, r3
 8010c6a:	6022      	str	r2, [r4, #0]
 8010c6c:	4621      	mov	r1, r4
 8010c6e:	f003 fb9f 	bl	80143b0 <_fflush_r>
 8010c72:	9b03      	ldr	r3, [sp, #12]
 8010c74:	2800      	cmp	r0, #0
 8010c76:	f47f af3d 	bne.w	8010af4 <__sfvwrite_r+0x134>
 8010c7a:	461f      	mov	r7, r3
 8010c7c:	e766      	b.n	8010b4c <__sfvwrite_r+0x18c>
 8010c7e:	9801      	ldr	r0, [sp, #4]
 8010c80:	f000 fc66 	bl	8011550 <_realloc_r>
 8010c84:	4683      	mov	fp, r0
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d1c7      	bne.n	8010c1a <__sfvwrite_r+0x25a>
 8010c8a:	9d01      	ldr	r5, [sp, #4]
 8010c8c:	6921      	ldr	r1, [r4, #16]
 8010c8e:	4628      	mov	r0, r5
 8010c90:	f003 fc8e 	bl	80145b0 <_free_r>
 8010c94:	89a3      	ldrh	r3, [r4, #12]
 8010c96:	220c      	movs	r2, #12
 8010c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	602a      	str	r2, [r5, #0]
 8010ca0:	e729      	b.n	8010af6 <__sfvwrite_r+0x136>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	f109 0801 	add.w	r8, r9, #1
 8010ca8:	9302      	str	r3, [sp, #8]
 8010caa:	e736      	b.n	8010b1a <__sfvwrite_r+0x15a>
 8010cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cb0:	e6b9      	b.n	8010a26 <__sfvwrite_r+0x66>
 8010cb2:	9a01      	ldr	r2, [sp, #4]
 8010cb4:	230c      	movs	r3, #12
 8010cb6:	6013      	str	r3, [r2, #0]
 8010cb8:	89a3      	ldrh	r3, [r4, #12]
 8010cba:	e71c      	b.n	8010af6 <__sfvwrite_r+0x136>
 8010cbc:	7ffffc00 	.word	0x7ffffc00

08010cc0 <_fwrite_r>:
 8010cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc4:	b086      	sub	sp, #24
 8010cc6:	fb02 f403 	mul.w	r4, r2, r3
 8010cca:	4690      	mov	r8, r2
 8010ccc:	461e      	mov	r6, r3
 8010cce:	aa01      	add	r2, sp, #4
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	9101      	str	r1, [sp, #4]
 8010cd4:	9402      	str	r4, [sp, #8]
 8010cd6:	9405      	str	r4, [sp, #20]
 8010cd8:	9203      	str	r2, [sp, #12]
 8010cda:	9304      	str	r3, [sp, #16]
 8010cdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010cde:	4607      	mov	r7, r0
 8010ce0:	b108      	cbz	r0, 8010ce6 <_fwrite_r+0x26>
 8010ce2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010ce4:	b1d3      	cbz	r3, 8010d1c <_fwrite_r+0x5c>
 8010ce6:	89ab      	ldrh	r3, [r5, #12]
 8010ce8:	049a      	lsls	r2, r3, #18
 8010cea:	d406      	bmi.n	8010cfa <_fwrite_r+0x3a>
 8010cec:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8010cee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010cf6:	81ab      	strh	r3, [r5, #12]
 8010cf8:	666a      	str	r2, [r5, #100]	; 0x64
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	4638      	mov	r0, r7
 8010cfe:	aa03      	add	r2, sp, #12
 8010d00:	f7ff fe5e 	bl	80109c0 <__sfvwrite_r>
 8010d04:	b130      	cbz	r0, 8010d14 <_fwrite_r+0x54>
 8010d06:	9805      	ldr	r0, [sp, #20]
 8010d08:	1a24      	subs	r4, r4, r0
 8010d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8010d0e:	b006      	add	sp, #24
 8010d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d14:	4630      	mov	r0, r6
 8010d16:	b006      	add	sp, #24
 8010d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d1c:	f003 fbe0 	bl	80144e0 <__sinit>
 8010d20:	e7e1      	b.n	8010ce6 <_fwrite_r+0x26>
 8010d22:	bf00      	nop
	...

08010d30 <fwrite>:
 8010d30:	b510      	push	{r4, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	4c05      	ldr	r4, [pc, #20]	; (8010d4c <fwrite+0x1c>)
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	6824      	ldr	r4, [r4, #0]
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	460a      	mov	r2, r1
 8010d3e:	4601      	mov	r1, r0
 8010d40:	4620      	mov	r0, r4
 8010d42:	f7ff ffbd 	bl	8010cc0 <_fwrite_r>
 8010d46:	b002      	add	sp, #8
 8010d48:	bd10      	pop	{r4, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20000c40 	.word	0x20000c40

08010d50 <malloc>:
 8010d50:	4b02      	ldr	r3, [pc, #8]	; (8010d5c <malloc+0xc>)
 8010d52:	4601      	mov	r1, r0
 8010d54:	6818      	ldr	r0, [r3, #0]
 8010d56:	f000 b80b 	b.w	8010d70 <_malloc_r>
 8010d5a:	bf00      	nop
 8010d5c:	20000c40 	.word	0x20000c40

08010d60 <free>:
 8010d60:	4b02      	ldr	r3, [pc, #8]	; (8010d6c <free+0xc>)
 8010d62:	4601      	mov	r1, r0
 8010d64:	6818      	ldr	r0, [r3, #0]
 8010d66:	f003 bc23 	b.w	80145b0 <_free_r>
 8010d6a:	bf00      	nop
 8010d6c:	20000c40 	.word	0x20000c40

08010d70 <_malloc_r>:
 8010d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d74:	f101 050b 	add.w	r5, r1, #11
 8010d78:	2d16      	cmp	r5, #22
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	4606      	mov	r6, r0
 8010d7e:	f240 809f 	bls.w	8010ec0 <_malloc_r+0x150>
 8010d82:	f035 0507 	bics.w	r5, r5, #7
 8010d86:	f100 80bf 	bmi.w	8010f08 <_malloc_r+0x198>
 8010d8a:	42a9      	cmp	r1, r5
 8010d8c:	f200 80bc 	bhi.w	8010f08 <_malloc_r+0x198>
 8010d90:	f000 fb96 	bl	80114c0 <__malloc_lock>
 8010d94:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8010d98:	f0c0 829c 	bcc.w	80112d4 <_malloc_r+0x564>
 8010d9c:	0a6b      	lsrs	r3, r5, #9
 8010d9e:	f000 80ba 	beq.w	8010f16 <_malloc_r+0x1a6>
 8010da2:	2b04      	cmp	r3, #4
 8010da4:	f200 8183 	bhi.w	80110ae <_malloc_r+0x33e>
 8010da8:	09a8      	lsrs	r0, r5, #6
 8010daa:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8010dae:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8010db2:	3038      	adds	r0, #56	; 0x38
 8010db4:	4fc4      	ldr	r7, [pc, #784]	; (80110c8 <_malloc_r+0x358>)
 8010db6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010dba:	f1a3 0108 	sub.w	r1, r3, #8
 8010dbe:	685c      	ldr	r4, [r3, #4]
 8010dc0:	42a1      	cmp	r1, r4
 8010dc2:	d107      	bne.n	8010dd4 <_malloc_r+0x64>
 8010dc4:	e0ac      	b.n	8010f20 <_malloc_r+0x1b0>
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	f280 80ac 	bge.w	8010f24 <_malloc_r+0x1b4>
 8010dcc:	68e4      	ldr	r4, [r4, #12]
 8010dce:	42a1      	cmp	r1, r4
 8010dd0:	f000 80a6 	beq.w	8010f20 <_malloc_r+0x1b0>
 8010dd4:	6863      	ldr	r3, [r4, #4]
 8010dd6:	f023 0303 	bic.w	r3, r3, #3
 8010dda:	1b5a      	subs	r2, r3, r5
 8010ddc:	2a0f      	cmp	r2, #15
 8010dde:	ddf2      	ble.n	8010dc6 <_malloc_r+0x56>
 8010de0:	49b9      	ldr	r1, [pc, #740]	; (80110c8 <_malloc_r+0x358>)
 8010de2:	693c      	ldr	r4, [r7, #16]
 8010de4:	f101 0e08 	add.w	lr, r1, #8
 8010de8:	4574      	cmp	r4, lr
 8010dea:	f000 81b3 	beq.w	8011154 <_malloc_r+0x3e4>
 8010dee:	6863      	ldr	r3, [r4, #4]
 8010df0:	f023 0303 	bic.w	r3, r3, #3
 8010df4:	1b5a      	subs	r2, r3, r5
 8010df6:	2a0f      	cmp	r2, #15
 8010df8:	f300 8199 	bgt.w	801112e <_malloc_r+0x3be>
 8010dfc:	2a00      	cmp	r2, #0
 8010dfe:	f8c1 e014 	str.w	lr, [r1, #20]
 8010e02:	f8c1 e010 	str.w	lr, [r1, #16]
 8010e06:	f280 809e 	bge.w	8010f46 <_malloc_r+0x1d6>
 8010e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e0e:	f080 8167 	bcs.w	80110e0 <_malloc_r+0x370>
 8010e12:	08db      	lsrs	r3, r3, #3
 8010e14:	f103 0c01 	add.w	ip, r3, #1
 8010e18:	2201      	movs	r2, #1
 8010e1a:	109b      	asrs	r3, r3, #2
 8010e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e20:	684a      	ldr	r2, [r1, #4]
 8010e22:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8010e26:	f8c4 8008 	str.w	r8, [r4, #8]
 8010e2a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8010e2e:	431a      	orrs	r2, r3
 8010e30:	f1a9 0308 	sub.w	r3, r9, #8
 8010e34:	60e3      	str	r3, [r4, #12]
 8010e36:	604a      	str	r2, [r1, #4]
 8010e38:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8010e3c:	f8c8 400c 	str.w	r4, [r8, #12]
 8010e40:	1083      	asrs	r3, r0, #2
 8010e42:	2401      	movs	r4, #1
 8010e44:	409c      	lsls	r4, r3
 8010e46:	4294      	cmp	r4, r2
 8010e48:	f200 808a 	bhi.w	8010f60 <_malloc_r+0x1f0>
 8010e4c:	4214      	tst	r4, r2
 8010e4e:	d106      	bne.n	8010e5e <_malloc_r+0xee>
 8010e50:	f020 0003 	bic.w	r0, r0, #3
 8010e54:	0064      	lsls	r4, r4, #1
 8010e56:	4214      	tst	r4, r2
 8010e58:	f100 0004 	add.w	r0, r0, #4
 8010e5c:	d0fa      	beq.n	8010e54 <_malloc_r+0xe4>
 8010e5e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8010e62:	46cc      	mov	ip, r9
 8010e64:	4680      	mov	r8, r0
 8010e66:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010e6a:	458c      	cmp	ip, r1
 8010e6c:	d107      	bne.n	8010e7e <_malloc_r+0x10e>
 8010e6e:	e173      	b.n	8011158 <_malloc_r+0x3e8>
 8010e70:	2a00      	cmp	r2, #0
 8010e72:	f280 8181 	bge.w	8011178 <_malloc_r+0x408>
 8010e76:	68c9      	ldr	r1, [r1, #12]
 8010e78:	458c      	cmp	ip, r1
 8010e7a:	f000 816d 	beq.w	8011158 <_malloc_r+0x3e8>
 8010e7e:	684b      	ldr	r3, [r1, #4]
 8010e80:	f023 0303 	bic.w	r3, r3, #3
 8010e84:	1b5a      	subs	r2, r3, r5
 8010e86:	2a0f      	cmp	r2, #15
 8010e88:	ddf2      	ble.n	8010e70 <_malloc_r+0x100>
 8010e8a:	460c      	mov	r4, r1
 8010e8c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8010e90:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8010e94:	194b      	adds	r3, r1, r5
 8010e96:	f045 0501 	orr.w	r5, r5, #1
 8010e9a:	604d      	str	r5, [r1, #4]
 8010e9c:	f042 0101 	orr.w	r1, r2, #1
 8010ea0:	f8c8 c00c 	str.w	ip, [r8, #12]
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f8cc 8008 	str.w	r8, [ip, #8]
 8010eaa:	617b      	str	r3, [r7, #20]
 8010eac:	613b      	str	r3, [r7, #16]
 8010eae:	f8c3 e00c 	str.w	lr, [r3, #12]
 8010eb2:	f8c3 e008 	str.w	lr, [r3, #8]
 8010eb6:	6059      	str	r1, [r3, #4]
 8010eb8:	509a      	str	r2, [r3, r2]
 8010eba:	f000 fb09 	bl	80114d0 <__malloc_unlock>
 8010ebe:	e01f      	b.n	8010f00 <_malloc_r+0x190>
 8010ec0:	2910      	cmp	r1, #16
 8010ec2:	d821      	bhi.n	8010f08 <_malloc_r+0x198>
 8010ec4:	f000 fafc 	bl	80114c0 <__malloc_lock>
 8010ec8:	2510      	movs	r5, #16
 8010eca:	2306      	movs	r3, #6
 8010ecc:	2002      	movs	r0, #2
 8010ece:	4f7e      	ldr	r7, [pc, #504]	; (80110c8 <_malloc_r+0x358>)
 8010ed0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010ed4:	f1a3 0208 	sub.w	r2, r3, #8
 8010ed8:	685c      	ldr	r4, [r3, #4]
 8010eda:	4294      	cmp	r4, r2
 8010edc:	f000 8145 	beq.w	801116a <_malloc_r+0x3fa>
 8010ee0:	6863      	ldr	r3, [r4, #4]
 8010ee2:	68e1      	ldr	r1, [r4, #12]
 8010ee4:	68a5      	ldr	r5, [r4, #8]
 8010ee6:	f023 0303 	bic.w	r3, r3, #3
 8010eea:	4423      	add	r3, r4
 8010eec:	4630      	mov	r0, r6
 8010eee:	685a      	ldr	r2, [r3, #4]
 8010ef0:	60e9      	str	r1, [r5, #12]
 8010ef2:	f042 0201 	orr.w	r2, r2, #1
 8010ef6:	608d      	str	r5, [r1, #8]
 8010ef8:	605a      	str	r2, [r3, #4]
 8010efa:	f000 fae9 	bl	80114d0 <__malloc_unlock>
 8010efe:	3408      	adds	r4, #8
 8010f00:	4620      	mov	r0, r4
 8010f02:	b003      	add	sp, #12
 8010f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f08:	2400      	movs	r4, #0
 8010f0a:	230c      	movs	r3, #12
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	6033      	str	r3, [r6, #0]
 8010f10:	b003      	add	sp, #12
 8010f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f16:	2380      	movs	r3, #128	; 0x80
 8010f18:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8010f1c:	203f      	movs	r0, #63	; 0x3f
 8010f1e:	e749      	b.n	8010db4 <_malloc_r+0x44>
 8010f20:	4670      	mov	r0, lr
 8010f22:	e75d      	b.n	8010de0 <_malloc_r+0x70>
 8010f24:	4423      	add	r3, r4
 8010f26:	68e1      	ldr	r1, [r4, #12]
 8010f28:	685a      	ldr	r2, [r3, #4]
 8010f2a:	68a5      	ldr	r5, [r4, #8]
 8010f2c:	f042 0201 	orr.w	r2, r2, #1
 8010f30:	60e9      	str	r1, [r5, #12]
 8010f32:	4630      	mov	r0, r6
 8010f34:	608d      	str	r5, [r1, #8]
 8010f36:	605a      	str	r2, [r3, #4]
 8010f38:	f000 faca 	bl	80114d0 <__malloc_unlock>
 8010f3c:	3408      	adds	r4, #8
 8010f3e:	4620      	mov	r0, r4
 8010f40:	b003      	add	sp, #12
 8010f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f46:	4423      	add	r3, r4
 8010f48:	4630      	mov	r0, r6
 8010f4a:	685a      	ldr	r2, [r3, #4]
 8010f4c:	f042 0201 	orr.w	r2, r2, #1
 8010f50:	605a      	str	r2, [r3, #4]
 8010f52:	f000 fabd 	bl	80114d0 <__malloc_unlock>
 8010f56:	3408      	adds	r4, #8
 8010f58:	4620      	mov	r0, r4
 8010f5a:	b003      	add	sp, #12
 8010f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f60:	68bc      	ldr	r4, [r7, #8]
 8010f62:	6863      	ldr	r3, [r4, #4]
 8010f64:	f023 0803 	bic.w	r8, r3, #3
 8010f68:	45a8      	cmp	r8, r5
 8010f6a:	d304      	bcc.n	8010f76 <_malloc_r+0x206>
 8010f6c:	ebc5 0308 	rsb	r3, r5, r8
 8010f70:	2b0f      	cmp	r3, #15
 8010f72:	f300 808c 	bgt.w	801108e <_malloc_r+0x31e>
 8010f76:	4b55      	ldr	r3, [pc, #340]	; (80110cc <_malloc_r+0x35c>)
 8010f78:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80110dc <_malloc_r+0x36c>
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	f8d9 3000 	ldr.w	r3, [r9]
 8010f82:	3301      	adds	r3, #1
 8010f84:	442a      	add	r2, r5
 8010f86:	eb04 0a08 	add.w	sl, r4, r8
 8010f8a:	f000 8160 	beq.w	801124e <_malloc_r+0x4de>
 8010f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010f92:	320f      	adds	r2, #15
 8010f94:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8010f98:	f022 020f 	bic.w	r2, r2, #15
 8010f9c:	4611      	mov	r1, r2
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	9201      	str	r2, [sp, #4]
 8010fa2:	f7fd f915 	bl	800e1d0 <_sbrk_r>
 8010fa6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010faa:	4683      	mov	fp, r0
 8010fac:	9a01      	ldr	r2, [sp, #4]
 8010fae:	f000 8158 	beq.w	8011262 <_malloc_r+0x4f2>
 8010fb2:	4582      	cmp	sl, r0
 8010fb4:	f200 80fc 	bhi.w	80111b0 <_malloc_r+0x440>
 8010fb8:	4b45      	ldr	r3, [pc, #276]	; (80110d0 <_malloc_r+0x360>)
 8010fba:	6819      	ldr	r1, [r3, #0]
 8010fbc:	45da      	cmp	sl, fp
 8010fbe:	4411      	add	r1, r2
 8010fc0:	6019      	str	r1, [r3, #0]
 8010fc2:	f000 8153 	beq.w	801126c <_malloc_r+0x4fc>
 8010fc6:	f8d9 0000 	ldr.w	r0, [r9]
 8010fca:	f8df e110 	ldr.w	lr, [pc, #272]	; 80110dc <_malloc_r+0x36c>
 8010fce:	3001      	adds	r0, #1
 8010fd0:	bf1b      	ittet	ne
 8010fd2:	ebca 0a0b 	rsbne	sl, sl, fp
 8010fd6:	4451      	addne	r1, sl
 8010fd8:	f8ce b000 	streq.w	fp, [lr]
 8010fdc:	6019      	strne	r1, [r3, #0]
 8010fde:	f01b 0107 	ands.w	r1, fp, #7
 8010fe2:	f000 8117 	beq.w	8011214 <_malloc_r+0x4a4>
 8010fe6:	f1c1 0008 	rsb	r0, r1, #8
 8010fea:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8010fee:	4483      	add	fp, r0
 8010ff0:	3108      	adds	r1, #8
 8010ff2:	445a      	add	r2, fp
 8010ff4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8010ff8:	ebc2 0901 	rsb	r9, r2, r1
 8010ffc:	4649      	mov	r1, r9
 8010ffe:	4630      	mov	r0, r6
 8011000:	9301      	str	r3, [sp, #4]
 8011002:	f7fd f8e5 	bl	800e1d0 <_sbrk_r>
 8011006:	1c43      	adds	r3, r0, #1
 8011008:	9b01      	ldr	r3, [sp, #4]
 801100a:	f000 813f 	beq.w	801128c <_malloc_r+0x51c>
 801100e:	ebcb 0200 	rsb	r2, fp, r0
 8011012:	444a      	add	r2, r9
 8011014:	f042 0201 	orr.w	r2, r2, #1
 8011018:	6819      	ldr	r1, [r3, #0]
 801101a:	f8c7 b008 	str.w	fp, [r7, #8]
 801101e:	4449      	add	r1, r9
 8011020:	42bc      	cmp	r4, r7
 8011022:	f8cb 2004 	str.w	r2, [fp, #4]
 8011026:	6019      	str	r1, [r3, #0]
 8011028:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80110d0 <_malloc_r+0x360>
 801102c:	d016      	beq.n	801105c <_malloc_r+0x2ec>
 801102e:	f1b8 0f0f 	cmp.w	r8, #15
 8011032:	f240 80fd 	bls.w	8011230 <_malloc_r+0x4c0>
 8011036:	6862      	ldr	r2, [r4, #4]
 8011038:	f1a8 030c 	sub.w	r3, r8, #12
 801103c:	f023 0307 	bic.w	r3, r3, #7
 8011040:	18e0      	adds	r0, r4, r3
 8011042:	f002 0201 	and.w	r2, r2, #1
 8011046:	f04f 0e05 	mov.w	lr, #5
 801104a:	431a      	orrs	r2, r3
 801104c:	2b0f      	cmp	r3, #15
 801104e:	6062      	str	r2, [r4, #4]
 8011050:	f8c0 e004 	str.w	lr, [r0, #4]
 8011054:	f8c0 e008 	str.w	lr, [r0, #8]
 8011058:	f200 811c 	bhi.w	8011294 <_malloc_r+0x524>
 801105c:	4b1d      	ldr	r3, [pc, #116]	; (80110d4 <_malloc_r+0x364>)
 801105e:	68bc      	ldr	r4, [r7, #8]
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	4291      	cmp	r1, r2
 8011064:	bf88      	it	hi
 8011066:	6019      	strhi	r1, [r3, #0]
 8011068:	4b1b      	ldr	r3, [pc, #108]	; (80110d8 <_malloc_r+0x368>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	4291      	cmp	r1, r2
 801106e:	6862      	ldr	r2, [r4, #4]
 8011070:	bf88      	it	hi
 8011072:	6019      	strhi	r1, [r3, #0]
 8011074:	f022 0203 	bic.w	r2, r2, #3
 8011078:	4295      	cmp	r5, r2
 801107a:	eba2 0305 	sub.w	r3, r2, r5
 801107e:	d801      	bhi.n	8011084 <_malloc_r+0x314>
 8011080:	2b0f      	cmp	r3, #15
 8011082:	dc04      	bgt.n	801108e <_malloc_r+0x31e>
 8011084:	4630      	mov	r0, r6
 8011086:	f000 fa23 	bl	80114d0 <__malloc_unlock>
 801108a:	2400      	movs	r4, #0
 801108c:	e738      	b.n	8010f00 <_malloc_r+0x190>
 801108e:	1962      	adds	r2, r4, r5
 8011090:	f043 0301 	orr.w	r3, r3, #1
 8011094:	f045 0501 	orr.w	r5, r5, #1
 8011098:	6065      	str	r5, [r4, #4]
 801109a:	4630      	mov	r0, r6
 801109c:	60ba      	str	r2, [r7, #8]
 801109e:	6053      	str	r3, [r2, #4]
 80110a0:	f000 fa16 	bl	80114d0 <__malloc_unlock>
 80110a4:	3408      	adds	r4, #8
 80110a6:	4620      	mov	r0, r4
 80110a8:	b003      	add	sp, #12
 80110aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ae:	2b14      	cmp	r3, #20
 80110b0:	d971      	bls.n	8011196 <_malloc_r+0x426>
 80110b2:	2b54      	cmp	r3, #84	; 0x54
 80110b4:	f200 80a4 	bhi.w	8011200 <_malloc_r+0x490>
 80110b8:	0b28      	lsrs	r0, r5, #12
 80110ba:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80110be:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80110c2:	306e      	adds	r0, #110	; 0x6e
 80110c4:	e676      	b.n	8010db4 <_malloc_r+0x44>
 80110c6:	bf00      	nop
 80110c8:	20000c44 	.word	0x20000c44
 80110cc:	20001c3c 	.word	0x20001c3c
 80110d0:	20001c40 	.word	0x20001c40
 80110d4:	20001c38 	.word	0x20001c38
 80110d8:	20001c34 	.word	0x20001c34
 80110dc:	20001050 	.word	0x20001050
 80110e0:	0a5a      	lsrs	r2, r3, #9
 80110e2:	2a04      	cmp	r2, #4
 80110e4:	d95e      	bls.n	80111a4 <_malloc_r+0x434>
 80110e6:	2a14      	cmp	r2, #20
 80110e8:	f200 80b3 	bhi.w	8011252 <_malloc_r+0x4e2>
 80110ec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80110f0:	0049      	lsls	r1, r1, #1
 80110f2:	325b      	adds	r2, #91	; 0x5b
 80110f4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 80110f8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80110fc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80112dc <_malloc_r+0x56c>
 8011100:	f1ac 0c08 	sub.w	ip, ip, #8
 8011104:	458c      	cmp	ip, r1
 8011106:	f000 8088 	beq.w	801121a <_malloc_r+0x4aa>
 801110a:	684a      	ldr	r2, [r1, #4]
 801110c:	f022 0203 	bic.w	r2, r2, #3
 8011110:	4293      	cmp	r3, r2
 8011112:	d202      	bcs.n	801111a <_malloc_r+0x3aa>
 8011114:	6889      	ldr	r1, [r1, #8]
 8011116:	458c      	cmp	ip, r1
 8011118:	d1f7      	bne.n	801110a <_malloc_r+0x39a>
 801111a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	f8c4 c00c 	str.w	ip, [r4, #12]
 8011124:	60a1      	str	r1, [r4, #8]
 8011126:	f8cc 4008 	str.w	r4, [ip, #8]
 801112a:	60cc      	str	r4, [r1, #12]
 801112c:	e688      	b.n	8010e40 <_malloc_r+0xd0>
 801112e:	1963      	adds	r3, r4, r5
 8011130:	f042 0701 	orr.w	r7, r2, #1
 8011134:	f045 0501 	orr.w	r5, r5, #1
 8011138:	6065      	str	r5, [r4, #4]
 801113a:	4630      	mov	r0, r6
 801113c:	614b      	str	r3, [r1, #20]
 801113e:	610b      	str	r3, [r1, #16]
 8011140:	f8c3 e00c 	str.w	lr, [r3, #12]
 8011144:	f8c3 e008 	str.w	lr, [r3, #8]
 8011148:	605f      	str	r7, [r3, #4]
 801114a:	509a      	str	r2, [r3, r2]
 801114c:	3408      	adds	r4, #8
 801114e:	f000 f9bf 	bl	80114d0 <__malloc_unlock>
 8011152:	e6d5      	b.n	8010f00 <_malloc_r+0x190>
 8011154:	684a      	ldr	r2, [r1, #4]
 8011156:	e673      	b.n	8010e40 <_malloc_r+0xd0>
 8011158:	f108 0801 	add.w	r8, r8, #1
 801115c:	f018 0f03 	tst.w	r8, #3
 8011160:	f10c 0c08 	add.w	ip, ip, #8
 8011164:	f47f ae7f 	bne.w	8010e66 <_malloc_r+0xf6>
 8011168:	e030      	b.n	80111cc <_malloc_r+0x45c>
 801116a:	68dc      	ldr	r4, [r3, #12]
 801116c:	42a3      	cmp	r3, r4
 801116e:	bf08      	it	eq
 8011170:	3002      	addeq	r0, #2
 8011172:	f43f ae35 	beq.w	8010de0 <_malloc_r+0x70>
 8011176:	e6b3      	b.n	8010ee0 <_malloc_r+0x170>
 8011178:	440b      	add	r3, r1
 801117a:	460c      	mov	r4, r1
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	68c9      	ldr	r1, [r1, #12]
 8011180:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8011184:	f042 0201 	orr.w	r2, r2, #1
 8011188:	605a      	str	r2, [r3, #4]
 801118a:	4630      	mov	r0, r6
 801118c:	60e9      	str	r1, [r5, #12]
 801118e:	608d      	str	r5, [r1, #8]
 8011190:	f000 f99e 	bl	80114d0 <__malloc_unlock>
 8011194:	e6b4      	b.n	8010f00 <_malloc_r+0x190>
 8011196:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 801119a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 801119e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80111a2:	e607      	b.n	8010db4 <_malloc_r+0x44>
 80111a4:	099a      	lsrs	r2, r3, #6
 80111a6:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80111aa:	0049      	lsls	r1, r1, #1
 80111ac:	3238      	adds	r2, #56	; 0x38
 80111ae:	e7a1      	b.n	80110f4 <_malloc_r+0x384>
 80111b0:	42bc      	cmp	r4, r7
 80111b2:	4b4a      	ldr	r3, [pc, #296]	; (80112dc <_malloc_r+0x56c>)
 80111b4:	f43f af00 	beq.w	8010fb8 <_malloc_r+0x248>
 80111b8:	689c      	ldr	r4, [r3, #8]
 80111ba:	6862      	ldr	r2, [r4, #4]
 80111bc:	f022 0203 	bic.w	r2, r2, #3
 80111c0:	e75a      	b.n	8011078 <_malloc_r+0x308>
 80111c2:	f859 3908 	ldr.w	r3, [r9], #-8
 80111c6:	4599      	cmp	r9, r3
 80111c8:	f040 8082 	bne.w	80112d0 <_malloc_r+0x560>
 80111cc:	f010 0f03 	tst.w	r0, #3
 80111d0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80111d4:	d1f5      	bne.n	80111c2 <_malloc_r+0x452>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	ea23 0304 	bic.w	r3, r3, r4
 80111dc:	607b      	str	r3, [r7, #4]
 80111de:	0064      	lsls	r4, r4, #1
 80111e0:	429c      	cmp	r4, r3
 80111e2:	f63f aebd 	bhi.w	8010f60 <_malloc_r+0x1f0>
 80111e6:	2c00      	cmp	r4, #0
 80111e8:	f43f aeba 	beq.w	8010f60 <_malloc_r+0x1f0>
 80111ec:	421c      	tst	r4, r3
 80111ee:	4640      	mov	r0, r8
 80111f0:	f47f ae35 	bne.w	8010e5e <_malloc_r+0xee>
 80111f4:	0064      	lsls	r4, r4, #1
 80111f6:	421c      	tst	r4, r3
 80111f8:	f100 0004 	add.w	r0, r0, #4
 80111fc:	d0fa      	beq.n	80111f4 <_malloc_r+0x484>
 80111fe:	e62e      	b.n	8010e5e <_malloc_r+0xee>
 8011200:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8011204:	d818      	bhi.n	8011238 <_malloc_r+0x4c8>
 8011206:	0be8      	lsrs	r0, r5, #15
 8011208:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 801120c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8011210:	3077      	adds	r0, #119	; 0x77
 8011212:	e5cf      	b.n	8010db4 <_malloc_r+0x44>
 8011214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011218:	e6eb      	b.n	8010ff2 <_malloc_r+0x282>
 801121a:	2101      	movs	r1, #1
 801121c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011220:	1092      	asrs	r2, r2, #2
 8011222:	fa01 f202 	lsl.w	r2, r1, r2
 8011226:	431a      	orrs	r2, r3
 8011228:	f8c8 2004 	str.w	r2, [r8, #4]
 801122c:	4661      	mov	r1, ip
 801122e:	e777      	b.n	8011120 <_malloc_r+0x3b0>
 8011230:	2301      	movs	r3, #1
 8011232:	f8cb 3004 	str.w	r3, [fp, #4]
 8011236:	e725      	b.n	8011084 <_malloc_r+0x314>
 8011238:	f240 5254 	movw	r2, #1364	; 0x554
 801123c:	4293      	cmp	r3, r2
 801123e:	d820      	bhi.n	8011282 <_malloc_r+0x512>
 8011240:	0ca8      	lsrs	r0, r5, #18
 8011242:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8011246:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801124a:	307c      	adds	r0, #124	; 0x7c
 801124c:	e5b2      	b.n	8010db4 <_malloc_r+0x44>
 801124e:	3210      	adds	r2, #16
 8011250:	e6a4      	b.n	8010f9c <_malloc_r+0x22c>
 8011252:	2a54      	cmp	r2, #84	; 0x54
 8011254:	d826      	bhi.n	80112a4 <_malloc_r+0x534>
 8011256:	0b1a      	lsrs	r2, r3, #12
 8011258:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 801125c:	0049      	lsls	r1, r1, #1
 801125e:	326e      	adds	r2, #110	; 0x6e
 8011260:	e748      	b.n	80110f4 <_malloc_r+0x384>
 8011262:	68bc      	ldr	r4, [r7, #8]
 8011264:	6862      	ldr	r2, [r4, #4]
 8011266:	f022 0203 	bic.w	r2, r2, #3
 801126a:	e705      	b.n	8011078 <_malloc_r+0x308>
 801126c:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8011270:	2800      	cmp	r0, #0
 8011272:	f47f aea8 	bne.w	8010fc6 <_malloc_r+0x256>
 8011276:	4442      	add	r2, r8
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	f042 0201 	orr.w	r2, r2, #1
 801127e:	605a      	str	r2, [r3, #4]
 8011280:	e6ec      	b.n	801105c <_malloc_r+0x2ec>
 8011282:	23fe      	movs	r3, #254	; 0xfe
 8011284:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8011288:	207e      	movs	r0, #126	; 0x7e
 801128a:	e593      	b.n	8010db4 <_malloc_r+0x44>
 801128c:	2201      	movs	r2, #1
 801128e:	f04f 0900 	mov.w	r9, #0
 8011292:	e6c1      	b.n	8011018 <_malloc_r+0x2a8>
 8011294:	f104 0108 	add.w	r1, r4, #8
 8011298:	4630      	mov	r0, r6
 801129a:	f003 f989 	bl	80145b0 <_free_r>
 801129e:	f8d9 1000 	ldr.w	r1, [r9]
 80112a2:	e6db      	b.n	801105c <_malloc_r+0x2ec>
 80112a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80112a8:	d805      	bhi.n	80112b6 <_malloc_r+0x546>
 80112aa:	0bda      	lsrs	r2, r3, #15
 80112ac:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80112b0:	0049      	lsls	r1, r1, #1
 80112b2:	3277      	adds	r2, #119	; 0x77
 80112b4:	e71e      	b.n	80110f4 <_malloc_r+0x384>
 80112b6:	f240 5154 	movw	r1, #1364	; 0x554
 80112ba:	428a      	cmp	r2, r1
 80112bc:	d805      	bhi.n	80112ca <_malloc_r+0x55a>
 80112be:	0c9a      	lsrs	r2, r3, #18
 80112c0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80112c4:	0049      	lsls	r1, r1, #1
 80112c6:	327c      	adds	r2, #124	; 0x7c
 80112c8:	e714      	b.n	80110f4 <_malloc_r+0x384>
 80112ca:	21fe      	movs	r1, #254	; 0xfe
 80112cc:	227e      	movs	r2, #126	; 0x7e
 80112ce:	e711      	b.n	80110f4 <_malloc_r+0x384>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	e784      	b.n	80111de <_malloc_r+0x46e>
 80112d4:	08e8      	lsrs	r0, r5, #3
 80112d6:	1c43      	adds	r3, r0, #1
 80112d8:	005b      	lsls	r3, r3, #1
 80112da:	e5f8      	b.n	8010ece <_malloc_r+0x15e>
 80112dc:	20000c44 	.word	0x20000c44

080112e0 <memcmp>:
 80112e0:	2a03      	cmp	r2, #3
 80112e2:	b470      	push	{r4, r5, r6}
 80112e4:	d926      	bls.n	8011334 <memcmp+0x54>
 80112e6:	ea40 0301 	orr.w	r3, r0, r1
 80112ea:	079b      	lsls	r3, r3, #30
 80112ec:	d011      	beq.n	8011312 <memcmp+0x32>
 80112ee:	7804      	ldrb	r4, [r0, #0]
 80112f0:	780d      	ldrb	r5, [r1, #0]
 80112f2:	42ac      	cmp	r4, r5
 80112f4:	d122      	bne.n	801133c <memcmp+0x5c>
 80112f6:	4402      	add	r2, r0
 80112f8:	1c43      	adds	r3, r0, #1
 80112fa:	e005      	b.n	8011308 <memcmp+0x28>
 80112fc:	f813 4b01 	ldrb.w	r4, [r3], #1
 8011300:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8011304:	42ac      	cmp	r4, r5
 8011306:	d119      	bne.n	801133c <memcmp+0x5c>
 8011308:	4293      	cmp	r3, r2
 801130a:	d1f7      	bne.n	80112fc <memcmp+0x1c>
 801130c:	2000      	movs	r0, #0
 801130e:	bc70      	pop	{r4, r5, r6}
 8011310:	4770      	bx	lr
 8011312:	460c      	mov	r4, r1
 8011314:	4603      	mov	r3, r0
 8011316:	681e      	ldr	r6, [r3, #0]
 8011318:	6825      	ldr	r5, [r4, #0]
 801131a:	42ae      	cmp	r6, r5
 801131c:	4618      	mov	r0, r3
 801131e:	4621      	mov	r1, r4
 8011320:	f103 0304 	add.w	r3, r3, #4
 8011324:	f104 0404 	add.w	r4, r4, #4
 8011328:	d1e1      	bne.n	80112ee <memcmp+0xe>
 801132a:	3a04      	subs	r2, #4
 801132c:	2a03      	cmp	r2, #3
 801132e:	4618      	mov	r0, r3
 8011330:	4621      	mov	r1, r4
 8011332:	d8f0      	bhi.n	8011316 <memcmp+0x36>
 8011334:	2a00      	cmp	r2, #0
 8011336:	d1da      	bne.n	80112ee <memcmp+0xe>
 8011338:	4610      	mov	r0, r2
 801133a:	e7e8      	b.n	801130e <memcmp+0x2e>
 801133c:	1b60      	subs	r0, r4, r5
 801133e:	bc70      	pop	{r4, r5, r6}
 8011340:	4770      	bx	lr
 8011342:	bf00      	nop
	...

08011350 <memmove>:
 8011350:	4288      	cmp	r0, r1
 8011352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011354:	d90d      	bls.n	8011372 <memmove+0x22>
 8011356:	188b      	adds	r3, r1, r2
 8011358:	4298      	cmp	r0, r3
 801135a:	d20a      	bcs.n	8011372 <memmove+0x22>
 801135c:	1881      	adds	r1, r0, r2
 801135e:	2a00      	cmp	r2, #0
 8011360:	d051      	beq.n	8011406 <memmove+0xb6>
 8011362:	1a9a      	subs	r2, r3, r2
 8011364:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011368:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801136c:	4293      	cmp	r3, r2
 801136e:	d1f9      	bne.n	8011364 <memmove+0x14>
 8011370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011372:	2a0f      	cmp	r2, #15
 8011374:	d948      	bls.n	8011408 <memmove+0xb8>
 8011376:	ea41 0300 	orr.w	r3, r1, r0
 801137a:	079b      	lsls	r3, r3, #30
 801137c:	d146      	bne.n	801140c <memmove+0xbc>
 801137e:	f100 0410 	add.w	r4, r0, #16
 8011382:	f101 0310 	add.w	r3, r1, #16
 8011386:	4615      	mov	r5, r2
 8011388:	f853 6c10 	ldr.w	r6, [r3, #-16]
 801138c:	f844 6c10 	str.w	r6, [r4, #-16]
 8011390:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8011394:	f844 6c0c 	str.w	r6, [r4, #-12]
 8011398:	f853 6c08 	ldr.w	r6, [r3, #-8]
 801139c:	f844 6c08 	str.w	r6, [r4, #-8]
 80113a0:	3d10      	subs	r5, #16
 80113a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80113a6:	f844 6c04 	str.w	r6, [r4, #-4]
 80113aa:	2d0f      	cmp	r5, #15
 80113ac:	f103 0310 	add.w	r3, r3, #16
 80113b0:	f104 0410 	add.w	r4, r4, #16
 80113b4:	d8e8      	bhi.n	8011388 <memmove+0x38>
 80113b6:	f1a2 0310 	sub.w	r3, r2, #16
 80113ba:	f023 030f 	bic.w	r3, r3, #15
 80113be:	f002 0e0f 	and.w	lr, r2, #15
 80113c2:	3310      	adds	r3, #16
 80113c4:	f1be 0f03 	cmp.w	lr, #3
 80113c8:	4419      	add	r1, r3
 80113ca:	4403      	add	r3, r0
 80113cc:	d921      	bls.n	8011412 <memmove+0xc2>
 80113ce:	1f1e      	subs	r6, r3, #4
 80113d0:	460d      	mov	r5, r1
 80113d2:	4674      	mov	r4, lr
 80113d4:	3c04      	subs	r4, #4
 80113d6:	f855 7b04 	ldr.w	r7, [r5], #4
 80113da:	f846 7f04 	str.w	r7, [r6, #4]!
 80113de:	2c03      	cmp	r4, #3
 80113e0:	d8f8      	bhi.n	80113d4 <memmove+0x84>
 80113e2:	f1ae 0404 	sub.w	r4, lr, #4
 80113e6:	f024 0403 	bic.w	r4, r4, #3
 80113ea:	3404      	adds	r4, #4
 80113ec:	4423      	add	r3, r4
 80113ee:	4421      	add	r1, r4
 80113f0:	f002 0203 	and.w	r2, r2, #3
 80113f4:	b162      	cbz	r2, 8011410 <memmove+0xc0>
 80113f6:	3b01      	subs	r3, #1
 80113f8:	440a      	add	r2, r1
 80113fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011402:	428a      	cmp	r2, r1
 8011404:	d1f9      	bne.n	80113fa <memmove+0xaa>
 8011406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011408:	4603      	mov	r3, r0
 801140a:	e7f3      	b.n	80113f4 <memmove+0xa4>
 801140c:	4603      	mov	r3, r0
 801140e:	e7f2      	b.n	80113f6 <memmove+0xa6>
 8011410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011412:	4672      	mov	r2, lr
 8011414:	e7ee      	b.n	80113f4 <memmove+0xa4>
 8011416:	bf00      	nop
	...

08011420 <memset>:
 8011420:	b470      	push	{r4, r5, r6}
 8011422:	0784      	lsls	r4, r0, #30
 8011424:	d046      	beq.n	80114b4 <memset+0x94>
 8011426:	1e54      	subs	r4, r2, #1
 8011428:	2a00      	cmp	r2, #0
 801142a:	d041      	beq.n	80114b0 <memset+0x90>
 801142c:	b2cd      	uxtb	r5, r1
 801142e:	4603      	mov	r3, r0
 8011430:	e002      	b.n	8011438 <memset+0x18>
 8011432:	1e62      	subs	r2, r4, #1
 8011434:	b3e4      	cbz	r4, 80114b0 <memset+0x90>
 8011436:	4614      	mov	r4, r2
 8011438:	f803 5b01 	strb.w	r5, [r3], #1
 801143c:	079a      	lsls	r2, r3, #30
 801143e:	d1f8      	bne.n	8011432 <memset+0x12>
 8011440:	2c03      	cmp	r4, #3
 8011442:	d92e      	bls.n	80114a2 <memset+0x82>
 8011444:	b2cd      	uxtb	r5, r1
 8011446:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801144a:	2c0f      	cmp	r4, #15
 801144c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8011450:	d919      	bls.n	8011486 <memset+0x66>
 8011452:	f103 0210 	add.w	r2, r3, #16
 8011456:	4626      	mov	r6, r4
 8011458:	3e10      	subs	r6, #16
 801145a:	2e0f      	cmp	r6, #15
 801145c:	f842 5c10 	str.w	r5, [r2, #-16]
 8011460:	f842 5c0c 	str.w	r5, [r2, #-12]
 8011464:	f842 5c08 	str.w	r5, [r2, #-8]
 8011468:	f842 5c04 	str.w	r5, [r2, #-4]
 801146c:	f102 0210 	add.w	r2, r2, #16
 8011470:	d8f2      	bhi.n	8011458 <memset+0x38>
 8011472:	f1a4 0210 	sub.w	r2, r4, #16
 8011476:	f022 020f 	bic.w	r2, r2, #15
 801147a:	f004 040f 	and.w	r4, r4, #15
 801147e:	3210      	adds	r2, #16
 8011480:	2c03      	cmp	r4, #3
 8011482:	4413      	add	r3, r2
 8011484:	d90d      	bls.n	80114a2 <memset+0x82>
 8011486:	461e      	mov	r6, r3
 8011488:	4622      	mov	r2, r4
 801148a:	3a04      	subs	r2, #4
 801148c:	2a03      	cmp	r2, #3
 801148e:	f846 5b04 	str.w	r5, [r6], #4
 8011492:	d8fa      	bhi.n	801148a <memset+0x6a>
 8011494:	1f22      	subs	r2, r4, #4
 8011496:	f022 0203 	bic.w	r2, r2, #3
 801149a:	3204      	adds	r2, #4
 801149c:	4413      	add	r3, r2
 801149e:	f004 0403 	and.w	r4, r4, #3
 80114a2:	b12c      	cbz	r4, 80114b0 <memset+0x90>
 80114a4:	b2c9      	uxtb	r1, r1
 80114a6:	441c      	add	r4, r3
 80114a8:	f803 1b01 	strb.w	r1, [r3], #1
 80114ac:	42a3      	cmp	r3, r4
 80114ae:	d1fb      	bne.n	80114a8 <memset+0x88>
 80114b0:	bc70      	pop	{r4, r5, r6}
 80114b2:	4770      	bx	lr
 80114b4:	4614      	mov	r4, r2
 80114b6:	4603      	mov	r3, r0
 80114b8:	e7c2      	b.n	8011440 <memset+0x20>
 80114ba:	bf00      	nop
 80114bc:	0000      	movs	r0, r0
	...

080114c0 <__malloc_lock>:
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
	...

080114d0 <__malloc_unlock>:
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
	...

080114e0 <_putc_r>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	460d      	mov	r5, r1
 80114e4:	4614      	mov	r4, r2
 80114e6:	4606      	mov	r6, r0
 80114e8:	b108      	cbz	r0, 80114ee <_putc_r+0xe>
 80114ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80114ec:	b1d3      	cbz	r3, 8011524 <_putc_r+0x44>
 80114ee:	68a3      	ldr	r3, [r4, #8]
 80114f0:	3b01      	subs	r3, #1
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	60a3      	str	r3, [r4, #8]
 80114f6:	db06      	blt.n	8011506 <_putc_r+0x26>
 80114f8:	6823      	ldr	r3, [r4, #0]
 80114fa:	701d      	strb	r5, [r3, #0]
 80114fc:	6823      	ldr	r3, [r4, #0]
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	6022      	str	r2, [r4, #0]
 8011502:	7818      	ldrb	r0, [r3, #0]
 8011504:	bd70      	pop	{r4, r5, r6, pc}
 8011506:	69a2      	ldr	r2, [r4, #24]
 8011508:	4293      	cmp	r3, r2
 801150a:	db0e      	blt.n	801152a <_putc_r+0x4a>
 801150c:	6823      	ldr	r3, [r4, #0]
 801150e:	701d      	strb	r5, [r3, #0]
 8011510:	6823      	ldr	r3, [r4, #0]
 8011512:	7819      	ldrb	r1, [r3, #0]
 8011514:	290a      	cmp	r1, #10
 8011516:	d1f2      	bne.n	80114fe <_putc_r+0x1e>
 8011518:	4622      	mov	r2, r4
 801151a:	4630      	mov	r0, r6
 801151c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011520:	f001 be26 	b.w	8013170 <__swbuf_r>
 8011524:	f002 ffdc 	bl	80144e0 <__sinit>
 8011528:	e7e1      	b.n	80114ee <_putc_r+0xe>
 801152a:	4622      	mov	r2, r4
 801152c:	4629      	mov	r1, r5
 801152e:	4630      	mov	r0, r6
 8011530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011534:	f001 be1c 	b.w	8013170 <__swbuf_r>
	...

08011540 <realloc>:
 8011540:	4b02      	ldr	r3, [pc, #8]	; (801154c <realloc+0xc>)
 8011542:	460a      	mov	r2, r1
 8011544:	4601      	mov	r1, r0
 8011546:	6818      	ldr	r0, [r3, #0]
 8011548:	f000 b802 	b.w	8011550 <_realloc_r>
 801154c:	20000c40 	.word	0x20000c40

08011550 <_realloc_r>:
 8011550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011554:	4617      	mov	r7, r2
 8011556:	b083      	sub	sp, #12
 8011558:	2900      	cmp	r1, #0
 801155a:	f000 80c1 	beq.w	80116e0 <_realloc_r+0x190>
 801155e:	460e      	mov	r6, r1
 8011560:	4681      	mov	r9, r0
 8011562:	f107 050b 	add.w	r5, r7, #11
 8011566:	f7ff ffab 	bl	80114c0 <__malloc_lock>
 801156a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 801156e:	2d16      	cmp	r5, #22
 8011570:	f02e 0403 	bic.w	r4, lr, #3
 8011574:	f1a6 0808 	sub.w	r8, r6, #8
 8011578:	d840      	bhi.n	80115fc <_realloc_r+0xac>
 801157a:	2210      	movs	r2, #16
 801157c:	4615      	mov	r5, r2
 801157e:	42af      	cmp	r7, r5
 8011580:	d841      	bhi.n	8011606 <_realloc_r+0xb6>
 8011582:	4294      	cmp	r4, r2
 8011584:	da75      	bge.n	8011672 <_realloc_r+0x122>
 8011586:	4bc9      	ldr	r3, [pc, #804]	; (80118ac <_realloc_r+0x35c>)
 8011588:	6899      	ldr	r1, [r3, #8]
 801158a:	eb08 0004 	add.w	r0, r8, r4
 801158e:	4288      	cmp	r0, r1
 8011590:	6841      	ldr	r1, [r0, #4]
 8011592:	f000 80d9 	beq.w	8011748 <_realloc_r+0x1f8>
 8011596:	f021 0301 	bic.w	r3, r1, #1
 801159a:	4403      	add	r3, r0
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	07db      	lsls	r3, r3, #31
 80115a0:	d57d      	bpl.n	801169e <_realloc_r+0x14e>
 80115a2:	f01e 0f01 	tst.w	lr, #1
 80115a6:	d035      	beq.n	8011614 <_realloc_r+0xc4>
 80115a8:	4639      	mov	r1, r7
 80115aa:	4648      	mov	r0, r9
 80115ac:	f7ff fbe0 	bl	8010d70 <_malloc_r>
 80115b0:	4607      	mov	r7, r0
 80115b2:	b1e0      	cbz	r0, 80115ee <_realloc_r+0x9e>
 80115b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80115b8:	f023 0301 	bic.w	r3, r3, #1
 80115bc:	4443      	add	r3, r8
 80115be:	f1a0 0208 	sub.w	r2, r0, #8
 80115c2:	429a      	cmp	r2, r3
 80115c4:	f000 8144 	beq.w	8011850 <_realloc_r+0x300>
 80115c8:	1f22      	subs	r2, r4, #4
 80115ca:	2a24      	cmp	r2, #36	; 0x24
 80115cc:	f200 8131 	bhi.w	8011832 <_realloc_r+0x2e2>
 80115d0:	2a13      	cmp	r2, #19
 80115d2:	f200 8104 	bhi.w	80117de <_realloc_r+0x28e>
 80115d6:	4603      	mov	r3, r0
 80115d8:	4632      	mov	r2, r6
 80115da:	6811      	ldr	r1, [r2, #0]
 80115dc:	6019      	str	r1, [r3, #0]
 80115de:	6851      	ldr	r1, [r2, #4]
 80115e0:	6059      	str	r1, [r3, #4]
 80115e2:	6892      	ldr	r2, [r2, #8]
 80115e4:	609a      	str	r2, [r3, #8]
 80115e6:	4631      	mov	r1, r6
 80115e8:	4648      	mov	r0, r9
 80115ea:	f002 ffe1 	bl	80145b0 <_free_r>
 80115ee:	4648      	mov	r0, r9
 80115f0:	f7ff ff6e 	bl	80114d0 <__malloc_unlock>
 80115f4:	4638      	mov	r0, r7
 80115f6:	b003      	add	sp, #12
 80115f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fc:	f025 0507 	bic.w	r5, r5, #7
 8011600:	2d00      	cmp	r5, #0
 8011602:	462a      	mov	r2, r5
 8011604:	dabb      	bge.n	801157e <_realloc_r+0x2e>
 8011606:	230c      	movs	r3, #12
 8011608:	2000      	movs	r0, #0
 801160a:	f8c9 3000 	str.w	r3, [r9]
 801160e:	b003      	add	sp, #12
 8011610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011614:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8011618:	ebc3 0a08 	rsb	sl, r3, r8
 801161c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011620:	f023 0c03 	bic.w	ip, r3, #3
 8011624:	eb04 030c 	add.w	r3, r4, ip
 8011628:	4293      	cmp	r3, r2
 801162a:	dbbd      	blt.n	80115a8 <_realloc_r+0x58>
 801162c:	4657      	mov	r7, sl
 801162e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8011632:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8011636:	1f22      	subs	r2, r4, #4
 8011638:	2a24      	cmp	r2, #36	; 0x24
 801163a:	60c1      	str	r1, [r0, #12]
 801163c:	6088      	str	r0, [r1, #8]
 801163e:	f200 8117 	bhi.w	8011870 <_realloc_r+0x320>
 8011642:	2a13      	cmp	r2, #19
 8011644:	f240 8112 	bls.w	801186c <_realloc_r+0x31c>
 8011648:	6831      	ldr	r1, [r6, #0]
 801164a:	f8ca 1008 	str.w	r1, [sl, #8]
 801164e:	6871      	ldr	r1, [r6, #4]
 8011650:	f8ca 100c 	str.w	r1, [sl, #12]
 8011654:	2a1b      	cmp	r2, #27
 8011656:	f200 812b 	bhi.w	80118b0 <_realloc_r+0x360>
 801165a:	3608      	adds	r6, #8
 801165c:	f10a 0210 	add.w	r2, sl, #16
 8011660:	6831      	ldr	r1, [r6, #0]
 8011662:	6011      	str	r1, [r2, #0]
 8011664:	6871      	ldr	r1, [r6, #4]
 8011666:	6051      	str	r1, [r2, #4]
 8011668:	68b1      	ldr	r1, [r6, #8]
 801166a:	6091      	str	r1, [r2, #8]
 801166c:	463e      	mov	r6, r7
 801166e:	461c      	mov	r4, r3
 8011670:	46d0      	mov	r8, sl
 8011672:	1b63      	subs	r3, r4, r5
 8011674:	2b0f      	cmp	r3, #15
 8011676:	d81d      	bhi.n	80116b4 <_realloc_r+0x164>
 8011678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801167c:	f003 0301 	and.w	r3, r3, #1
 8011680:	4323      	orrs	r3, r4
 8011682:	4444      	add	r4, r8
 8011684:	f8c8 3004 	str.w	r3, [r8, #4]
 8011688:	6863      	ldr	r3, [r4, #4]
 801168a:	f043 0301 	orr.w	r3, r3, #1
 801168e:	6063      	str	r3, [r4, #4]
 8011690:	4648      	mov	r0, r9
 8011692:	f7ff ff1d 	bl	80114d0 <__malloc_unlock>
 8011696:	4630      	mov	r0, r6
 8011698:	b003      	add	sp, #12
 801169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169e:	f021 0103 	bic.w	r1, r1, #3
 80116a2:	4421      	add	r1, r4
 80116a4:	4291      	cmp	r1, r2
 80116a6:	db21      	blt.n	80116ec <_realloc_r+0x19c>
 80116a8:	68c3      	ldr	r3, [r0, #12]
 80116aa:	6882      	ldr	r2, [r0, #8]
 80116ac:	460c      	mov	r4, r1
 80116ae:	60d3      	str	r3, [r2, #12]
 80116b0:	609a      	str	r2, [r3, #8]
 80116b2:	e7de      	b.n	8011672 <_realloc_r+0x122>
 80116b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80116b8:	eb08 0105 	add.w	r1, r8, r5
 80116bc:	f002 0201 	and.w	r2, r2, #1
 80116c0:	4315      	orrs	r5, r2
 80116c2:	f043 0201 	orr.w	r2, r3, #1
 80116c6:	440b      	add	r3, r1
 80116c8:	f8c8 5004 	str.w	r5, [r8, #4]
 80116cc:	604a      	str	r2, [r1, #4]
 80116ce:	685a      	ldr	r2, [r3, #4]
 80116d0:	f042 0201 	orr.w	r2, r2, #1
 80116d4:	3108      	adds	r1, #8
 80116d6:	605a      	str	r2, [r3, #4]
 80116d8:	4648      	mov	r0, r9
 80116da:	f002 ff69 	bl	80145b0 <_free_r>
 80116de:	e7d7      	b.n	8011690 <_realloc_r+0x140>
 80116e0:	4611      	mov	r1, r2
 80116e2:	b003      	add	sp, #12
 80116e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e8:	f7ff bb42 	b.w	8010d70 <_malloc_r>
 80116ec:	f01e 0f01 	tst.w	lr, #1
 80116f0:	f47f af5a 	bne.w	80115a8 <_realloc_r+0x58>
 80116f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80116f8:	ebc3 0a08 	rsb	sl, r3, r8
 80116fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011700:	f023 0c03 	bic.w	ip, r3, #3
 8011704:	eb01 0e0c 	add.w	lr, r1, ip
 8011708:	4596      	cmp	lr, r2
 801170a:	db8b      	blt.n	8011624 <_realloc_r+0xd4>
 801170c:	68c3      	ldr	r3, [r0, #12]
 801170e:	6882      	ldr	r2, [r0, #8]
 8011710:	4657      	mov	r7, sl
 8011712:	60d3      	str	r3, [r2, #12]
 8011714:	609a      	str	r2, [r3, #8]
 8011716:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801171a:	f8da 300c 	ldr.w	r3, [sl, #12]
 801171e:	60cb      	str	r3, [r1, #12]
 8011720:	1f22      	subs	r2, r4, #4
 8011722:	2a24      	cmp	r2, #36	; 0x24
 8011724:	6099      	str	r1, [r3, #8]
 8011726:	f200 8099 	bhi.w	801185c <_realloc_r+0x30c>
 801172a:	2a13      	cmp	r2, #19
 801172c:	d962      	bls.n	80117f4 <_realloc_r+0x2a4>
 801172e:	6833      	ldr	r3, [r6, #0]
 8011730:	f8ca 3008 	str.w	r3, [sl, #8]
 8011734:	6873      	ldr	r3, [r6, #4]
 8011736:	f8ca 300c 	str.w	r3, [sl, #12]
 801173a:	2a1b      	cmp	r2, #27
 801173c:	f200 80a0 	bhi.w	8011880 <_realloc_r+0x330>
 8011740:	3608      	adds	r6, #8
 8011742:	f10a 0310 	add.w	r3, sl, #16
 8011746:	e056      	b.n	80117f6 <_realloc_r+0x2a6>
 8011748:	f021 0b03 	bic.w	fp, r1, #3
 801174c:	44a3      	add	fp, r4
 801174e:	f105 0010 	add.w	r0, r5, #16
 8011752:	4583      	cmp	fp, r0
 8011754:	da59      	bge.n	801180a <_realloc_r+0x2ba>
 8011756:	f01e 0f01 	tst.w	lr, #1
 801175a:	f47f af25 	bne.w	80115a8 <_realloc_r+0x58>
 801175e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8011762:	ebc1 0a08 	rsb	sl, r1, r8
 8011766:	f8da 1004 	ldr.w	r1, [sl, #4]
 801176a:	f021 0c03 	bic.w	ip, r1, #3
 801176e:	44e3      	add	fp, ip
 8011770:	4558      	cmp	r0, fp
 8011772:	f73f af57 	bgt.w	8011624 <_realloc_r+0xd4>
 8011776:	4657      	mov	r7, sl
 8011778:	f8da 100c 	ldr.w	r1, [sl, #12]
 801177c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8011780:	1f22      	subs	r2, r4, #4
 8011782:	2a24      	cmp	r2, #36	; 0x24
 8011784:	60c1      	str	r1, [r0, #12]
 8011786:	6088      	str	r0, [r1, #8]
 8011788:	f200 80b4 	bhi.w	80118f4 <_realloc_r+0x3a4>
 801178c:	2a13      	cmp	r2, #19
 801178e:	f240 80a5 	bls.w	80118dc <_realloc_r+0x38c>
 8011792:	6831      	ldr	r1, [r6, #0]
 8011794:	f8ca 1008 	str.w	r1, [sl, #8]
 8011798:	6871      	ldr	r1, [r6, #4]
 801179a:	f8ca 100c 	str.w	r1, [sl, #12]
 801179e:	2a1b      	cmp	r2, #27
 80117a0:	f200 80af 	bhi.w	8011902 <_realloc_r+0x3b2>
 80117a4:	3608      	adds	r6, #8
 80117a6:	f10a 0210 	add.w	r2, sl, #16
 80117aa:	6831      	ldr	r1, [r6, #0]
 80117ac:	6011      	str	r1, [r2, #0]
 80117ae:	6871      	ldr	r1, [r6, #4]
 80117b0:	6051      	str	r1, [r2, #4]
 80117b2:	68b1      	ldr	r1, [r6, #8]
 80117b4:	6091      	str	r1, [r2, #8]
 80117b6:	eb0a 0105 	add.w	r1, sl, r5
 80117ba:	ebc5 020b 	rsb	r2, r5, fp
 80117be:	f042 0201 	orr.w	r2, r2, #1
 80117c2:	6099      	str	r1, [r3, #8]
 80117c4:	604a      	str	r2, [r1, #4]
 80117c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	431d      	orrs	r5, r3
 80117d0:	4648      	mov	r0, r9
 80117d2:	f8ca 5004 	str.w	r5, [sl, #4]
 80117d6:	f7ff fe7b 	bl	80114d0 <__malloc_unlock>
 80117da:	4638      	mov	r0, r7
 80117dc:	e75c      	b.n	8011698 <_realloc_r+0x148>
 80117de:	6833      	ldr	r3, [r6, #0]
 80117e0:	6003      	str	r3, [r0, #0]
 80117e2:	6873      	ldr	r3, [r6, #4]
 80117e4:	6043      	str	r3, [r0, #4]
 80117e6:	2a1b      	cmp	r2, #27
 80117e8:	d827      	bhi.n	801183a <_realloc_r+0x2ea>
 80117ea:	f100 0308 	add.w	r3, r0, #8
 80117ee:	f106 0208 	add.w	r2, r6, #8
 80117f2:	e6f2      	b.n	80115da <_realloc_r+0x8a>
 80117f4:	463b      	mov	r3, r7
 80117f6:	6832      	ldr	r2, [r6, #0]
 80117f8:	601a      	str	r2, [r3, #0]
 80117fa:	6872      	ldr	r2, [r6, #4]
 80117fc:	605a      	str	r2, [r3, #4]
 80117fe:	68b2      	ldr	r2, [r6, #8]
 8011800:	609a      	str	r2, [r3, #8]
 8011802:	463e      	mov	r6, r7
 8011804:	4674      	mov	r4, lr
 8011806:	46d0      	mov	r8, sl
 8011808:	e733      	b.n	8011672 <_realloc_r+0x122>
 801180a:	eb08 0105 	add.w	r1, r8, r5
 801180e:	ebc5 0b0b 	rsb	fp, r5, fp
 8011812:	f04b 0201 	orr.w	r2, fp, #1
 8011816:	6099      	str	r1, [r3, #8]
 8011818:	604a      	str	r2, [r1, #4]
 801181a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801181e:	f003 0301 	and.w	r3, r3, #1
 8011822:	431d      	orrs	r5, r3
 8011824:	4648      	mov	r0, r9
 8011826:	f846 5c04 	str.w	r5, [r6, #-4]
 801182a:	f7ff fe51 	bl	80114d0 <__malloc_unlock>
 801182e:	4630      	mov	r0, r6
 8011830:	e732      	b.n	8011698 <_realloc_r+0x148>
 8011832:	4631      	mov	r1, r6
 8011834:	f7ff fd8c 	bl	8011350 <memmove>
 8011838:	e6d5      	b.n	80115e6 <_realloc_r+0x96>
 801183a:	68b3      	ldr	r3, [r6, #8]
 801183c:	6083      	str	r3, [r0, #8]
 801183e:	68f3      	ldr	r3, [r6, #12]
 8011840:	60c3      	str	r3, [r0, #12]
 8011842:	2a24      	cmp	r2, #36	; 0x24
 8011844:	d028      	beq.n	8011898 <_realloc_r+0x348>
 8011846:	f100 0310 	add.w	r3, r0, #16
 801184a:	f106 0210 	add.w	r2, r6, #16
 801184e:	e6c4      	b.n	80115da <_realloc_r+0x8a>
 8011850:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011854:	f023 0303 	bic.w	r3, r3, #3
 8011858:	441c      	add	r4, r3
 801185a:	e70a      	b.n	8011672 <_realloc_r+0x122>
 801185c:	4631      	mov	r1, r6
 801185e:	4638      	mov	r0, r7
 8011860:	4674      	mov	r4, lr
 8011862:	46d0      	mov	r8, sl
 8011864:	f7ff fd74 	bl	8011350 <memmove>
 8011868:	463e      	mov	r6, r7
 801186a:	e702      	b.n	8011672 <_realloc_r+0x122>
 801186c:	463a      	mov	r2, r7
 801186e:	e6f7      	b.n	8011660 <_realloc_r+0x110>
 8011870:	4631      	mov	r1, r6
 8011872:	4638      	mov	r0, r7
 8011874:	461c      	mov	r4, r3
 8011876:	46d0      	mov	r8, sl
 8011878:	f7ff fd6a 	bl	8011350 <memmove>
 801187c:	463e      	mov	r6, r7
 801187e:	e6f8      	b.n	8011672 <_realloc_r+0x122>
 8011880:	68b3      	ldr	r3, [r6, #8]
 8011882:	f8ca 3010 	str.w	r3, [sl, #16]
 8011886:	68f3      	ldr	r3, [r6, #12]
 8011888:	f8ca 3014 	str.w	r3, [sl, #20]
 801188c:	2a24      	cmp	r2, #36	; 0x24
 801188e:	d01b      	beq.n	80118c8 <_realloc_r+0x378>
 8011890:	3610      	adds	r6, #16
 8011892:	f10a 0318 	add.w	r3, sl, #24
 8011896:	e7ae      	b.n	80117f6 <_realloc_r+0x2a6>
 8011898:	6933      	ldr	r3, [r6, #16]
 801189a:	6103      	str	r3, [r0, #16]
 801189c:	6973      	ldr	r3, [r6, #20]
 801189e:	6143      	str	r3, [r0, #20]
 80118a0:	f106 0218 	add.w	r2, r6, #24
 80118a4:	f100 0318 	add.w	r3, r0, #24
 80118a8:	e697      	b.n	80115da <_realloc_r+0x8a>
 80118aa:	bf00      	nop
 80118ac:	20000c44 	.word	0x20000c44
 80118b0:	68b1      	ldr	r1, [r6, #8]
 80118b2:	f8ca 1010 	str.w	r1, [sl, #16]
 80118b6:	68f1      	ldr	r1, [r6, #12]
 80118b8:	f8ca 1014 	str.w	r1, [sl, #20]
 80118bc:	2a24      	cmp	r2, #36	; 0x24
 80118be:	d00f      	beq.n	80118e0 <_realloc_r+0x390>
 80118c0:	3610      	adds	r6, #16
 80118c2:	f10a 0218 	add.w	r2, sl, #24
 80118c6:	e6cb      	b.n	8011660 <_realloc_r+0x110>
 80118c8:	6933      	ldr	r3, [r6, #16]
 80118ca:	f8ca 3018 	str.w	r3, [sl, #24]
 80118ce:	6973      	ldr	r3, [r6, #20]
 80118d0:	f8ca 301c 	str.w	r3, [sl, #28]
 80118d4:	3618      	adds	r6, #24
 80118d6:	f10a 0320 	add.w	r3, sl, #32
 80118da:	e78c      	b.n	80117f6 <_realloc_r+0x2a6>
 80118dc:	463a      	mov	r2, r7
 80118de:	e764      	b.n	80117aa <_realloc_r+0x25a>
 80118e0:	6932      	ldr	r2, [r6, #16]
 80118e2:	f8ca 2018 	str.w	r2, [sl, #24]
 80118e6:	6972      	ldr	r2, [r6, #20]
 80118e8:	f8ca 201c 	str.w	r2, [sl, #28]
 80118ec:	3618      	adds	r6, #24
 80118ee:	f10a 0220 	add.w	r2, sl, #32
 80118f2:	e6b5      	b.n	8011660 <_realloc_r+0x110>
 80118f4:	4631      	mov	r1, r6
 80118f6:	4638      	mov	r0, r7
 80118f8:	9301      	str	r3, [sp, #4]
 80118fa:	f7ff fd29 	bl	8011350 <memmove>
 80118fe:	9b01      	ldr	r3, [sp, #4]
 8011900:	e759      	b.n	80117b6 <_realloc_r+0x266>
 8011902:	68b1      	ldr	r1, [r6, #8]
 8011904:	f8ca 1010 	str.w	r1, [sl, #16]
 8011908:	68f1      	ldr	r1, [r6, #12]
 801190a:	f8ca 1014 	str.w	r1, [sl, #20]
 801190e:	2a24      	cmp	r2, #36	; 0x24
 8011910:	d003      	beq.n	801191a <_realloc_r+0x3ca>
 8011912:	3610      	adds	r6, #16
 8011914:	f10a 0218 	add.w	r2, sl, #24
 8011918:	e747      	b.n	80117aa <_realloc_r+0x25a>
 801191a:	6932      	ldr	r2, [r6, #16]
 801191c:	f8ca 2018 	str.w	r2, [sl, #24]
 8011920:	6972      	ldr	r2, [r6, #20]
 8011922:	f8ca 201c 	str.w	r2, [sl, #28]
 8011926:	3618      	adds	r6, #24
 8011928:	f10a 0220 	add.w	r2, sl, #32
 801192c:	e73d      	b.n	80117aa <_realloc_r+0x25a>
 801192e:	bf00      	nop

08011930 <_raise_r>:
 8011930:	291f      	cmp	r1, #31
 8011932:	b538      	push	{r3, r4, r5, lr}
 8011934:	d822      	bhi.n	801197c <_raise_r+0x4c>
 8011936:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801193a:	4605      	mov	r5, r0
 801193c:	460c      	mov	r4, r1
 801193e:	b19a      	cbz	r2, 8011968 <_raise_r+0x38>
 8011940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011944:	b183      	cbz	r3, 8011968 <_raise_r+0x38>
 8011946:	2b01      	cmp	r3, #1
 8011948:	d00c      	beq.n	8011964 <_raise_r+0x34>
 801194a:	1c59      	adds	r1, r3, #1
 801194c:	d006      	beq.n	801195c <_raise_r+0x2c>
 801194e:	2500      	movs	r5, #0
 8011950:	4620      	mov	r0, r4
 8011952:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8011956:	4798      	blx	r3
 8011958:	4628      	mov	r0, r5
 801195a:	bd38      	pop	{r3, r4, r5, pc}
 801195c:	2316      	movs	r3, #22
 801195e:	6003      	str	r3, [r0, #0]
 8011960:	2001      	movs	r0, #1
 8011962:	bd38      	pop	{r3, r4, r5, pc}
 8011964:	2000      	movs	r0, #0
 8011966:	bd38      	pop	{r3, r4, r5, pc}
 8011968:	4628      	mov	r0, r5
 801196a:	f000 f831 	bl	80119d0 <_getpid_r>
 801196e:	4622      	mov	r2, r4
 8011970:	4601      	mov	r1, r0
 8011972:	4628      	mov	r0, r5
 8011974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011978:	f000 b812 	b.w	80119a0 <_kill_r>
 801197c:	2316      	movs	r3, #22
 801197e:	6003      	str	r3, [r0, #0]
 8011980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011984:	bd38      	pop	{r3, r4, r5, pc}
 8011986:	bf00      	nop
	...

08011990 <raise>:
 8011990:	4b02      	ldr	r3, [pc, #8]	; (801199c <raise+0xc>)
 8011992:	4601      	mov	r1, r0
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	f7ff bfcb 	b.w	8011930 <_raise_r>
 801199a:	bf00      	nop
 801199c:	20000c40 	.word	0x20000c40

080119a0 <_kill_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	460b      	mov	r3, r1
 80119a4:	4c07      	ldr	r4, [pc, #28]	; (80119c4 <_kill_r+0x24>)
 80119a6:	4605      	mov	r5, r0
 80119a8:	4611      	mov	r1, r2
 80119aa:	4618      	mov	r0, r3
 80119ac:	2300      	movs	r3, #0
 80119ae:	6023      	str	r3, [r4, #0]
 80119b0:	f003 fc46 	bl	8015240 <_kill>
 80119b4:	1c43      	adds	r3, r0, #1
 80119b6:	d000      	beq.n	80119ba <_kill_r+0x1a>
 80119b8:	bd38      	pop	{r3, r4, r5, pc}
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d0fb      	beq.n	80119b8 <_kill_r+0x18>
 80119c0:	602b      	str	r3, [r5, #0]
 80119c2:	bd38      	pop	{r3, r4, r5, pc}
 80119c4:	20001c68 	.word	0x20001c68
	...

080119d0 <_getpid_r>:
 80119d0:	f003 bc26 	b.w	8015220 <_getpid>
	...

080119e0 <sprintf>:
 80119e0:	b40e      	push	{r1, r2, r3}
 80119e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119e4:	b09c      	sub	sp, #112	; 0x70
 80119e6:	ab21      	add	r3, sp, #132	; 0x84
 80119e8:	490f      	ldr	r1, [pc, #60]	; (8011a28 <sprintf+0x48>)
 80119ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ee:	9301      	str	r3, [sp, #4]
 80119f0:	4605      	mov	r5, r0
 80119f2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80119f6:	6808      	ldr	r0, [r1, #0]
 80119f8:	9502      	str	r5, [sp, #8]
 80119fa:	f44f 7702 	mov.w	r7, #520	; 0x208
 80119fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8011a02:	a902      	add	r1, sp, #8
 8011a04:	9506      	str	r5, [sp, #24]
 8011a06:	f8ad 7014 	strh.w	r7, [sp, #20]
 8011a0a:	9404      	str	r4, [sp, #16]
 8011a0c:	9407      	str	r4, [sp, #28]
 8011a0e:	f8ad 6016 	strh.w	r6, [sp, #22]
 8011a12:	f000 f85d 	bl	8011ad0 <_svfprintf_r>
 8011a16:	9b02      	ldr	r3, [sp, #8]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	701a      	strb	r2, [r3, #0]
 8011a1c:	b01c      	add	sp, #112	; 0x70
 8011a1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011a22:	b003      	add	sp, #12
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop
 8011a28:	20000c40 	.word	0x20000c40
 8011a2c:	00000000 	.word	0x00000000

08011a30 <strncmp>:
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	d041      	beq.n	8011ab8 <strncmp+0x88>
 8011a34:	ea40 0301 	orr.w	r3, r0, r1
 8011a38:	f013 0303 	ands.w	r3, r3, #3
 8011a3c:	b4f0      	push	{r4, r5, r6, r7}
 8011a3e:	d125      	bne.n	8011a8c <strncmp+0x5c>
 8011a40:	2a03      	cmp	r2, #3
 8011a42:	d923      	bls.n	8011a8c <strncmp+0x5c>
 8011a44:	6804      	ldr	r4, [r0, #0]
 8011a46:	680d      	ldr	r5, [r1, #0]
 8011a48:	42ac      	cmp	r4, r5
 8011a4a:	d11f      	bne.n	8011a8c <strncmp+0x5c>
 8011a4c:	3a04      	subs	r2, #4
 8011a4e:	d035      	beq.n	8011abc <strncmp+0x8c>
 8011a50:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8011a54:	ea25 0404 	bic.w	r4, r5, r4
 8011a58:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8011a5c:	d131      	bne.n	8011ac2 <strncmp+0x92>
 8011a5e:	1d07      	adds	r7, r0, #4
 8011a60:	1d0d      	adds	r5, r1, #4
 8011a62:	e00d      	b.n	8011a80 <strncmp+0x50>
 8011a64:	f857 3b04 	ldr.w	r3, [r7], #4
 8011a68:	680e      	ldr	r6, [r1, #0]
 8011a6a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8011a6e:	42b3      	cmp	r3, r6
 8011a70:	ea24 0403 	bic.w	r4, r4, r3
 8011a74:	d10a      	bne.n	8011a8c <strncmp+0x5c>
 8011a76:	3a04      	subs	r2, #4
 8011a78:	d020      	beq.n	8011abc <strncmp+0x8c>
 8011a7a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8011a7e:	d123      	bne.n	8011ac8 <strncmp+0x98>
 8011a80:	2a03      	cmp	r2, #3
 8011a82:	4629      	mov	r1, r5
 8011a84:	4638      	mov	r0, r7
 8011a86:	f105 0504 	add.w	r5, r5, #4
 8011a8a:	d8eb      	bhi.n	8011a64 <strncmp+0x34>
 8011a8c:	7803      	ldrb	r3, [r0, #0]
 8011a8e:	780c      	ldrb	r4, [r1, #0]
 8011a90:	429c      	cmp	r4, r3
 8011a92:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011a96:	d10c      	bne.n	8011ab2 <strncmp+0x82>
 8011a98:	b182      	cbz	r2, 8011abc <strncmp+0x8c>
 8011a9a:	b914      	cbnz	r4, 8011aa2 <strncmp+0x72>
 8011a9c:	e016      	b.n	8011acc <strncmp+0x9c>
 8011a9e:	b16a      	cbz	r2, 8011abc <strncmp+0x8c>
 8011aa0:	b17b      	cbz	r3, 8011ac2 <strncmp+0x92>
 8011aa2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011aa6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011aaa:	42a3      	cmp	r3, r4
 8011aac:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011ab0:	d0f5      	beq.n	8011a9e <strncmp+0x6e>
 8011ab2:	1b18      	subs	r0, r3, r4
 8011ab4:	bcf0      	pop	{r4, r5, r6, r7}
 8011ab6:	4770      	bx	lr
 8011ab8:	4610      	mov	r0, r2
 8011aba:	4770      	bx	lr
 8011abc:	4610      	mov	r0, r2
 8011abe:	bcf0      	pop	{r4, r5, r6, r7}
 8011ac0:	4770      	bx	lr
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	bcf0      	pop	{r4, r5, r6, r7}
 8011ac6:	4770      	bx	lr
 8011ac8:	2000      	movs	r0, #0
 8011aca:	e7f3      	b.n	8011ab4 <strncmp+0x84>
 8011acc:	4620      	mov	r0, r4
 8011ace:	e7f1      	b.n	8011ab4 <strncmp+0x84>

08011ad0 <_svfprintf_r>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	b0bd      	sub	sp, #244	; 0xf4
 8011ad6:	460c      	mov	r4, r1
 8011ad8:	9104      	str	r1, [sp, #16]
 8011ada:	4692      	mov	sl, r2
 8011adc:	930a      	str	r3, [sp, #40]	; 0x28
 8011ade:	9006      	str	r0, [sp, #24]
 8011ae0:	f002 fe7e 	bl	80147e0 <_localeconv_r>
 8011ae4:	6803      	ldr	r3, [r0, #0]
 8011ae6:	9311      	str	r3, [sp, #68]	; 0x44
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7f8 fc19 	bl	800a320 <strlen>
 8011aee:	89a3      	ldrh	r3, [r4, #12]
 8011af0:	9012      	str	r0, [sp, #72]	; 0x48
 8011af2:	061d      	lsls	r5, r3, #24
 8011af4:	d503      	bpl.n	8011afe <_svfprintf_r+0x2e>
 8011af6:	6923      	ldr	r3, [r4, #16]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	f001 8136 	beq.w	8012d6a <_svfprintf_r+0x129a>
 8011afe:	ed9f 7ba4 	vldr	d7, [pc, #656]	; 8011d90 <_svfprintf_r+0x2c0>
 8011b02:	2300      	movs	r3, #0
 8011b04:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8011b08:	9310      	str	r3, [sp, #64]	; 0x40
 8011b0a:	9321      	str	r3, [sp, #132]	; 0x84
 8011b0c:	9320      	str	r3, [sp, #128]	; 0x80
 8011b0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b10:	9307      	str	r3, [sp, #28]
 8011b12:	ab2c      	add	r3, sp, #176	; 0xb0
 8011b14:	931f      	str	r3, [sp, #124]	; 0x7c
 8011b16:	4699      	mov	r9, r3
 8011b18:	f89a 3000 	ldrb.w	r3, [sl]
 8011b1c:	4654      	mov	r4, sl
 8011b1e:	b1eb      	cbz	r3, 8011b5c <_svfprintf_r+0x8c>
 8011b20:	2b25      	cmp	r3, #37	; 0x25
 8011b22:	d102      	bne.n	8011b2a <_svfprintf_r+0x5a>
 8011b24:	e01a      	b.n	8011b5c <_svfprintf_r+0x8c>
 8011b26:	2b25      	cmp	r3, #37	; 0x25
 8011b28:	d003      	beq.n	8011b32 <_svfprintf_r+0x62>
 8011b2a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1f9      	bne.n	8011b26 <_svfprintf_r+0x56>
 8011b32:	ebca 0504 	rsb	r5, sl, r4
 8011b36:	b18d      	cbz	r5, 8011b5c <_svfprintf_r+0x8c>
 8011b38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011b3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b3c:	f8c9 a000 	str.w	sl, [r9]
 8011b40:	3301      	adds	r3, #1
 8011b42:	442a      	add	r2, r5
 8011b44:	2b07      	cmp	r3, #7
 8011b46:	f8c9 5004 	str.w	r5, [r9, #4]
 8011b4a:	9221      	str	r2, [sp, #132]	; 0x84
 8011b4c:	9320      	str	r3, [sp, #128]	; 0x80
 8011b4e:	f300 80a6 	bgt.w	8011c9e <_svfprintf_r+0x1ce>
 8011b52:	f109 0908 	add.w	r9, r9, #8
 8011b56:	9b07      	ldr	r3, [sp, #28]
 8011b58:	442b      	add	r3, r5
 8011b5a:	9307      	str	r3, [sp, #28]
 8011b5c:	7823      	ldrb	r3, [r4, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f000 80a6 	beq.w	8011cb0 <_svfprintf_r+0x1e0>
 8011b64:	2300      	movs	r3, #0
 8011b66:	461a      	mov	r2, r3
 8011b68:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	9308      	str	r3, [sp, #32]
 8011b70:	9303      	str	r3, [sp, #12]
 8011b72:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011b76:	7863      	ldrb	r3, [r4, #1]
 8011b78:	f104 0a01 	add.w	sl, r4, #1
 8011b7c:	465d      	mov	r5, fp
 8011b7e:	f10a 0a01 	add.w	sl, sl, #1
 8011b82:	f1a3 0020 	sub.w	r0, r3, #32
 8011b86:	2858      	cmp	r0, #88	; 0x58
 8011b88:	f200 841f 	bhi.w	80123ca <_svfprintf_r+0x8fa>
 8011b8c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011b90:	041d038b 	.word	0x041d038b
 8011b94:	0393041d 	.word	0x0393041d
 8011b98:	041d041d 	.word	0x041d041d
 8011b9c:	041d041d 	.word	0x041d041d
 8011ba0:	041d041d 	.word	0x041d041d
 8011ba4:	03a8039a 	.word	0x03a8039a
 8011ba8:	005d041d 	.word	0x005d041d
 8011bac:	041d00e2 	.word	0x041d00e2
 8011bb0:	010d0106 	.word	0x010d0106
 8011bb4:	010d010d 	.word	0x010d010d
 8011bb8:	010d010d 	.word	0x010d010d
 8011bbc:	010d010d 	.word	0x010d010d
 8011bc0:	010d010d 	.word	0x010d010d
 8011bc4:	041d041d 	.word	0x041d041d
 8011bc8:	041d041d 	.word	0x041d041d
 8011bcc:	041d041d 	.word	0x041d041d
 8011bd0:	041d041d 	.word	0x041d041d
 8011bd4:	041d041d 	.word	0x041d041d
 8011bd8:	0285011d 	.word	0x0285011d
 8011bdc:	0285041d 	.word	0x0285041d
 8011be0:	041d041d 	.word	0x041d041d
 8011be4:	041d041d 	.word	0x041d041d
 8011be8:	041d02c0 	.word	0x041d02c0
 8011bec:	02c7041d 	.word	0x02c7041d
 8011bf0:	041d041d 	.word	0x041d041d
 8011bf4:	041d041d 	.word	0x041d041d
 8011bf8:	02fa041d 	.word	0x02fa041d
 8011bfc:	041d041d 	.word	0x041d041d
 8011c00:	041d0328 	.word	0x041d0328
 8011c04:	041d041d 	.word	0x041d041d
 8011c08:	041d041d 	.word	0x041d041d
 8011c0c:	041d041d 	.word	0x041d041d
 8011c10:	041d041d 	.word	0x041d041d
 8011c14:	0369041d 	.word	0x0369041d
 8011c18:	0285037c 	.word	0x0285037c
 8011c1c:	02850285 	.word	0x02850285
 8011c20:	037c0384 	.word	0x037c0384
 8011c24:	041d041d 	.word	0x041d041d
 8011c28:	041d03f2 	.word	0x041d03f2
 8011c2c:	00a303fd 	.word	0x00a303fd
 8011c30:	03ad0064 	.word	0x03ad0064
 8011c34:	03b4041d 	.word	0x03b4041d
 8011c38:	03d5041d 	.word	0x03d5041d
 8011c3c:	041d041d 	.word	0x041d041d
 8011c40:	03dd      	.short	0x03dd
 8011c42:	9808      	ldr	r0, [sp, #32]
 8011c44:	930a      	str	r3, [sp, #40]	; 0x28
 8011c46:	4240      	negs	r0, r0
 8011c48:	9008      	str	r0, [sp, #32]
 8011c4a:	9b03      	ldr	r3, [sp, #12]
 8011c4c:	f043 0304 	orr.w	r3, r3, #4
 8011c50:	9303      	str	r3, [sp, #12]
 8011c52:	f89a 3000 	ldrb.w	r3, [sl]
 8011c56:	e792      	b.n	8011b7e <_svfprintf_r+0xae>
 8011c58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c5a:	46ab      	mov	fp, r5
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	6804      	ldr	r4, [r0, #0]
 8011c60:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011c64:	1d07      	adds	r7, r0, #4
 8011c66:	9803      	ldr	r0, [sp, #12]
 8011c68:	2330      	movs	r3, #48	; 0x30
 8011c6a:	2278      	movs	r2, #120	; 0x78
 8011c6c:	458b      	cmp	fp, r1
 8011c6e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8011c72:	f04f 0500 	mov.w	r5, #0
 8011c76:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8011c7a:	f040 0302 	orr.w	r3, r0, #2
 8011c7e:	f2c0 83c1 	blt.w	8012404 <_svfprintf_r+0x934>
 8011c82:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8011c86:	f043 0302 	orr.w	r3, r3, #2
 8011c8a:	9303      	str	r3, [sp, #12]
 8011c8c:	ea54 0305 	orrs.w	r3, r4, r5
 8011c90:	970a      	str	r7, [sp, #40]	; 0x28
 8011c92:	f000 838d 	beq.w	80123b0 <_svfprintf_r+0x8e0>
 8011c96:	460f      	mov	r7, r1
 8011c98:	920c      	str	r2, [sp, #48]	; 0x30
 8011c9a:	483f      	ldr	r0, [pc, #252]	; (8011d98 <_svfprintf_r+0x2c8>)
 8011c9c:	e2d1      	b.n	8012242 <_svfprintf_r+0x772>
 8011c9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8011ca0:	9904      	ldr	r1, [sp, #16]
 8011ca2:	9806      	ldr	r0, [sp, #24]
 8011ca4:	f003 f9c4 	bl	8015030 <__ssprint_r>
 8011ca8:	b948      	cbnz	r0, 8011cbe <_svfprintf_r+0x1ee>
 8011caa:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8011cae:	e752      	b.n	8011b56 <_svfprintf_r+0x86>
 8011cb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cb2:	b123      	cbz	r3, 8011cbe <_svfprintf_r+0x1ee>
 8011cb4:	9806      	ldr	r0, [sp, #24]
 8011cb6:	9904      	ldr	r1, [sp, #16]
 8011cb8:	aa1f      	add	r2, sp, #124	; 0x7c
 8011cba:	f003 f9b9 	bl	8015030 <__ssprint_r>
 8011cbe:	9b04      	ldr	r3, [sp, #16]
 8011cc0:	899b      	ldrh	r3, [r3, #12]
 8011cc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011cc6:	9b07      	ldr	r3, [sp, #28]
 8011cc8:	bf18      	it	ne
 8011cca:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8011cce:	4618      	mov	r0, r3
 8011cd0:	b03d      	add	sp, #244	; 0xf4
 8011cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8011cd8:	46ab      	mov	fp, r5
 8011cda:	2a00      	cmp	r2, #0
 8011cdc:	f041 822d 	bne.w	801313a <_svfprintf_r+0x166a>
 8011ce0:	9a03      	ldr	r2, [sp, #12]
 8011ce2:	f012 0320 	ands.w	r3, r2, #32
 8011ce6:	f000 8228 	beq.w	801213a <_svfprintf_r+0x66a>
 8011cea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011cec:	3707      	adds	r7, #7
 8011cee:	f027 0307 	bic.w	r3, r7, #7
 8011cf2:	2700      	movs	r7, #0
 8011cf4:	f103 0108 	add.w	r1, r3, #8
 8011cf8:	45bb      	cmp	fp, r7
 8011cfa:	910a      	str	r1, [sp, #40]	; 0x28
 8011cfc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011d00:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8011d04:	f2c0 86d5 	blt.w	8012ab2 <_svfprintf_r+0xfe2>
 8011d08:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8011d0c:	9303      	str	r3, [sp, #12]
 8011d0e:	ea54 0305 	orrs.w	r3, r4, r5
 8011d12:	f000 836f 	beq.w	80123f4 <_svfprintf_r+0x924>
 8011d16:	ae2c      	add	r6, sp, #176	; 0xb0
 8011d18:	08e2      	lsrs	r2, r4, #3
 8011d1a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8011d1e:	08e9      	lsrs	r1, r5, #3
 8011d20:	f004 0307 	and.w	r3, r4, #7
 8011d24:	460d      	mov	r5, r1
 8011d26:	4614      	mov	r4, r2
 8011d28:	3330      	adds	r3, #48	; 0x30
 8011d2a:	ea54 0205 	orrs.w	r2, r4, r5
 8011d2e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8011d32:	d1f1      	bne.n	8011d18 <_svfprintf_r+0x248>
 8011d34:	9a03      	ldr	r2, [sp, #12]
 8011d36:	07d1      	lsls	r1, r2, #31
 8011d38:	f140 808c 	bpl.w	8011e54 <_svfprintf_r+0x384>
 8011d3c:	2b30      	cmp	r3, #48	; 0x30
 8011d3e:	f000 8089 	beq.w	8011e54 <_svfprintf_r+0x384>
 8011d42:	2230      	movs	r2, #48	; 0x30
 8011d44:	1e73      	subs	r3, r6, #1
 8011d46:	f806 2c01 	strb.w	r2, [r6, #-1]
 8011d4a:	aa2c      	add	r2, sp, #176	; 0xb0
 8011d4c:	1ad2      	subs	r2, r2, r3
 8011d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8011d50:	461e      	mov	r6, r3
 8011d52:	e082      	b.n	8011e5a <_svfprintf_r+0x38a>
 8011d54:	f89a 3000 	ldrb.w	r3, [sl]
 8011d58:	2b2a      	cmp	r3, #42	; 0x2a
 8011d5a:	f10a 0401 	add.w	r4, sl, #1
 8011d5e:	f001 81ad 	beq.w	80130bc <_svfprintf_r+0x15ec>
 8011d62:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8011d66:	2809      	cmp	r0, #9
 8011d68:	bf98      	it	ls
 8011d6a:	2500      	movls	r5, #0
 8011d6c:	f201 80f8 	bhi.w	8012f60 <_svfprintf_r+0x1490>
 8011d70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011d74:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011d78:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011d7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8011d80:	2809      	cmp	r0, #9
 8011d82:	d9f5      	bls.n	8011d70 <_svfprintf_r+0x2a0>
 8011d84:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8011d88:	46a2      	mov	sl, r4
 8011d8a:	e6fa      	b.n	8011b82 <_svfprintf_r+0xb2>
 8011d8c:	f3af 8000 	nop.w
	...
 8011d98:	08016a44 	.word	0x08016a44
 8011d9c:	9b03      	ldr	r3, [sp, #12]
 8011d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011da2:	9303      	str	r3, [sp, #12]
 8011da4:	f89a 3000 	ldrb.w	r3, [sl]
 8011da8:	e6e9      	b.n	8011b7e <_svfprintf_r+0xae>
 8011daa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8011dae:	2300      	movs	r3, #0
 8011db0:	461c      	mov	r4, r3
 8011db2:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8011db6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011dba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011dbe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8011dc2:	2809      	cmp	r0, #9
 8011dc4:	d9f5      	bls.n	8011db2 <_svfprintf_r+0x2e2>
 8011dc6:	9408      	str	r4, [sp, #32]
 8011dc8:	e6db      	b.n	8011b82 <_svfprintf_r+0xb2>
 8011dca:	930c      	str	r3, [sp, #48]	; 0x30
 8011dcc:	46ab      	mov	fp, r5
 8011dce:	2a00      	cmp	r2, #0
 8011dd0:	f041 81bb 	bne.w	801314a <_svfprintf_r+0x167a>
 8011dd4:	9b03      	ldr	r3, [sp, #12]
 8011dd6:	f043 0310 	orr.w	r3, r3, #16
 8011dda:	9303      	str	r3, [sp, #12]
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	069c      	lsls	r4, r3, #26
 8011de0:	f140 8521 	bpl.w	8012826 <_svfprintf_r+0xd56>
 8011de4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011de6:	3707      	adds	r7, #7
 8011de8:	f027 0707 	bic.w	r7, r7, #7
 8011dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011df0:	f107 0108 	add.w	r1, r7, #8
 8011df4:	910a      	str	r1, [sp, #40]	; 0x28
 8011df6:	4614      	mov	r4, r2
 8011df8:	461d      	mov	r5, r3
 8011dfa:	2a00      	cmp	r2, #0
 8011dfc:	f173 0300 	sbcs.w	r3, r3, #0
 8011e00:	f2c0 854e 	blt.w	80128a0 <_svfprintf_r+0xdd0>
 8011e04:	f1bb 0f00 	cmp.w	fp, #0
 8011e08:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8011e0c:	f2c0 8529 	blt.w	8012862 <_svfprintf_r+0xd92>
 8011e10:	9b03      	ldr	r3, [sp, #12]
 8011e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e16:	9303      	str	r3, [sp, #12]
 8011e18:	ea54 0305 	orrs.w	r3, r4, r5
 8011e1c:	f000 81d6 	beq.w	80121cc <_svfprintf_r+0x6fc>
 8011e20:	2d00      	cmp	r5, #0
 8011e22:	bf08      	it	eq
 8011e24:	2c0a      	cmpeq	r4, #10
 8011e26:	f0c0 81d6 	bcc.w	80121d6 <_svfprintf_r+0x706>
 8011e2a:	ae2c      	add	r6, sp, #176	; 0xb0
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	4629      	mov	r1, r5
 8011e30:	220a      	movs	r2, #10
 8011e32:	2300      	movs	r3, #0
 8011e34:	f7f8 fae4 	bl	800a400 <__aeabi_uldivmod>
 8011e38:	3230      	adds	r2, #48	; 0x30
 8011e3a:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8011e3e:	4620      	mov	r0, r4
 8011e40:	4629      	mov	r1, r5
 8011e42:	2300      	movs	r3, #0
 8011e44:	220a      	movs	r2, #10
 8011e46:	f7f8 fadb 	bl	800a400 <__aeabi_uldivmod>
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	460d      	mov	r5, r1
 8011e4e:	ea54 0305 	orrs.w	r3, r4, r5
 8011e52:	d1eb      	bne.n	8011e2c <_svfprintf_r+0x35c>
 8011e54:	ab2c      	add	r3, sp, #176	; 0xb0
 8011e56:	1b9b      	subs	r3, r3, r6
 8011e58:	9309      	str	r3, [sp, #36]	; 0x24
 8011e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e5c:	455b      	cmp	r3, fp
 8011e5e:	bfb8      	it	lt
 8011e60:	465b      	movlt	r3, fp
 8011e62:	9305      	str	r3, [sp, #20]
 8011e64:	2300      	movs	r3, #0
 8011e66:	930d      	str	r3, [sp, #52]	; 0x34
 8011e68:	b117      	cbz	r7, 8011e70 <_svfprintf_r+0x3a0>
 8011e6a:	9b05      	ldr	r3, [sp, #20]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	9305      	str	r3, [sp, #20]
 8011e70:	9b03      	ldr	r3, [sp, #12]
 8011e72:	f013 0302 	ands.w	r3, r3, #2
 8011e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e78:	d002      	beq.n	8011e80 <_svfprintf_r+0x3b0>
 8011e7a:	9b05      	ldr	r3, [sp, #20]
 8011e7c:	3302      	adds	r3, #2
 8011e7e:	9305      	str	r3, [sp, #20]
 8011e80:	9b03      	ldr	r3, [sp, #12]
 8011e82:	f013 0884 	ands.w	r8, r3, #132	; 0x84
 8011e86:	f040 82ca 	bne.w	801241e <_svfprintf_r+0x94e>
 8011e8a:	9b08      	ldr	r3, [sp, #32]
 8011e8c:	9a05      	ldr	r2, [sp, #20]
 8011e8e:	1a9d      	subs	r5, r3, r2
 8011e90:	2d00      	cmp	r5, #0
 8011e92:	f340 82c4 	ble.w	801241e <_svfprintf_r+0x94e>
 8011e96:	2d10      	cmp	r5, #16
 8011e98:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011e9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e9c:	4fb5      	ldr	r7, [pc, #724]	; (8012174 <_svfprintf_r+0x6a4>)
 8011e9e:	dd23      	ble.n	8011ee8 <_svfprintf_r+0x418>
 8011ea0:	4648      	mov	r0, r9
 8011ea2:	2410      	movs	r4, #16
 8011ea4:	46c1      	mov	r9, r8
 8011ea6:	46b0      	mov	r8, r6
 8011ea8:	9e06      	ldr	r6, [sp, #24]
 8011eaa:	e004      	b.n	8011eb6 <_svfprintf_r+0x3e6>
 8011eac:	3d10      	subs	r5, #16
 8011eae:	2d10      	cmp	r5, #16
 8011eb0:	f100 0008 	add.w	r0, r0, #8
 8011eb4:	dd15      	ble.n	8011ee2 <_svfprintf_r+0x412>
 8011eb6:	3201      	adds	r2, #1
 8011eb8:	3110      	adds	r1, #16
 8011eba:	2a07      	cmp	r2, #7
 8011ebc:	9121      	str	r1, [sp, #132]	; 0x84
 8011ebe:	9220      	str	r2, [sp, #128]	; 0x80
 8011ec0:	6007      	str	r7, [r0, #0]
 8011ec2:	6044      	str	r4, [r0, #4]
 8011ec4:	ddf2      	ble.n	8011eac <_svfprintf_r+0x3dc>
 8011ec6:	aa1f      	add	r2, sp, #124	; 0x7c
 8011ec8:	9904      	ldr	r1, [sp, #16]
 8011eca:	4630      	mov	r0, r6
 8011ecc:	f003 f8b0 	bl	8015030 <__ssprint_r>
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	f47f aef4 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8011ed6:	3d10      	subs	r5, #16
 8011ed8:	2d10      	cmp	r5, #16
 8011eda:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011ede:	a82c      	add	r0, sp, #176	; 0xb0
 8011ee0:	dce9      	bgt.n	8011eb6 <_svfprintf_r+0x3e6>
 8011ee2:	4646      	mov	r6, r8
 8011ee4:	46c8      	mov	r8, r9
 8011ee6:	4681      	mov	r9, r0
 8011ee8:	3201      	adds	r2, #1
 8011eea:	186c      	adds	r4, r5, r1
 8011eec:	2a07      	cmp	r2, #7
 8011eee:	9421      	str	r4, [sp, #132]	; 0x84
 8011ef0:	9220      	str	r2, [sp, #128]	; 0x80
 8011ef2:	f8c9 7000 	str.w	r7, [r9]
 8011ef6:	f8c9 5004 	str.w	r5, [r9, #4]
 8011efa:	f300 8420 	bgt.w	801273e <_svfprintf_r+0xc6e>
 8011efe:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8011f02:	f109 0908 	add.w	r9, r9, #8
 8011f06:	b177      	cbz	r7, 8011f26 <_svfprintf_r+0x456>
 8011f08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	3401      	adds	r4, #1
 8011f0e:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 8011f12:	2201      	movs	r2, #1
 8011f14:	2b07      	cmp	r3, #7
 8011f16:	9421      	str	r4, [sp, #132]	; 0x84
 8011f18:	9320      	str	r3, [sp, #128]	; 0x80
 8011f1a:	e889 0006 	stmia.w	r9, {r1, r2}
 8011f1e:	f300 8397 	bgt.w	8012650 <_svfprintf_r+0xb80>
 8011f22:	f109 0908 	add.w	r9, r9, #8
 8011f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f28:	b16b      	cbz	r3, 8011f46 <_svfprintf_r+0x476>
 8011f2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	3402      	adds	r4, #2
 8011f30:	a918      	add	r1, sp, #96	; 0x60
 8011f32:	2202      	movs	r2, #2
 8011f34:	2b07      	cmp	r3, #7
 8011f36:	9421      	str	r4, [sp, #132]	; 0x84
 8011f38:	9320      	str	r3, [sp, #128]	; 0x80
 8011f3a:	e889 0006 	stmia.w	r9, {r1, r2}
 8011f3e:	f300 8393 	bgt.w	8012668 <_svfprintf_r+0xb98>
 8011f42:	f109 0908 	add.w	r9, r9, #8
 8011f46:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8011f4a:	f000 82d4 	beq.w	80124f6 <_svfprintf_r+0xa26>
 8011f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f50:	ebc3 070b 	rsb	r7, r3, fp
 8011f54:	2f00      	cmp	r7, #0
 8011f56:	dd3a      	ble.n	8011fce <_svfprintf_r+0x4fe>
 8011f58:	2f10      	cmp	r7, #16
 8011f5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011f5c:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8012180 <_svfprintf_r+0x6b0>
 8011f60:	dd28      	ble.n	8011fb4 <_svfprintf_r+0x4e4>
 8011f62:	4641      	mov	r1, r8
 8011f64:	4622      	mov	r2, r4
 8011f66:	46b0      	mov	r8, r6
 8011f68:	f04f 0b10 	mov.w	fp, #16
 8011f6c:	9d06      	ldr	r5, [sp, #24]
 8011f6e:	9c04      	ldr	r4, [sp, #16]
 8011f70:	460e      	mov	r6, r1
 8011f72:	e004      	b.n	8011f7e <_svfprintf_r+0x4ae>
 8011f74:	3f10      	subs	r7, #16
 8011f76:	2f10      	cmp	r7, #16
 8011f78:	f109 0908 	add.w	r9, r9, #8
 8011f7c:	dd16      	ble.n	8011fac <_svfprintf_r+0x4dc>
 8011f7e:	3301      	adds	r3, #1
 8011f80:	3210      	adds	r2, #16
 8011f82:	2b07      	cmp	r3, #7
 8011f84:	9221      	str	r2, [sp, #132]	; 0x84
 8011f86:	9320      	str	r3, [sp, #128]	; 0x80
 8011f88:	e889 0840 	stmia.w	r9, {r6, fp}
 8011f8c:	ddf2      	ble.n	8011f74 <_svfprintf_r+0x4a4>
 8011f8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8011f90:	4621      	mov	r1, r4
 8011f92:	4628      	mov	r0, r5
 8011f94:	f003 f84c 	bl	8015030 <__ssprint_r>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	f47f ae90 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8011f9e:	3f10      	subs	r7, #16
 8011fa0:	2f10      	cmp	r7, #16
 8011fa2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011fa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011fa6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8011faa:	dce8      	bgt.n	8011f7e <_svfprintf_r+0x4ae>
 8011fac:	4614      	mov	r4, r2
 8011fae:	4632      	mov	r2, r6
 8011fb0:	4646      	mov	r6, r8
 8011fb2:	4690      	mov	r8, r2
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	443c      	add	r4, r7
 8011fb8:	2b07      	cmp	r3, #7
 8011fba:	9421      	str	r4, [sp, #132]	; 0x84
 8011fbc:	9320      	str	r3, [sp, #128]	; 0x80
 8011fbe:	f8c9 8000 	str.w	r8, [r9]
 8011fc2:	f8c9 7004 	str.w	r7, [r9, #4]
 8011fc6:	f300 8337 	bgt.w	8012638 <_svfprintf_r+0xb68>
 8011fca:	f109 0908 	add.w	r9, r9, #8
 8011fce:	9b03      	ldr	r3, [sp, #12]
 8011fd0:	05da      	lsls	r2, r3, #23
 8011fd2:	f100 8226 	bmi.w	8012422 <_svfprintf_r+0x952>
 8011fd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011fda:	f8c9 6000 	str.w	r6, [r9]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	440c      	add	r4, r1
 8011fe2:	2b07      	cmp	r3, #7
 8011fe4:	9421      	str	r4, [sp, #132]	; 0x84
 8011fe6:	f8c9 1004 	str.w	r1, [r9, #4]
 8011fea:	9320      	str	r3, [sp, #128]	; 0x80
 8011fec:	f300 830e 	bgt.w	801260c <_svfprintf_r+0xb3c>
 8011ff0:	f109 0908 	add.w	r9, r9, #8
 8011ff4:	9b03      	ldr	r3, [sp, #12]
 8011ff6:	0759      	lsls	r1, r3, #29
 8011ff8:	d53f      	bpl.n	801207a <_svfprintf_r+0x5aa>
 8011ffa:	9b08      	ldr	r3, [sp, #32]
 8011ffc:	9a05      	ldr	r2, [sp, #20]
 8011ffe:	1a9d      	subs	r5, r3, r2
 8012000:	2d00      	cmp	r5, #0
 8012002:	dd3a      	ble.n	801207a <_svfprintf_r+0x5aa>
 8012004:	2d10      	cmp	r5, #16
 8012006:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012008:	4f5a      	ldr	r7, [pc, #360]	; (8012174 <_svfprintf_r+0x6a4>)
 801200a:	dd23      	ble.n	8012054 <_svfprintf_r+0x584>
 801200c:	2610      	movs	r6, #16
 801200e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012012:	f8dd b010 	ldr.w	fp, [sp, #16]
 8012016:	e004      	b.n	8012022 <_svfprintf_r+0x552>
 8012018:	3d10      	subs	r5, #16
 801201a:	2d10      	cmp	r5, #16
 801201c:	f109 0908 	add.w	r9, r9, #8
 8012020:	dd18      	ble.n	8012054 <_svfprintf_r+0x584>
 8012022:	3301      	adds	r3, #1
 8012024:	3410      	adds	r4, #16
 8012026:	2b07      	cmp	r3, #7
 8012028:	9421      	str	r4, [sp, #132]	; 0x84
 801202a:	9320      	str	r3, [sp, #128]	; 0x80
 801202c:	f8c9 7000 	str.w	r7, [r9]
 8012030:	f8c9 6004 	str.w	r6, [r9, #4]
 8012034:	ddf0      	ble.n	8012018 <_svfprintf_r+0x548>
 8012036:	aa1f      	add	r2, sp, #124	; 0x7c
 8012038:	4659      	mov	r1, fp
 801203a:	4640      	mov	r0, r8
 801203c:	f002 fff8 	bl	8015030 <__ssprint_r>
 8012040:	2800      	cmp	r0, #0
 8012042:	f47f ae3c 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012046:	3d10      	subs	r5, #16
 8012048:	2d10      	cmp	r5, #16
 801204a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801204c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801204e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012052:	dce6      	bgt.n	8012022 <_svfprintf_r+0x552>
 8012054:	3301      	adds	r3, #1
 8012056:	442c      	add	r4, r5
 8012058:	2b07      	cmp	r3, #7
 801205a:	9421      	str	r4, [sp, #132]	; 0x84
 801205c:	9320      	str	r3, [sp, #128]	; 0x80
 801205e:	f8c9 7000 	str.w	r7, [r9]
 8012062:	f8c9 5004 	str.w	r5, [r9, #4]
 8012066:	dd08      	ble.n	801207a <_svfprintf_r+0x5aa>
 8012068:	aa1f      	add	r2, sp, #124	; 0x7c
 801206a:	9904      	ldr	r1, [sp, #16]
 801206c:	9806      	ldr	r0, [sp, #24]
 801206e:	f002 ffdf 	bl	8015030 <__ssprint_r>
 8012072:	2800      	cmp	r0, #0
 8012074:	f47f ae23 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012078:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801207a:	9b07      	ldr	r3, [sp, #28]
 801207c:	9a08      	ldr	r2, [sp, #32]
 801207e:	9905      	ldr	r1, [sp, #20]
 8012080:	428a      	cmp	r2, r1
 8012082:	bfac      	ite	ge
 8012084:	189b      	addge	r3, r3, r2
 8012086:	185b      	addlt	r3, r3, r1
 8012088:	9307      	str	r3, [sp, #28]
 801208a:	2c00      	cmp	r4, #0
 801208c:	f040 82ca 	bne.w	8012624 <_svfprintf_r+0xb54>
 8012090:	2300      	movs	r3, #0
 8012092:	9320      	str	r3, [sp, #128]	; 0x80
 8012094:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012098:	e53e      	b.n	8011b18 <_svfprintf_r+0x48>
 801209a:	930c      	str	r3, [sp, #48]	; 0x30
 801209c:	46ab      	mov	fp, r5
 801209e:	2a00      	cmp	r2, #0
 80120a0:	f041 804f 	bne.w	8013142 <_svfprintf_r+0x1672>
 80120a4:	9b03      	ldr	r3, [sp, #12]
 80120a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80120a8:	071a      	lsls	r2, r3, #28
 80120aa:	f107 0707 	add.w	r7, r7, #7
 80120ae:	f140 84c7 	bpl.w	8012a40 <_svfprintf_r+0xf70>
 80120b2:	f027 0307 	bic.w	r3, r7, #7
 80120b6:	ed93 7b00 	vldr	d7, [r3]
 80120ba:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80120be:	f103 0208 	add.w	r2, r3, #8
 80120c2:	920a      	str	r2, [sp, #40]	; 0x28
 80120c4:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80120c8:	ec45 4b10 	vmov	d0, r4, r5
 80120cc:	f002 ff30 	bl	8014f30 <__fpclassifyd>
 80120d0:	2801      	cmp	r0, #1
 80120d2:	f040 849b 	bne.w	8012a0c <_svfprintf_r+0xf3c>
 80120d6:	2200      	movs	r2, #0
 80120d8:	2300      	movs	r3, #0
 80120da:	4620      	mov	r0, r4
 80120dc:	4629      	mov	r1, r5
 80120de:	f7f6 fea7 	bl	8008e30 <__aeabi_dcmplt>
 80120e2:	2800      	cmp	r0, #0
 80120e4:	f040 86d9 	bne.w	8012e9a <_svfprintf_r+0x13ca>
 80120e8:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 80120ec:	9903      	ldr	r1, [sp, #12]
 80120ee:	4e22      	ldr	r6, [pc, #136]	; (8012178 <_svfprintf_r+0x6a8>)
 80120f0:	4b22      	ldr	r3, [pc, #136]	; (801217c <_svfprintf_r+0x6ac>)
 80120f2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80120f6:	9103      	str	r1, [sp, #12]
 80120f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80120fa:	2203      	movs	r2, #3
 80120fc:	f04f 0b00 	mov.w	fp, #0
 8012100:	9205      	str	r2, [sp, #20]
 8012102:	2947      	cmp	r1, #71	; 0x47
 8012104:	bfd8      	it	le
 8012106:	461e      	movle	r6, r3
 8012108:	9209      	str	r2, [sp, #36]	; 0x24
 801210a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801210e:	e6ab      	b.n	8011e68 <_svfprintf_r+0x398>
 8012110:	9b03      	ldr	r3, [sp, #12]
 8012112:	f043 0308 	orr.w	r3, r3, #8
 8012116:	9303      	str	r3, [sp, #12]
 8012118:	f89a 3000 	ldrb.w	r3, [sl]
 801211c:	e52f      	b.n	8011b7e <_svfprintf_r+0xae>
 801211e:	930c      	str	r3, [sp, #48]	; 0x30
 8012120:	46ab      	mov	fp, r5
 8012122:	2a00      	cmp	r2, #0
 8012124:	f041 8003 	bne.w	801312e <_svfprintf_r+0x165e>
 8012128:	9b03      	ldr	r3, [sp, #12]
 801212a:	f043 0310 	orr.w	r3, r3, #16
 801212e:	9303      	str	r3, [sp, #12]
 8012130:	9a03      	ldr	r2, [sp, #12]
 8012132:	f012 0320 	ands.w	r3, r2, #32
 8012136:	f47f add8 	bne.w	8011cea <_svfprintf_r+0x21a>
 801213a:	9903      	ldr	r1, [sp, #12]
 801213c:	f011 0210 	ands.w	r2, r1, #16
 8012140:	f000 84a5 	beq.w	8012a8e <_svfprintf_r+0xfbe>
 8012144:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012146:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801214a:	f1bb 0f00 	cmp.w	fp, #0
 801214e:	6804      	ldr	r4, [r0, #0]
 8012150:	f100 0704 	add.w	r7, r0, #4
 8012154:	f04f 0500 	mov.w	r5, #0
 8012158:	f2c0 84aa 	blt.w	8012ab0 <_svfprintf_r+0xfe0>
 801215c:	460a      	mov	r2, r1
 801215e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012162:	9203      	str	r2, [sp, #12]
 8012164:	ea54 0205 	orrs.w	r2, r4, r5
 8012168:	970a      	str	r7, [sp, #40]	; 0x28
 801216a:	f000 8143 	beq.w	80123f4 <_svfprintf_r+0x924>
 801216e:	461f      	mov	r7, r3
 8012170:	e5d1      	b.n	8011d16 <_svfprintf_r+0x246>
 8012172:	bf00      	nop
 8012174:	08016a10 	.word	0x08016a10
 8012178:	08016a24 	.word	0x08016a24
 801217c:	08016a20 	.word	0x08016a20
 8012180:	08016a60 	.word	0x08016a60
 8012184:	930c      	str	r3, [sp, #48]	; 0x30
 8012186:	46ab      	mov	fp, r5
 8012188:	2a00      	cmp	r2, #0
 801218a:	f040 87cc 	bne.w	8013126 <_svfprintf_r+0x1656>
 801218e:	9b03      	ldr	r3, [sp, #12]
 8012190:	f043 0310 	orr.w	r3, r3, #16
 8012194:	9303      	str	r3, [sp, #12]
 8012196:	9a03      	ldr	r2, [sp, #12]
 8012198:	f012 0320 	ands.w	r3, r2, #32
 801219c:	f000 8328 	beq.w	80127f0 <_svfprintf_r+0xd20>
 80121a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80121a2:	3707      	adds	r7, #7
 80121a4:	f027 0307 	bic.w	r3, r7, #7
 80121a8:	2700      	movs	r7, #0
 80121aa:	f103 0108 	add.w	r1, r3, #8
 80121ae:	45bb      	cmp	fp, r7
 80121b0:	910a      	str	r1, [sp, #40]	; 0x28
 80121b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80121b6:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 80121ba:	f2c0 8352 	blt.w	8012862 <_svfprintf_r+0xd92>
 80121be:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80121c2:	9303      	str	r3, [sp, #12]
 80121c4:	ea54 0305 	orrs.w	r3, r4, r5
 80121c8:	f47f ae2a 	bne.w	8011e20 <_svfprintf_r+0x350>
 80121cc:	f1bb 0f00 	cmp.w	fp, #0
 80121d0:	f000 80f5 	beq.w	80123be <_svfprintf_r+0x8ee>
 80121d4:	2400      	movs	r4, #0
 80121d6:	ae3c      	add	r6, sp, #240	; 0xf0
 80121d8:	3430      	adds	r4, #48	; 0x30
 80121da:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80121de:	e639      	b.n	8011e54 <_svfprintf_r+0x384>
 80121e0:	930c      	str	r3, [sp, #48]	; 0x30
 80121e2:	46ab      	mov	fp, r5
 80121e4:	2a00      	cmp	r2, #0
 80121e6:	f040 879a 	bne.w	801311e <_svfprintf_r+0x164e>
 80121ea:	9b03      	ldr	r3, [sp, #12]
 80121ec:	48af      	ldr	r0, [pc, #700]	; (80124ac <_svfprintf_r+0x9dc>)
 80121ee:	069d      	lsls	r5, r3, #26
 80121f0:	f140 80b5 	bpl.w	801235e <_svfprintf_r+0x88e>
 80121f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80121f6:	3707      	adds	r7, #7
 80121f8:	f027 0307 	bic.w	r3, r7, #7
 80121fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012200:	f103 0208 	add.w	r2, r3, #8
 8012204:	920a      	str	r2, [sp, #40]	; 0x28
 8012206:	9a03      	ldr	r2, [sp, #12]
 8012208:	f012 0701 	ands.w	r7, r2, #1
 801220c:	f000 8238 	beq.w	8012680 <_svfprintf_r+0xbb0>
 8012210:	ea54 0305 	orrs.w	r3, r4, r5
 8012214:	f000 8487 	beq.w	8012b26 <_svfprintf_r+0x1056>
 8012218:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801221c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8012220:	2700      	movs	r7, #0
 8012222:	9a03      	ldr	r2, [sp, #12]
 8012224:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8012228:	2330      	movs	r3, #48	; 0x30
 801222a:	45bb      	cmp	fp, r7
 801222c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8012230:	f042 0302 	orr.w	r3, r2, #2
 8012234:	f2c0 862e 	blt.w	8012e94 <_svfprintf_r+0x13c4>
 8012238:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 801223c:	f043 0302 	orr.w	r3, r3, #2
 8012240:	9303      	str	r3, [sp, #12]
 8012242:	ae2c      	add	r6, sp, #176	; 0xb0
 8012244:	0923      	lsrs	r3, r4, #4
 8012246:	f004 010f 	and.w	r1, r4, #15
 801224a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 801224e:	092a      	lsrs	r2, r5, #4
 8012250:	461c      	mov	r4, r3
 8012252:	4615      	mov	r5, r2
 8012254:	5c43      	ldrb	r3, [r0, r1]
 8012256:	f806 3d01 	strb.w	r3, [r6, #-1]!
 801225a:	ea54 0305 	orrs.w	r3, r4, r5
 801225e:	d1f1      	bne.n	8012244 <_svfprintf_r+0x774>
 8012260:	e5f8      	b.n	8011e54 <_svfprintf_r+0x384>
 8012262:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012264:	930c      	str	r3, [sp, #48]	; 0x30
 8012266:	680a      	ldr	r2, [r1, #0]
 8012268:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801226c:	2300      	movs	r3, #0
 801226e:	460a      	mov	r2, r1
 8012270:	461f      	mov	r7, r3
 8012272:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012276:	3204      	adds	r2, #4
 8012278:	2301      	movs	r3, #1
 801227a:	9305      	str	r3, [sp, #20]
 801227c:	46bb      	mov	fp, r7
 801227e:	970d      	str	r7, [sp, #52]	; 0x34
 8012280:	920a      	str	r2, [sp, #40]	; 0x28
 8012282:	9309      	str	r3, [sp, #36]	; 0x24
 8012284:	ae22      	add	r6, sp, #136	; 0x88
 8012286:	e5f3      	b.n	8011e70 <_svfprintf_r+0x3a0>
 8012288:	930c      	str	r3, [sp, #48]	; 0x30
 801228a:	46ab      	mov	fp, r5
 801228c:	2a00      	cmp	r2, #0
 801228e:	f43f ada5 	beq.w	8011ddc <_svfprintf_r+0x30c>
 8012292:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8012296:	e5a1      	b.n	8011ddc <_svfprintf_r+0x30c>
 8012298:	9b03      	ldr	r3, [sp, #12]
 801229a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801229e:	9303      	str	r3, [sp, #12]
 80122a0:	f89a 3000 	ldrb.w	r3, [sl]
 80122a4:	e46b      	b.n	8011b7e <_svfprintf_r+0xae>
 80122a6:	f89a 3000 	ldrb.w	r3, [sl]
 80122aa:	2900      	cmp	r1, #0
 80122ac:	f47f ac67 	bne.w	8011b7e <_svfprintf_r+0xae>
 80122b0:	2201      	movs	r2, #1
 80122b2:	2120      	movs	r1, #32
 80122b4:	e463      	b.n	8011b7e <_svfprintf_r+0xae>
 80122b6:	9b03      	ldr	r3, [sp, #12]
 80122b8:	f043 0301 	orr.w	r3, r3, #1
 80122bc:	9303      	str	r3, [sp, #12]
 80122be:	f89a 3000 	ldrb.w	r3, [sl]
 80122c2:	e45c      	b.n	8011b7e <_svfprintf_r+0xae>
 80122c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	9308      	str	r3, [sp, #32]
 80122ca:	4618      	mov	r0, r3
 80122cc:	2800      	cmp	r0, #0
 80122ce:	4623      	mov	r3, r4
 80122d0:	f103 0304 	add.w	r3, r3, #4
 80122d4:	f6ff acb5 	blt.w	8011c42 <_svfprintf_r+0x172>
 80122d8:	930a      	str	r3, [sp, #40]	; 0x28
 80122da:	f89a 3000 	ldrb.w	r3, [sl]
 80122de:	e44e      	b.n	8011b7e <_svfprintf_r+0xae>
 80122e0:	f89a 3000 	ldrb.w	r3, [sl]
 80122e4:	2201      	movs	r2, #1
 80122e6:	212b      	movs	r1, #43	; 0x2b
 80122e8:	e449      	b.n	8011b7e <_svfprintf_r+0xae>
 80122ea:	9b03      	ldr	r3, [sp, #12]
 80122ec:	f043 0320 	orr.w	r3, r3, #32
 80122f0:	9303      	str	r3, [sp, #12]
 80122f2:	f89a 3000 	ldrb.w	r3, [sl]
 80122f6:	e442      	b.n	8011b7e <_svfprintf_r+0xae>
 80122f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122fa:	930c      	str	r3, [sp, #48]	; 0x30
 80122fc:	6816      	ldr	r6, [r2, #0]
 80122fe:	2400      	movs	r4, #0
 8012300:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
 8012304:	1d17      	adds	r7, r2, #4
 8012306:	2e00      	cmp	r6, #0
 8012308:	f000 85ab 	beq.w	8012e62 <_svfprintf_r+0x1392>
 801230c:	2d00      	cmp	r5, #0
 801230e:	f2c0 8567 	blt.w	8012de0 <_svfprintf_r+0x1310>
 8012312:	462a      	mov	r2, r5
 8012314:	4621      	mov	r1, r4
 8012316:	4630      	mov	r0, r6
 8012318:	f7f7 fda2 	bl	8009e60 <memchr>
 801231c:	2800      	cmp	r0, #0
 801231e:	f000 85db 	beq.w	8012ed8 <_svfprintf_r+0x1408>
 8012322:	1b83      	subs	r3, r0, r6
 8012324:	9309      	str	r3, [sp, #36]	; 0x24
 8012326:	46a3      	mov	fp, r4
 8012328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801232c:	970a      	str	r7, [sp, #40]	; 0x28
 801232e:	9305      	str	r3, [sp, #20]
 8012330:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8012334:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8012338:	e596      	b.n	8011e68 <_svfprintf_r+0x398>
 801233a:	930c      	str	r3, [sp, #48]	; 0x30
 801233c:	46ab      	mov	fp, r5
 801233e:	2a00      	cmp	r2, #0
 8012340:	f43f af29 	beq.w	8012196 <_svfprintf_r+0x6c6>
 8012344:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8012348:	e725      	b.n	8012196 <_svfprintf_r+0x6c6>
 801234a:	930c      	str	r3, [sp, #48]	; 0x30
 801234c:	46ab      	mov	fp, r5
 801234e:	2a00      	cmp	r2, #0
 8012350:	f040 8703 	bne.w	801315a <_svfprintf_r+0x168a>
 8012354:	9b03      	ldr	r3, [sp, #12]
 8012356:	4856      	ldr	r0, [pc, #344]	; (80124b0 <_svfprintf_r+0x9e0>)
 8012358:	069d      	lsls	r5, r3, #26
 801235a:	f53f af4b 	bmi.w	80121f4 <_svfprintf_r+0x724>
 801235e:	9b03      	ldr	r3, [sp, #12]
 8012360:	06dc      	lsls	r4, r3, #27
 8012362:	f140 83c0 	bpl.w	8012ae6 <_svfprintf_r+0x1016>
 8012366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012368:	4613      	mov	r3, r2
 801236a:	3304      	adds	r3, #4
 801236c:	6814      	ldr	r4, [r2, #0]
 801236e:	930a      	str	r3, [sp, #40]	; 0x28
 8012370:	2500      	movs	r5, #0
 8012372:	e748      	b.n	8012206 <_svfprintf_r+0x736>
 8012374:	f89a 3000 	ldrb.w	r3, [sl]
 8012378:	2b6c      	cmp	r3, #108	; 0x6c
 801237a:	f000 8452 	beq.w	8012c22 <_svfprintf_r+0x1152>
 801237e:	9803      	ldr	r0, [sp, #12]
 8012380:	f040 0010 	orr.w	r0, r0, #16
 8012384:	9003      	str	r0, [sp, #12]
 8012386:	f7ff bbfa 	b.w	8011b7e <_svfprintf_r+0xae>
 801238a:	2a00      	cmp	r2, #0
 801238c:	f040 86e1 	bne.w	8013152 <_svfprintf_r+0x1682>
 8012390:	9b03      	ldr	r3, [sp, #12]
 8012392:	069b      	lsls	r3, r3, #26
 8012394:	f140 8390 	bpl.w	8012ab8 <_svfprintf_r+0xfe8>
 8012398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801239a:	9907      	ldr	r1, [sp, #28]
 801239c:	6813      	ldr	r3, [r2, #0]
 801239e:	17cd      	asrs	r5, r1, #31
 80123a0:	4608      	mov	r0, r1
 80123a2:	3204      	adds	r2, #4
 80123a4:	4629      	mov	r1, r5
 80123a6:	920a      	str	r2, [sp, #40]	; 0x28
 80123a8:	e9c3 0100 	strd	r0, r1, [r3]
 80123ac:	f7ff bbb4 	b.w	8011b18 <_svfprintf_r+0x48>
 80123b0:	483f      	ldr	r0, [pc, #252]	; (80124b0 <_svfprintf_r+0x9e0>)
 80123b2:	920c      	str	r2, [sp, #48]	; 0x30
 80123b4:	f1bb 0f00 	cmp.w	fp, #0
 80123b8:	f040 8173 	bne.w	80126a2 <_svfprintf_r+0xbd2>
 80123bc:	465f      	mov	r7, fp
 80123be:	f04f 0b00 	mov.w	fp, #0
 80123c2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80123c6:	ae2c      	add	r6, sp, #176	; 0xb0
 80123c8:	e547      	b.n	8011e5a <_svfprintf_r+0x38a>
 80123ca:	930c      	str	r3, [sp, #48]	; 0x30
 80123cc:	2a00      	cmp	r2, #0
 80123ce:	f040 86a2 	bne.w	8013116 <_svfprintf_r+0x1646>
 80123d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123d4:	2a00      	cmp	r2, #0
 80123d6:	f43f ac6b 	beq.w	8011cb0 <_svfprintf_r+0x1e0>
 80123da:	2300      	movs	r3, #0
 80123dc:	2101      	movs	r1, #1
 80123de:	461f      	mov	r7, r3
 80123e0:	9105      	str	r1, [sp, #20]
 80123e2:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80123e6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80123ea:	469b      	mov	fp, r3
 80123ec:	930d      	str	r3, [sp, #52]	; 0x34
 80123ee:	9109      	str	r1, [sp, #36]	; 0x24
 80123f0:	ae22      	add	r6, sp, #136	; 0x88
 80123f2:	e53d      	b.n	8011e70 <_svfprintf_r+0x3a0>
 80123f4:	f1bb 0f00 	cmp.w	fp, #0
 80123f8:	f000 866e 	beq.w	80130d8 <_svfprintf_r+0x1608>
 80123fc:	2700      	movs	r7, #0
 80123fe:	2400      	movs	r4, #0
 8012400:	2500      	movs	r5, #0
 8012402:	e488      	b.n	8011d16 <_svfprintf_r+0x246>
 8012404:	482a      	ldr	r0, [pc, #168]	; (80124b0 <_svfprintf_r+0x9e0>)
 8012406:	9303      	str	r3, [sp, #12]
 8012408:	920c      	str	r2, [sp, #48]	; 0x30
 801240a:	ea54 0305 	orrs.w	r3, r4, r5
 801240e:	970a      	str	r7, [sp, #40]	; 0x28
 8012410:	f04f 0700 	mov.w	r7, #0
 8012414:	f47f af15 	bne.w	8012242 <_svfprintf_r+0x772>
 8012418:	2400      	movs	r4, #0
 801241a:	2500      	movs	r5, #0
 801241c:	e711      	b.n	8012242 <_svfprintf_r+0x772>
 801241e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012420:	e571      	b.n	8011f06 <_svfprintf_r+0x436>
 8012422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012424:	2b65      	cmp	r3, #101	; 0x65
 8012426:	f340 80a9 	ble.w	801257c <_svfprintf_r+0xaac>
 801242a:	2200      	movs	r2, #0
 801242c:	2300      	movs	r3, #0
 801242e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012432:	f7f6 fcf3 	bl	8008e1c <__aeabi_dcmpeq>
 8012436:	2800      	cmp	r0, #0
 8012438:	f000 8135 	beq.w	80126a6 <_svfprintf_r+0xbd6>
 801243c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801243e:	4a1d      	ldr	r2, [pc, #116]	; (80124b4 <_svfprintf_r+0x9e4>)
 8012440:	f8c9 2000 	str.w	r2, [r9]
 8012444:	3301      	adds	r3, #1
 8012446:	3401      	adds	r4, #1
 8012448:	2201      	movs	r2, #1
 801244a:	2b07      	cmp	r3, #7
 801244c:	9421      	str	r4, [sp, #132]	; 0x84
 801244e:	9320      	str	r3, [sp, #128]	; 0x80
 8012450:	f8c9 2004 	str.w	r2, [r9, #4]
 8012454:	f300 8372 	bgt.w	8012b3c <_svfprintf_r+0x106c>
 8012458:	f109 0908 	add.w	r9, r9, #8
 801245c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801245e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012460:	4293      	cmp	r3, r2
 8012462:	db03      	blt.n	801246c <_svfprintf_r+0x99c>
 8012464:	9b03      	ldr	r3, [sp, #12]
 8012466:	07db      	lsls	r3, r3, #31
 8012468:	f57f adc4 	bpl.w	8011ff4 <_svfprintf_r+0x524>
 801246c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801246e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012472:	f8c9 2000 	str.w	r2, [r9]
 8012476:	3301      	adds	r3, #1
 8012478:	440c      	add	r4, r1
 801247a:	2b07      	cmp	r3, #7
 801247c:	9421      	str	r4, [sp, #132]	; 0x84
 801247e:	f8c9 1004 	str.w	r1, [r9, #4]
 8012482:	9320      	str	r3, [sp, #128]	; 0x80
 8012484:	f300 83d7 	bgt.w	8012c36 <_svfprintf_r+0x1166>
 8012488:	f109 0908 	add.w	r9, r9, #8
 801248c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801248e:	1e5d      	subs	r5, r3, #1
 8012490:	2d00      	cmp	r5, #0
 8012492:	f77f adaf 	ble.w	8011ff4 <_svfprintf_r+0x524>
 8012496:	2d10      	cmp	r5, #16
 8012498:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801249a:	f8df 801c 	ldr.w	r8, [pc, #28]	; 80124b8 <_svfprintf_r+0x9e8>
 801249e:	f340 81e6 	ble.w	801286e <_svfprintf_r+0xd9e>
 80124a2:	2610      	movs	r6, #16
 80124a4:	9f06      	ldr	r7, [sp, #24]
 80124a6:	f8dd b010 	ldr.w	fp, [sp, #16]
 80124aa:	e00d      	b.n	80124c8 <_svfprintf_r+0x9f8>
 80124ac:	08016a30 	.word	0x08016a30
 80124b0:	08016a44 	.word	0x08016a44
 80124b4:	08016a58 	.word	0x08016a58
 80124b8:	08016a60 	.word	0x08016a60
 80124bc:	f109 0908 	add.w	r9, r9, #8
 80124c0:	3d10      	subs	r5, #16
 80124c2:	2d10      	cmp	r5, #16
 80124c4:	f340 81d3 	ble.w	801286e <_svfprintf_r+0xd9e>
 80124c8:	3301      	adds	r3, #1
 80124ca:	3410      	adds	r4, #16
 80124cc:	2b07      	cmp	r3, #7
 80124ce:	9421      	str	r4, [sp, #132]	; 0x84
 80124d0:	9320      	str	r3, [sp, #128]	; 0x80
 80124d2:	f8c9 8000 	str.w	r8, [r9]
 80124d6:	f8c9 6004 	str.w	r6, [r9, #4]
 80124da:	ddef      	ble.n	80124bc <_svfprintf_r+0x9ec>
 80124dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80124de:	4659      	mov	r1, fp
 80124e0:	4638      	mov	r0, r7
 80124e2:	f002 fda5 	bl	8015030 <__ssprint_r>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	f47f abe9 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 80124ec:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80124ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80124f0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80124f4:	e7e4      	b.n	80124c0 <_svfprintf_r+0x9f0>
 80124f6:	9b08      	ldr	r3, [sp, #32]
 80124f8:	9a05      	ldr	r2, [sp, #20]
 80124fa:	1a9f      	subs	r7, r3, r2
 80124fc:	2f00      	cmp	r7, #0
 80124fe:	f77f ad26 	ble.w	8011f4e <_svfprintf_r+0x47e>
 8012502:	2f10      	cmp	r7, #16
 8012504:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012506:	f8df 8754 	ldr.w	r8, [pc, #1876]	; 8012c5c <_svfprintf_r+0x118c>
 801250a:	dd29      	ble.n	8012560 <_svfprintf_r+0xa90>
 801250c:	4640      	mov	r0, r8
 801250e:	464a      	mov	r2, r9
 8012510:	4621      	mov	r1, r4
 8012512:	46b0      	mov	r8, r6
 8012514:	2510      	movs	r5, #16
 8012516:	9c06      	ldr	r4, [sp, #24]
 8012518:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801251c:	4606      	mov	r6, r0
 801251e:	e004      	b.n	801252a <_svfprintf_r+0xa5a>
 8012520:	3f10      	subs	r7, #16
 8012522:	2f10      	cmp	r7, #16
 8012524:	f102 0208 	add.w	r2, r2, #8
 8012528:	dd15      	ble.n	8012556 <_svfprintf_r+0xa86>
 801252a:	3301      	adds	r3, #1
 801252c:	3110      	adds	r1, #16
 801252e:	2b07      	cmp	r3, #7
 8012530:	9121      	str	r1, [sp, #132]	; 0x84
 8012532:	9320      	str	r3, [sp, #128]	; 0x80
 8012534:	6016      	str	r6, [r2, #0]
 8012536:	6055      	str	r5, [r2, #4]
 8012538:	ddf2      	ble.n	8012520 <_svfprintf_r+0xa50>
 801253a:	aa1f      	add	r2, sp, #124	; 0x7c
 801253c:	4649      	mov	r1, r9
 801253e:	4620      	mov	r0, r4
 8012540:	f002 fd76 	bl	8015030 <__ssprint_r>
 8012544:	2800      	cmp	r0, #0
 8012546:	f47f abba 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 801254a:	3f10      	subs	r7, #16
 801254c:	2f10      	cmp	r7, #16
 801254e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8012550:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012552:	aa2c      	add	r2, sp, #176	; 0xb0
 8012554:	dce9      	bgt.n	801252a <_svfprintf_r+0xa5a>
 8012556:	4691      	mov	r9, r2
 8012558:	4632      	mov	r2, r6
 801255a:	460c      	mov	r4, r1
 801255c:	4646      	mov	r6, r8
 801255e:	4690      	mov	r8, r2
 8012560:	3301      	adds	r3, #1
 8012562:	443c      	add	r4, r7
 8012564:	2b07      	cmp	r3, #7
 8012566:	9421      	str	r4, [sp, #132]	; 0x84
 8012568:	9320      	str	r3, [sp, #128]	; 0x80
 801256a:	f8c9 8000 	str.w	r8, [r9]
 801256e:	f8c9 7004 	str.w	r7, [r9, #4]
 8012572:	f300 823e 	bgt.w	80129f2 <_svfprintf_r+0xf22>
 8012576:	f109 0908 	add.w	r9, r9, #8
 801257a:	e4e8      	b.n	8011f4e <_svfprintf_r+0x47e>
 801257c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801257e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012580:	2b01      	cmp	r3, #1
 8012582:	f340 820b 	ble.w	801299c <_svfprintf_r+0xecc>
 8012586:	3501      	adds	r5, #1
 8012588:	3401      	adds	r4, #1
 801258a:	2301      	movs	r3, #1
 801258c:	2d07      	cmp	r5, #7
 801258e:	9421      	str	r4, [sp, #132]	; 0x84
 8012590:	9520      	str	r5, [sp, #128]	; 0x80
 8012592:	f8c9 6000 	str.w	r6, [r9]
 8012596:	f8c9 3004 	str.w	r3, [r9, #4]
 801259a:	f300 8210 	bgt.w	80129be <_svfprintf_r+0xeee>
 801259e:	f109 0908 	add.w	r9, r9, #8
 80125a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80125a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125a6:	f8c9 3000 	str.w	r3, [r9]
 80125aa:	3501      	adds	r5, #1
 80125ac:	4414      	add	r4, r2
 80125ae:	2d07      	cmp	r5, #7
 80125b0:	9421      	str	r4, [sp, #132]	; 0x84
 80125b2:	9520      	str	r5, [sp, #128]	; 0x80
 80125b4:	f8c9 2004 	str.w	r2, [r9, #4]
 80125b8:	f300 820e 	bgt.w	80129d8 <_svfprintf_r+0xf08>
 80125bc:	f109 0908 	add.w	r9, r9, #8
 80125c0:	2300      	movs	r3, #0
 80125c2:	2200      	movs	r2, #0
 80125c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80125c8:	f7f6 fc28 	bl	8008e1c <__aeabi_dcmpeq>
 80125cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125ce:	2800      	cmp	r0, #0
 80125d0:	f040 80c4 	bne.w	801275c <_svfprintf_r+0xc8c>
 80125d4:	3b01      	subs	r3, #1
 80125d6:	3501      	adds	r5, #1
 80125d8:	3601      	adds	r6, #1
 80125da:	441c      	add	r4, r3
 80125dc:	2d07      	cmp	r5, #7
 80125de:	9520      	str	r5, [sp, #128]	; 0x80
 80125e0:	9421      	str	r4, [sp, #132]	; 0x84
 80125e2:	f8c9 6000 	str.w	r6, [r9]
 80125e6:	f8c9 3004 	str.w	r3, [r9, #4]
 80125ea:	f300 80f4 	bgt.w	80127d6 <_svfprintf_r+0xd06>
 80125ee:	f109 0908 	add.w	r9, r9, #8
 80125f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80125f4:	f8c9 2004 	str.w	r2, [r9, #4]
 80125f8:	3501      	adds	r5, #1
 80125fa:	4414      	add	r4, r2
 80125fc:	ab1b      	add	r3, sp, #108	; 0x6c
 80125fe:	2d07      	cmp	r5, #7
 8012600:	9421      	str	r4, [sp, #132]	; 0x84
 8012602:	9520      	str	r5, [sp, #128]	; 0x80
 8012604:	f8c9 3000 	str.w	r3, [r9]
 8012608:	f77f acf2 	ble.w	8011ff0 <_svfprintf_r+0x520>
 801260c:	aa1f      	add	r2, sp, #124	; 0x7c
 801260e:	9904      	ldr	r1, [sp, #16]
 8012610:	9806      	ldr	r0, [sp, #24]
 8012612:	f002 fd0d 	bl	8015030 <__ssprint_r>
 8012616:	2800      	cmp	r0, #0
 8012618:	f47f ab51 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 801261c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801261e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012622:	e4e7      	b.n	8011ff4 <_svfprintf_r+0x524>
 8012624:	aa1f      	add	r2, sp, #124	; 0x7c
 8012626:	9904      	ldr	r1, [sp, #16]
 8012628:	9806      	ldr	r0, [sp, #24]
 801262a:	f002 fd01 	bl	8015030 <__ssprint_r>
 801262e:	2800      	cmp	r0, #0
 8012630:	f43f ad2e 	beq.w	8012090 <_svfprintf_r+0x5c0>
 8012634:	f7ff bb43 	b.w	8011cbe <_svfprintf_r+0x1ee>
 8012638:	aa1f      	add	r2, sp, #124	; 0x7c
 801263a:	9904      	ldr	r1, [sp, #16]
 801263c:	9806      	ldr	r0, [sp, #24]
 801263e:	f002 fcf7 	bl	8015030 <__ssprint_r>
 8012642:	2800      	cmp	r0, #0
 8012644:	f47f ab3b 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012648:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801264a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801264e:	e4be      	b.n	8011fce <_svfprintf_r+0x4fe>
 8012650:	aa1f      	add	r2, sp, #124	; 0x7c
 8012652:	9904      	ldr	r1, [sp, #16]
 8012654:	9806      	ldr	r0, [sp, #24]
 8012656:	f002 fceb 	bl	8015030 <__ssprint_r>
 801265a:	2800      	cmp	r0, #0
 801265c:	f47f ab2f 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012660:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012662:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012666:	e45e      	b.n	8011f26 <_svfprintf_r+0x456>
 8012668:	aa1f      	add	r2, sp, #124	; 0x7c
 801266a:	9904      	ldr	r1, [sp, #16]
 801266c:	9806      	ldr	r0, [sp, #24]
 801266e:	f002 fcdf 	bl	8015030 <__ssprint_r>
 8012672:	2800      	cmp	r0, #0
 8012674:	f47f ab23 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012678:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801267a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801267e:	e462      	b.n	8011f46 <_svfprintf_r+0x476>
 8012680:	f1bb 0f00 	cmp.w	fp, #0
 8012684:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8012688:	f2c0 8264 	blt.w	8012b54 <_svfprintf_r+0x1084>
 801268c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8012690:	9303      	str	r3, [sp, #12]
 8012692:	ea54 0305 	orrs.w	r3, r4, r5
 8012696:	f47f add4 	bne.w	8012242 <_svfprintf_r+0x772>
 801269a:	f1bb 0f00 	cmp.w	fp, #0
 801269e:	f43f ae8d 	beq.w	80123bc <_svfprintf_r+0x8ec>
 80126a2:	2700      	movs	r7, #0
 80126a4:	e6b8      	b.n	8012418 <_svfprintf_r+0x948>
 80126a6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80126a8:	2d00      	cmp	r5, #0
 80126aa:	f340 8255 	ble.w	8012b58 <_svfprintf_r+0x1088>
 80126ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126b2:	4293      	cmp	r3, r2
 80126b4:	bfa8      	it	ge
 80126b6:	4613      	movge	r3, r2
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	461d      	mov	r5, r3
 80126bc:	dd0d      	ble.n	80126da <_svfprintf_r+0xc0a>
 80126be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126c0:	f8c9 6000 	str.w	r6, [r9]
 80126c4:	3301      	adds	r3, #1
 80126c6:	442c      	add	r4, r5
 80126c8:	2b07      	cmp	r3, #7
 80126ca:	9421      	str	r4, [sp, #132]	; 0x84
 80126cc:	f8c9 5004 	str.w	r5, [r9, #4]
 80126d0:	9320      	str	r3, [sp, #128]	; 0x80
 80126d2:	f300 838d 	bgt.w	8012df0 <_svfprintf_r+0x1320>
 80126d6:	f109 0908 	add.w	r9, r9, #8
 80126da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126dc:	2d00      	cmp	r5, #0
 80126de:	bfa8      	it	ge
 80126e0:	1b5b      	subge	r3, r3, r5
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	461d      	mov	r5, r3
 80126e6:	f340 80f7 	ble.w	80128d8 <_svfprintf_r+0xe08>
 80126ea:	2d10      	cmp	r5, #16
 80126ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126ee:	f8df 856c 	ldr.w	r8, [pc, #1388]	; 8012c5c <_svfprintf_r+0x118c>
 80126f2:	f340 820a 	ble.w	8012b0a <_svfprintf_r+0x103a>
 80126f6:	4641      	mov	r1, r8
 80126f8:	4622      	mov	r2, r4
 80126fa:	46b0      	mov	r8, r6
 80126fc:	2710      	movs	r7, #16
 80126fe:	f8dd b018 	ldr.w	fp, [sp, #24]
 8012702:	9c04      	ldr	r4, [sp, #16]
 8012704:	460e      	mov	r6, r1
 8012706:	e005      	b.n	8012714 <_svfprintf_r+0xc44>
 8012708:	f109 0908 	add.w	r9, r9, #8
 801270c:	3d10      	subs	r5, #16
 801270e:	2d10      	cmp	r5, #16
 8012710:	f340 81f7 	ble.w	8012b02 <_svfprintf_r+0x1032>
 8012714:	3301      	adds	r3, #1
 8012716:	3210      	adds	r2, #16
 8012718:	2b07      	cmp	r3, #7
 801271a:	9221      	str	r2, [sp, #132]	; 0x84
 801271c:	9320      	str	r3, [sp, #128]	; 0x80
 801271e:	e889 00c0 	stmia.w	r9, {r6, r7}
 8012722:	ddf1      	ble.n	8012708 <_svfprintf_r+0xc38>
 8012724:	aa1f      	add	r2, sp, #124	; 0x7c
 8012726:	4621      	mov	r1, r4
 8012728:	4658      	mov	r0, fp
 801272a:	f002 fc81 	bl	8015030 <__ssprint_r>
 801272e:	2800      	cmp	r0, #0
 8012730:	f47f aac5 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012736:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012738:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801273c:	e7e6      	b.n	801270c <_svfprintf_r+0xc3c>
 801273e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012740:	9904      	ldr	r1, [sp, #16]
 8012742:	9806      	ldr	r0, [sp, #24]
 8012744:	f002 fc74 	bl	8015030 <__ssprint_r>
 8012748:	2800      	cmp	r0, #0
 801274a:	f47f aab8 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 801274e:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8012752:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012754:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012758:	f7ff bbd5 	b.w	8011f06 <_svfprintf_r+0x436>
 801275c:	1e5e      	subs	r6, r3, #1
 801275e:	2e00      	cmp	r6, #0
 8012760:	f77f af47 	ble.w	80125f2 <_svfprintf_r+0xb22>
 8012764:	2e10      	cmp	r6, #16
 8012766:	f8df 84f4 	ldr.w	r8, [pc, #1268]	; 8012c5c <_svfprintf_r+0x118c>
 801276a:	dd29      	ble.n	80127c0 <_svfprintf_r+0xcf0>
 801276c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012770:	2710      	movs	r7, #16
 8012772:	46c2      	mov	sl, r8
 8012774:	f8dd b018 	ldr.w	fp, [sp, #24]
 8012778:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801277c:	e004      	b.n	8012788 <_svfprintf_r+0xcb8>
 801277e:	3e10      	subs	r6, #16
 8012780:	2e10      	cmp	r6, #16
 8012782:	f109 0908 	add.w	r9, r9, #8
 8012786:	dd18      	ble.n	80127ba <_svfprintf_r+0xcea>
 8012788:	3501      	adds	r5, #1
 801278a:	3410      	adds	r4, #16
 801278c:	2d07      	cmp	r5, #7
 801278e:	9421      	str	r4, [sp, #132]	; 0x84
 8012790:	9520      	str	r5, [sp, #128]	; 0x80
 8012792:	f8c9 a000 	str.w	sl, [r9]
 8012796:	f8c9 7004 	str.w	r7, [r9, #4]
 801279a:	ddf0      	ble.n	801277e <_svfprintf_r+0xcae>
 801279c:	aa1f      	add	r2, sp, #124	; 0x7c
 801279e:	4641      	mov	r1, r8
 80127a0:	4658      	mov	r0, fp
 80127a2:	f002 fc45 	bl	8015030 <__ssprint_r>
 80127a6:	2800      	cmp	r0, #0
 80127a8:	f47f aa89 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 80127ac:	3e10      	subs	r6, #16
 80127ae:	2e10      	cmp	r6, #16
 80127b0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80127b2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80127b4:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80127b8:	dce6      	bgt.n	8012788 <_svfprintf_r+0xcb8>
 80127ba:	46d0      	mov	r8, sl
 80127bc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80127c0:	f8c9 8000 	str.w	r8, [r9]
 80127c4:	3501      	adds	r5, #1
 80127c6:	4434      	add	r4, r6
 80127c8:	2d07      	cmp	r5, #7
 80127ca:	9421      	str	r4, [sp, #132]	; 0x84
 80127cc:	9520      	str	r5, [sp, #128]	; 0x80
 80127ce:	f8c9 6004 	str.w	r6, [r9, #4]
 80127d2:	f77f af0c 	ble.w	80125ee <_svfprintf_r+0xb1e>
 80127d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80127d8:	9904      	ldr	r1, [sp, #16]
 80127da:	9806      	ldr	r0, [sp, #24]
 80127dc:	f002 fc28 	bl	8015030 <__ssprint_r>
 80127e0:	2800      	cmp	r0, #0
 80127e2:	f47f aa6c 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 80127e6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80127e8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80127ea:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80127ee:	e700      	b.n	80125f2 <_svfprintf_r+0xb22>
 80127f0:	9903      	ldr	r1, [sp, #12]
 80127f2:	f011 0210 	ands.w	r2, r1, #16
 80127f6:	f000 812e 	beq.w	8012a56 <_svfprintf_r+0xf86>
 80127fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80127fc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012800:	f1bb 0f00 	cmp.w	fp, #0
 8012804:	6804      	ldr	r4, [r0, #0]
 8012806:	f100 0704 	add.w	r7, r0, #4
 801280a:	f04f 0500 	mov.w	r5, #0
 801280e:	db26      	blt.n	801285e <_svfprintf_r+0xd8e>
 8012810:	460a      	mov	r2, r1
 8012812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012816:	9203      	str	r2, [sp, #12]
 8012818:	ea54 0205 	orrs.w	r2, r4, r5
 801281c:	970a      	str	r7, [sp, #40]	; 0x28
 801281e:	461f      	mov	r7, r3
 8012820:	f47f aafe 	bne.w	8011e20 <_svfprintf_r+0x350>
 8012824:	e4d2      	b.n	80121cc <_svfprintf_r+0x6fc>
 8012826:	9b03      	ldr	r3, [sp, #12]
 8012828:	06d8      	lsls	r0, r3, #27
 801282a:	d42c      	bmi.n	8012886 <_svfprintf_r+0xdb6>
 801282c:	9b03      	ldr	r3, [sp, #12]
 801282e:	0659      	lsls	r1, r3, #25
 8012830:	d529      	bpl.n	8012886 <_svfprintf_r+0xdb6>
 8012832:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012834:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012838:	3104      	adds	r1, #4
 801283a:	17e5      	asrs	r5, r4, #31
 801283c:	4622      	mov	r2, r4
 801283e:	462b      	mov	r3, r5
 8012840:	910a      	str	r1, [sp, #40]	; 0x28
 8012842:	f7ff bada 	b.w	8011dfa <_svfprintf_r+0x32a>
 8012846:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012848:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801284c:	f1bb 0f00 	cmp.w	fp, #0
 8012850:	680c      	ldr	r4, [r1, #0]
 8012852:	f101 0704 	add.w	r7, r1, #4
 8012856:	f04f 0500 	mov.w	r5, #0
 801285a:	f280 81e0 	bge.w	8012c1e <_svfprintf_r+0x114e>
 801285e:	970a      	str	r7, [sp, #40]	; 0x28
 8012860:	461f      	mov	r7, r3
 8012862:	ea54 0305 	orrs.w	r3, r4, r5
 8012866:	f47f aadb 	bne.w	8011e20 <_svfprintf_r+0x350>
 801286a:	e4b4      	b.n	80121d6 <_svfprintf_r+0x706>
 801286c:	46b8      	mov	r8, r7
 801286e:	3301      	adds	r3, #1
 8012870:	442c      	add	r4, r5
 8012872:	2b07      	cmp	r3, #7
 8012874:	9421      	str	r4, [sp, #132]	; 0x84
 8012876:	9320      	str	r3, [sp, #128]	; 0x80
 8012878:	f8c9 8000 	str.w	r8, [r9]
 801287c:	f8c9 5004 	str.w	r5, [r9, #4]
 8012880:	f77f abb6 	ble.w	8011ff0 <_svfprintf_r+0x520>
 8012884:	e6c2      	b.n	801260c <_svfprintf_r+0xb3c>
 8012886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012888:	6814      	ldr	r4, [r2, #0]
 801288a:	4613      	mov	r3, r2
 801288c:	3304      	adds	r3, #4
 801288e:	17e5      	asrs	r5, r4, #31
 8012890:	4622      	mov	r2, r4
 8012892:	930a      	str	r3, [sp, #40]	; 0x28
 8012894:	2a00      	cmp	r2, #0
 8012896:	462b      	mov	r3, r5
 8012898:	f173 0300 	sbcs.w	r3, r3, #0
 801289c:	f6bf aab2 	bge.w	8011e04 <_svfprintf_r+0x334>
 80128a0:	4264      	negs	r4, r4
 80128a2:	f04f 072d 	mov.w	r7, #45	; 0x2d
 80128a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80128aa:	f1bb 0f00 	cmp.w	fp, #0
 80128ae:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 80128b2:	f6ff aab5 	blt.w	8011e20 <_svfprintf_r+0x350>
 80128b6:	9b03      	ldr	r3, [sp, #12]
 80128b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128bc:	9303      	str	r3, [sp, #12]
 80128be:	f7ff baaf 	b.w	8011e20 <_svfprintf_r+0x350>
 80128c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80128c4:	9904      	ldr	r1, [sp, #16]
 80128c6:	9806      	ldr	r0, [sp, #24]
 80128c8:	f002 fbb2 	bl	8015030 <__ssprint_r>
 80128cc:	2800      	cmp	r0, #0
 80128ce:	f47f a9f6 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 80128d2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80128d4:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80128d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128dc:	4432      	add	r2, r6
 80128de:	4617      	mov	r7, r2
 80128e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128e2:	4293      	cmp	r3, r2
 80128e4:	db49      	blt.n	801297a <_svfprintf_r+0xeaa>
 80128e6:	9a03      	ldr	r2, [sp, #12]
 80128e8:	07d5      	lsls	r5, r2, #31
 80128ea:	d446      	bmi.n	801297a <_svfprintf_r+0xeaa>
 80128ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80128ee:	440e      	add	r6, r1
 80128f0:	1bf5      	subs	r5, r6, r7
 80128f2:	1acb      	subs	r3, r1, r3
 80128f4:	429d      	cmp	r5, r3
 80128f6:	bfa8      	it	ge
 80128f8:	461d      	movge	r5, r3
 80128fa:	2d00      	cmp	r5, #0
 80128fc:	462e      	mov	r6, r5
 80128fe:	dd0d      	ble.n	801291c <_svfprintf_r+0xe4c>
 8012900:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012902:	f8c9 7000 	str.w	r7, [r9]
 8012906:	3201      	adds	r2, #1
 8012908:	442c      	add	r4, r5
 801290a:	2a07      	cmp	r2, #7
 801290c:	9421      	str	r4, [sp, #132]	; 0x84
 801290e:	f8c9 5004 	str.w	r5, [r9, #4]
 8012912:	9220      	str	r2, [sp, #128]	; 0x80
 8012914:	f300 8296 	bgt.w	8012e44 <_svfprintf_r+0x1374>
 8012918:	f109 0908 	add.w	r9, r9, #8
 801291c:	2e00      	cmp	r6, #0
 801291e:	bfac      	ite	ge
 8012920:	1b9d      	subge	r5, r3, r6
 8012922:	461d      	movlt	r5, r3
 8012924:	2d00      	cmp	r5, #0
 8012926:	f77f ab65 	ble.w	8011ff4 <_svfprintf_r+0x524>
 801292a:	2d10      	cmp	r5, #16
 801292c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801292e:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8012c5c <_svfprintf_r+0x118c>
 8012932:	dd9c      	ble.n	801286e <_svfprintf_r+0xd9e>
 8012934:	4647      	mov	r7, r8
 8012936:	2610      	movs	r6, #16
 8012938:	f8dd b010 	ldr.w	fp, [sp, #16]
 801293c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012940:	e004      	b.n	801294c <_svfprintf_r+0xe7c>
 8012942:	f109 0908 	add.w	r9, r9, #8
 8012946:	3d10      	subs	r5, #16
 8012948:	2d10      	cmp	r5, #16
 801294a:	dd8f      	ble.n	801286c <_svfprintf_r+0xd9c>
 801294c:	3301      	adds	r3, #1
 801294e:	3410      	adds	r4, #16
 8012950:	2b07      	cmp	r3, #7
 8012952:	9421      	str	r4, [sp, #132]	; 0x84
 8012954:	9320      	str	r3, [sp, #128]	; 0x80
 8012956:	f8c9 7000 	str.w	r7, [r9]
 801295a:	f8c9 6004 	str.w	r6, [r9, #4]
 801295e:	ddf0      	ble.n	8012942 <_svfprintf_r+0xe72>
 8012960:	aa1f      	add	r2, sp, #124	; 0x7c
 8012962:	4659      	mov	r1, fp
 8012964:	4640      	mov	r0, r8
 8012966:	f002 fb63 	bl	8015030 <__ssprint_r>
 801296a:	2800      	cmp	r0, #0
 801296c:	f47f a9a7 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012970:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012972:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012974:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012978:	e7e5      	b.n	8012946 <_svfprintf_r+0xe76>
 801297a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801297c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801297e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012980:	f8c9 1000 	str.w	r1, [r9]
 8012984:	3201      	adds	r2, #1
 8012986:	4404      	add	r4, r0
 8012988:	2a07      	cmp	r2, #7
 801298a:	9421      	str	r4, [sp, #132]	; 0x84
 801298c:	f8c9 0004 	str.w	r0, [r9, #4]
 8012990:	9220      	str	r2, [sp, #128]	; 0x80
 8012992:	f300 824a 	bgt.w	8012e2a <_svfprintf_r+0x135a>
 8012996:	f109 0908 	add.w	r9, r9, #8
 801299a:	e7a7      	b.n	80128ec <_svfprintf_r+0xe1c>
 801299c:	9b03      	ldr	r3, [sp, #12]
 801299e:	07d8      	lsls	r0, r3, #31
 80129a0:	f53f adf1 	bmi.w	8012586 <_svfprintf_r+0xab6>
 80129a4:	3501      	adds	r5, #1
 80129a6:	3401      	adds	r4, #1
 80129a8:	2301      	movs	r3, #1
 80129aa:	2d07      	cmp	r5, #7
 80129ac:	9421      	str	r4, [sp, #132]	; 0x84
 80129ae:	9520      	str	r5, [sp, #128]	; 0x80
 80129b0:	f8c9 6000 	str.w	r6, [r9]
 80129b4:	f8c9 3004 	str.w	r3, [r9, #4]
 80129b8:	f77f ae19 	ble.w	80125ee <_svfprintf_r+0xb1e>
 80129bc:	e70b      	b.n	80127d6 <_svfprintf_r+0xd06>
 80129be:	aa1f      	add	r2, sp, #124	; 0x7c
 80129c0:	9904      	ldr	r1, [sp, #16]
 80129c2:	9806      	ldr	r0, [sp, #24]
 80129c4:	f002 fb34 	bl	8015030 <__ssprint_r>
 80129c8:	2800      	cmp	r0, #0
 80129ca:	f47f a978 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 80129ce:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80129d0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80129d2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80129d6:	e5e4      	b.n	80125a2 <_svfprintf_r+0xad2>
 80129d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80129da:	9904      	ldr	r1, [sp, #16]
 80129dc:	9806      	ldr	r0, [sp, #24]
 80129de:	f002 fb27 	bl	8015030 <__ssprint_r>
 80129e2:	2800      	cmp	r0, #0
 80129e4:	f47f a96b 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 80129e8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80129ea:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80129ec:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80129f0:	e5e6      	b.n	80125c0 <_svfprintf_r+0xaf0>
 80129f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80129f4:	9904      	ldr	r1, [sp, #16]
 80129f6:	9806      	ldr	r0, [sp, #24]
 80129f8:	f002 fb1a 	bl	8015030 <__ssprint_r>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	f47f a95e 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012a02:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012a04:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012a08:	f7ff baa1 	b.w	8011f4e <_svfprintf_r+0x47e>
 8012a0c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8012a10:	f002 fa8e 	bl	8014f30 <__fpclassifyd>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	f040 8123 	bne.w	8012c60 <_svfprintf_r+0x1190>
 8012a1a:	9903      	ldr	r1, [sp, #12]
 8012a1c:	4e8c      	ldr	r6, [pc, #560]	; (8012c50 <_svfprintf_r+0x1180>)
 8012a1e:	4b8d      	ldr	r3, [pc, #564]	; (8012c54 <_svfprintf_r+0x1184>)
 8012a20:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8012a24:	900d      	str	r0, [sp, #52]	; 0x34
 8012a26:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012a2a:	9103      	str	r1, [sp, #12]
 8012a2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012a2e:	2203      	movs	r2, #3
 8012a30:	4683      	mov	fp, r0
 8012a32:	9205      	str	r2, [sp, #20]
 8012a34:	2947      	cmp	r1, #71	; 0x47
 8012a36:	bfd8      	it	le
 8012a38:	461e      	movle	r6, r3
 8012a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8012a3c:	f7ff ba14 	b.w	8011e68 <_svfprintf_r+0x398>
 8012a40:	f027 0707 	bic.w	r7, r7, #7
 8012a44:	ed97 7b00 	vldr	d7, [r7]
 8012a48:	f107 0308 	add.w	r3, r7, #8
 8012a4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012a50:	930a      	str	r3, [sp, #40]	; 0x28
 8012a52:	f7ff bb37 	b.w	80120c4 <_svfprintf_r+0x5f4>
 8012a56:	9903      	ldr	r1, [sp, #12]
 8012a58:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8012a5c:	f43f aef3 	beq.w	8012846 <_svfprintf_r+0xd76>
 8012a60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012a62:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012a66:	f1bb 0f00 	cmp.w	fp, #0
 8012a6a:	8804      	ldrh	r4, [r0, #0]
 8012a6c:	f100 0704 	add.w	r7, r0, #4
 8012a70:	f04f 0500 	mov.w	r5, #0
 8012a74:	f2c0 8198 	blt.w	8012da8 <_svfprintf_r+0x12d8>
 8012a78:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8012a7c:	9303      	str	r3, [sp, #12]
 8012a7e:	ea54 0305 	orrs.w	r3, r4, r5
 8012a82:	970a      	str	r7, [sp, #40]	; 0x28
 8012a84:	4617      	mov	r7, r2
 8012a86:	f47f a9cb 	bne.w	8011e20 <_svfprintf_r+0x350>
 8012a8a:	f7ff bb9f 	b.w	80121cc <_svfprintf_r+0x6fc>
 8012a8e:	9903      	ldr	r1, [sp, #12]
 8012a90:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8012a94:	f000 80b4 	beq.w	8012c00 <_svfprintf_r+0x1130>
 8012a98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012a9a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012a9e:	f1bb 0f00 	cmp.w	fp, #0
 8012aa2:	8804      	ldrh	r4, [r0, #0]
 8012aa4:	f100 0704 	add.w	r7, r0, #4
 8012aa8:	f04f 0500 	mov.w	r5, #0
 8012aac:	f280 8152 	bge.w	8012d54 <_svfprintf_r+0x1284>
 8012ab0:	970a      	str	r7, [sp, #40]	; 0x28
 8012ab2:	2700      	movs	r7, #0
 8012ab4:	f7ff b92f 	b.w	8011d16 <_svfprintf_r+0x246>
 8012ab8:	9b03      	ldr	r3, [sp, #12]
 8012aba:	06df      	lsls	r7, r3, #27
 8012abc:	d40b      	bmi.n	8012ad6 <_svfprintf_r+0x1006>
 8012abe:	9b03      	ldr	r3, [sp, #12]
 8012ac0:	065e      	lsls	r6, r3, #25
 8012ac2:	d508      	bpl.n	8012ad6 <_svfprintf_r+0x1006>
 8012ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ac6:	6813      	ldr	r3, [r2, #0]
 8012ac8:	3204      	adds	r2, #4
 8012aca:	920a      	str	r2, [sp, #40]	; 0x28
 8012acc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012ad0:	801a      	strh	r2, [r3, #0]
 8012ad2:	f7ff b821 	b.w	8011b18 <_svfprintf_r+0x48>
 8012ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ad8:	6813      	ldr	r3, [r2, #0]
 8012ada:	3204      	adds	r2, #4
 8012adc:	920a      	str	r2, [sp, #40]	; 0x28
 8012ade:	9a07      	ldr	r2, [sp, #28]
 8012ae0:	601a      	str	r2, [r3, #0]
 8012ae2:	f7ff b819 	b.w	8011b18 <_svfprintf_r+0x48>
 8012ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ae8:	9b03      	ldr	r3, [sp, #12]
 8012aea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012aee:	4613      	mov	r3, r2
 8012af0:	f103 0304 	add.w	r3, r3, #4
 8012af4:	bf0c      	ite	eq
 8012af6:	6814      	ldreq	r4, [r2, #0]
 8012af8:	8814      	ldrhne	r4, [r2, #0]
 8012afa:	930a      	str	r3, [sp, #40]	; 0x28
 8012afc:	2500      	movs	r5, #0
 8012afe:	f7ff bb82 	b.w	8012206 <_svfprintf_r+0x736>
 8012b02:	4614      	mov	r4, r2
 8012b04:	4632      	mov	r2, r6
 8012b06:	4646      	mov	r6, r8
 8012b08:	4690      	mov	r8, r2
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	442c      	add	r4, r5
 8012b0e:	2b07      	cmp	r3, #7
 8012b10:	9421      	str	r4, [sp, #132]	; 0x84
 8012b12:	9320      	str	r3, [sp, #128]	; 0x80
 8012b14:	f8c9 8000 	str.w	r8, [r9]
 8012b18:	f8c9 5004 	str.w	r5, [r9, #4]
 8012b1c:	f73f aed1 	bgt.w	80128c2 <_svfprintf_r+0xdf2>
 8012b20:	f109 0908 	add.w	r9, r9, #8
 8012b24:	e6d8      	b.n	80128d8 <_svfprintf_r+0xe08>
 8012b26:	2700      	movs	r7, #0
 8012b28:	45bb      	cmp	fp, r7
 8012b2a:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8012b2e:	f6ff ac73 	blt.w	8012418 <_svfprintf_r+0x948>
 8012b32:	9b03      	ldr	r3, [sp, #12]
 8012b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b38:	9303      	str	r3, [sp, #12]
 8012b3a:	e43b      	b.n	80123b4 <_svfprintf_r+0x8e4>
 8012b3c:	aa1f      	add	r2, sp, #124	; 0x7c
 8012b3e:	9904      	ldr	r1, [sp, #16]
 8012b40:	9806      	ldr	r0, [sp, #24]
 8012b42:	f002 fa75 	bl	8015030 <__ssprint_r>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	f47f a8b9 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012b4c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012b4e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012b52:	e483      	b.n	801245c <_svfprintf_r+0x98c>
 8012b54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012b56:	e458      	b.n	801240a <_svfprintf_r+0x93a>
 8012b58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012b5a:	4a3f      	ldr	r2, [pc, #252]	; (8012c58 <_svfprintf_r+0x1188>)
 8012b5c:	f8c9 2000 	str.w	r2, [r9]
 8012b60:	3301      	adds	r3, #1
 8012b62:	3401      	adds	r4, #1
 8012b64:	2201      	movs	r2, #1
 8012b66:	2b07      	cmp	r3, #7
 8012b68:	9421      	str	r4, [sp, #132]	; 0x84
 8012b6a:	9320      	str	r3, [sp, #128]	; 0x80
 8012b6c:	f8c9 2004 	str.w	r2, [r9, #4]
 8012b70:	f300 810a 	bgt.w	8012d88 <_svfprintf_r+0x12b8>
 8012b74:	f109 0908 	add.w	r9, r9, #8
 8012b78:	b92d      	cbnz	r5, 8012b86 <_svfprintf_r+0x10b6>
 8012b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b7c:	b91b      	cbnz	r3, 8012b86 <_svfprintf_r+0x10b6>
 8012b7e:	9b03      	ldr	r3, [sp, #12]
 8012b80:	07df      	lsls	r7, r3, #31
 8012b82:	f57f aa37 	bpl.w	8011ff4 <_svfprintf_r+0x524>
 8012b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012b88:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012b8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b8c:	f8c9 2000 	str.w	r2, [r9]
 8012b90:	3301      	adds	r3, #1
 8012b92:	440c      	add	r4, r1
 8012b94:	2b07      	cmp	r3, #7
 8012b96:	9421      	str	r4, [sp, #132]	; 0x84
 8012b98:	f8c9 1004 	str.w	r1, [r9, #4]
 8012b9c:	9320      	str	r3, [sp, #128]	; 0x80
 8012b9e:	f300 81d1 	bgt.w	8012f44 <_svfprintf_r+0x1474>
 8012ba2:	f109 0908 	add.w	r9, r9, #8
 8012ba6:	426d      	negs	r5, r5
 8012ba8:	2d00      	cmp	r5, #0
 8012baa:	f340 810c 	ble.w	8012dc6 <_svfprintf_r+0x12f6>
 8012bae:	2d10      	cmp	r5, #16
 8012bb0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8012c5c <_svfprintf_r+0x118c>
 8012bb4:	f340 812c 	ble.w	8012e10 <_svfprintf_r+0x1340>
 8012bb8:	4641      	mov	r1, r8
 8012bba:	4622      	mov	r2, r4
 8012bbc:	46b0      	mov	r8, r6
 8012bbe:	2710      	movs	r7, #16
 8012bc0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8012bc4:	9c04      	ldr	r4, [sp, #16]
 8012bc6:	460e      	mov	r6, r1
 8012bc8:	e005      	b.n	8012bd6 <_svfprintf_r+0x1106>
 8012bca:	f109 0908 	add.w	r9, r9, #8
 8012bce:	3d10      	subs	r5, #16
 8012bd0:	2d10      	cmp	r5, #16
 8012bd2:	f340 8119 	ble.w	8012e08 <_svfprintf_r+0x1338>
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	3210      	adds	r2, #16
 8012bda:	2b07      	cmp	r3, #7
 8012bdc:	9221      	str	r2, [sp, #132]	; 0x84
 8012bde:	9320      	str	r3, [sp, #128]	; 0x80
 8012be0:	e889 00c0 	stmia.w	r9, {r6, r7}
 8012be4:	ddf1      	ble.n	8012bca <_svfprintf_r+0x10fa>
 8012be6:	aa1f      	add	r2, sp, #124	; 0x7c
 8012be8:	4621      	mov	r1, r4
 8012bea:	4658      	mov	r0, fp
 8012bec:	f002 fa20 	bl	8015030 <__ssprint_r>
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	f47f a864 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012bf6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012bf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012bfa:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012bfe:	e7e6      	b.n	8012bce <_svfprintf_r+0x10fe>
 8012c00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012c02:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012c06:	f1bb 0f00 	cmp.w	fp, #0
 8012c0a:	680c      	ldr	r4, [r1, #0]
 8012c0c:	f101 0704 	add.w	r7, r1, #4
 8012c10:	f04f 0500 	mov.w	r5, #0
 8012c14:	f6ff af4c 	blt.w	8012ab0 <_svfprintf_r+0xfe0>
 8012c18:	9a03      	ldr	r2, [sp, #12]
 8012c1a:	f7ff baa0 	b.w	801215e <_svfprintf_r+0x68e>
 8012c1e:	9a03      	ldr	r2, [sp, #12]
 8012c20:	e5f7      	b.n	8012812 <_svfprintf_r+0xd42>
 8012c22:	9b03      	ldr	r3, [sp, #12]
 8012c24:	f043 0320 	orr.w	r3, r3, #32
 8012c28:	9303      	str	r3, [sp, #12]
 8012c2a:	f10a 0a01 	add.w	sl, sl, #1
 8012c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8012c32:	f7fe bfa4 	b.w	8011b7e <_svfprintf_r+0xae>
 8012c36:	aa1f      	add	r2, sp, #124	; 0x7c
 8012c38:	9904      	ldr	r1, [sp, #16]
 8012c3a:	9806      	ldr	r0, [sp, #24]
 8012c3c:	f002 f9f8 	bl	8015030 <__ssprint_r>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	f47f a83c 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012c46:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012c48:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012c4c:	e41e      	b.n	801248c <_svfprintf_r+0x9bc>
 8012c4e:	bf00      	nop
 8012c50:	08016a2c 	.word	0x08016a2c
 8012c54:	08016a28 	.word	0x08016a28
 8012c58:	08016a58 	.word	0x08016a58
 8012c5c:	08016a60 	.word	0x08016a60
 8012c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c62:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8012c66:	f023 0720 	bic.w	r7, r3, #32
 8012c6a:	f000 809a 	beq.w	8012da2 <_svfprintf_r+0x12d2>
 8012c6e:	2f47      	cmp	r7, #71	; 0x47
 8012c70:	d104      	bne.n	8012c7c <_svfprintf_r+0x11ac>
 8012c72:	f1bb 0f00 	cmp.w	fp, #0
 8012c76:	bf08      	it	eq
 8012c78:	f04f 0b01 	moveq.w	fp, #1
 8012c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c7e:	9a03      	ldr	r2, [sp, #12]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c86:	920b      	str	r2, [sp, #44]	; 0x2c
 8012c88:	f2c0 8184 	blt.w	8012f94 <_svfprintf_r+0x14c4>
 8012c8c:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8012c90:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8012c94:	f04f 0800 	mov.w	r8, #0
 8012c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c9a:	2b66      	cmp	r3, #102	; 0x66
 8012c9c:	f000 8164 	beq.w	8012f68 <_svfprintf_r+0x1498>
 8012ca0:	2b46      	cmp	r3, #70	; 0x46
 8012ca2:	f000 819c 	beq.w	8012fde <_svfprintf_r+0x150e>
 8012ca6:	2f45      	cmp	r7, #69	; 0x45
 8012ca8:	bf0c      	ite	eq
 8012caa:	f10b 0501 	addeq.w	r5, fp, #1
 8012cae:	465d      	movne	r5, fp
 8012cb0:	aa1d      	add	r2, sp, #116	; 0x74
 8012cb2:	ab1a      	add	r3, sp, #104	; 0x68
 8012cb4:	9201      	str	r2, [sp, #4]
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	462a      	mov	r2, r5
 8012cba:	ab19      	add	r3, sp, #100	; 0x64
 8012cbc:	2102      	movs	r1, #2
 8012cbe:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8012cc2:	9806      	ldr	r0, [sp, #24]
 8012cc4:	f000 fbac 	bl	8013420 <_dtoa_r>
 8012cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cca:	2b67      	cmp	r3, #103	; 0x67
 8012ccc:	4606      	mov	r6, r0
 8012cce:	f000 80fb 	beq.w	8012ec8 <_svfprintf_r+0x13f8>
 8012cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cd4:	2b47      	cmp	r3, #71	; 0x47
 8012cd6:	f000 80e5 	beq.w	8012ea4 <_svfprintf_r+0x13d4>
 8012cda:	1974      	adds	r4, r6, r5
 8012cdc:	2200      	movs	r2, #0
 8012cde:	2300      	movs	r3, #0
 8012ce0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8012ce4:	f7f6 f89a 	bl	8008e1c <__aeabi_dcmpeq>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	f040 80f3 	bne.w	8012ed4 <_svfprintf_r+0x1404>
 8012cee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012cf0:	429c      	cmp	r4, r3
 8012cf2:	d906      	bls.n	8012d02 <_svfprintf_r+0x1232>
 8012cf4:	2130      	movs	r1, #48	; 0x30
 8012cf6:	1c5a      	adds	r2, r3, #1
 8012cf8:	921d      	str	r2, [sp, #116]	; 0x74
 8012cfa:	7019      	strb	r1, [r3, #0]
 8012cfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012cfe:	429c      	cmp	r4, r3
 8012d00:	d8f9      	bhi.n	8012cf6 <_svfprintf_r+0x1226>
 8012d02:	1b9b      	subs	r3, r3, r6
 8012d04:	2f47      	cmp	r7, #71	; 0x47
 8012d06:	9310      	str	r3, [sp, #64]	; 0x40
 8012d08:	f000 80d7 	beq.w	8012eba <_svfprintf_r+0x13ea>
 8012d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d0e:	2b65      	cmp	r3, #101	; 0x65
 8012d10:	f340 8211 	ble.w	8013136 <_svfprintf_r+0x1666>
 8012d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d16:	2b66      	cmp	r3, #102	; 0x66
 8012d18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8012d1c:	f000 8152 	beq.w	8012fc4 <_svfprintf_r+0x14f4>
 8012d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012d22:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012d24:	428a      	cmp	r2, r1
 8012d26:	f2c0 813e 	blt.w	8012fa6 <_svfprintf_r+0x14d6>
 8012d2a:	9b03      	ldr	r3, [sp, #12]
 8012d2c:	07d9      	lsls	r1, r3, #31
 8012d2e:	f100 81a2 	bmi.w	8013076 <_svfprintf_r+0x15a6>
 8012d32:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012d36:	9209      	str	r2, [sp, #36]	; 0x24
 8012d38:	2267      	movs	r2, #103	; 0x67
 8012d3a:	920c      	str	r2, [sp, #48]	; 0x30
 8012d3c:	f1b8 0f00 	cmp.w	r8, #0
 8012d40:	f040 809e 	bne.w	8012e80 <_svfprintf_r+0x13b0>
 8012d44:	9305      	str	r3, [sp, #20]
 8012d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d48:	9303      	str	r3, [sp, #12]
 8012d4a:	46c3      	mov	fp, r8
 8012d4c:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8012d50:	f7ff b88a 	b.w	8011e68 <_svfprintf_r+0x398>
 8012d54:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8012d58:	9303      	str	r3, [sp, #12]
 8012d5a:	ea54 0305 	orrs.w	r3, r4, r5
 8012d5e:	970a      	str	r7, [sp, #40]	; 0x28
 8012d60:	f43f ab48 	beq.w	80123f4 <_svfprintf_r+0x924>
 8012d64:	4617      	mov	r7, r2
 8012d66:	f7fe bfd6 	b.w	8011d16 <_svfprintf_r+0x246>
 8012d6a:	2140      	movs	r1, #64	; 0x40
 8012d6c:	9806      	ldr	r0, [sp, #24]
 8012d6e:	f7fd ffff 	bl	8010d70 <_malloc_r>
 8012d72:	9a04      	ldr	r2, [sp, #16]
 8012d74:	6010      	str	r0, [r2, #0]
 8012d76:	6110      	str	r0, [r2, #16]
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	f000 81c5 	beq.w	8013108 <_svfprintf_r+0x1638>
 8012d7e:	9a04      	ldr	r2, [sp, #16]
 8012d80:	2340      	movs	r3, #64	; 0x40
 8012d82:	6153      	str	r3, [r2, #20]
 8012d84:	f7fe bebb 	b.w	8011afe <_svfprintf_r+0x2e>
 8012d88:	aa1f      	add	r2, sp, #124	; 0x7c
 8012d8a:	9904      	ldr	r1, [sp, #16]
 8012d8c:	9806      	ldr	r0, [sp, #24]
 8012d8e:	f002 f94f 	bl	8015030 <__ssprint_r>
 8012d92:	2800      	cmp	r0, #0
 8012d94:	f47e af93 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012d98:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8012d9a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012d9c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012da0:	e6ea      	b.n	8012b78 <_svfprintf_r+0x10a8>
 8012da2:	f04f 0b06 	mov.w	fp, #6
 8012da6:	e769      	b.n	8012c7c <_svfprintf_r+0x11ac>
 8012da8:	970a      	str	r7, [sp, #40]	; 0x28
 8012daa:	4617      	mov	r7, r2
 8012dac:	e559      	b.n	8012862 <_svfprintf_r+0xd92>
 8012dae:	aa1f      	add	r2, sp, #124	; 0x7c
 8012db0:	9904      	ldr	r1, [sp, #16]
 8012db2:	9806      	ldr	r0, [sp, #24]
 8012db4:	f002 f93c 	bl	8015030 <__ssprint_r>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	f47e af80 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012dbe:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012dc2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012dc6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012dc8:	f8c9 6000 	str.w	r6, [r9]
 8012dcc:	3301      	adds	r3, #1
 8012dce:	440c      	add	r4, r1
 8012dd0:	2b07      	cmp	r3, #7
 8012dd2:	9421      	str	r4, [sp, #132]	; 0x84
 8012dd4:	9320      	str	r3, [sp, #128]	; 0x80
 8012dd6:	f8c9 1004 	str.w	r1, [r9, #4]
 8012dda:	f77f a909 	ble.w	8011ff0 <_svfprintf_r+0x520>
 8012dde:	e415      	b.n	801260c <_svfprintf_r+0xb3c>
 8012de0:	4630      	mov	r0, r6
 8012de2:	f7f7 fa9d 	bl	800a320 <strlen>
 8012de6:	46a3      	mov	fp, r4
 8012de8:	4603      	mov	r3, r0
 8012dea:	9009      	str	r0, [sp, #36]	; 0x24
 8012dec:	f7ff ba9c 	b.w	8012328 <_svfprintf_r+0x858>
 8012df0:	aa1f      	add	r2, sp, #124	; 0x7c
 8012df2:	9904      	ldr	r1, [sp, #16]
 8012df4:	9806      	ldr	r0, [sp, #24]
 8012df6:	f002 f91b 	bl	8015030 <__ssprint_r>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	f47e af5f 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012e00:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012e02:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012e06:	e468      	b.n	80126da <_svfprintf_r+0xc0a>
 8012e08:	4614      	mov	r4, r2
 8012e0a:	4632      	mov	r2, r6
 8012e0c:	4646      	mov	r6, r8
 8012e0e:	4690      	mov	r8, r2
 8012e10:	3301      	adds	r3, #1
 8012e12:	442c      	add	r4, r5
 8012e14:	2b07      	cmp	r3, #7
 8012e16:	9421      	str	r4, [sp, #132]	; 0x84
 8012e18:	9320      	str	r3, [sp, #128]	; 0x80
 8012e1a:	f8c9 8000 	str.w	r8, [r9]
 8012e1e:	f8c9 5004 	str.w	r5, [r9, #4]
 8012e22:	dcc4      	bgt.n	8012dae <_svfprintf_r+0x12de>
 8012e24:	f109 0908 	add.w	r9, r9, #8
 8012e28:	e7cd      	b.n	8012dc6 <_svfprintf_r+0x12f6>
 8012e2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8012e2c:	9904      	ldr	r1, [sp, #16]
 8012e2e:	9806      	ldr	r0, [sp, #24]
 8012e30:	f002 f8fe 	bl	8015030 <__ssprint_r>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	f47e af42 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012e3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e3c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012e3e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012e42:	e553      	b.n	80128ec <_svfprintf_r+0xe1c>
 8012e44:	aa1f      	add	r2, sp, #124	; 0x7c
 8012e46:	9904      	ldr	r1, [sp, #16]
 8012e48:	9806      	ldr	r0, [sp, #24]
 8012e4a:	f002 f8f1 	bl	8015030 <__ssprint_r>
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	f47e af35 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012e54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012e58:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012e5a:	1ad3      	subs	r3, r2, r3
 8012e5c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012e60:	e55c      	b.n	801291c <_svfprintf_r+0xe4c>
 8012e62:	2d06      	cmp	r5, #6
 8012e64:	462b      	mov	r3, r5
 8012e66:	bf28      	it	cs
 8012e68:	2306      	movcs	r3, #6
 8012e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012e6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012e70:	46b3      	mov	fp, r6
 8012e72:	970a      	str	r7, [sp, #40]	; 0x28
 8012e74:	960d      	str	r6, [sp, #52]	; 0x34
 8012e76:	4637      	mov	r7, r6
 8012e78:	9305      	str	r3, [sp, #20]
 8012e7a:	4eba      	ldr	r6, [pc, #744]	; (8013164 <_svfprintf_r+0x1694>)
 8012e7c:	f7fe bff4 	b.w	8011e68 <_svfprintf_r+0x398>
 8012e80:	272d      	movs	r7, #45	; 0x2d
 8012e82:	9305      	str	r3, [sp, #20]
 8012e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e86:	9303      	str	r3, [sp, #12]
 8012e88:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8012e8c:	f04f 0b00 	mov.w	fp, #0
 8012e90:	f7fe bfeb 	b.w	8011e6a <_svfprintf_r+0x39a>
 8012e94:	9303      	str	r3, [sp, #12]
 8012e96:	f7ff b9d4 	b.w	8012242 <_svfprintf_r+0x772>
 8012e9a:	272d      	movs	r7, #45	; 0x2d
 8012e9c:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
 8012ea0:	f7ff b924 	b.w	80120ec <_svfprintf_r+0x61c>
 8012ea4:	9b03      	ldr	r3, [sp, #12]
 8012ea6:	07db      	lsls	r3, r3, #31
 8012ea8:	f100 80a7 	bmi.w	8012ffa <_svfprintf_r+0x152a>
 8012eac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012eae:	2f47      	cmp	r7, #71	; 0x47
 8012eb0:	eba3 0306 	sub.w	r3, r3, r6
 8012eb4:	9310      	str	r3, [sp, #64]	; 0x40
 8012eb6:	f040 813e 	bne.w	8013136 <_svfprintf_r+0x1666>
 8012eba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ebc:	1cdd      	adds	r5, r3, #3
 8012ebe:	db16      	blt.n	8012eee <_svfprintf_r+0x141e>
 8012ec0:	459b      	cmp	fp, r3
 8012ec2:	db14      	blt.n	8012eee <_svfprintf_r+0x141e>
 8012ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8012ec6:	e72b      	b.n	8012d20 <_svfprintf_r+0x1250>
 8012ec8:	9b03      	ldr	r3, [sp, #12]
 8012eca:	07da      	lsls	r2, r3, #31
 8012ecc:	f53f af05 	bmi.w	8012cda <_svfprintf_r+0x120a>
 8012ed0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ed2:	e716      	b.n	8012d02 <_svfprintf_r+0x1232>
 8012ed4:	4623      	mov	r3, r4
 8012ed6:	e714      	b.n	8012d02 <_svfprintf_r+0x1232>
 8012ed8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8012edc:	970a      	str	r7, [sp, #40]	; 0x28
 8012ede:	9305      	str	r3, [sp, #20]
 8012ee0:	9509      	str	r5, [sp, #36]	; 0x24
 8012ee2:	4683      	mov	fp, r0
 8012ee4:	900d      	str	r0, [sp, #52]	; 0x34
 8012ee6:	f89d 705f 	ldrb.w	r7, [sp, #95]	; 0x5f
 8012eea:	f7fe bfbd 	b.w	8011e68 <_svfprintf_r+0x398>
 8012eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ef0:	3a02      	subs	r2, #2
 8012ef2:	920c      	str	r2, [sp, #48]	; 0x30
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8012efc:	9319      	str	r3, [sp, #100]	; 0x64
 8012efe:	bfb8      	it	lt
 8012f00:	425b      	neglt	r3, r3
 8012f02:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8012f06:	bfb4      	ite	lt
 8012f08:	222d      	movlt	r2, #45	; 0x2d
 8012f0a:	222b      	movge	r2, #43	; 0x2b
 8012f0c:	2b09      	cmp	r3, #9
 8012f0e:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8012f12:	dc78      	bgt.n	8013006 <_svfprintf_r+0x1536>
 8012f14:	3330      	adds	r3, #48	; 0x30
 8012f16:	2230      	movs	r2, #48	; 0x30
 8012f18:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8012f1c:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8012f20:	ab1c      	add	r3, sp, #112	; 0x70
 8012f22:	aa1b      	add	r2, sp, #108	; 0x6c
 8012f24:	1a9b      	subs	r3, r3, r2
 8012f26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012f28:	9313      	str	r3, [sp, #76]	; 0x4c
 8012f2a:	2a01      	cmp	r2, #1
 8012f2c:	4413      	add	r3, r2
 8012f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f30:	f340 80ba 	ble.w	80130a8 <_svfprintf_r+0x15d8>
 8012f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f36:	2200      	movs	r2, #0
 8012f38:	3301      	adds	r3, #1
 8012f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012f3c:	920d      	str	r2, [sp, #52]	; 0x34
 8012f3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f42:	e6fb      	b.n	8012d3c <_svfprintf_r+0x126c>
 8012f44:	aa1f      	add	r2, sp, #124	; 0x7c
 8012f46:	9904      	ldr	r1, [sp, #16]
 8012f48:	9806      	ldr	r0, [sp, #24]
 8012f4a:	f002 f871 	bl	8015030 <__ssprint_r>
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	f47e aeb5 	bne.w	8011cbe <_svfprintf_r+0x1ee>
 8012f54:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8012f56:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012f5a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012f5e:	e622      	b.n	8012ba6 <_svfprintf_r+0x10d6>
 8012f60:	46a2      	mov	sl, r4
 8012f62:	2500      	movs	r5, #0
 8012f64:	f7fe be0d 	b.w	8011b82 <_svfprintf_r+0xb2>
 8012f68:	aa1d      	add	r2, sp, #116	; 0x74
 8012f6a:	ab1a      	add	r3, sp, #104	; 0x68
 8012f6c:	9201      	str	r2, [sp, #4]
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	465a      	mov	r2, fp
 8012f72:	ab19      	add	r3, sp, #100	; 0x64
 8012f74:	2103      	movs	r1, #3
 8012f76:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8012f7a:	9806      	ldr	r0, [sp, #24]
 8012f7c:	f000 fa50 	bl	8013420 <_dtoa_r>
 8012f80:	465d      	mov	r5, fp
 8012f82:	4606      	mov	r6, r0
 8012f84:	eb00 040b 	add.w	r4, r0, fp
 8012f88:	7833      	ldrb	r3, [r6, #0]
 8012f8a:	2b30      	cmp	r3, #48	; 0x30
 8012f8c:	d066      	beq.n	801305c <_svfprintf_r+0x158c>
 8012f8e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8012f90:	442c      	add	r4, r5
 8012f92:	e6a3      	b.n	8012cdc <_svfprintf_r+0x120c>
 8012f94:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8012f98:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8012f9c:	9114      	str	r1, [sp, #80]	; 0x50
 8012f9e:	9315      	str	r3, [sp, #84]	; 0x54
 8012fa0:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8012fa4:	e678      	b.n	8012c98 <_svfprintf_r+0x11c8>
 8012fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	bfd8      	it	le
 8012fac:	f1c3 0502 	rsble	r5, r3, #2
 8012fb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012fb2:	bfc8      	it	gt
 8012fb4:	2501      	movgt	r5, #1
 8012fb6:	18eb      	adds	r3, r5, r3
 8012fb8:	2267      	movs	r2, #103	; 0x67
 8012fba:	9309      	str	r3, [sp, #36]	; 0x24
 8012fbc:	920c      	str	r2, [sp, #48]	; 0x30
 8012fbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012fc2:	e6bb      	b.n	8012d3c <_svfprintf_r+0x126c>
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	dd66      	ble.n	8013096 <_svfprintf_r+0x15c6>
 8012fc8:	f1bb 0f00 	cmp.w	fp, #0
 8012fcc:	d15b      	bne.n	8013086 <_svfprintf_r+0x15b6>
 8012fce:	9a03      	ldr	r2, [sp, #12]
 8012fd0:	07d4      	lsls	r4, r2, #31
 8012fd2:	d458      	bmi.n	8013086 <_svfprintf_r+0x15b6>
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8012fd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012fdc:	e6ae      	b.n	8012d3c <_svfprintf_r+0x126c>
 8012fde:	aa1d      	add	r2, sp, #116	; 0x74
 8012fe0:	ab1a      	add	r3, sp, #104	; 0x68
 8012fe2:	9201      	str	r2, [sp, #4]
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	465a      	mov	r2, fp
 8012fe8:	ab19      	add	r3, sp, #100	; 0x64
 8012fea:	2103      	movs	r1, #3
 8012fec:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8012ff0:	9806      	ldr	r0, [sp, #24]
 8012ff2:	f000 fa15 	bl	8013420 <_dtoa_r>
 8012ff6:	465d      	mov	r5, fp
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ffc:	2b46      	cmp	r3, #70	; 0x46
 8012ffe:	eb06 0405 	add.w	r4, r6, r5
 8013002:	d0c1      	beq.n	8012f88 <_svfprintf_r+0x14b8>
 8013004:	e66a      	b.n	8012cdc <_svfprintf_r+0x120c>
 8013006:	f10d 047b 	add.w	r4, sp, #123	; 0x7b
 801300a:	4620      	mov	r0, r4
 801300c:	4a56      	ldr	r2, [pc, #344]	; (8013168 <_svfprintf_r+0x1698>)
 801300e:	fb82 2103 	smull	r2, r1, r2, r3
 8013012:	17da      	asrs	r2, r3, #31
 8013014:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8013018:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801301c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8013020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013024:	2a09      	cmp	r2, #9
 8013026:	4613      	mov	r3, r2
 8013028:	f800 1d01 	strb.w	r1, [r0, #-1]!
 801302c:	dcee      	bgt.n	801300c <_svfprintf_r+0x153c>
 801302e:	4602      	mov	r2, r0
 8013030:	3330      	adds	r3, #48	; 0x30
 8013032:	b2db      	uxtb	r3, r3
 8013034:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8013038:	4294      	cmp	r4, r2
 801303a:	d962      	bls.n	8013102 <_svfprintf_r+0x1632>
 801303c:	f10d 016e 	add.w	r1, sp, #110	; 0x6e
 8013040:	4602      	mov	r2, r0
 8013042:	e001      	b.n	8013048 <_svfprintf_r+0x1578>
 8013044:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013048:	f801 3b01 	strb.w	r3, [r1], #1
 801304c:	4294      	cmp	r4, r2
 801304e:	d1f9      	bne.n	8013044 <_svfprintf_r+0x1574>
 8013050:	1c63      	adds	r3, r4, #1
 8013052:	1a1b      	subs	r3, r3, r0
 8013054:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8013058:	4413      	add	r3, r2
 801305a:	e762      	b.n	8012f22 <_svfprintf_r+0x1452>
 801305c:	2200      	movs	r2, #0
 801305e:	2300      	movs	r3, #0
 8013060:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8013064:	f7f5 feda 	bl	8008e1c <__aeabi_dcmpeq>
 8013068:	2800      	cmp	r0, #0
 801306a:	d190      	bne.n	8012f8e <_svfprintf_r+0x14be>
 801306c:	f1c5 0501 	rsb	r5, r5, #1
 8013070:	9519      	str	r5, [sp, #100]	; 0x64
 8013072:	442c      	add	r4, r5
 8013074:	e632      	b.n	8012cdc <_svfprintf_r+0x120c>
 8013076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013078:	2267      	movs	r2, #103	; 0x67
 801307a:	3301      	adds	r3, #1
 801307c:	9309      	str	r3, [sp, #36]	; 0x24
 801307e:	920c      	str	r2, [sp, #48]	; 0x30
 8013080:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013084:	e65a      	b.n	8012d3c <_svfprintf_r+0x126c>
 8013086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013088:	f10b 0501 	add.w	r5, fp, #1
 801308c:	442b      	add	r3, r5
 801308e:	9309      	str	r3, [sp, #36]	; 0x24
 8013090:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013094:	e652      	b.n	8012d3c <_svfprintf_r+0x126c>
 8013096:	f1bb 0f00 	cmp.w	fp, #0
 801309a:	d12c      	bne.n	80130f6 <_svfprintf_r+0x1626>
 801309c:	9b03      	ldr	r3, [sp, #12]
 801309e:	07d8      	lsls	r0, r3, #31
 80130a0:	d429      	bmi.n	80130f6 <_svfprintf_r+0x1626>
 80130a2:	2301      	movs	r3, #1
 80130a4:	9309      	str	r3, [sp, #36]	; 0x24
 80130a6:	e649      	b.n	8012d3c <_svfprintf_r+0x126c>
 80130a8:	9b03      	ldr	r3, [sp, #12]
 80130aa:	f013 0301 	ands.w	r3, r3, #1
 80130ae:	f47f af41 	bne.w	8012f34 <_svfprintf_r+0x1464>
 80130b2:	930d      	str	r3, [sp, #52]	; 0x34
 80130b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80130ba:	e63f      	b.n	8012d3c <_svfprintf_r+0x126c>
 80130bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80130be:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80130c2:	6805      	ldr	r5, [r0, #0]
 80130c4:	3004      	adds	r0, #4
 80130c6:	2d00      	cmp	r5, #0
 80130c8:	900a      	str	r0, [sp, #40]	; 0x28
 80130ca:	46a2      	mov	sl, r4
 80130cc:	f6be ad57 	bge.w	8011b7e <_svfprintf_r+0xae>
 80130d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80130d4:	f7fe bd53 	b.w	8011b7e <_svfprintf_r+0xae>
 80130d8:	9b03      	ldr	r3, [sp, #12]
 80130da:	07db      	lsls	r3, r3, #31
 80130dc:	465f      	mov	r7, fp
 80130de:	d505      	bpl.n	80130ec <_svfprintf_r+0x161c>
 80130e0:	ae3c      	add	r6, sp, #240	; 0xf0
 80130e2:	2330      	movs	r3, #48	; 0x30
 80130e4:	f806 3d41 	strb.w	r3, [r6, #-65]!
 80130e8:	f7fe beb4 	b.w	8011e54 <_svfprintf_r+0x384>
 80130ec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80130f0:	ae2c      	add	r6, sp, #176	; 0xb0
 80130f2:	f7fe beb2 	b.w	8011e5a <_svfprintf_r+0x38a>
 80130f6:	f10b 0302 	add.w	r3, fp, #2
 80130fa:	9309      	str	r3, [sp, #36]	; 0x24
 80130fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013100:	e61c      	b.n	8012d3c <_svfprintf_r+0x126c>
 8013102:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8013106:	e70c      	b.n	8012f22 <_svfprintf_r+0x1452>
 8013108:	9a06      	ldr	r2, [sp, #24]
 801310a:	230c      	movs	r3, #12
 801310c:	6013      	str	r3, [r2, #0]
 801310e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013112:	f7fe bddd 	b.w	8011cd0 <_svfprintf_r+0x200>
 8013116:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 801311a:	f7ff b95a 	b.w	80123d2 <_svfprintf_r+0x902>
 801311e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8013122:	f7ff b862 	b.w	80121ea <_svfprintf_r+0x71a>
 8013126:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 801312a:	f7ff b830 	b.w	801218e <_svfprintf_r+0x6be>
 801312e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8013132:	f7fe bff9 	b.w	8012128 <_svfprintf_r+0x658>
 8013136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013138:	e6dc      	b.n	8012ef4 <_svfprintf_r+0x1424>
 801313a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 801313e:	f7fe bdcf 	b.w	8011ce0 <_svfprintf_r+0x210>
 8013142:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8013146:	f7fe bfad 	b.w	80120a4 <_svfprintf_r+0x5d4>
 801314a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 801314e:	f7fe be41 	b.w	8011dd4 <_svfprintf_r+0x304>
 8013152:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8013156:	f7ff b91b 	b.w	8012390 <_svfprintf_r+0x8c0>
 801315a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 801315e:	f7ff b8f9 	b.w	8012354 <_svfprintf_r+0x884>
 8013162:	bf00      	nop
 8013164:	08015cd0 	.word	0x08015cd0
 8013168:	66666667 	.word	0x66666667
 801316c:	00000000 	.word	0x00000000

08013170 <__swbuf_r>:
 8013170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013172:	460e      	mov	r6, r1
 8013174:	4614      	mov	r4, r2
 8013176:	4607      	mov	r7, r0
 8013178:	b110      	cbz	r0, 8013180 <__swbuf_r+0x10>
 801317a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801317c:	2b00      	cmp	r3, #0
 801317e:	d048      	beq.n	8013212 <__swbuf_r+0xa2>
 8013180:	89a2      	ldrh	r2, [r4, #12]
 8013182:	69a3      	ldr	r3, [r4, #24]
 8013184:	60a3      	str	r3, [r4, #8]
 8013186:	b291      	uxth	r1, r2
 8013188:	0708      	lsls	r0, r1, #28
 801318a:	d538      	bpl.n	80131fe <__swbuf_r+0x8e>
 801318c:	6923      	ldr	r3, [r4, #16]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d035      	beq.n	80131fe <__swbuf_r+0x8e>
 8013192:	0489      	lsls	r1, r1, #18
 8013194:	b2f5      	uxtb	r5, r6
 8013196:	d515      	bpl.n	80131c4 <__swbuf_r+0x54>
 8013198:	6822      	ldr	r2, [r4, #0]
 801319a:	6961      	ldr	r1, [r4, #20]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	428b      	cmp	r3, r1
 80131a0:	da1c      	bge.n	80131dc <__swbuf_r+0x6c>
 80131a2:	3301      	adds	r3, #1
 80131a4:	68a1      	ldr	r1, [r4, #8]
 80131a6:	1c50      	adds	r0, r2, #1
 80131a8:	3901      	subs	r1, #1
 80131aa:	60a1      	str	r1, [r4, #8]
 80131ac:	6020      	str	r0, [r4, #0]
 80131ae:	7016      	strb	r6, [r2, #0]
 80131b0:	6962      	ldr	r2, [r4, #20]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d01a      	beq.n	80131ec <__swbuf_r+0x7c>
 80131b6:	89a3      	ldrh	r3, [r4, #12]
 80131b8:	07db      	lsls	r3, r3, #31
 80131ba:	d501      	bpl.n	80131c0 <__swbuf_r+0x50>
 80131bc:	2d0a      	cmp	r5, #10
 80131be:	d015      	beq.n	80131ec <__swbuf_r+0x7c>
 80131c0:	4628      	mov	r0, r5
 80131c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80131c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80131ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80131ce:	81a2      	strh	r2, [r4, #12]
 80131d0:	6822      	ldr	r2, [r4, #0]
 80131d2:	6661      	str	r1, [r4, #100]	; 0x64
 80131d4:	6961      	ldr	r1, [r4, #20]
 80131d6:	1ad3      	subs	r3, r2, r3
 80131d8:	428b      	cmp	r3, r1
 80131da:	dbe2      	blt.n	80131a2 <__swbuf_r+0x32>
 80131dc:	4621      	mov	r1, r4
 80131de:	4638      	mov	r0, r7
 80131e0:	f001 f8e6 	bl	80143b0 <_fflush_r>
 80131e4:	b940      	cbnz	r0, 80131f8 <__swbuf_r+0x88>
 80131e6:	6822      	ldr	r2, [r4, #0]
 80131e8:	2301      	movs	r3, #1
 80131ea:	e7db      	b.n	80131a4 <__swbuf_r+0x34>
 80131ec:	4621      	mov	r1, r4
 80131ee:	4638      	mov	r0, r7
 80131f0:	f001 f8de 	bl	80143b0 <_fflush_r>
 80131f4:	2800      	cmp	r0, #0
 80131f6:	d0e3      	beq.n	80131c0 <__swbuf_r+0x50>
 80131f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131fe:	4621      	mov	r1, r4
 8013200:	4638      	mov	r0, r7
 8013202:	f000 f80d 	bl	8013220 <__swsetup_r>
 8013206:	2800      	cmp	r0, #0
 8013208:	d1f6      	bne.n	80131f8 <__swbuf_r+0x88>
 801320a:	89a2      	ldrh	r2, [r4, #12]
 801320c:	6923      	ldr	r3, [r4, #16]
 801320e:	b291      	uxth	r1, r2
 8013210:	e7bf      	b.n	8013192 <__swbuf_r+0x22>
 8013212:	f001 f965 	bl	80144e0 <__sinit>
 8013216:	e7b3      	b.n	8013180 <__swbuf_r+0x10>
	...

08013220 <__swsetup_r>:
 8013220:	b538      	push	{r3, r4, r5, lr}
 8013222:	4b2f      	ldr	r3, [pc, #188]	; (80132e0 <__swsetup_r+0xc0>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	4605      	mov	r5, r0
 8013228:	460c      	mov	r4, r1
 801322a:	b113      	cbz	r3, 8013232 <__swsetup_r+0x12>
 801322c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801322e:	2a00      	cmp	r2, #0
 8013230:	d036      	beq.n	80132a0 <__swsetup_r+0x80>
 8013232:	89a2      	ldrh	r2, [r4, #12]
 8013234:	b293      	uxth	r3, r2
 8013236:	0718      	lsls	r0, r3, #28
 8013238:	d50c      	bpl.n	8013254 <__swsetup_r+0x34>
 801323a:	6920      	ldr	r0, [r4, #16]
 801323c:	b1a8      	cbz	r0, 801326a <__swsetup_r+0x4a>
 801323e:	f013 0201 	ands.w	r2, r3, #1
 8013242:	d01e      	beq.n	8013282 <__swsetup_r+0x62>
 8013244:	6963      	ldr	r3, [r4, #20]
 8013246:	2200      	movs	r2, #0
 8013248:	425b      	negs	r3, r3
 801324a:	61a3      	str	r3, [r4, #24]
 801324c:	60a2      	str	r2, [r4, #8]
 801324e:	b1f0      	cbz	r0, 801328e <__swsetup_r+0x6e>
 8013250:	2000      	movs	r0, #0
 8013252:	bd38      	pop	{r3, r4, r5, pc}
 8013254:	06d9      	lsls	r1, r3, #27
 8013256:	d53b      	bpl.n	80132d0 <__swsetup_r+0xb0>
 8013258:	0758      	lsls	r0, r3, #29
 801325a:	d425      	bmi.n	80132a8 <__swsetup_r+0x88>
 801325c:	6920      	ldr	r0, [r4, #16]
 801325e:	f042 0308 	orr.w	r3, r2, #8
 8013262:	81a3      	strh	r3, [r4, #12]
 8013264:	b29b      	uxth	r3, r3
 8013266:	2800      	cmp	r0, #0
 8013268:	d1e9      	bne.n	801323e <__swsetup_r+0x1e>
 801326a:	f403 7220 	and.w	r2, r3, #640	; 0x280
 801326e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8013272:	d0e4      	beq.n	801323e <__swsetup_r+0x1e>
 8013274:	4628      	mov	r0, r5
 8013276:	4621      	mov	r1, r4
 8013278:	f001 faba 	bl	80147f0 <__smakebuf_r>
 801327c:	89a3      	ldrh	r3, [r4, #12]
 801327e:	6920      	ldr	r0, [r4, #16]
 8013280:	e7dd      	b.n	801323e <__swsetup_r+0x1e>
 8013282:	0799      	lsls	r1, r3, #30
 8013284:	bf58      	it	pl
 8013286:	6962      	ldrpl	r2, [r4, #20]
 8013288:	60a2      	str	r2, [r4, #8]
 801328a:	2800      	cmp	r0, #0
 801328c:	d1e0      	bne.n	8013250 <__swsetup_r+0x30>
 801328e:	89a3      	ldrh	r3, [r4, #12]
 8013290:	061a      	lsls	r2, r3, #24
 8013292:	d5de      	bpl.n	8013252 <__swsetup_r+0x32>
 8013294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013298:	81a3      	strh	r3, [r4, #12]
 801329a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801329e:	bd38      	pop	{r3, r4, r5, pc}
 80132a0:	4618      	mov	r0, r3
 80132a2:	f001 f91d 	bl	80144e0 <__sinit>
 80132a6:	e7c4      	b.n	8013232 <__swsetup_r+0x12>
 80132a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80132aa:	b149      	cbz	r1, 80132c0 <__swsetup_r+0xa0>
 80132ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80132b0:	4299      	cmp	r1, r3
 80132b2:	d003      	beq.n	80132bc <__swsetup_r+0x9c>
 80132b4:	4628      	mov	r0, r5
 80132b6:	f001 f97b 	bl	80145b0 <_free_r>
 80132ba:	89a2      	ldrh	r2, [r4, #12]
 80132bc:	2300      	movs	r3, #0
 80132be:	6323      	str	r3, [r4, #48]	; 0x30
 80132c0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80132c4:	2300      	movs	r3, #0
 80132c6:	6920      	ldr	r0, [r4, #16]
 80132c8:	6063      	str	r3, [r4, #4]
 80132ca:	b292      	uxth	r2, r2
 80132cc:	6020      	str	r0, [r4, #0]
 80132ce:	e7c6      	b.n	801325e <__swsetup_r+0x3e>
 80132d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132d4:	2309      	movs	r3, #9
 80132d6:	602b      	str	r3, [r5, #0]
 80132d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132dc:	81a2      	strh	r2, [r4, #12]
 80132de:	bd38      	pop	{r3, r4, r5, pc}
 80132e0:	20000c40 	.word	0x20000c40
	...

080132f0 <quorem>:
 80132f0:	6902      	ldr	r2, [r0, #16]
 80132f2:	690b      	ldr	r3, [r1, #16]
 80132f4:	4293      	cmp	r3, r2
 80132f6:	f300 808d 	bgt.w	8013414 <quorem+0x124>
 80132fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8013302:	f101 0714 	add.w	r7, r1, #20
 8013306:	f100 0b14 	add.w	fp, r0, #20
 801330a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801330e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8013312:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8013316:	b083      	sub	sp, #12
 8013318:	3201      	adds	r2, #1
 801331a:	fbb3 f9f2 	udiv	r9, r3, r2
 801331e:	eb0b 0304 	add.w	r3, fp, r4
 8013322:	9400      	str	r4, [sp, #0]
 8013324:	eb07 0a04 	add.w	sl, r7, r4
 8013328:	9301      	str	r3, [sp, #4]
 801332a:	f1b9 0f00 	cmp.w	r9, #0
 801332e:	d039      	beq.n	80133a4 <quorem+0xb4>
 8013330:	2500      	movs	r5, #0
 8013332:	46bc      	mov	ip, r7
 8013334:	46de      	mov	lr, fp
 8013336:	462b      	mov	r3, r5
 8013338:	f85c 6b04 	ldr.w	r6, [ip], #4
 801333c:	f8de 2000 	ldr.w	r2, [lr]
 8013340:	b2b4      	uxth	r4, r6
 8013342:	fb09 5504 	mla	r5, r9, r4, r5
 8013346:	0c36      	lsrs	r6, r6, #16
 8013348:	0c2c      	lsrs	r4, r5, #16
 801334a:	fb09 4406 	mla	r4, r9, r6, r4
 801334e:	b2ad      	uxth	r5, r5
 8013350:	1b5b      	subs	r3, r3, r5
 8013352:	b2a6      	uxth	r6, r4
 8013354:	fa13 f382 	uxtah	r3, r3, r2
 8013358:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 801335c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8013360:	b29b      	uxth	r3, r3
 8013362:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8013366:	45e2      	cmp	sl, ip
 8013368:	f84e 3b04 	str.w	r3, [lr], #4
 801336c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8013370:	ea4f 4326 	mov.w	r3, r6, asr #16
 8013374:	d2e0      	bcs.n	8013338 <quorem+0x48>
 8013376:	9b00      	ldr	r3, [sp, #0]
 8013378:	f85b 3003 	ldr.w	r3, [fp, r3]
 801337c:	b993      	cbnz	r3, 80133a4 <quorem+0xb4>
 801337e:	9c01      	ldr	r4, [sp, #4]
 8013380:	1f23      	subs	r3, r4, #4
 8013382:	459b      	cmp	fp, r3
 8013384:	d20c      	bcs.n	80133a0 <quorem+0xb0>
 8013386:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801338a:	b94b      	cbnz	r3, 80133a0 <quorem+0xb0>
 801338c:	f1a4 0308 	sub.w	r3, r4, #8
 8013390:	e002      	b.n	8013398 <quorem+0xa8>
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	3b04      	subs	r3, #4
 8013396:	b91a      	cbnz	r2, 80133a0 <quorem+0xb0>
 8013398:	459b      	cmp	fp, r3
 801339a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801339e:	d3f8      	bcc.n	8013392 <quorem+0xa2>
 80133a0:	f8c0 8010 	str.w	r8, [r0, #16]
 80133a4:	4604      	mov	r4, r0
 80133a6:	f001 fcab 	bl	8014d00 <__mcmp>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	db2e      	blt.n	801340c <quorem+0x11c>
 80133ae:	f109 0901 	add.w	r9, r9, #1
 80133b2:	465d      	mov	r5, fp
 80133b4:	2300      	movs	r3, #0
 80133b6:	f857 1b04 	ldr.w	r1, [r7], #4
 80133ba:	6828      	ldr	r0, [r5, #0]
 80133bc:	b28a      	uxth	r2, r1
 80133be:	1a9a      	subs	r2, r3, r2
 80133c0:	0c09      	lsrs	r1, r1, #16
 80133c2:	fa12 f280 	uxtah	r2, r2, r0
 80133c6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80133ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80133ce:	b291      	uxth	r1, r2
 80133d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80133d4:	45ba      	cmp	sl, r7
 80133d6:	f845 1b04 	str.w	r1, [r5], #4
 80133da:	ea4f 4323 	mov.w	r3, r3, asr #16
 80133de:	d2ea      	bcs.n	80133b6 <quorem+0xc6>
 80133e0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80133e4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80133e8:	b982      	cbnz	r2, 801340c <quorem+0x11c>
 80133ea:	1f1a      	subs	r2, r3, #4
 80133ec:	4593      	cmp	fp, r2
 80133ee:	d20b      	bcs.n	8013408 <quorem+0x118>
 80133f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80133f4:	b942      	cbnz	r2, 8013408 <quorem+0x118>
 80133f6:	3b08      	subs	r3, #8
 80133f8:	e002      	b.n	8013400 <quorem+0x110>
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	3b04      	subs	r3, #4
 80133fe:	b91a      	cbnz	r2, 8013408 <quorem+0x118>
 8013400:	459b      	cmp	fp, r3
 8013402:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013406:	d3f8      	bcc.n	80133fa <quorem+0x10a>
 8013408:	f8c4 8010 	str.w	r8, [r4, #16]
 801340c:	4648      	mov	r0, r9
 801340e:	b003      	add	sp, #12
 8013410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013414:	2000      	movs	r0, #0
 8013416:	4770      	bx	lr
	...

08013420 <_dtoa_r>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	ec57 6b10 	vmov	r6, r7, d0
 8013428:	b09b      	sub	sp, #108	; 0x6c
 801342a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801342c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801342e:	9100      	str	r1, [sp, #0]
 8013430:	4681      	mov	r9, r0
 8013432:	9205      	str	r2, [sp, #20]
 8013434:	9303      	str	r3, [sp, #12]
 8013436:	ee10 aa10 	vmov	sl, s0
 801343a:	46bb      	mov	fp, r7
 801343c:	b154      	cbz	r4, 8013454 <_dtoa_r+0x34>
 801343e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013440:	6062      	str	r2, [r4, #4]
 8013442:	2301      	movs	r3, #1
 8013444:	4093      	lsls	r3, r2
 8013446:	60a3      	str	r3, [r4, #8]
 8013448:	4621      	mov	r1, r4
 801344a:	f001 fa69 	bl	8014920 <_Bfree>
 801344e:	2300      	movs	r3, #0
 8013450:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8013454:	f1bb 0f00 	cmp.w	fp, #0
 8013458:	465c      	mov	r4, fp
 801345a:	db34      	blt.n	80134c6 <_dtoa_r+0xa6>
 801345c:	2300      	movs	r3, #0
 801345e:	602b      	str	r3, [r5, #0]
 8013460:	4ba1      	ldr	r3, [pc, #644]	; (80136e8 <_dtoa_r+0x2c8>)
 8013462:	461a      	mov	r2, r3
 8013464:	4023      	ands	r3, r4
 8013466:	4293      	cmp	r3, r2
 8013468:	d016      	beq.n	8013498 <_dtoa_r+0x78>
 801346a:	2200      	movs	r2, #0
 801346c:	2300      	movs	r3, #0
 801346e:	4650      	mov	r0, sl
 8013470:	4659      	mov	r1, fp
 8013472:	f7f5 fcd3 	bl	8008e1c <__aeabi_dcmpeq>
 8013476:	4656      	mov	r6, sl
 8013478:	465f      	mov	r7, fp
 801347a:	4680      	mov	r8, r0
 801347c:	b348      	cbz	r0, 80134d2 <_dtoa_r+0xb2>
 801347e:	9a03      	ldr	r2, [sp, #12]
 8013480:	2301      	movs	r3, #1
 8013482:	6013      	str	r3, [r2, #0]
 8013484:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013486:	2b00      	cmp	r3, #0
 8013488:	f000 80be 	beq.w	8013608 <_dtoa_r+0x1e8>
 801348c:	4897      	ldr	r0, [pc, #604]	; (80136ec <_dtoa_r+0x2cc>)
 801348e:	6018      	str	r0, [r3, #0]
 8013490:	3801      	subs	r0, #1
 8013492:	b01b      	add	sp, #108	; 0x6c
 8013494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013498:	9a03      	ldr	r2, [sp, #12]
 801349a:	f242 730f 	movw	r3, #9999	; 0x270f
 801349e:	6013      	str	r3, [r2, #0]
 80134a0:	f1ba 0f00 	cmp.w	sl, #0
 80134a4:	f000 809a 	beq.w	80135dc <_dtoa_r+0x1bc>
 80134a8:	4891      	ldr	r0, [pc, #580]	; (80136f0 <_dtoa_r+0x2d0>)
 80134aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d0f0      	beq.n	8013492 <_dtoa_r+0x72>
 80134b0:	78c3      	ldrb	r3, [r0, #3]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	f000 80aa 	beq.w	801360c <_dtoa_r+0x1ec>
 80134b8:	f100 0308 	add.w	r3, r0, #8
 80134bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	b01b      	add	sp, #108	; 0x6c
 80134c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134c6:	2301      	movs	r3, #1
 80134c8:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80134cc:	602b      	str	r3, [r5, #0]
 80134ce:	46a3      	mov	fp, r4
 80134d0:	e7c6      	b.n	8013460 <_dtoa_r+0x40>
 80134d2:	aa18      	add	r2, sp, #96	; 0x60
 80134d4:	a919      	add	r1, sp, #100	; 0x64
 80134d6:	ec47 6b10 	vmov	d0, r6, r7
 80134da:	4648      	mov	r0, r9
 80134dc:	f001 fcc8 	bl	8014e70 <__d2b>
 80134e0:	0d25      	lsrs	r5, r4, #20
 80134e2:	900a      	str	r0, [sp, #40]	; 0x28
 80134e4:	f040 8083 	bne.w	80135ee <_dtoa_r+0x1ce>
 80134e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80134ea:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80134ec:	442e      	add	r6, r5
 80134ee:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80134f2:	2b20      	cmp	r3, #32
 80134f4:	f340 8288 	ble.w	8013a08 <_dtoa_r+0x5e8>
 80134f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80134fc:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8013500:	409c      	lsls	r4, r3
 8013502:	fa2a f000 	lsr.w	r0, sl, r0
 8013506:	4320      	orrs	r0, r4
 8013508:	f7f5 f9a4 	bl	8008854 <__aeabi_ui2d>
 801350c:	2301      	movs	r3, #1
 801350e:	1e74      	subs	r4, r6, #1
 8013510:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8013514:	930f      	str	r3, [sp, #60]	; 0x3c
 8013516:	2200      	movs	r2, #0
 8013518:	4b76      	ldr	r3, [pc, #472]	; (80136f4 <_dtoa_r+0x2d4>)
 801351a:	f7f5 f85d 	bl	80085d8 <__aeabi_dsub>
 801351e:	a36c      	add	r3, pc, #432	; (adr r3, 80136d0 <_dtoa_r+0x2b0>)
 8013520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013524:	f7f5 fa0c 	bl	8008940 <__aeabi_dmul>
 8013528:	a36b      	add	r3, pc, #428	; (adr r3, 80136d8 <_dtoa_r+0x2b8>)
 801352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352e:	f7f5 f855 	bl	80085dc <__adddf3>
 8013532:	4606      	mov	r6, r0
 8013534:	4620      	mov	r0, r4
 8013536:	460f      	mov	r7, r1
 8013538:	f7f5 f99c 	bl	8008874 <__aeabi_i2d>
 801353c:	a368      	add	r3, pc, #416	; (adr r3, 80136e0 <_dtoa_r+0x2c0>)
 801353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013542:	f7f5 f9fd 	bl	8008940 <__aeabi_dmul>
 8013546:	4602      	mov	r2, r0
 8013548:	460b      	mov	r3, r1
 801354a:	4630      	mov	r0, r6
 801354c:	4639      	mov	r1, r7
 801354e:	f7f5 f845 	bl	80085dc <__adddf3>
 8013552:	4606      	mov	r6, r0
 8013554:	460f      	mov	r7, r1
 8013556:	f7f5 fc93 	bl	8008e80 <__aeabi_d2iz>
 801355a:	2200      	movs	r2, #0
 801355c:	9004      	str	r0, [sp, #16]
 801355e:	2300      	movs	r3, #0
 8013560:	4630      	mov	r0, r6
 8013562:	4639      	mov	r1, r7
 8013564:	f7f5 fc64 	bl	8008e30 <__aeabi_dcmplt>
 8013568:	2800      	cmp	r0, #0
 801356a:	f040 8228 	bne.w	80139be <_dtoa_r+0x59e>
 801356e:	9e04      	ldr	r6, [sp, #16]
 8013570:	2e16      	cmp	r6, #22
 8013572:	f200 8221 	bhi.w	80139b8 <_dtoa_r+0x598>
 8013576:	4b60      	ldr	r3, [pc, #384]	; (80136f8 <_dtoa_r+0x2d8>)
 8013578:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801357c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013580:	4652      	mov	r2, sl
 8013582:	465b      	mov	r3, fp
 8013584:	f7f5 fc72 	bl	8008e6c <__aeabi_dcmpgt>
 8013588:	2800      	cmp	r0, #0
 801358a:	f000 8242 	beq.w	8013a12 <_dtoa_r+0x5f2>
 801358e:	1e73      	subs	r3, r6, #1
 8013590:	9304      	str	r3, [sp, #16]
 8013592:	2300      	movs	r3, #0
 8013594:	930d      	str	r3, [sp, #52]	; 0x34
 8013596:	1b2d      	subs	r5, r5, r4
 8013598:	f1b5 0801 	subs.w	r8, r5, #1
 801359c:	f100 822a 	bmi.w	80139f4 <_dtoa_r+0x5d4>
 80135a0:	2300      	movs	r3, #0
 80135a2:	9307      	str	r3, [sp, #28]
 80135a4:	9b04      	ldr	r3, [sp, #16]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	f2c0 821b 	blt.w	80139e2 <_dtoa_r+0x5c2>
 80135ac:	4498      	add	r8, r3
 80135ae:	930c      	str	r3, [sp, #48]	; 0x30
 80135b0:	2300      	movs	r3, #0
 80135b2:	9306      	str	r3, [sp, #24]
 80135b4:	9b00      	ldr	r3, [sp, #0]
 80135b6:	2b09      	cmp	r3, #9
 80135b8:	d82a      	bhi.n	8013610 <_dtoa_r+0x1f0>
 80135ba:	2b05      	cmp	r3, #5
 80135bc:	f340 8644 	ble.w	8014248 <_dtoa_r+0xe28>
 80135c0:	3b04      	subs	r3, #4
 80135c2:	9300      	str	r3, [sp, #0]
 80135c4:	2600      	movs	r6, #0
 80135c6:	9b00      	ldr	r3, [sp, #0]
 80135c8:	3b02      	subs	r3, #2
 80135ca:	2b03      	cmp	r3, #3
 80135cc:	f200 8623 	bhi.w	8014216 <_dtoa_r+0xdf6>
 80135d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80135d4:	0224032b 	.word	0x0224032b
 80135d8:	04500336 	.word	0x04500336
 80135dc:	4b44      	ldr	r3, [pc, #272]	; (80136f0 <_dtoa_r+0x2d0>)
 80135de:	4a47      	ldr	r2, [pc, #284]	; (80136fc <_dtoa_r+0x2dc>)
 80135e0:	f3c4 0013 	ubfx	r0, r4, #0, #20
 80135e4:	2800      	cmp	r0, #0
 80135e6:	bf14      	ite	ne
 80135e8:	4618      	movne	r0, r3
 80135ea:	4610      	moveq	r0, r2
 80135ec:	e75d      	b.n	80134aa <_dtoa_r+0x8a>
 80135ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135f2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80135f6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80135fa:	4650      	mov	r0, sl
 80135fc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8013600:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013604:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8013606:	e786      	b.n	8013516 <_dtoa_r+0xf6>
 8013608:	483d      	ldr	r0, [pc, #244]	; (8013700 <_dtoa_r+0x2e0>)
 801360a:	e742      	b.n	8013492 <_dtoa_r+0x72>
 801360c:	1cc3      	adds	r3, r0, #3
 801360e:	e755      	b.n	80134bc <_dtoa_r+0x9c>
 8013610:	2100      	movs	r1, #0
 8013612:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8013616:	4648      	mov	r0, r9
 8013618:	460c      	mov	r4, r1
 801361a:	9100      	str	r1, [sp, #0]
 801361c:	f001 f958 	bl	80148d0 <_Balloc>
 8013620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013624:	9308      	str	r3, [sp, #32]
 8013626:	930e      	str	r3, [sp, #56]	; 0x38
 8013628:	2301      	movs	r3, #1
 801362a:	9009      	str	r0, [sp, #36]	; 0x24
 801362c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8013630:	9405      	str	r4, [sp, #20]
 8013632:	930b      	str	r3, [sp, #44]	; 0x2c
 8013634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013636:	2b00      	cmp	r3, #0
 8013638:	f2c0 80d0 	blt.w	80137dc <_dtoa_r+0x3bc>
 801363c:	9a04      	ldr	r2, [sp, #16]
 801363e:	2a0e      	cmp	r2, #14
 8013640:	f300 80cc 	bgt.w	80137dc <_dtoa_r+0x3bc>
 8013644:	4b2c      	ldr	r3, [pc, #176]	; (80136f8 <_dtoa_r+0x2d8>)
 8013646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801364a:	ed93 7b00 	vldr	d7, [r3]
 801364e:	9b05      	ldr	r3, [sp, #20]
 8013650:	2b00      	cmp	r3, #0
 8013652:	ed8d 7b00 	vstr	d7, [sp]
 8013656:	f2c0 82fe 	blt.w	8013c56 <_dtoa_r+0x836>
 801365a:	4656      	mov	r6, sl
 801365c:	465f      	mov	r7, fp
 801365e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8013662:	4630      	mov	r0, r6
 8013664:	4652      	mov	r2, sl
 8013666:	465b      	mov	r3, fp
 8013668:	4639      	mov	r1, r7
 801366a:	f7f5 fa93 	bl	8008b94 <__aeabi_ddiv>
 801366e:	f7f5 fc07 	bl	8008e80 <__aeabi_d2iz>
 8013672:	4604      	mov	r4, r0
 8013674:	f7f5 f8fe 	bl	8008874 <__aeabi_i2d>
 8013678:	4652      	mov	r2, sl
 801367a:	465b      	mov	r3, fp
 801367c:	f7f5 f960 	bl	8008940 <__aeabi_dmul>
 8013680:	460b      	mov	r3, r1
 8013682:	4602      	mov	r2, r0
 8013684:	4639      	mov	r1, r7
 8013686:	4630      	mov	r0, r6
 8013688:	f7f4 ffa6 	bl	80085d8 <__aeabi_dsub>
 801368c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801368e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8013692:	702b      	strb	r3, [r5, #0]
 8013694:	9b08      	ldr	r3, [sp, #32]
 8013696:	2b01      	cmp	r3, #1
 8013698:	4606      	mov	r6, r0
 801369a:	460f      	mov	r7, r1
 801369c:	f105 0501 	add.w	r5, r5, #1
 80136a0:	d061      	beq.n	8013766 <_dtoa_r+0x346>
 80136a2:	2200      	movs	r2, #0
 80136a4:	4b17      	ldr	r3, [pc, #92]	; (8013704 <_dtoa_r+0x2e4>)
 80136a6:	f7f5 f94b 	bl	8008940 <__aeabi_dmul>
 80136aa:	2200      	movs	r2, #0
 80136ac:	2300      	movs	r3, #0
 80136ae:	4606      	mov	r6, r0
 80136b0:	460f      	mov	r7, r1
 80136b2:	f7f5 fbb3 	bl	8008e1c <__aeabi_dcmpeq>
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d17d      	bne.n	80137b6 <_dtoa_r+0x396>
 80136ba:	f8cd 9014 	str.w	r9, [sp, #20]
 80136be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80136c2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80136c6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80136ca:	e028      	b.n	801371e <_dtoa_r+0x2fe>
 80136cc:	f3af 8000 	nop.w
 80136d0:	636f4361 	.word	0x636f4361
 80136d4:	3fd287a7 	.word	0x3fd287a7
 80136d8:	8b60c8b3 	.word	0x8b60c8b3
 80136dc:	3fc68a28 	.word	0x3fc68a28
 80136e0:	509f79fb 	.word	0x509f79fb
 80136e4:	3fd34413 	.word	0x3fd34413
 80136e8:	7ff00000 	.word	0x7ff00000
 80136ec:	08016a59 	.word	0x08016a59
 80136f0:	08016a7c 	.word	0x08016a7c
 80136f4:	3ff80000 	.word	0x3ff80000
 80136f8:	08016aa0 	.word	0x08016aa0
 80136fc:	08016a70 	.word	0x08016a70
 8013700:	08016a58 	.word	0x08016a58
 8013704:	40240000 	.word	0x40240000
 8013708:	f7f5 f91a 	bl	8008940 <__aeabi_dmul>
 801370c:	2200      	movs	r2, #0
 801370e:	2300      	movs	r3, #0
 8013710:	4606      	mov	r6, r0
 8013712:	460f      	mov	r7, r1
 8013714:	f7f5 fb82 	bl	8008e1c <__aeabi_dcmpeq>
 8013718:	2800      	cmp	r0, #0
 801371a:	f040 83ae 	bne.w	8013e7a <_dtoa_r+0xa5a>
 801371e:	4642      	mov	r2, r8
 8013720:	464b      	mov	r3, r9
 8013722:	4630      	mov	r0, r6
 8013724:	4639      	mov	r1, r7
 8013726:	f7f5 fa35 	bl	8008b94 <__aeabi_ddiv>
 801372a:	f7f5 fba9 	bl	8008e80 <__aeabi_d2iz>
 801372e:	4604      	mov	r4, r0
 8013730:	f7f5 f8a0 	bl	8008874 <__aeabi_i2d>
 8013734:	4642      	mov	r2, r8
 8013736:	464b      	mov	r3, r9
 8013738:	f7f5 f902 	bl	8008940 <__aeabi_dmul>
 801373c:	4602      	mov	r2, r0
 801373e:	460b      	mov	r3, r1
 8013740:	4630      	mov	r0, r6
 8013742:	4639      	mov	r1, r7
 8013744:	f7f4 ff48 	bl	80085d8 <__aeabi_dsub>
 8013748:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801374c:	f805 eb01 	strb.w	lr, [r5], #1
 8013750:	ebcb 0e05 	rsb	lr, fp, r5
 8013754:	45d6      	cmp	lr, sl
 8013756:	4606      	mov	r6, r0
 8013758:	460f      	mov	r7, r1
 801375a:	f04f 0200 	mov.w	r2, #0
 801375e:	4bae      	ldr	r3, [pc, #696]	; (8013a18 <_dtoa_r+0x5f8>)
 8013760:	d1d2      	bne.n	8013708 <_dtoa_r+0x2e8>
 8013762:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013766:	4632      	mov	r2, r6
 8013768:	463b      	mov	r3, r7
 801376a:	4630      	mov	r0, r6
 801376c:	4639      	mov	r1, r7
 801376e:	f7f4 ff35 	bl	80085dc <__adddf3>
 8013772:	4606      	mov	r6, r0
 8013774:	460f      	mov	r7, r1
 8013776:	4602      	mov	r2, r0
 8013778:	460b      	mov	r3, r1
 801377a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801377e:	f7f5 fb57 	bl	8008e30 <__aeabi_dcmplt>
 8013782:	b940      	cbnz	r0, 8013796 <_dtoa_r+0x376>
 8013784:	4632      	mov	r2, r6
 8013786:	463b      	mov	r3, r7
 8013788:	e9dd 0100 	ldrd	r0, r1, [sp]
 801378c:	f7f5 fb46 	bl	8008e1c <__aeabi_dcmpeq>
 8013790:	b188      	cbz	r0, 80137b6 <_dtoa_r+0x396>
 8013792:	07e3      	lsls	r3, r4, #31
 8013794:	d50f      	bpl.n	80137b6 <_dtoa_r+0x396>
 8013796:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 801379a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801379c:	1e6b      	subs	r3, r5, #1
 801379e:	e004      	b.n	80137aa <_dtoa_r+0x38a>
 80137a0:	429a      	cmp	r2, r3
 80137a2:	f000 83fc 	beq.w	8013f9e <_dtoa_r+0xb7e>
 80137a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137aa:	2c39      	cmp	r4, #57	; 0x39
 80137ac:	f103 0501 	add.w	r5, r3, #1
 80137b0:	d0f6      	beq.n	80137a0 <_dtoa_r+0x380>
 80137b2:	3401      	adds	r4, #1
 80137b4:	701c      	strb	r4, [r3, #0]
 80137b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80137b8:	4648      	mov	r0, r9
 80137ba:	f001 f8b1 	bl	8014920 <_Bfree>
 80137be:	2200      	movs	r2, #0
 80137c0:	9b04      	ldr	r3, [sp, #16]
 80137c2:	702a      	strb	r2, [r5, #0]
 80137c4:	9a03      	ldr	r2, [sp, #12]
 80137c6:	3301      	adds	r3, #1
 80137c8:	6013      	str	r3, [r2, #0]
 80137ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	f000 839b 	beq.w	8013f08 <_dtoa_r+0xae8>
 80137d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137d4:	601d      	str	r5, [r3, #0]
 80137d6:	b01b      	add	sp, #108	; 0x6c
 80137d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80137de:	2a00      	cmp	r2, #0
 80137e0:	f000 810e 	beq.w	8013a00 <_dtoa_r+0x5e0>
 80137e4:	9a00      	ldr	r2, [sp, #0]
 80137e6:	2a01      	cmp	r2, #1
 80137e8:	f340 8257 	ble.w	8013c9a <_dtoa_r+0x87a>
 80137ec:	9b08      	ldr	r3, [sp, #32]
 80137ee:	9a06      	ldr	r2, [sp, #24]
 80137f0:	1e5f      	subs	r7, r3, #1
 80137f2:	42ba      	cmp	r2, r7
 80137f4:	f2c0 838b 	blt.w	8013f0e <_dtoa_r+0xaee>
 80137f8:	1bd7      	subs	r7, r2, r7
 80137fa:	9b08      	ldr	r3, [sp, #32]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	f2c0 8480 	blt.w	8014102 <_dtoa_r+0xce2>
 8013802:	9d07      	ldr	r5, [sp, #28]
 8013804:	9b08      	ldr	r3, [sp, #32]
 8013806:	9a07      	ldr	r2, [sp, #28]
 8013808:	2101      	movs	r1, #1
 801380a:	441a      	add	r2, r3
 801380c:	4648      	mov	r0, r9
 801380e:	9207      	str	r2, [sp, #28]
 8013810:	4498      	add	r8, r3
 8013812:	f001 f925 	bl	8014a60 <__i2b>
 8013816:	4606      	mov	r6, r0
 8013818:	b165      	cbz	r5, 8013834 <_dtoa_r+0x414>
 801381a:	f1b8 0f00 	cmp.w	r8, #0
 801381e:	dd09      	ble.n	8013834 <_dtoa_r+0x414>
 8013820:	4545      	cmp	r5, r8
 8013822:	9a07      	ldr	r2, [sp, #28]
 8013824:	462b      	mov	r3, r5
 8013826:	bfa8      	it	ge
 8013828:	4643      	movge	r3, r8
 801382a:	1ad2      	subs	r2, r2, r3
 801382c:	9207      	str	r2, [sp, #28]
 801382e:	1aed      	subs	r5, r5, r3
 8013830:	ebc3 0808 	rsb	r8, r3, r8
 8013834:	9b06      	ldr	r3, [sp, #24]
 8013836:	2b00      	cmp	r3, #0
 8013838:	f340 82f5 	ble.w	8013e26 <_dtoa_r+0xa06>
 801383c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801383e:	2a00      	cmp	r2, #0
 8013840:	f000 8202 	beq.w	8013c48 <_dtoa_r+0x828>
 8013844:	2f00      	cmp	r7, #0
 8013846:	f000 81ff 	beq.w	8013c48 <_dtoa_r+0x828>
 801384a:	4631      	mov	r1, r6
 801384c:	463a      	mov	r2, r7
 801384e:	4648      	mov	r0, r9
 8013850:	f001 f9ae 	bl	8014bb0 <__pow5mult>
 8013854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013856:	4601      	mov	r1, r0
 8013858:	4606      	mov	r6, r0
 801385a:	4648      	mov	r0, r9
 801385c:	f001 f910 	bl	8014a80 <__multiply>
 8013860:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013862:	4604      	mov	r4, r0
 8013864:	4648      	mov	r0, r9
 8013866:	f001 f85b 	bl	8014920 <_Bfree>
 801386a:	9b06      	ldr	r3, [sp, #24]
 801386c:	1bdb      	subs	r3, r3, r7
 801386e:	9306      	str	r3, [sp, #24]
 8013870:	f040 81e9 	bne.w	8013c46 <_dtoa_r+0x826>
 8013874:	2101      	movs	r1, #1
 8013876:	4648      	mov	r0, r9
 8013878:	f001 f8f2 	bl	8014a60 <__i2b>
 801387c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801387e:	9006      	str	r0, [sp, #24]
 8013880:	2b00      	cmp	r3, #0
 8013882:	f000 8215 	beq.w	8013cb0 <_dtoa_r+0x890>
 8013886:	4601      	mov	r1, r0
 8013888:	461a      	mov	r2, r3
 801388a:	4648      	mov	r0, r9
 801388c:	f001 f990 	bl	8014bb0 <__pow5mult>
 8013890:	9b00      	ldr	r3, [sp, #0]
 8013892:	9006      	str	r0, [sp, #24]
 8013894:	2b01      	cmp	r3, #1
 8013896:	f340 82f3 	ble.w	8013e80 <_dtoa_r+0xa60>
 801389a:	2700      	movs	r7, #0
 801389c:	9a06      	ldr	r2, [sp, #24]
 801389e:	6913      	ldr	r3, [r2, #16]
 80138a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80138a4:	6918      	ldr	r0, [r3, #16]
 80138a6:	f001 f88b 	bl	80149c0 <__hi0bits>
 80138aa:	f1c0 0020 	rsb	r0, r0, #32
 80138ae:	4440      	add	r0, r8
 80138b0:	f010 001f 	ands.w	r0, r0, #31
 80138b4:	f000 81fa 	beq.w	8013cac <_dtoa_r+0x88c>
 80138b8:	f1c0 0320 	rsb	r3, r0, #32
 80138bc:	2b04      	cmp	r3, #4
 80138be:	f340 84bd 	ble.w	801423c <_dtoa_r+0xe1c>
 80138c2:	f1c0 001c 	rsb	r0, r0, #28
 80138c6:	9b07      	ldr	r3, [sp, #28]
 80138c8:	4403      	add	r3, r0
 80138ca:	9307      	str	r3, [sp, #28]
 80138cc:	4405      	add	r5, r0
 80138ce:	4480      	add	r8, r0
 80138d0:	9b07      	ldr	r3, [sp, #28]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	dd05      	ble.n	80138e2 <_dtoa_r+0x4c2>
 80138d6:	4621      	mov	r1, r4
 80138d8:	461a      	mov	r2, r3
 80138da:	4648      	mov	r0, r9
 80138dc:	f001 f9b8 	bl	8014c50 <__lshift>
 80138e0:	4604      	mov	r4, r0
 80138e2:	f1b8 0f00 	cmp.w	r8, #0
 80138e6:	dd05      	ble.n	80138f4 <_dtoa_r+0x4d4>
 80138e8:	4642      	mov	r2, r8
 80138ea:	9906      	ldr	r1, [sp, #24]
 80138ec:	4648      	mov	r0, r9
 80138ee:	f001 f9af 	bl	8014c50 <__lshift>
 80138f2:	9006      	str	r0, [sp, #24]
 80138f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f040 827a 	bne.w	8013df0 <_dtoa_r+0x9d0>
 80138fc:	9b08      	ldr	r3, [sp, #32]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f340 8293 	ble.w	8013e2a <_dtoa_r+0xa0a>
 8013904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013906:	2b00      	cmp	r3, #0
 8013908:	f040 81f4 	bne.w	8013cf4 <_dtoa_r+0x8d4>
 801390c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8013910:	9f08      	ldr	r7, [sp, #32]
 8013912:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013916:	465d      	mov	r5, fp
 8013918:	e002      	b.n	8013920 <_dtoa_r+0x500>
 801391a:	f001 f811 	bl	8014940 <__multadd>
 801391e:	4604      	mov	r4, r0
 8013920:	4641      	mov	r1, r8
 8013922:	4620      	mov	r0, r4
 8013924:	f7ff fce4 	bl	80132f0 <quorem>
 8013928:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801392c:	f805 ab01 	strb.w	sl, [r5], #1
 8013930:	ebcb 0305 	rsb	r3, fp, r5
 8013934:	42bb      	cmp	r3, r7
 8013936:	f04f 020a 	mov.w	r2, #10
 801393a:	f04f 0300 	mov.w	r3, #0
 801393e:	4621      	mov	r1, r4
 8013940:	4648      	mov	r0, r9
 8013942:	dbea      	blt.n	801391a <_dtoa_r+0x4fa>
 8013944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013946:	9a08      	ldr	r2, [sp, #32]
 8013948:	2a01      	cmp	r2, #1
 801394a:	bfac      	ite	ge
 801394c:	189b      	addge	r3, r3, r2
 801394e:	3301      	addlt	r3, #1
 8013950:	461d      	mov	r5, r3
 8013952:	f04f 0b00 	mov.w	fp, #0
 8013956:	4621      	mov	r1, r4
 8013958:	2201      	movs	r2, #1
 801395a:	4648      	mov	r0, r9
 801395c:	f001 f978 	bl	8014c50 <__lshift>
 8013960:	9906      	ldr	r1, [sp, #24]
 8013962:	900a      	str	r0, [sp, #40]	; 0x28
 8013964:	f001 f9cc 	bl	8014d00 <__mcmp>
 8013968:	2800      	cmp	r0, #0
 801396a:	f340 8305 	ble.w	8013f78 <_dtoa_r+0xb58>
 801396e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013974:	1e6b      	subs	r3, r5, #1
 8013976:	e004      	b.n	8013982 <_dtoa_r+0x562>
 8013978:	428b      	cmp	r3, r1
 801397a:	f000 8274 	beq.w	8013e66 <_dtoa_r+0xa46>
 801397e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013982:	2a39      	cmp	r2, #57	; 0x39
 8013984:	f103 0501 	add.w	r5, r3, #1
 8013988:	d0f6      	beq.n	8013978 <_dtoa_r+0x558>
 801398a:	3201      	adds	r2, #1
 801398c:	701a      	strb	r2, [r3, #0]
 801398e:	9906      	ldr	r1, [sp, #24]
 8013990:	4648      	mov	r0, r9
 8013992:	f000 ffc5 	bl	8014920 <_Bfree>
 8013996:	2e00      	cmp	r6, #0
 8013998:	f43f af0d 	beq.w	80137b6 <_dtoa_r+0x396>
 801399c:	f1bb 0f00 	cmp.w	fp, #0
 80139a0:	d005      	beq.n	80139ae <_dtoa_r+0x58e>
 80139a2:	45b3      	cmp	fp, r6
 80139a4:	d003      	beq.n	80139ae <_dtoa_r+0x58e>
 80139a6:	4659      	mov	r1, fp
 80139a8:	4648      	mov	r0, r9
 80139aa:	f000 ffb9 	bl	8014920 <_Bfree>
 80139ae:	4631      	mov	r1, r6
 80139b0:	4648      	mov	r0, r9
 80139b2:	f000 ffb5 	bl	8014920 <_Bfree>
 80139b6:	e6fe      	b.n	80137b6 <_dtoa_r+0x396>
 80139b8:	2301      	movs	r3, #1
 80139ba:	930d      	str	r3, [sp, #52]	; 0x34
 80139bc:	e5eb      	b.n	8013596 <_dtoa_r+0x176>
 80139be:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80139c2:	4640      	mov	r0, r8
 80139c4:	f7f4 ff56 	bl	8008874 <__aeabi_i2d>
 80139c8:	4602      	mov	r2, r0
 80139ca:	460b      	mov	r3, r1
 80139cc:	4630      	mov	r0, r6
 80139ce:	4639      	mov	r1, r7
 80139d0:	f7f5 fa24 	bl	8008e1c <__aeabi_dcmpeq>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	f47f adca 	bne.w	801356e <_dtoa_r+0x14e>
 80139da:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80139de:	9304      	str	r3, [sp, #16]
 80139e0:	e5c5      	b.n	801356e <_dtoa_r+0x14e>
 80139e2:	9a07      	ldr	r2, [sp, #28]
 80139e4:	9b04      	ldr	r3, [sp, #16]
 80139e6:	1ad2      	subs	r2, r2, r3
 80139e8:	425b      	negs	r3, r3
 80139ea:	9306      	str	r3, [sp, #24]
 80139ec:	2300      	movs	r3, #0
 80139ee:	9207      	str	r2, [sp, #28]
 80139f0:	930c      	str	r3, [sp, #48]	; 0x30
 80139f2:	e5df      	b.n	80135b4 <_dtoa_r+0x194>
 80139f4:	f1c8 0300 	rsb	r3, r8, #0
 80139f8:	9307      	str	r3, [sp, #28]
 80139fa:	f04f 0800 	mov.w	r8, #0
 80139fe:	e5d1      	b.n	80135a4 <_dtoa_r+0x184>
 8013a00:	9f06      	ldr	r7, [sp, #24]
 8013a02:	9d07      	ldr	r5, [sp, #28]
 8013a04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013a06:	e707      	b.n	8013818 <_dtoa_r+0x3f8>
 8013a08:	f1c3 0420 	rsb	r4, r3, #32
 8013a0c:	fa0a f004 	lsl.w	r0, sl, r4
 8013a10:	e57a      	b.n	8013508 <_dtoa_r+0xe8>
 8013a12:	900d      	str	r0, [sp, #52]	; 0x34
 8013a14:	e5bf      	b.n	8013596 <_dtoa_r+0x176>
 8013a16:	bf00      	nop
 8013a18:	40240000 	.word	0x40240000
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a20:	9b04      	ldr	r3, [sp, #16]
 8013a22:	9a05      	ldr	r2, [sp, #20]
 8013a24:	4413      	add	r3, r2
 8013a26:	930e      	str	r3, [sp, #56]	; 0x38
 8013a28:	3301      	adds	r3, #1
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	9308      	str	r3, [sp, #32]
 8013a2e:	f340 827d 	ble.w	8013f2c <_dtoa_r+0xb0c>
 8013a32:	9c08      	ldr	r4, [sp, #32]
 8013a34:	4625      	mov	r5, r4
 8013a36:	2100      	movs	r1, #0
 8013a38:	2d17      	cmp	r5, #23
 8013a3a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8013a3e:	d90b      	bls.n	8013a58 <_dtoa_r+0x638>
 8013a40:	2201      	movs	r2, #1
 8013a42:	2304      	movs	r3, #4
 8013a44:	005b      	lsls	r3, r3, #1
 8013a46:	f103 0014 	add.w	r0, r3, #20
 8013a4a:	42a8      	cmp	r0, r5
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	f102 0201 	add.w	r2, r2, #1
 8013a52:	d9f7      	bls.n	8013a44 <_dtoa_r+0x624>
 8013a54:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8013a58:	4648      	mov	r0, r9
 8013a5a:	f000 ff39 	bl	80148d0 <_Balloc>
 8013a5e:	2c0e      	cmp	r4, #14
 8013a60:	9009      	str	r0, [sp, #36]	; 0x24
 8013a62:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8013a66:	f63f ade5 	bhi.w	8013634 <_dtoa_r+0x214>
 8013a6a:	2e00      	cmp	r6, #0
 8013a6c:	f43f ade2 	beq.w	8013634 <_dtoa_r+0x214>
 8013a70:	9904      	ldr	r1, [sp, #16]
 8013a72:	2900      	cmp	r1, #0
 8013a74:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8013a78:	f340 829a 	ble.w	8013fb0 <_dtoa_r+0xb90>
 8013a7c:	4b90      	ldr	r3, [pc, #576]	; (8013cc0 <_dtoa_r+0x8a0>)
 8013a7e:	f001 020f 	and.w	r2, r1, #15
 8013a82:	110e      	asrs	r6, r1, #4
 8013a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a88:	06f0      	lsls	r0, r6, #27
 8013a8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013a8e:	f140 8246 	bpl.w	8013f1e <_dtoa_r+0xafe>
 8013a92:	4b8c      	ldr	r3, [pc, #560]	; (8013cc4 <_dtoa_r+0x8a4>)
 8013a94:	4650      	mov	r0, sl
 8013a96:	4659      	mov	r1, fp
 8013a98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013a9c:	f7f5 f87a 	bl	8008b94 <__aeabi_ddiv>
 8013aa0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8013aa4:	f006 060f 	and.w	r6, r6, #15
 8013aa8:	f04f 0a03 	mov.w	sl, #3
 8013aac:	b186      	cbz	r6, 8013ad0 <_dtoa_r+0x6b0>
 8013aae:	4f85      	ldr	r7, [pc, #532]	; (8013cc4 <_dtoa_r+0x8a4>)
 8013ab0:	07f1      	lsls	r1, r6, #31
 8013ab2:	d509      	bpl.n	8013ac8 <_dtoa_r+0x6a8>
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	4629      	mov	r1, r5
 8013ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013abc:	f7f4 ff40 	bl	8008940 <__aeabi_dmul>
 8013ac0:	f10a 0a01 	add.w	sl, sl, #1
 8013ac4:	4604      	mov	r4, r0
 8013ac6:	460d      	mov	r5, r1
 8013ac8:	1076      	asrs	r6, r6, #1
 8013aca:	f107 0708 	add.w	r7, r7, #8
 8013ace:	d1ef      	bne.n	8013ab0 <_dtoa_r+0x690>
 8013ad0:	4622      	mov	r2, r4
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8013ad8:	f7f5 f85c 	bl	8008b94 <__aeabi_ddiv>
 8013adc:	4606      	mov	r6, r0
 8013ade:	460f      	mov	r7, r1
 8013ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ae2:	b143      	cbz	r3, 8013af6 <_dtoa_r+0x6d6>
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	4b78      	ldr	r3, [pc, #480]	; (8013cc8 <_dtoa_r+0x8a8>)
 8013ae8:	4630      	mov	r0, r6
 8013aea:	4639      	mov	r1, r7
 8013aec:	f7f5 f9a0 	bl	8008e30 <__aeabi_dcmplt>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	f040 831a 	bne.w	801412a <_dtoa_r+0xd0a>
 8013af6:	4650      	mov	r0, sl
 8013af8:	f7f4 febc 	bl	8008874 <__aeabi_i2d>
 8013afc:	4632      	mov	r2, r6
 8013afe:	463b      	mov	r3, r7
 8013b00:	f7f4 ff1e 	bl	8008940 <__aeabi_dmul>
 8013b04:	4b71      	ldr	r3, [pc, #452]	; (8013ccc <_dtoa_r+0x8ac>)
 8013b06:	2200      	movs	r2, #0
 8013b08:	f7f4 fd68 	bl	80085dc <__adddf3>
 8013b0c:	9b08      	ldr	r3, [sp, #32]
 8013b0e:	4604      	mov	r4, r0
 8013b10:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	f000 81db 	beq.w	8013ed0 <_dtoa_r+0xab0>
 8013b1a:	9b04      	ldr	r3, [sp, #16]
 8013b1c:	9316      	str	r3, [sp, #88]	; 0x58
 8013b1e:	9b08      	ldr	r3, [sp, #32]
 8013b20:	9312      	str	r3, [sp, #72]	; 0x48
 8013b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	f000 8294 	beq.w	8014052 <_dtoa_r+0xc32>
 8013b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b2c:	4b64      	ldr	r3, [pc, #400]	; (8013cc0 <_dtoa_r+0x8a0>)
 8013b2e:	4968      	ldr	r1, [pc, #416]	; (8013cd0 <_dtoa_r+0x8b0>)
 8013b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013b38:	2000      	movs	r0, #0
 8013b3a:	f7f5 f82b 	bl	8008b94 <__aeabi_ddiv>
 8013b3e:	4622      	mov	r2, r4
 8013b40:	462b      	mov	r3, r5
 8013b42:	f7f4 fd49 	bl	80085d8 <__aeabi_dsub>
 8013b46:	4682      	mov	sl, r0
 8013b48:	468b      	mov	fp, r1
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	4639      	mov	r1, r7
 8013b4e:	f7f5 f997 	bl	8008e80 <__aeabi_d2iz>
 8013b52:	4604      	mov	r4, r0
 8013b54:	f7f4 fe8e 	bl	8008874 <__aeabi_i2d>
 8013b58:	4602      	mov	r2, r0
 8013b5a:	460b      	mov	r3, r1
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	4639      	mov	r1, r7
 8013b60:	f7f4 fd3a 	bl	80085d8 <__aeabi_dsub>
 8013b64:	3430      	adds	r4, #48	; 0x30
 8013b66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013b68:	b2e4      	uxtb	r4, r4
 8013b6a:	4606      	mov	r6, r0
 8013b6c:	460f      	mov	r7, r1
 8013b6e:	702c      	strb	r4, [r5, #0]
 8013b70:	4602      	mov	r2, r0
 8013b72:	460b      	mov	r3, r1
 8013b74:	4650      	mov	r0, sl
 8013b76:	4659      	mov	r1, fp
 8013b78:	3501      	adds	r5, #1
 8013b7a:	f7f5 f977 	bl	8008e6c <__aeabi_dcmpgt>
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	d150      	bne.n	8013c24 <_dtoa_r+0x804>
 8013b82:	4632      	mov	r2, r6
 8013b84:	463b      	mov	r3, r7
 8013b86:	2000      	movs	r0, #0
 8013b88:	494f      	ldr	r1, [pc, #316]	; (8013cc8 <_dtoa_r+0x8a8>)
 8013b8a:	f7f4 fd25 	bl	80085d8 <__aeabi_dsub>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	4650      	mov	r0, sl
 8013b94:	4659      	mov	r1, fp
 8013b96:	f7f5 f969 	bl	8008e6c <__aeabi_dcmpgt>
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	f040 8308 	bne.w	80141b0 <_dtoa_r+0xd90>
 8013ba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ba2:	2a01      	cmp	r2, #1
 8013ba4:	f340 81f7 	ble.w	8013f96 <_dtoa_r+0xb76>
 8013ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bac:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8013bb0:	4413      	add	r3, r2
 8013bb2:	4698      	mov	r8, r3
 8013bb4:	e00d      	b.n	8013bd2 <_dtoa_r+0x7b2>
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	4943      	ldr	r1, [pc, #268]	; (8013cc8 <_dtoa_r+0x8a8>)
 8013bba:	f7f4 fd0d 	bl	80085d8 <__aeabi_dsub>
 8013bbe:	4652      	mov	r2, sl
 8013bc0:	465b      	mov	r3, fp
 8013bc2:	f7f5 f935 	bl	8008e30 <__aeabi_dcmplt>
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	f040 82f2 	bne.w	80141b0 <_dtoa_r+0xd90>
 8013bcc:	4545      	cmp	r5, r8
 8013bce:	f000 81e0 	beq.w	8013f92 <_dtoa_r+0xb72>
 8013bd2:	4650      	mov	r0, sl
 8013bd4:	4659      	mov	r1, fp
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	4b3e      	ldr	r3, [pc, #248]	; (8013cd4 <_dtoa_r+0x8b4>)
 8013bda:	f7f4 feb1 	bl	8008940 <__aeabi_dmul>
 8013bde:	2200      	movs	r2, #0
 8013be0:	4b3c      	ldr	r3, [pc, #240]	; (8013cd4 <_dtoa_r+0x8b4>)
 8013be2:	4682      	mov	sl, r0
 8013be4:	468b      	mov	fp, r1
 8013be6:	4630      	mov	r0, r6
 8013be8:	4639      	mov	r1, r7
 8013bea:	f7f4 fea9 	bl	8008940 <__aeabi_dmul>
 8013bee:	460f      	mov	r7, r1
 8013bf0:	4606      	mov	r6, r0
 8013bf2:	f7f5 f945 	bl	8008e80 <__aeabi_d2iz>
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	f7f4 fe3c 	bl	8008874 <__aeabi_i2d>
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	460b      	mov	r3, r1
 8013c00:	4630      	mov	r0, r6
 8013c02:	4639      	mov	r1, r7
 8013c04:	f7f4 fce8 	bl	80085d8 <__aeabi_dsub>
 8013c08:	3430      	adds	r4, #48	; 0x30
 8013c0a:	b2e4      	uxtb	r4, r4
 8013c0c:	4652      	mov	r2, sl
 8013c0e:	465b      	mov	r3, fp
 8013c10:	f805 4b01 	strb.w	r4, [r5], #1
 8013c14:	4606      	mov	r6, r0
 8013c16:	460f      	mov	r7, r1
 8013c18:	f7f5 f90a 	bl	8008e30 <__aeabi_dcmplt>
 8013c1c:	4632      	mov	r2, r6
 8013c1e:	463b      	mov	r3, r7
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d0c8      	beq.n	8013bb6 <_dtoa_r+0x796>
 8013c24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013c26:	9304      	str	r3, [sp, #16]
 8013c28:	e5c5      	b.n	80137b6 <_dtoa_r+0x396>
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c2e:	9b05      	ldr	r3, [sp, #20]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f340 8180 	ble.w	8013f36 <_dtoa_r+0xb16>
 8013c36:	461d      	mov	r5, r3
 8013c38:	461c      	mov	r4, r3
 8013c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8013c3c:	9308      	str	r3, [sp, #32]
 8013c3e:	e6fa      	b.n	8013a36 <_dtoa_r+0x616>
 8013c40:	2301      	movs	r3, #1
 8013c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c44:	e7f3      	b.n	8013c2e <_dtoa_r+0x80e>
 8013c46:	940a      	str	r4, [sp, #40]	; 0x28
 8013c48:	9a06      	ldr	r2, [sp, #24]
 8013c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c4c:	4648      	mov	r0, r9
 8013c4e:	f000 ffaf 	bl	8014bb0 <__pow5mult>
 8013c52:	4604      	mov	r4, r0
 8013c54:	e60e      	b.n	8013874 <_dtoa_r+0x454>
 8013c56:	9b08      	ldr	r3, [sp, #32]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	f73f acfe 	bgt.w	801365a <_dtoa_r+0x23a>
 8013c5e:	f040 814f 	bne.w	8013f00 <_dtoa_r+0xae0>
 8013c62:	2200      	movs	r2, #0
 8013c64:	4b1c      	ldr	r3, [pc, #112]	; (8013cd8 <_dtoa_r+0x8b8>)
 8013c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c6a:	f7f4 fe69 	bl	8008940 <__aeabi_dmul>
 8013c6e:	465b      	mov	r3, fp
 8013c70:	4652      	mov	r2, sl
 8013c72:	f7f5 f8f1 	bl	8008e58 <__aeabi_dcmpge>
 8013c76:	9b08      	ldr	r3, [sp, #32]
 8013c78:	9306      	str	r3, [sp, #24]
 8013c7a:	461e      	mov	r6, r3
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	f000 80ea 	beq.w	8013e56 <_dtoa_r+0xa36>
 8013c82:	9b05      	ldr	r3, [sp, #20]
 8013c84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013c86:	43db      	mvns	r3, r3
 8013c88:	9304      	str	r3, [sp, #16]
 8013c8a:	9906      	ldr	r1, [sp, #24]
 8013c8c:	4648      	mov	r0, r9
 8013c8e:	f000 fe47 	bl	8014920 <_Bfree>
 8013c92:	2e00      	cmp	r6, #0
 8013c94:	f43f ad8f 	beq.w	80137b6 <_dtoa_r+0x396>
 8013c98:	e689      	b.n	80139ae <_dtoa_r+0x58e>
 8013c9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c9c:	2a00      	cmp	r2, #0
 8013c9e:	f000 8238 	beq.w	8014112 <_dtoa_r+0xcf2>
 8013ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ca6:	9f06      	ldr	r7, [sp, #24]
 8013ca8:	9d07      	ldr	r5, [sp, #28]
 8013caa:	e5ac      	b.n	8013806 <_dtoa_r+0x3e6>
 8013cac:	201c      	movs	r0, #28
 8013cae:	e60a      	b.n	80138c6 <_dtoa_r+0x4a6>
 8013cb0:	9b00      	ldr	r3, [sp, #0]
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	f340 8280 	ble.w	80141b8 <_dtoa_r+0xd98>
 8013cb8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013cba:	2001      	movs	r0, #1
 8013cbc:	e5f7      	b.n	80138ae <_dtoa_r+0x48e>
 8013cbe:	bf00      	nop
 8013cc0:	08016aa0 	.word	0x08016aa0
 8013cc4:	08016b70 	.word	0x08016b70
 8013cc8:	3ff00000 	.word	0x3ff00000
 8013ccc:	401c0000 	.word	0x401c0000
 8013cd0:	3fe00000 	.word	0x3fe00000
 8013cd4:	40240000 	.word	0x40240000
 8013cd8:	40140000 	.word	0x40140000
 8013cdc:	4631      	mov	r1, r6
 8013cde:	2300      	movs	r3, #0
 8013ce0:	220a      	movs	r2, #10
 8013ce2:	4648      	mov	r0, r9
 8013ce4:	f000 fe2c 	bl	8014940 <__multadd>
 8013ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	4606      	mov	r6, r0
 8013cee:	f340 828d 	ble.w	801420c <_dtoa_r+0xdec>
 8013cf2:	9308      	str	r3, [sp, #32]
 8013cf4:	2d00      	cmp	r5, #0
 8013cf6:	dd05      	ble.n	8013d04 <_dtoa_r+0x8e4>
 8013cf8:	4631      	mov	r1, r6
 8013cfa:	462a      	mov	r2, r5
 8013cfc:	4648      	mov	r0, r9
 8013cfe:	f000 ffa7 	bl	8014c50 <__lshift>
 8013d02:	4606      	mov	r6, r0
 8013d04:	2f00      	cmp	r7, #0
 8013d06:	f040 817c 	bne.w	8014002 <_dtoa_r+0xbe2>
 8013d0a:	46b0      	mov	r8, r6
 8013d0c:	9b08      	ldr	r3, [sp, #32]
 8013d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d10:	3b01      	subs	r3, #1
 8013d12:	18d3      	adds	r3, r2, r3
 8013d14:	9308      	str	r3, [sp, #32]
 8013d16:	f00a 0301 	and.w	r3, sl, #1
 8013d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8013d1c:	4617      	mov	r7, r2
 8013d1e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8013d22:	4620      	mov	r0, r4
 8013d24:	4659      	mov	r1, fp
 8013d26:	f7ff fae3 	bl	80132f0 <quorem>
 8013d2a:	4631      	mov	r1, r6
 8013d2c:	4605      	mov	r5, r0
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f000 ffe6 	bl	8014d00 <__mcmp>
 8013d34:	4642      	mov	r2, r8
 8013d36:	4659      	mov	r1, fp
 8013d38:	4682      	mov	sl, r0
 8013d3a:	4648      	mov	r0, r9
 8013d3c:	f001 f808 	bl	8014d50 <__mdiff>
 8013d40:	68c2      	ldr	r2, [r0, #12]
 8013d42:	4683      	mov	fp, r0
 8013d44:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8013d48:	2a00      	cmp	r2, #0
 8013d4a:	d149      	bne.n	8013de0 <_dtoa_r+0x9c0>
 8013d4c:	4601      	mov	r1, r0
 8013d4e:	4620      	mov	r0, r4
 8013d50:	9307      	str	r3, [sp, #28]
 8013d52:	f000 ffd5 	bl	8014d00 <__mcmp>
 8013d56:	4659      	mov	r1, fp
 8013d58:	9005      	str	r0, [sp, #20]
 8013d5a:	4648      	mov	r0, r9
 8013d5c:	f000 fde0 	bl	8014920 <_Bfree>
 8013d60:	9a05      	ldr	r2, [sp, #20]
 8013d62:	9b07      	ldr	r3, [sp, #28]
 8013d64:	b92a      	cbnz	r2, 8013d72 <_dtoa_r+0x952>
 8013d66:	9900      	ldr	r1, [sp, #0]
 8013d68:	b919      	cbnz	r1, 8013d72 <_dtoa_r+0x952>
 8013d6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d6c:	2900      	cmp	r1, #0
 8013d6e:	f000 8235 	beq.w	80141dc <_dtoa_r+0xdbc>
 8013d72:	f1ba 0f00 	cmp.w	sl, #0
 8013d76:	f2c0 80e3 	blt.w	8013f40 <_dtoa_r+0xb20>
 8013d7a:	d105      	bne.n	8013d88 <_dtoa_r+0x968>
 8013d7c:	9900      	ldr	r1, [sp, #0]
 8013d7e:	b919      	cbnz	r1, 8013d88 <_dtoa_r+0x968>
 8013d80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d82:	2900      	cmp	r1, #0
 8013d84:	f000 80dc 	beq.w	8013f40 <_dtoa_r+0xb20>
 8013d88:	2a00      	cmp	r2, #0
 8013d8a:	f300 814e 	bgt.w	801402a <_dtoa_r+0xc0a>
 8013d8e:	9a08      	ldr	r2, [sp, #32]
 8013d90:	703b      	strb	r3, [r7, #0]
 8013d92:	f107 0a01 	add.w	sl, r7, #1
 8013d96:	4297      	cmp	r7, r2
 8013d98:	4655      	mov	r5, sl
 8013d9a:	f000 8152 	beq.w	8014042 <_dtoa_r+0xc22>
 8013d9e:	4621      	mov	r1, r4
 8013da0:	2300      	movs	r3, #0
 8013da2:	220a      	movs	r2, #10
 8013da4:	4648      	mov	r0, r9
 8013da6:	f000 fdcb 	bl	8014940 <__multadd>
 8013daa:	4546      	cmp	r6, r8
 8013dac:	4604      	mov	r4, r0
 8013dae:	4631      	mov	r1, r6
 8013db0:	f04f 0300 	mov.w	r3, #0
 8013db4:	f04f 020a 	mov.w	r2, #10
 8013db8:	4648      	mov	r0, r9
 8013dba:	d00b      	beq.n	8013dd4 <_dtoa_r+0x9b4>
 8013dbc:	f000 fdc0 	bl	8014940 <__multadd>
 8013dc0:	4641      	mov	r1, r8
 8013dc2:	4606      	mov	r6, r0
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	220a      	movs	r2, #10
 8013dc8:	4648      	mov	r0, r9
 8013dca:	f000 fdb9 	bl	8014940 <__multadd>
 8013dce:	4657      	mov	r7, sl
 8013dd0:	4680      	mov	r8, r0
 8013dd2:	e7a4      	b.n	8013d1e <_dtoa_r+0x8fe>
 8013dd4:	f000 fdb4 	bl	8014940 <__multadd>
 8013dd8:	4657      	mov	r7, sl
 8013dda:	4606      	mov	r6, r0
 8013ddc:	4680      	mov	r8, r0
 8013dde:	e79e      	b.n	8013d1e <_dtoa_r+0x8fe>
 8013de0:	4601      	mov	r1, r0
 8013de2:	4648      	mov	r0, r9
 8013de4:	9305      	str	r3, [sp, #20]
 8013de6:	f000 fd9b 	bl	8014920 <_Bfree>
 8013dea:	2201      	movs	r2, #1
 8013dec:	9b05      	ldr	r3, [sp, #20]
 8013dee:	e7c0      	b.n	8013d72 <_dtoa_r+0x952>
 8013df0:	9906      	ldr	r1, [sp, #24]
 8013df2:	4620      	mov	r0, r4
 8013df4:	f000 ff84 	bl	8014d00 <__mcmp>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	f6bf ad7f 	bge.w	80138fc <_dtoa_r+0x4dc>
 8013dfe:	4621      	mov	r1, r4
 8013e00:	9c04      	ldr	r4, [sp, #16]
 8013e02:	2300      	movs	r3, #0
 8013e04:	3c01      	subs	r4, #1
 8013e06:	220a      	movs	r2, #10
 8013e08:	4648      	mov	r0, r9
 8013e0a:	9404      	str	r4, [sp, #16]
 8013e0c:	f000 fd98 	bl	8014940 <__multadd>
 8013e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e12:	4604      	mov	r4, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	f47f af61 	bne.w	8013cdc <_dtoa_r+0x8bc>
 8013e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	f340 81ed 	ble.w	80141fc <_dtoa_r+0xddc>
 8013e22:	9308      	str	r3, [sp, #32]
 8013e24:	e572      	b.n	801390c <_dtoa_r+0x4ec>
 8013e26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013e28:	e524      	b.n	8013874 <_dtoa_r+0x454>
 8013e2a:	9b00      	ldr	r3, [sp, #0]
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	f77f ad69 	ble.w	8013904 <_dtoa_r+0x4e4>
 8013e32:	9b08      	ldr	r3, [sp, #32]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	f040 819d 	bne.w	8014174 <_dtoa_r+0xd54>
 8013e3a:	9906      	ldr	r1, [sp, #24]
 8013e3c:	2205      	movs	r2, #5
 8013e3e:	4648      	mov	r0, r9
 8013e40:	f000 fd7e 	bl	8014940 <__multadd>
 8013e44:	4601      	mov	r1, r0
 8013e46:	9006      	str	r0, [sp, #24]
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f000 ff59 	bl	8014d00 <__mcmp>
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	940a      	str	r4, [sp, #40]	; 0x28
 8013e52:	f77f af16 	ble.w	8013c82 <_dtoa_r+0x862>
 8013e56:	9a04      	ldr	r2, [sp, #16]
 8013e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e5a:	2331      	movs	r3, #49	; 0x31
 8013e5c:	3201      	adds	r2, #1
 8013e5e:	9204      	str	r2, [sp, #16]
 8013e60:	700b      	strb	r3, [r1, #0]
 8013e62:	1c4d      	adds	r5, r1, #1
 8013e64:	e711      	b.n	8013c8a <_dtoa_r+0x86a>
 8013e66:	9a04      	ldr	r2, [sp, #16]
 8013e68:	3201      	adds	r2, #1
 8013e6a:	9204      	str	r2, [sp, #16]
 8013e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e6e:	2331      	movs	r3, #49	; 0x31
 8013e70:	7013      	strb	r3, [r2, #0]
 8013e72:	e58c      	b.n	801398e <_dtoa_r+0x56e>
 8013e74:	2301      	movs	r3, #1
 8013e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e78:	e5d2      	b.n	8013a20 <_dtoa_r+0x600>
 8013e7a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013e7e:	e49a      	b.n	80137b6 <_dtoa_r+0x396>
 8013e80:	f1ba 0f00 	cmp.w	sl, #0
 8013e84:	f47f ad09 	bne.w	801389a <_dtoa_r+0x47a>
 8013e88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	f040 813e 	bne.w	801410e <_dtoa_r+0xcee>
 8013e92:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8013e96:	0d3f      	lsrs	r7, r7, #20
 8013e98:	053f      	lsls	r7, r7, #20
 8013e9a:	b12f      	cbz	r7, 8013ea8 <_dtoa_r+0xa88>
 8013e9c:	9b07      	ldr	r3, [sp, #28]
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	9307      	str	r3, [sp, #28]
 8013ea2:	f108 0801 	add.w	r8, r8, #1
 8013ea6:	2701      	movs	r7, #1
 8013ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013eaa:	2001      	movs	r0, #1
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f43f acfe 	beq.w	80138ae <_dtoa_r+0x48e>
 8013eb2:	e4f3      	b.n	801389c <_dtoa_r+0x47c>
 8013eb4:	4650      	mov	r0, sl
 8013eb6:	f7f4 fcdd 	bl	8008874 <__aeabi_i2d>
 8013eba:	4632      	mov	r2, r6
 8013ebc:	463b      	mov	r3, r7
 8013ebe:	f7f4 fd3f 	bl	8008940 <__aeabi_dmul>
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	4bbf      	ldr	r3, [pc, #764]	; (80141c4 <_dtoa_r+0xda4>)
 8013ec6:	f7f4 fb89 	bl	80085dc <__adddf3>
 8013eca:	4604      	mov	r4, r0
 8013ecc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	4639      	mov	r1, r7
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	4bbc      	ldr	r3, [pc, #752]	; (80141c8 <_dtoa_r+0xda8>)
 8013ed8:	f7f4 fb7e 	bl	80085d8 <__aeabi_dsub>
 8013edc:	4622      	mov	r2, r4
 8013ede:	462b      	mov	r3, r5
 8013ee0:	4606      	mov	r6, r0
 8013ee2:	460f      	mov	r7, r1
 8013ee4:	f7f4 ffc2 	bl	8008e6c <__aeabi_dcmpgt>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	f040 80ae 	bne.w	801404a <_dtoa_r+0xc2a>
 8013eee:	4622      	mov	r2, r4
 8013ef0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013ef4:	4630      	mov	r0, r6
 8013ef6:	4639      	mov	r1, r7
 8013ef8:	f7f4 ff9a 	bl	8008e30 <__aeabi_dcmplt>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	d04a      	beq.n	8013f96 <_dtoa_r+0xb76>
 8013f00:	2300      	movs	r3, #0
 8013f02:	9306      	str	r3, [sp, #24]
 8013f04:	461e      	mov	r6, r3
 8013f06:	e6bc      	b.n	8013c82 <_dtoa_r+0x862>
 8013f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f0a:	f7ff bac2 	b.w	8013492 <_dtoa_r+0x72>
 8013f0e:	9b06      	ldr	r3, [sp, #24]
 8013f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f12:	9706      	str	r7, [sp, #24]
 8013f14:	1afb      	subs	r3, r7, r3
 8013f16:	441a      	add	r2, r3
 8013f18:	920c      	str	r2, [sp, #48]	; 0x30
 8013f1a:	2700      	movs	r7, #0
 8013f1c:	e46d      	b.n	80137fa <_dtoa_r+0x3da>
 8013f1e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8013f22:	f04f 0a02 	mov.w	sl, #2
 8013f26:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8013f2a:	e5bf      	b.n	8013aac <_dtoa_r+0x68c>
 8013f2c:	461c      	mov	r4, r3
 8013f2e:	2100      	movs	r1, #0
 8013f30:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8013f34:	e590      	b.n	8013a58 <_dtoa_r+0x638>
 8013f36:	2401      	movs	r4, #1
 8013f38:	940e      	str	r4, [sp, #56]	; 0x38
 8013f3a:	9408      	str	r4, [sp, #32]
 8013f3c:	9405      	str	r4, [sp, #20]
 8013f3e:	e7f6      	b.n	8013f2e <_dtoa_r+0xb0e>
 8013f40:	2a00      	cmp	r2, #0
 8013f42:	469a      	mov	sl, r3
 8013f44:	dd11      	ble.n	8013f6a <_dtoa_r+0xb4a>
 8013f46:	4621      	mov	r1, r4
 8013f48:	2201      	movs	r2, #1
 8013f4a:	4648      	mov	r0, r9
 8013f4c:	f000 fe80 	bl	8014c50 <__lshift>
 8013f50:	9906      	ldr	r1, [sp, #24]
 8013f52:	4604      	mov	r4, r0
 8013f54:	f000 fed4 	bl	8014d00 <__mcmp>
 8013f58:	2800      	cmp	r0, #0
 8013f5a:	f340 8148 	ble.w	80141ee <_dtoa_r+0xdce>
 8013f5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013f62:	f000 8109 	beq.w	8014178 <_dtoa_r+0xd58>
 8013f66:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8013f6a:	46b3      	mov	fp, r6
 8013f6c:	f887 a000 	strb.w	sl, [r7]
 8013f70:	1c7d      	adds	r5, r7, #1
 8013f72:	4646      	mov	r6, r8
 8013f74:	940a      	str	r4, [sp, #40]	; 0x28
 8013f76:	e50a      	b.n	801398e <_dtoa_r+0x56e>
 8013f78:	d104      	bne.n	8013f84 <_dtoa_r+0xb64>
 8013f7a:	f01a 0f01 	tst.w	sl, #1
 8013f7e:	d001      	beq.n	8013f84 <_dtoa_r+0xb64>
 8013f80:	e4f5      	b.n	801396e <_dtoa_r+0x54e>
 8013f82:	4615      	mov	r5, r2
 8013f84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013f88:	2b30      	cmp	r3, #48	; 0x30
 8013f8a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8013f8e:	d0f8      	beq.n	8013f82 <_dtoa_r+0xb62>
 8013f90:	e4fd      	b.n	801398e <_dtoa_r+0x56e>
 8013f92:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8013f96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8013f9a:	f7ff bb4b 	b.w	8013634 <_dtoa_r+0x214>
 8013f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013fa0:	2230      	movs	r2, #48	; 0x30
 8013fa2:	700a      	strb	r2, [r1, #0]
 8013fa4:	9a04      	ldr	r2, [sp, #16]
 8013fa6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8013faa:	3201      	adds	r2, #1
 8013fac:	9204      	str	r2, [sp, #16]
 8013fae:	e400      	b.n	80137b2 <_dtoa_r+0x392>
 8013fb0:	9b04      	ldr	r3, [sp, #16]
 8013fb2:	425c      	negs	r4, r3
 8013fb4:	2c00      	cmp	r4, #0
 8013fb6:	f000 80b3 	beq.w	8014120 <_dtoa_r+0xd00>
 8013fba:	4b84      	ldr	r3, [pc, #528]	; (80141cc <_dtoa_r+0xdac>)
 8013fbc:	f004 020f 	and.w	r2, r4, #15
 8013fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013fcc:	f7f4 fcb8 	bl	8008940 <__aeabi_dmul>
 8013fd0:	1124      	asrs	r4, r4, #4
 8013fd2:	4606      	mov	r6, r0
 8013fd4:	460f      	mov	r7, r1
 8013fd6:	f000 8116 	beq.w	8014206 <_dtoa_r+0xde6>
 8013fda:	4d7d      	ldr	r5, [pc, #500]	; (80141d0 <_dtoa_r+0xdb0>)
 8013fdc:	f04f 0a02 	mov.w	sl, #2
 8013fe0:	07e2      	lsls	r2, r4, #31
 8013fe2:	d509      	bpl.n	8013ff8 <_dtoa_r+0xbd8>
 8013fe4:	4630      	mov	r0, r6
 8013fe6:	4639      	mov	r1, r7
 8013fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013fec:	f7f4 fca8 	bl	8008940 <__aeabi_dmul>
 8013ff0:	f10a 0a01 	add.w	sl, sl, #1
 8013ff4:	4606      	mov	r6, r0
 8013ff6:	460f      	mov	r7, r1
 8013ff8:	1064      	asrs	r4, r4, #1
 8013ffa:	f105 0508 	add.w	r5, r5, #8
 8013ffe:	d1ef      	bne.n	8013fe0 <_dtoa_r+0xbc0>
 8014000:	e56e      	b.n	8013ae0 <_dtoa_r+0x6c0>
 8014002:	6871      	ldr	r1, [r6, #4]
 8014004:	4648      	mov	r0, r9
 8014006:	f000 fc63 	bl	80148d0 <_Balloc>
 801400a:	6933      	ldr	r3, [r6, #16]
 801400c:	1c9a      	adds	r2, r3, #2
 801400e:	4605      	mov	r5, r0
 8014010:	0092      	lsls	r2, r2, #2
 8014012:	f106 010c 	add.w	r1, r6, #12
 8014016:	300c      	adds	r0, #12
 8014018:	f7f5 ff72 	bl	8009f00 <memcpy>
 801401c:	4629      	mov	r1, r5
 801401e:	2201      	movs	r2, #1
 8014020:	4648      	mov	r0, r9
 8014022:	f000 fe15 	bl	8014c50 <__lshift>
 8014026:	4680      	mov	r8, r0
 8014028:	e670      	b.n	8013d0c <_dtoa_r+0x8ec>
 801402a:	2b39      	cmp	r3, #57	; 0x39
 801402c:	f000 80a4 	beq.w	8014178 <_dtoa_r+0xd58>
 8014030:	f103 0a01 	add.w	sl, r3, #1
 8014034:	46b3      	mov	fp, r6
 8014036:	f887 a000 	strb.w	sl, [r7]
 801403a:	1c7d      	adds	r5, r7, #1
 801403c:	4646      	mov	r6, r8
 801403e:	940a      	str	r4, [sp, #40]	; 0x28
 8014040:	e4a5      	b.n	801398e <_dtoa_r+0x56e>
 8014042:	46b3      	mov	fp, r6
 8014044:	469a      	mov	sl, r3
 8014046:	4646      	mov	r6, r8
 8014048:	e485      	b.n	8013956 <_dtoa_r+0x536>
 801404a:	2300      	movs	r3, #0
 801404c:	9306      	str	r3, [sp, #24]
 801404e:	461e      	mov	r6, r3
 8014050:	e701      	b.n	8013e56 <_dtoa_r+0xa36>
 8014052:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014054:	495d      	ldr	r1, [pc, #372]	; (80141cc <_dtoa_r+0xdac>)
 8014056:	1e5a      	subs	r2, r3, #1
 8014058:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801405c:	462b      	mov	r3, r5
 801405e:	9217      	str	r2, [sp, #92]	; 0x5c
 8014060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014064:	4622      	mov	r2, r4
 8014066:	f7f4 fc6b 	bl	8008940 <__aeabi_dmul>
 801406a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801406e:	4639      	mov	r1, r7
 8014070:	4630      	mov	r0, r6
 8014072:	f7f4 ff05 	bl	8008e80 <__aeabi_d2iz>
 8014076:	4604      	mov	r4, r0
 8014078:	f7f4 fbfc 	bl	8008874 <__aeabi_i2d>
 801407c:	460b      	mov	r3, r1
 801407e:	4602      	mov	r2, r0
 8014080:	4639      	mov	r1, r7
 8014082:	4630      	mov	r0, r6
 8014084:	f7f4 faa8 	bl	80085d8 <__aeabi_dsub>
 8014088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801408a:	460f      	mov	r7, r1
 801408c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801408e:	3430      	adds	r4, #48	; 0x30
 8014090:	2b01      	cmp	r3, #1
 8014092:	4606      	mov	r6, r0
 8014094:	700c      	strb	r4, [r1, #0]
 8014096:	f101 0501 	add.w	r5, r1, #1
 801409a:	d020      	beq.n	80140de <_dtoa_r+0xcbe>
 801409c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801409e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140a0:	4413      	add	r3, r2
 80140a2:	469a      	mov	sl, r3
 80140a4:	46ab      	mov	fp, r5
 80140a6:	2200      	movs	r2, #0
 80140a8:	4b4a      	ldr	r3, [pc, #296]	; (80141d4 <_dtoa_r+0xdb4>)
 80140aa:	4630      	mov	r0, r6
 80140ac:	4639      	mov	r1, r7
 80140ae:	f7f4 fc47 	bl	8008940 <__aeabi_dmul>
 80140b2:	460f      	mov	r7, r1
 80140b4:	4606      	mov	r6, r0
 80140b6:	f7f4 fee3 	bl	8008e80 <__aeabi_d2iz>
 80140ba:	4604      	mov	r4, r0
 80140bc:	f7f4 fbda 	bl	8008874 <__aeabi_i2d>
 80140c0:	3430      	adds	r4, #48	; 0x30
 80140c2:	4602      	mov	r2, r0
 80140c4:	460b      	mov	r3, r1
 80140c6:	4630      	mov	r0, r6
 80140c8:	4639      	mov	r1, r7
 80140ca:	f7f4 fa85 	bl	80085d8 <__aeabi_dsub>
 80140ce:	f80b 4b01 	strb.w	r4, [fp], #1
 80140d2:	45da      	cmp	sl, fp
 80140d4:	4606      	mov	r6, r0
 80140d6:	460f      	mov	r7, r1
 80140d8:	d1e5      	bne.n	80140a6 <_dtoa_r+0xc86>
 80140da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80140dc:	441d      	add	r5, r3
 80140de:	2200      	movs	r2, #0
 80140e0:	4b3d      	ldr	r3, [pc, #244]	; (80141d8 <_dtoa_r+0xdb8>)
 80140e2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80140e6:	f7f4 fa79 	bl	80085dc <__adddf3>
 80140ea:	4632      	mov	r2, r6
 80140ec:	463b      	mov	r3, r7
 80140ee:	f7f4 fe9f 	bl	8008e30 <__aeabi_dcmplt>
 80140f2:	2800      	cmp	r0, #0
 80140f4:	d048      	beq.n	8014188 <_dtoa_r+0xd68>
 80140f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80140f8:	9304      	str	r3, [sp, #16]
 80140fa:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80140fe:	f7ff bb4c 	b.w	801379a <_dtoa_r+0x37a>
 8014102:	9b07      	ldr	r3, [sp, #28]
 8014104:	9a08      	ldr	r2, [sp, #32]
 8014106:	1a9d      	subs	r5, r3, r2
 8014108:	2300      	movs	r3, #0
 801410a:	f7ff bb7c 	b.w	8013806 <_dtoa_r+0x3e6>
 801410e:	2700      	movs	r7, #0
 8014110:	e6ca      	b.n	8013ea8 <_dtoa_r+0xa88>
 8014112:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014114:	9f06      	ldr	r7, [sp, #24]
 8014116:	9d07      	ldr	r5, [sp, #28]
 8014118:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801411c:	f7ff bb73 	b.w	8013806 <_dtoa_r+0x3e6>
 8014120:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014124:	f04f 0a02 	mov.w	sl, #2
 8014128:	e4da      	b.n	8013ae0 <_dtoa_r+0x6c0>
 801412a:	9b08      	ldr	r3, [sp, #32]
 801412c:	2b00      	cmp	r3, #0
 801412e:	f43f aec1 	beq.w	8013eb4 <_dtoa_r+0xa94>
 8014132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014134:	2b00      	cmp	r3, #0
 8014136:	f77f af2e 	ble.w	8013f96 <_dtoa_r+0xb76>
 801413a:	2200      	movs	r2, #0
 801413c:	4b25      	ldr	r3, [pc, #148]	; (80141d4 <_dtoa_r+0xdb4>)
 801413e:	4630      	mov	r0, r6
 8014140:	4639      	mov	r1, r7
 8014142:	f7f4 fbfd 	bl	8008940 <__aeabi_dmul>
 8014146:	4606      	mov	r6, r0
 8014148:	460f      	mov	r7, r1
 801414a:	f10a 0001 	add.w	r0, sl, #1
 801414e:	f7f4 fb91 	bl	8008874 <__aeabi_i2d>
 8014152:	4632      	mov	r2, r6
 8014154:	463b      	mov	r3, r7
 8014156:	f7f4 fbf3 	bl	8008940 <__aeabi_dmul>
 801415a:	2200      	movs	r2, #0
 801415c:	4b19      	ldr	r3, [pc, #100]	; (80141c4 <_dtoa_r+0xda4>)
 801415e:	f7f4 fa3d 	bl	80085dc <__adddf3>
 8014162:	9a04      	ldr	r2, [sp, #16]
 8014164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014166:	9312      	str	r3, [sp, #72]	; 0x48
 8014168:	3a01      	subs	r2, #1
 801416a:	4604      	mov	r4, r0
 801416c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8014170:	9216      	str	r2, [sp, #88]	; 0x58
 8014172:	e4d6      	b.n	8013b22 <_dtoa_r+0x702>
 8014174:	940a      	str	r4, [sp, #40]	; 0x28
 8014176:	e584      	b.n	8013c82 <_dtoa_r+0x862>
 8014178:	2239      	movs	r2, #57	; 0x39
 801417a:	46b3      	mov	fp, r6
 801417c:	940a      	str	r4, [sp, #40]	; 0x28
 801417e:	4646      	mov	r6, r8
 8014180:	703a      	strb	r2, [r7, #0]
 8014182:	1c7d      	adds	r5, r7, #1
 8014184:	f7ff bbf5 	b.w	8013972 <_dtoa_r+0x552>
 8014188:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801418c:	2000      	movs	r0, #0
 801418e:	4912      	ldr	r1, [pc, #72]	; (80141d8 <_dtoa_r+0xdb8>)
 8014190:	f7f4 fa22 	bl	80085d8 <__aeabi_dsub>
 8014194:	4632      	mov	r2, r6
 8014196:	463b      	mov	r3, r7
 8014198:	f7f4 fe68 	bl	8008e6c <__aeabi_dcmpgt>
 801419c:	b908      	cbnz	r0, 80141a2 <_dtoa_r+0xd82>
 801419e:	e6fa      	b.n	8013f96 <_dtoa_r+0xb76>
 80141a0:	4615      	mov	r5, r2
 80141a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80141a6:	2b30      	cmp	r3, #48	; 0x30
 80141a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80141ac:	d0f8      	beq.n	80141a0 <_dtoa_r+0xd80>
 80141ae:	e539      	b.n	8013c24 <_dtoa_r+0x804>
 80141b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80141b2:	9304      	str	r3, [sp, #16]
 80141b4:	f7ff baf1 	b.w	801379a <_dtoa_r+0x37a>
 80141b8:	f1ba 0f00 	cmp.w	sl, #0
 80141bc:	f47f ad7c 	bne.w	8013cb8 <_dtoa_r+0x898>
 80141c0:	e662      	b.n	8013e88 <_dtoa_r+0xa68>
 80141c2:	bf00      	nop
 80141c4:	401c0000 	.word	0x401c0000
 80141c8:	40140000 	.word	0x40140000
 80141cc:	08016aa0 	.word	0x08016aa0
 80141d0:	08016b70 	.word	0x08016b70
 80141d4:	40240000 	.word	0x40240000
 80141d8:	3fe00000 	.word	0x3fe00000
 80141dc:	2b39      	cmp	r3, #57	; 0x39
 80141de:	46d3      	mov	fp, sl
 80141e0:	469a      	mov	sl, r3
 80141e2:	d0c9      	beq.n	8014178 <_dtoa_r+0xd58>
 80141e4:	f1bb 0f00 	cmp.w	fp, #0
 80141e8:	f73f aebd 	bgt.w	8013f66 <_dtoa_r+0xb46>
 80141ec:	e6bd      	b.n	8013f6a <_dtoa_r+0xb4a>
 80141ee:	f47f aebc 	bne.w	8013f6a <_dtoa_r+0xb4a>
 80141f2:	f01a 0f01 	tst.w	sl, #1
 80141f6:	f43f aeb8 	beq.w	8013f6a <_dtoa_r+0xb4a>
 80141fa:	e6b0      	b.n	8013f5e <_dtoa_r+0xb3e>
 80141fc:	9b00      	ldr	r3, [sp, #0]
 80141fe:	2b02      	cmp	r3, #2
 8014200:	dc25      	bgt.n	801424e <_dtoa_r+0xe2e>
 8014202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014204:	e60d      	b.n	8013e22 <_dtoa_r+0xa02>
 8014206:	f04f 0a02 	mov.w	sl, #2
 801420a:	e469      	b.n	8013ae0 <_dtoa_r+0x6c0>
 801420c:	9b00      	ldr	r3, [sp, #0]
 801420e:	2b02      	cmp	r3, #2
 8014210:	dc1d      	bgt.n	801424e <_dtoa_r+0xe2e>
 8014212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014214:	e56d      	b.n	8013cf2 <_dtoa_r+0x8d2>
 8014216:	2400      	movs	r4, #0
 8014218:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 801421c:	4621      	mov	r1, r4
 801421e:	4648      	mov	r0, r9
 8014220:	f000 fb56 	bl	80148d0 <_Balloc>
 8014224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014228:	9308      	str	r3, [sp, #32]
 801422a:	930e      	str	r3, [sp, #56]	; 0x38
 801422c:	2301      	movs	r3, #1
 801422e:	9009      	str	r0, [sp, #36]	; 0x24
 8014230:	9405      	str	r4, [sp, #20]
 8014232:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8014236:	930b      	str	r3, [sp, #44]	; 0x2c
 8014238:	f7ff b9fc 	b.w	8013634 <_dtoa_r+0x214>
 801423c:	f43f ab48 	beq.w	80138d0 <_dtoa_r+0x4b0>
 8014240:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8014244:	f7ff bb3f 	b.w	80138c6 <_dtoa_r+0x4a6>
 8014248:	2601      	movs	r6, #1
 801424a:	f7ff b9bc 	b.w	80135c6 <_dtoa_r+0x1a6>
 801424e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014250:	9308      	str	r3, [sp, #32]
 8014252:	e5ee      	b.n	8013e32 <_dtoa_r+0xa12>
	...

08014260 <__sflush_r>:
 8014260:	898b      	ldrh	r3, [r1, #12]
 8014262:	b29a      	uxth	r2, r3
 8014264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014268:	460d      	mov	r5, r1
 801426a:	0711      	lsls	r1, r2, #28
 801426c:	4680      	mov	r8, r0
 801426e:	d43c      	bmi.n	80142ea <__sflush_r+0x8a>
 8014270:	686a      	ldr	r2, [r5, #4]
 8014272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014276:	2a00      	cmp	r2, #0
 8014278:	81ab      	strh	r3, [r5, #12]
 801427a:	dd73      	ble.n	8014364 <__sflush_r+0x104>
 801427c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801427e:	2e00      	cmp	r6, #0
 8014280:	d04b      	beq.n	801431a <__sflush_r+0xba>
 8014282:	b29b      	uxth	r3, r3
 8014284:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8014288:	2100      	movs	r1, #0
 801428a:	b292      	uxth	r2, r2
 801428c:	f8d8 4000 	ldr.w	r4, [r8]
 8014290:	f8c8 1000 	str.w	r1, [r8]
 8014294:	2a00      	cmp	r2, #0
 8014296:	d069      	beq.n	801436c <__sflush_r+0x10c>
 8014298:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801429a:	075f      	lsls	r7, r3, #29
 801429c:	d505      	bpl.n	80142aa <__sflush_r+0x4a>
 801429e:	6869      	ldr	r1, [r5, #4]
 80142a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80142a2:	1a52      	subs	r2, r2, r1
 80142a4:	b10b      	cbz	r3, 80142aa <__sflush_r+0x4a>
 80142a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80142a8:	1ad2      	subs	r2, r2, r3
 80142aa:	2300      	movs	r3, #0
 80142ac:	69e9      	ldr	r1, [r5, #28]
 80142ae:	4640      	mov	r0, r8
 80142b0:	47b0      	blx	r6
 80142b2:	1c46      	adds	r6, r0, #1
 80142b4:	d03c      	beq.n	8014330 <__sflush_r+0xd0>
 80142b6:	89ab      	ldrh	r3, [r5, #12]
 80142b8:	692a      	ldr	r2, [r5, #16]
 80142ba:	602a      	str	r2, [r5, #0]
 80142bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	2200      	movs	r2, #0
 80142c4:	81ab      	strh	r3, [r5, #12]
 80142c6:	04db      	lsls	r3, r3, #19
 80142c8:	606a      	str	r2, [r5, #4]
 80142ca:	d449      	bmi.n	8014360 <__sflush_r+0x100>
 80142cc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80142ce:	f8c8 4000 	str.w	r4, [r8]
 80142d2:	b311      	cbz	r1, 801431a <__sflush_r+0xba>
 80142d4:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80142d8:	4299      	cmp	r1, r3
 80142da:	d002      	beq.n	80142e2 <__sflush_r+0x82>
 80142dc:	4640      	mov	r0, r8
 80142de:	f000 f967 	bl	80145b0 <_free_r>
 80142e2:	2000      	movs	r0, #0
 80142e4:	6328      	str	r0, [r5, #48]	; 0x30
 80142e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142ea:	692e      	ldr	r6, [r5, #16]
 80142ec:	b1ae      	cbz	r6, 801431a <__sflush_r+0xba>
 80142ee:	682c      	ldr	r4, [r5, #0]
 80142f0:	602e      	str	r6, [r5, #0]
 80142f2:	0790      	lsls	r0, r2, #30
 80142f4:	bf0c      	ite	eq
 80142f6:	696b      	ldreq	r3, [r5, #20]
 80142f8:	2300      	movne	r3, #0
 80142fa:	1ba4      	subs	r4, r4, r6
 80142fc:	60ab      	str	r3, [r5, #8]
 80142fe:	e00a      	b.n	8014316 <__sflush_r+0xb6>
 8014300:	4623      	mov	r3, r4
 8014302:	4632      	mov	r2, r6
 8014304:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8014306:	69e9      	ldr	r1, [r5, #28]
 8014308:	4640      	mov	r0, r8
 801430a:	47b8      	blx	r7
 801430c:	2800      	cmp	r0, #0
 801430e:	eba4 0400 	sub.w	r4, r4, r0
 8014312:	4406      	add	r6, r0
 8014314:	dd04      	ble.n	8014320 <__sflush_r+0xc0>
 8014316:	2c00      	cmp	r4, #0
 8014318:	dcf2      	bgt.n	8014300 <__sflush_r+0xa0>
 801431a:	2000      	movs	r0, #0
 801431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014320:	89ab      	ldrh	r3, [r5, #12]
 8014322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014326:	81ab      	strh	r3, [r5, #12]
 8014328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014330:	f8d8 2000 	ldr.w	r2, [r8]
 8014334:	2a1d      	cmp	r2, #29
 8014336:	d8f3      	bhi.n	8014320 <__sflush_r+0xc0>
 8014338:	4b1a      	ldr	r3, [pc, #104]	; (80143a4 <__sflush_r+0x144>)
 801433a:	40d3      	lsrs	r3, r2
 801433c:	f003 0301 	and.w	r3, r3, #1
 8014340:	f083 0101 	eor.w	r1, r3, #1
 8014344:	2b00      	cmp	r3, #0
 8014346:	d0eb      	beq.n	8014320 <__sflush_r+0xc0>
 8014348:	89ab      	ldrh	r3, [r5, #12]
 801434a:	6069      	str	r1, [r5, #4]
 801434c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014350:	b29b      	uxth	r3, r3
 8014352:	6929      	ldr	r1, [r5, #16]
 8014354:	6029      	str	r1, [r5, #0]
 8014356:	04d9      	lsls	r1, r3, #19
 8014358:	81ab      	strh	r3, [r5, #12]
 801435a:	d5b7      	bpl.n	80142cc <__sflush_r+0x6c>
 801435c:	2a00      	cmp	r2, #0
 801435e:	d1b5      	bne.n	80142cc <__sflush_r+0x6c>
 8014360:	6528      	str	r0, [r5, #80]	; 0x50
 8014362:	e7b3      	b.n	80142cc <__sflush_r+0x6c>
 8014364:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8014366:	2a00      	cmp	r2, #0
 8014368:	dc88      	bgt.n	801427c <__sflush_r+0x1c>
 801436a:	e7d6      	b.n	801431a <__sflush_r+0xba>
 801436c:	2301      	movs	r3, #1
 801436e:	69e9      	ldr	r1, [r5, #28]
 8014370:	4640      	mov	r0, r8
 8014372:	47b0      	blx	r6
 8014374:	1c43      	adds	r3, r0, #1
 8014376:	4602      	mov	r2, r0
 8014378:	d002      	beq.n	8014380 <__sflush_r+0x120>
 801437a:	89ab      	ldrh	r3, [r5, #12]
 801437c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801437e:	e78c      	b.n	801429a <__sflush_r+0x3a>
 8014380:	f8d8 3000 	ldr.w	r3, [r8]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d0f8      	beq.n	801437a <__sflush_r+0x11a>
 8014388:	2b1d      	cmp	r3, #29
 801438a:	d001      	beq.n	8014390 <__sflush_r+0x130>
 801438c:	2b16      	cmp	r3, #22
 801438e:	d102      	bne.n	8014396 <__sflush_r+0x136>
 8014390:	f8c8 4000 	str.w	r4, [r8]
 8014394:	e7c1      	b.n	801431a <__sflush_r+0xba>
 8014396:	89ab      	ldrh	r3, [r5, #12]
 8014398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801439c:	81ab      	strh	r3, [r5, #12]
 801439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a2:	bf00      	nop
 80143a4:	20400001 	.word	0x20400001
	...

080143b0 <_fflush_r>:
 80143b0:	b510      	push	{r4, lr}
 80143b2:	4604      	mov	r4, r0
 80143b4:	b082      	sub	sp, #8
 80143b6:	b108      	cbz	r0, 80143bc <_fflush_r+0xc>
 80143b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80143ba:	b153      	cbz	r3, 80143d2 <_fflush_r+0x22>
 80143bc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80143c0:	b908      	cbnz	r0, 80143c6 <_fflush_r+0x16>
 80143c2:	b002      	add	sp, #8
 80143c4:	bd10      	pop	{r4, pc}
 80143c6:	4620      	mov	r0, r4
 80143c8:	b002      	add	sp, #8
 80143ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143ce:	f7ff bf47 	b.w	8014260 <__sflush_r>
 80143d2:	9101      	str	r1, [sp, #4]
 80143d4:	f000 f884 	bl	80144e0 <__sinit>
 80143d8:	9901      	ldr	r1, [sp, #4]
 80143da:	e7ef      	b.n	80143bc <_fflush_r+0xc>
 80143dc:	0000      	movs	r0, r0
	...

080143e0 <_cleanup_r>:
 80143e0:	4901      	ldr	r1, [pc, #4]	; (80143e8 <_cleanup_r+0x8>)
 80143e2:	f000 b9cd 	b.w	8014780 <_fwalk_reent>
 80143e6:	bf00      	nop
 80143e8:	08015191 	.word	0x08015191
 80143ec:	00000000 	.word	0x00000000

080143f0 <__sinit.part.1>:
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	4b35      	ldr	r3, [pc, #212]	; (80144cc <__sinit.part.1+0xdc>)
 80143f6:	6845      	ldr	r5, [r0, #4]
 80143f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80143fa:	2400      	movs	r4, #0
 80143fc:	4607      	mov	r7, r0
 80143fe:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8014402:	2304      	movs	r3, #4
 8014404:	2103      	movs	r1, #3
 8014406:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 801440a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 801440e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8014412:	b083      	sub	sp, #12
 8014414:	602c      	str	r4, [r5, #0]
 8014416:	606c      	str	r4, [r5, #4]
 8014418:	60ac      	str	r4, [r5, #8]
 801441a:	666c      	str	r4, [r5, #100]	; 0x64
 801441c:	81ec      	strh	r4, [r5, #14]
 801441e:	612c      	str	r4, [r5, #16]
 8014420:	616c      	str	r4, [r5, #20]
 8014422:	61ac      	str	r4, [r5, #24]
 8014424:	81ab      	strh	r3, [r5, #12]
 8014426:	4621      	mov	r1, r4
 8014428:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 801442c:	2208      	movs	r2, #8
 801442e:	f7fc fff7 	bl	8011420 <memset>
 8014432:	68be      	ldr	r6, [r7, #8]
 8014434:	f8df b098 	ldr.w	fp, [pc, #152]	; 80144d0 <__sinit.part.1+0xe0>
 8014438:	f8df a098 	ldr.w	sl, [pc, #152]	; 80144d4 <__sinit.part.1+0xe4>
 801443c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80144d8 <__sinit.part.1+0xe8>
 8014440:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80144dc <__sinit.part.1+0xec>
 8014444:	f8c5 b020 	str.w	fp, [r5, #32]
 8014448:	2301      	movs	r3, #1
 801444a:	2209      	movs	r2, #9
 801444c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8014450:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8014454:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8014458:	61ed      	str	r5, [r5, #28]
 801445a:	4621      	mov	r1, r4
 801445c:	81f3      	strh	r3, [r6, #14]
 801445e:	81b2      	strh	r2, [r6, #12]
 8014460:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8014464:	6034      	str	r4, [r6, #0]
 8014466:	6074      	str	r4, [r6, #4]
 8014468:	60b4      	str	r4, [r6, #8]
 801446a:	6674      	str	r4, [r6, #100]	; 0x64
 801446c:	6134      	str	r4, [r6, #16]
 801446e:	6174      	str	r4, [r6, #20]
 8014470:	61b4      	str	r4, [r6, #24]
 8014472:	2208      	movs	r2, #8
 8014474:	9301      	str	r3, [sp, #4]
 8014476:	f7fc ffd3 	bl	8011420 <memset>
 801447a:	68fd      	ldr	r5, [r7, #12]
 801447c:	61f6      	str	r6, [r6, #28]
 801447e:	2012      	movs	r0, #18
 8014480:	2202      	movs	r2, #2
 8014482:	f8c6 b020 	str.w	fp, [r6, #32]
 8014486:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 801448a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 801448e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8014492:	4621      	mov	r1, r4
 8014494:	81a8      	strh	r0, [r5, #12]
 8014496:	81ea      	strh	r2, [r5, #14]
 8014498:	602c      	str	r4, [r5, #0]
 801449a:	606c      	str	r4, [r5, #4]
 801449c:	60ac      	str	r4, [r5, #8]
 801449e:	666c      	str	r4, [r5, #100]	; 0x64
 80144a0:	612c      	str	r4, [r5, #16]
 80144a2:	616c      	str	r4, [r5, #20]
 80144a4:	61ac      	str	r4, [r5, #24]
 80144a6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80144aa:	2208      	movs	r2, #8
 80144ac:	f7fc ffb8 	bl	8011420 <memset>
 80144b0:	9b01      	ldr	r3, [sp, #4]
 80144b2:	61ed      	str	r5, [r5, #28]
 80144b4:	f8c5 b020 	str.w	fp, [r5, #32]
 80144b8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80144bc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80144c0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80144c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80144c6:	b003      	add	sp, #12
 80144c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144cc:	080143e1 	.word	0x080143e1
 80144d0:	08014f91 	.word	0x08014f91
 80144d4:	08014fc1 	.word	0x08014fc1
 80144d8:	08015001 	.word	0x08015001
 80144dc:	08015021 	.word	0x08015021

080144e0 <__sinit>:
 80144e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80144e2:	b103      	cbz	r3, 80144e6 <__sinit+0x6>
 80144e4:	4770      	bx	lr
 80144e6:	f7ff bf83 	b.w	80143f0 <__sinit.part.1>
 80144ea:	bf00      	nop
 80144ec:	0000      	movs	r0, r0
	...

080144f0 <__sfp_lock_acquire>:
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
	...

08014500 <__sfp_lock_release>:
 8014500:	4770      	bx	lr
 8014502:	bf00      	nop
	...

08014510 <_malloc_trim_r>:
 8014510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014512:	4f23      	ldr	r7, [pc, #140]	; (80145a0 <_malloc_trim_r+0x90>)
 8014514:	460c      	mov	r4, r1
 8014516:	4606      	mov	r6, r0
 8014518:	f7fc ffd2 	bl	80114c0 <__malloc_lock>
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	685d      	ldr	r5, [r3, #4]
 8014520:	f025 0503 	bic.w	r5, r5, #3
 8014524:	1b29      	subs	r1, r5, r4
 8014526:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 801452a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 801452e:	f021 010f 	bic.w	r1, r1, #15
 8014532:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8014536:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 801453a:	db07      	blt.n	801454c <_malloc_trim_r+0x3c>
 801453c:	2100      	movs	r1, #0
 801453e:	4630      	mov	r0, r6
 8014540:	f7f9 fe46 	bl	800e1d0 <_sbrk_r>
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	442b      	add	r3, r5
 8014548:	4298      	cmp	r0, r3
 801454a:	d004      	beq.n	8014556 <_malloc_trim_r+0x46>
 801454c:	4630      	mov	r0, r6
 801454e:	f7fc ffbf 	bl	80114d0 <__malloc_unlock>
 8014552:	2000      	movs	r0, #0
 8014554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014556:	4261      	negs	r1, r4
 8014558:	4630      	mov	r0, r6
 801455a:	f7f9 fe39 	bl	800e1d0 <_sbrk_r>
 801455e:	3001      	adds	r0, #1
 8014560:	d00d      	beq.n	801457e <_malloc_trim_r+0x6e>
 8014562:	4b10      	ldr	r3, [pc, #64]	; (80145a4 <_malloc_trim_r+0x94>)
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	6819      	ldr	r1, [r3, #0]
 8014568:	1b2d      	subs	r5, r5, r4
 801456a:	f045 0501 	orr.w	r5, r5, #1
 801456e:	4630      	mov	r0, r6
 8014570:	1b09      	subs	r1, r1, r4
 8014572:	6055      	str	r5, [r2, #4]
 8014574:	6019      	str	r1, [r3, #0]
 8014576:	f7fc ffab 	bl	80114d0 <__malloc_unlock>
 801457a:	2001      	movs	r0, #1
 801457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801457e:	2100      	movs	r1, #0
 8014580:	4630      	mov	r0, r6
 8014582:	f7f9 fe25 	bl	800e1d0 <_sbrk_r>
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	1a83      	subs	r3, r0, r2
 801458a:	2b0f      	cmp	r3, #15
 801458c:	ddde      	ble.n	801454c <_malloc_trim_r+0x3c>
 801458e:	4c06      	ldr	r4, [pc, #24]	; (80145a8 <_malloc_trim_r+0x98>)
 8014590:	4904      	ldr	r1, [pc, #16]	; (80145a4 <_malloc_trim_r+0x94>)
 8014592:	6824      	ldr	r4, [r4, #0]
 8014594:	f043 0301 	orr.w	r3, r3, #1
 8014598:	1b00      	subs	r0, r0, r4
 801459a:	6053      	str	r3, [r2, #4]
 801459c:	6008      	str	r0, [r1, #0]
 801459e:	e7d5      	b.n	801454c <_malloc_trim_r+0x3c>
 80145a0:	20000c44 	.word	0x20000c44
 80145a4:	20001c40 	.word	0x20001c40
 80145a8:	20001050 	.word	0x20001050
 80145ac:	00000000 	.word	0x00000000

080145b0 <_free_r>:
 80145b0:	2900      	cmp	r1, #0
 80145b2:	d045      	beq.n	8014640 <_free_r+0x90>
 80145b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145b8:	460d      	mov	r5, r1
 80145ba:	4680      	mov	r8, r0
 80145bc:	f7fc ff80 	bl	80114c0 <__malloc_lock>
 80145c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80145c4:	496a      	ldr	r1, [pc, #424]	; (8014770 <_free_r+0x1c0>)
 80145c6:	f027 0301 	bic.w	r3, r7, #1
 80145ca:	f1a5 0408 	sub.w	r4, r5, #8
 80145ce:	18e2      	adds	r2, r4, r3
 80145d0:	688e      	ldr	r6, [r1, #8]
 80145d2:	6850      	ldr	r0, [r2, #4]
 80145d4:	42b2      	cmp	r2, r6
 80145d6:	f020 0003 	bic.w	r0, r0, #3
 80145da:	d062      	beq.n	80146a2 <_free_r+0xf2>
 80145dc:	07fe      	lsls	r6, r7, #31
 80145de:	6050      	str	r0, [r2, #4]
 80145e0:	d40b      	bmi.n	80145fa <_free_r+0x4a>
 80145e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80145e6:	1be4      	subs	r4, r4, r7
 80145e8:	f101 0e08 	add.w	lr, r1, #8
 80145ec:	68a5      	ldr	r5, [r4, #8]
 80145ee:	4575      	cmp	r5, lr
 80145f0:	443b      	add	r3, r7
 80145f2:	d06f      	beq.n	80146d4 <_free_r+0x124>
 80145f4:	68e7      	ldr	r7, [r4, #12]
 80145f6:	60ef      	str	r7, [r5, #12]
 80145f8:	60bd      	str	r5, [r7, #8]
 80145fa:	1815      	adds	r5, r2, r0
 80145fc:	686d      	ldr	r5, [r5, #4]
 80145fe:	07ed      	lsls	r5, r5, #31
 8014600:	d542      	bpl.n	8014688 <_free_r+0xd8>
 8014602:	f043 0201 	orr.w	r2, r3, #1
 8014606:	6062      	str	r2, [r4, #4]
 8014608:	50e3      	str	r3, [r4, r3]
 801460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801460e:	d218      	bcs.n	8014642 <_free_r+0x92>
 8014610:	08db      	lsrs	r3, r3, #3
 8014612:	1c5a      	adds	r2, r3, #1
 8014614:	684d      	ldr	r5, [r1, #4]
 8014616:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 801461a:	60a7      	str	r7, [r4, #8]
 801461c:	2001      	movs	r0, #1
 801461e:	109b      	asrs	r3, r3, #2
 8014620:	fa00 f303 	lsl.w	r3, r0, r3
 8014624:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8014628:	431d      	orrs	r5, r3
 801462a:	3808      	subs	r0, #8
 801462c:	60e0      	str	r0, [r4, #12]
 801462e:	604d      	str	r5, [r1, #4]
 8014630:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8014634:	60fc      	str	r4, [r7, #12]
 8014636:	4640      	mov	r0, r8
 8014638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801463c:	f7fc bf48 	b.w	80114d0 <__malloc_unlock>
 8014640:	4770      	bx	lr
 8014642:	0a5a      	lsrs	r2, r3, #9
 8014644:	2a04      	cmp	r2, #4
 8014646:	d853      	bhi.n	80146f0 <_free_r+0x140>
 8014648:	099a      	lsrs	r2, r3, #6
 801464a:	f102 0739 	add.w	r7, r2, #57	; 0x39
 801464e:	007f      	lsls	r7, r7, #1
 8014650:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8014654:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8014658:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 801465c:	4944      	ldr	r1, [pc, #272]	; (8014770 <_free_r+0x1c0>)
 801465e:	3808      	subs	r0, #8
 8014660:	4290      	cmp	r0, r2
 8014662:	d04d      	beq.n	8014700 <_free_r+0x150>
 8014664:	6851      	ldr	r1, [r2, #4]
 8014666:	f021 0103 	bic.w	r1, r1, #3
 801466a:	428b      	cmp	r3, r1
 801466c:	d202      	bcs.n	8014674 <_free_r+0xc4>
 801466e:	6892      	ldr	r2, [r2, #8]
 8014670:	4290      	cmp	r0, r2
 8014672:	d1f7      	bne.n	8014664 <_free_r+0xb4>
 8014674:	68d0      	ldr	r0, [r2, #12]
 8014676:	60e0      	str	r0, [r4, #12]
 8014678:	60a2      	str	r2, [r4, #8]
 801467a:	6084      	str	r4, [r0, #8]
 801467c:	60d4      	str	r4, [r2, #12]
 801467e:	4640      	mov	r0, r8
 8014680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014684:	f7fc bf24 	b.w	80114d0 <__malloc_unlock>
 8014688:	6895      	ldr	r5, [r2, #8]
 801468a:	4f3a      	ldr	r7, [pc, #232]	; (8014774 <_free_r+0x1c4>)
 801468c:	42bd      	cmp	r5, r7
 801468e:	4403      	add	r3, r0
 8014690:	d03f      	beq.n	8014712 <_free_r+0x162>
 8014692:	68d0      	ldr	r0, [r2, #12]
 8014694:	60e8      	str	r0, [r5, #12]
 8014696:	f043 0201 	orr.w	r2, r3, #1
 801469a:	6085      	str	r5, [r0, #8]
 801469c:	6062      	str	r2, [r4, #4]
 801469e:	50e3      	str	r3, [r4, r3]
 80146a0:	e7b3      	b.n	801460a <_free_r+0x5a>
 80146a2:	07ff      	lsls	r7, r7, #31
 80146a4:	4403      	add	r3, r0
 80146a6:	d407      	bmi.n	80146b8 <_free_r+0x108>
 80146a8:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80146ac:	1aa4      	subs	r4, r4, r2
 80146ae:	4413      	add	r3, r2
 80146b0:	68a0      	ldr	r0, [r4, #8]
 80146b2:	68e2      	ldr	r2, [r4, #12]
 80146b4:	60c2      	str	r2, [r0, #12]
 80146b6:	6090      	str	r0, [r2, #8]
 80146b8:	4a2f      	ldr	r2, [pc, #188]	; (8014778 <_free_r+0x1c8>)
 80146ba:	6812      	ldr	r2, [r2, #0]
 80146bc:	f043 0001 	orr.w	r0, r3, #1
 80146c0:	4293      	cmp	r3, r2
 80146c2:	6060      	str	r0, [r4, #4]
 80146c4:	608c      	str	r4, [r1, #8]
 80146c6:	d3b6      	bcc.n	8014636 <_free_r+0x86>
 80146c8:	4b2c      	ldr	r3, [pc, #176]	; (801477c <_free_r+0x1cc>)
 80146ca:	4640      	mov	r0, r8
 80146cc:	6819      	ldr	r1, [r3, #0]
 80146ce:	f7ff ff1f 	bl	8014510 <_malloc_trim_r>
 80146d2:	e7b0      	b.n	8014636 <_free_r+0x86>
 80146d4:	1811      	adds	r1, r2, r0
 80146d6:	6849      	ldr	r1, [r1, #4]
 80146d8:	07c9      	lsls	r1, r1, #31
 80146da:	d444      	bmi.n	8014766 <_free_r+0x1b6>
 80146dc:	6891      	ldr	r1, [r2, #8]
 80146de:	68d2      	ldr	r2, [r2, #12]
 80146e0:	60ca      	str	r2, [r1, #12]
 80146e2:	4403      	add	r3, r0
 80146e4:	f043 0001 	orr.w	r0, r3, #1
 80146e8:	6091      	str	r1, [r2, #8]
 80146ea:	6060      	str	r0, [r4, #4]
 80146ec:	50e3      	str	r3, [r4, r3]
 80146ee:	e7a2      	b.n	8014636 <_free_r+0x86>
 80146f0:	2a14      	cmp	r2, #20
 80146f2:	d817      	bhi.n	8014724 <_free_r+0x174>
 80146f4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80146f8:	007f      	lsls	r7, r7, #1
 80146fa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80146fe:	e7a9      	b.n	8014654 <_free_r+0xa4>
 8014700:	10aa      	asrs	r2, r5, #2
 8014702:	684b      	ldr	r3, [r1, #4]
 8014704:	2501      	movs	r5, #1
 8014706:	fa05 f202 	lsl.w	r2, r5, r2
 801470a:	4313      	orrs	r3, r2
 801470c:	604b      	str	r3, [r1, #4]
 801470e:	4602      	mov	r2, r0
 8014710:	e7b1      	b.n	8014676 <_free_r+0xc6>
 8014712:	f043 0201 	orr.w	r2, r3, #1
 8014716:	614c      	str	r4, [r1, #20]
 8014718:	610c      	str	r4, [r1, #16]
 801471a:	60e5      	str	r5, [r4, #12]
 801471c:	60a5      	str	r5, [r4, #8]
 801471e:	6062      	str	r2, [r4, #4]
 8014720:	50e3      	str	r3, [r4, r3]
 8014722:	e788      	b.n	8014636 <_free_r+0x86>
 8014724:	2a54      	cmp	r2, #84	; 0x54
 8014726:	d806      	bhi.n	8014736 <_free_r+0x186>
 8014728:	0b1a      	lsrs	r2, r3, #12
 801472a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 801472e:	007f      	lsls	r7, r7, #1
 8014730:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8014734:	e78e      	b.n	8014654 <_free_r+0xa4>
 8014736:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801473a:	d806      	bhi.n	801474a <_free_r+0x19a>
 801473c:	0bda      	lsrs	r2, r3, #15
 801473e:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8014742:	007f      	lsls	r7, r7, #1
 8014744:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8014748:	e784      	b.n	8014654 <_free_r+0xa4>
 801474a:	f240 5054 	movw	r0, #1364	; 0x554
 801474e:	4282      	cmp	r2, r0
 8014750:	d806      	bhi.n	8014760 <_free_r+0x1b0>
 8014752:	0c9a      	lsrs	r2, r3, #18
 8014754:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8014758:	007f      	lsls	r7, r7, #1
 801475a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 801475e:	e779      	b.n	8014654 <_free_r+0xa4>
 8014760:	27fe      	movs	r7, #254	; 0xfe
 8014762:	257e      	movs	r5, #126	; 0x7e
 8014764:	e776      	b.n	8014654 <_free_r+0xa4>
 8014766:	f043 0201 	orr.w	r2, r3, #1
 801476a:	6062      	str	r2, [r4, #4]
 801476c:	50e3      	str	r3, [r4, r3]
 801476e:	e762      	b.n	8014636 <_free_r+0x86>
 8014770:	20000c44 	.word	0x20000c44
 8014774:	20000c4c 	.word	0x20000c4c
 8014778:	2000104c 	.word	0x2000104c
 801477c:	20001c3c 	.word	0x20001c3c

08014780 <_fwalk_reent>:
 8014780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014784:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8014788:	d01f      	beq.n	80147ca <_fwalk_reent+0x4a>
 801478a:	4688      	mov	r8, r1
 801478c:	4606      	mov	r6, r0
 801478e:	f04f 0900 	mov.w	r9, #0
 8014792:	687d      	ldr	r5, [r7, #4]
 8014794:	68bc      	ldr	r4, [r7, #8]
 8014796:	3d01      	subs	r5, #1
 8014798:	d411      	bmi.n	80147be <_fwalk_reent+0x3e>
 801479a:	89a3      	ldrh	r3, [r4, #12]
 801479c:	2b01      	cmp	r3, #1
 801479e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80147a2:	d908      	bls.n	80147b6 <_fwalk_reent+0x36>
 80147a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80147a8:	3301      	adds	r3, #1
 80147aa:	4621      	mov	r1, r4
 80147ac:	4630      	mov	r0, r6
 80147ae:	d002      	beq.n	80147b6 <_fwalk_reent+0x36>
 80147b0:	47c0      	blx	r8
 80147b2:	ea49 0900 	orr.w	r9, r9, r0
 80147b6:	1c6b      	adds	r3, r5, #1
 80147b8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80147bc:	d1ed      	bne.n	801479a <_fwalk_reent+0x1a>
 80147be:	683f      	ldr	r7, [r7, #0]
 80147c0:	2f00      	cmp	r7, #0
 80147c2:	d1e6      	bne.n	8014792 <_fwalk_reent+0x12>
 80147c4:	4648      	mov	r0, r9
 80147c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147ca:	46b9      	mov	r9, r7
 80147cc:	4648      	mov	r0, r9
 80147ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d2:	bf00      	nop
	...

080147e0 <_localeconv_r>:
 80147e0:	4800      	ldr	r0, [pc, #0]	; (80147e4 <_localeconv_r+0x4>)
 80147e2:	4770      	bx	lr
 80147e4:	20001054 	.word	0x20001054
	...

080147f0 <__smakebuf_r>:
 80147f0:	898b      	ldrh	r3, [r1, #12]
 80147f2:	b29a      	uxth	r2, r3
 80147f4:	f012 0f02 	tst.w	r2, #2
 80147f8:	d13c      	bne.n	8014874 <__smakebuf_r+0x84>
 80147fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147fc:	460c      	mov	r4, r1
 80147fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014802:	2900      	cmp	r1, #0
 8014804:	b091      	sub	sp, #68	; 0x44
 8014806:	4605      	mov	r5, r0
 8014808:	db19      	blt.n	801483e <__smakebuf_r+0x4e>
 801480a:	aa01      	add	r2, sp, #4
 801480c:	f7f9 fcf0 	bl	800e1f0 <_fstat_r>
 8014810:	2800      	cmp	r0, #0
 8014812:	db12      	blt.n	801483a <__smakebuf_r+0x4a>
 8014814:	9b02      	ldr	r3, [sp, #8]
 8014816:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801481a:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 801481e:	fab7 f787 	clz	r7, r7
 8014822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014826:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801482a:	d02a      	beq.n	8014882 <__smakebuf_r+0x92>
 801482c:	89a3      	ldrh	r3, [r4, #12]
 801482e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014832:	81a3      	strh	r3, [r4, #12]
 8014834:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8014838:	e00b      	b.n	8014852 <__smakebuf_r+0x62>
 801483a:	89a3      	ldrh	r3, [r4, #12]
 801483c:	b29a      	uxth	r2, r3
 801483e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014842:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014846:	81a3      	strh	r3, [r4, #12]
 8014848:	bf14      	ite	ne
 801484a:	2640      	movne	r6, #64	; 0x40
 801484c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8014850:	2700      	movs	r7, #0
 8014852:	4631      	mov	r1, r6
 8014854:	4628      	mov	r0, r5
 8014856:	f7fc fa8b 	bl	8010d70 <_malloc_r>
 801485a:	89a3      	ldrh	r3, [r4, #12]
 801485c:	b340      	cbz	r0, 80148b0 <__smakebuf_r+0xc0>
 801485e:	4a1a      	ldr	r2, [pc, #104]	; (80148c8 <__smakebuf_r+0xd8>)
 8014860:	63ea      	str	r2, [r5, #60]	; 0x3c
 8014862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014866:	81a3      	strh	r3, [r4, #12]
 8014868:	6020      	str	r0, [r4, #0]
 801486a:	6120      	str	r0, [r4, #16]
 801486c:	6166      	str	r6, [r4, #20]
 801486e:	b99f      	cbnz	r7, 8014898 <__smakebuf_r+0xa8>
 8014870:	b011      	add	sp, #68	; 0x44
 8014872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014874:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8014878:	2201      	movs	r2, #1
 801487a:	600b      	str	r3, [r1, #0]
 801487c:	610b      	str	r3, [r1, #16]
 801487e:	614a      	str	r2, [r1, #20]
 8014880:	4770      	bx	lr
 8014882:	4b12      	ldr	r3, [pc, #72]	; (80148cc <__smakebuf_r+0xdc>)
 8014884:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014886:	429a      	cmp	r2, r3
 8014888:	d1d0      	bne.n	801482c <__smakebuf_r+0x3c>
 801488a:	89a3      	ldrh	r3, [r4, #12]
 801488c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8014890:	4333      	orrs	r3, r6
 8014892:	81a3      	strh	r3, [r4, #12]
 8014894:	64e6      	str	r6, [r4, #76]	; 0x4c
 8014896:	e7dc      	b.n	8014852 <__smakebuf_r+0x62>
 8014898:	4628      	mov	r0, r5
 801489a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801489e:	f7f9 fcb7 	bl	800e210 <_isatty_r>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d0e4      	beq.n	8014870 <__smakebuf_r+0x80>
 80148a6:	89a3      	ldrh	r3, [r4, #12]
 80148a8:	f043 0301 	orr.w	r3, r3, #1
 80148ac:	81a3      	strh	r3, [r4, #12]
 80148ae:	e7df      	b.n	8014870 <__smakebuf_r+0x80>
 80148b0:	059a      	lsls	r2, r3, #22
 80148b2:	d4dd      	bmi.n	8014870 <__smakebuf_r+0x80>
 80148b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148b8:	f043 0302 	orr.w	r3, r3, #2
 80148bc:	2101      	movs	r1, #1
 80148be:	81a3      	strh	r3, [r4, #12]
 80148c0:	6022      	str	r2, [r4, #0]
 80148c2:	6122      	str	r2, [r4, #16]
 80148c4:	6161      	str	r1, [r4, #20]
 80148c6:	e7d3      	b.n	8014870 <__smakebuf_r+0x80>
 80148c8:	080143e1 	.word	0x080143e1
 80148cc:	08015001 	.word	0x08015001

080148d0 <_Balloc>:
 80148d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80148d2:	b570      	push	{r4, r5, r6, lr}
 80148d4:	4605      	mov	r5, r0
 80148d6:	460c      	mov	r4, r1
 80148d8:	b14b      	cbz	r3, 80148ee <_Balloc+0x1e>
 80148da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80148de:	b180      	cbz	r0, 8014902 <_Balloc+0x32>
 80148e0:	6802      	ldr	r2, [r0, #0]
 80148e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80148e6:	2300      	movs	r3, #0
 80148e8:	6103      	str	r3, [r0, #16]
 80148ea:	60c3      	str	r3, [r0, #12]
 80148ec:	bd70      	pop	{r4, r5, r6, pc}
 80148ee:	2221      	movs	r2, #33	; 0x21
 80148f0:	2104      	movs	r1, #4
 80148f2:	f000 fc1d 	bl	8015130 <_calloc_r>
 80148f6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80148f8:	4603      	mov	r3, r0
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d1ed      	bne.n	80148da <_Balloc+0xa>
 80148fe:	2000      	movs	r0, #0
 8014900:	bd70      	pop	{r4, r5, r6, pc}
 8014902:	2101      	movs	r1, #1
 8014904:	fa01 f604 	lsl.w	r6, r1, r4
 8014908:	1d72      	adds	r2, r6, #5
 801490a:	4628      	mov	r0, r5
 801490c:	0092      	lsls	r2, r2, #2
 801490e:	f000 fc0f 	bl	8015130 <_calloc_r>
 8014912:	2800      	cmp	r0, #0
 8014914:	d0f3      	beq.n	80148fe <_Balloc+0x2e>
 8014916:	6044      	str	r4, [r0, #4]
 8014918:	6086      	str	r6, [r0, #8]
 801491a:	e7e4      	b.n	80148e6 <_Balloc+0x16>
 801491c:	0000      	movs	r0, r0
	...

08014920 <_Bfree>:
 8014920:	b131      	cbz	r1, 8014930 <_Bfree+0x10>
 8014922:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014924:	684a      	ldr	r2, [r1, #4]
 8014926:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801492a:	6008      	str	r0, [r1, #0]
 801492c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014930:	4770      	bx	lr
 8014932:	bf00      	nop
	...

08014940 <__multadd>:
 8014940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014942:	690c      	ldr	r4, [r1, #16]
 8014944:	b083      	sub	sp, #12
 8014946:	460d      	mov	r5, r1
 8014948:	4606      	mov	r6, r0
 801494a:	f101 0e14 	add.w	lr, r1, #20
 801494e:	2700      	movs	r7, #0
 8014950:	f8de 0000 	ldr.w	r0, [lr]
 8014954:	b281      	uxth	r1, r0
 8014956:	fb02 3101 	mla	r1, r2, r1, r3
 801495a:	0c0b      	lsrs	r3, r1, #16
 801495c:	0c00      	lsrs	r0, r0, #16
 801495e:	fb02 3300 	mla	r3, r2, r0, r3
 8014962:	b289      	uxth	r1, r1
 8014964:	3701      	adds	r7, #1
 8014966:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801496a:	42bc      	cmp	r4, r7
 801496c:	f84e 1b04 	str.w	r1, [lr], #4
 8014970:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8014974:	dcec      	bgt.n	8014950 <__multadd+0x10>
 8014976:	b13b      	cbz	r3, 8014988 <__multadd+0x48>
 8014978:	68aa      	ldr	r2, [r5, #8]
 801497a:	4294      	cmp	r4, r2
 801497c:	da07      	bge.n	801498e <__multadd+0x4e>
 801497e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8014982:	3401      	adds	r4, #1
 8014984:	6153      	str	r3, [r2, #20]
 8014986:	612c      	str	r4, [r5, #16]
 8014988:	4628      	mov	r0, r5
 801498a:	b003      	add	sp, #12
 801498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801498e:	6869      	ldr	r1, [r5, #4]
 8014990:	9301      	str	r3, [sp, #4]
 8014992:	3101      	adds	r1, #1
 8014994:	4630      	mov	r0, r6
 8014996:	f7ff ff9b 	bl	80148d0 <_Balloc>
 801499a:	692a      	ldr	r2, [r5, #16]
 801499c:	3202      	adds	r2, #2
 801499e:	f105 010c 	add.w	r1, r5, #12
 80149a2:	4607      	mov	r7, r0
 80149a4:	0092      	lsls	r2, r2, #2
 80149a6:	300c      	adds	r0, #12
 80149a8:	f7f5 faaa 	bl	8009f00 <memcpy>
 80149ac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80149ae:	6869      	ldr	r1, [r5, #4]
 80149b0:	9b01      	ldr	r3, [sp, #4]
 80149b2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80149b6:	6028      	str	r0, [r5, #0]
 80149b8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80149bc:	463d      	mov	r5, r7
 80149be:	e7de      	b.n	801497e <__multadd+0x3e>

080149c0 <__hi0bits>:
 80149c0:	0c03      	lsrs	r3, r0, #16
 80149c2:	041b      	lsls	r3, r3, #16
 80149c4:	b9b3      	cbnz	r3, 80149f4 <__hi0bits+0x34>
 80149c6:	0400      	lsls	r0, r0, #16
 80149c8:	2310      	movs	r3, #16
 80149ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80149ce:	bf04      	itt	eq
 80149d0:	0200      	lsleq	r0, r0, #8
 80149d2:	3308      	addeq	r3, #8
 80149d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80149d8:	bf04      	itt	eq
 80149da:	0100      	lsleq	r0, r0, #4
 80149dc:	3304      	addeq	r3, #4
 80149de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80149e2:	bf04      	itt	eq
 80149e4:	0080      	lsleq	r0, r0, #2
 80149e6:	3302      	addeq	r3, #2
 80149e8:	2800      	cmp	r0, #0
 80149ea:	db07      	blt.n	80149fc <__hi0bits+0x3c>
 80149ec:	0042      	lsls	r2, r0, #1
 80149ee:	d403      	bmi.n	80149f8 <__hi0bits+0x38>
 80149f0:	2020      	movs	r0, #32
 80149f2:	4770      	bx	lr
 80149f4:	2300      	movs	r3, #0
 80149f6:	e7e8      	b.n	80149ca <__hi0bits+0xa>
 80149f8:	1c58      	adds	r0, r3, #1
 80149fa:	4770      	bx	lr
 80149fc:	4618      	mov	r0, r3
 80149fe:	4770      	bx	lr

08014a00 <__lo0bits>:
 8014a00:	6803      	ldr	r3, [r0, #0]
 8014a02:	f013 0207 	ands.w	r2, r3, #7
 8014a06:	d007      	beq.n	8014a18 <__lo0bits+0x18>
 8014a08:	07d9      	lsls	r1, r3, #31
 8014a0a:	d420      	bmi.n	8014a4e <__lo0bits+0x4e>
 8014a0c:	079a      	lsls	r2, r3, #30
 8014a0e:	d420      	bmi.n	8014a52 <__lo0bits+0x52>
 8014a10:	089b      	lsrs	r3, r3, #2
 8014a12:	6003      	str	r3, [r0, #0]
 8014a14:	2002      	movs	r0, #2
 8014a16:	4770      	bx	lr
 8014a18:	b299      	uxth	r1, r3
 8014a1a:	b909      	cbnz	r1, 8014a20 <__lo0bits+0x20>
 8014a1c:	0c1b      	lsrs	r3, r3, #16
 8014a1e:	2210      	movs	r2, #16
 8014a20:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014a24:	bf04      	itt	eq
 8014a26:	0a1b      	lsreq	r3, r3, #8
 8014a28:	3208      	addeq	r2, #8
 8014a2a:	0719      	lsls	r1, r3, #28
 8014a2c:	bf04      	itt	eq
 8014a2e:	091b      	lsreq	r3, r3, #4
 8014a30:	3204      	addeq	r2, #4
 8014a32:	0799      	lsls	r1, r3, #30
 8014a34:	bf04      	itt	eq
 8014a36:	089b      	lsreq	r3, r3, #2
 8014a38:	3202      	addeq	r2, #2
 8014a3a:	07d9      	lsls	r1, r3, #31
 8014a3c:	d404      	bmi.n	8014a48 <__lo0bits+0x48>
 8014a3e:	085b      	lsrs	r3, r3, #1
 8014a40:	d101      	bne.n	8014a46 <__lo0bits+0x46>
 8014a42:	2020      	movs	r0, #32
 8014a44:	4770      	bx	lr
 8014a46:	3201      	adds	r2, #1
 8014a48:	6003      	str	r3, [r0, #0]
 8014a4a:	4610      	mov	r0, r2
 8014a4c:	4770      	bx	lr
 8014a4e:	2000      	movs	r0, #0
 8014a50:	4770      	bx	lr
 8014a52:	085b      	lsrs	r3, r3, #1
 8014a54:	6003      	str	r3, [r0, #0]
 8014a56:	2001      	movs	r0, #1
 8014a58:	4770      	bx	lr
 8014a5a:	bf00      	nop
 8014a5c:	0000      	movs	r0, r0
	...

08014a60 <__i2b>:
 8014a60:	b510      	push	{r4, lr}
 8014a62:	460c      	mov	r4, r1
 8014a64:	2101      	movs	r1, #1
 8014a66:	f7ff ff33 	bl	80148d0 <_Balloc>
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	6144      	str	r4, [r0, #20]
 8014a6e:	6102      	str	r2, [r0, #16]
 8014a70:	bd10      	pop	{r4, pc}
 8014a72:	bf00      	nop
	...

08014a80 <__multiply>:
 8014a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a84:	690d      	ldr	r5, [r1, #16]
 8014a86:	6917      	ldr	r7, [r2, #16]
 8014a88:	42bd      	cmp	r5, r7
 8014a8a:	b083      	sub	sp, #12
 8014a8c:	460c      	mov	r4, r1
 8014a8e:	4616      	mov	r6, r2
 8014a90:	da04      	bge.n	8014a9c <__multiply+0x1c>
 8014a92:	462a      	mov	r2, r5
 8014a94:	4634      	mov	r4, r6
 8014a96:	463d      	mov	r5, r7
 8014a98:	460e      	mov	r6, r1
 8014a9a:	4617      	mov	r7, r2
 8014a9c:	68a3      	ldr	r3, [r4, #8]
 8014a9e:	6861      	ldr	r1, [r4, #4]
 8014aa0:	eb05 0807 	add.w	r8, r5, r7
 8014aa4:	4598      	cmp	r8, r3
 8014aa6:	bfc8      	it	gt
 8014aa8:	3101      	addgt	r1, #1
 8014aaa:	f7ff ff11 	bl	80148d0 <_Balloc>
 8014aae:	f100 0c14 	add.w	ip, r0, #20
 8014ab2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8014ab6:	45cc      	cmp	ip, r9
 8014ab8:	9000      	str	r0, [sp, #0]
 8014aba:	d205      	bcs.n	8014ac8 <__multiply+0x48>
 8014abc:	4663      	mov	r3, ip
 8014abe:	2100      	movs	r1, #0
 8014ac0:	f843 1b04 	str.w	r1, [r3], #4
 8014ac4:	4599      	cmp	r9, r3
 8014ac6:	d8fb      	bhi.n	8014ac0 <__multiply+0x40>
 8014ac8:	f106 0214 	add.w	r2, r6, #20
 8014acc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8014ad0:	f104 0314 	add.w	r3, r4, #20
 8014ad4:	4552      	cmp	r2, sl
 8014ad6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8014ada:	d254      	bcs.n	8014b86 <__multiply+0x106>
 8014adc:	f8cd 9004 	str.w	r9, [sp, #4]
 8014ae0:	4699      	mov	r9, r3
 8014ae2:	f852 3b04 	ldr.w	r3, [r2], #4
 8014ae6:	fa1f fb83 	uxth.w	fp, r3
 8014aea:	f1bb 0f00 	cmp.w	fp, #0
 8014aee:	d020      	beq.n	8014b32 <__multiply+0xb2>
 8014af0:	2000      	movs	r0, #0
 8014af2:	464f      	mov	r7, r9
 8014af4:	4666      	mov	r6, ip
 8014af6:	4605      	mov	r5, r0
 8014af8:	e000      	b.n	8014afc <__multiply+0x7c>
 8014afa:	461e      	mov	r6, r3
 8014afc:	f857 4b04 	ldr.w	r4, [r7], #4
 8014b00:	6830      	ldr	r0, [r6, #0]
 8014b02:	b2a1      	uxth	r1, r4
 8014b04:	b283      	uxth	r3, r0
 8014b06:	fb0b 3101 	mla	r1, fp, r1, r3
 8014b0a:	0c24      	lsrs	r4, r4, #16
 8014b0c:	0c00      	lsrs	r0, r0, #16
 8014b0e:	194b      	adds	r3, r1, r5
 8014b10:	fb0b 0004 	mla	r0, fp, r4, r0
 8014b14:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8014b18:	b299      	uxth	r1, r3
 8014b1a:	4633      	mov	r3, r6
 8014b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014b20:	45be      	cmp	lr, r7
 8014b22:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8014b26:	f843 1b04 	str.w	r1, [r3], #4
 8014b2a:	d8e6      	bhi.n	8014afa <__multiply+0x7a>
 8014b2c:	6075      	str	r5, [r6, #4]
 8014b2e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8014b32:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8014b36:	d020      	beq.n	8014b7a <__multiply+0xfa>
 8014b38:	f8dc 3000 	ldr.w	r3, [ip]
 8014b3c:	4667      	mov	r7, ip
 8014b3e:	4618      	mov	r0, r3
 8014b40:	464d      	mov	r5, r9
 8014b42:	2100      	movs	r1, #0
 8014b44:	e000      	b.n	8014b48 <__multiply+0xc8>
 8014b46:	4637      	mov	r7, r6
 8014b48:	882c      	ldrh	r4, [r5, #0]
 8014b4a:	0c00      	lsrs	r0, r0, #16
 8014b4c:	fb0b 0004 	mla	r0, fp, r4, r0
 8014b50:	4401      	add	r1, r0
 8014b52:	b29c      	uxth	r4, r3
 8014b54:	463e      	mov	r6, r7
 8014b56:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8014b5a:	f846 3b04 	str.w	r3, [r6], #4
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f855 4b04 	ldr.w	r4, [r5], #4
 8014b64:	b283      	uxth	r3, r0
 8014b66:	0c24      	lsrs	r4, r4, #16
 8014b68:	fb0b 3404 	mla	r4, fp, r4, r3
 8014b6c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8014b70:	45ae      	cmp	lr, r5
 8014b72:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8014b76:	d8e6      	bhi.n	8014b46 <__multiply+0xc6>
 8014b78:	607b      	str	r3, [r7, #4]
 8014b7a:	4592      	cmp	sl, r2
 8014b7c:	f10c 0c04 	add.w	ip, ip, #4
 8014b80:	d8af      	bhi.n	8014ae2 <__multiply+0x62>
 8014b82:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014b86:	f1b8 0f00 	cmp.w	r8, #0
 8014b8a:	dd0b      	ble.n	8014ba4 <__multiply+0x124>
 8014b8c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8014b90:	f1a9 0904 	sub.w	r9, r9, #4
 8014b94:	b11b      	cbz	r3, 8014b9e <__multiply+0x11e>
 8014b96:	e005      	b.n	8014ba4 <__multiply+0x124>
 8014b98:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8014b9c:	b913      	cbnz	r3, 8014ba4 <__multiply+0x124>
 8014b9e:	f1b8 0801 	subs.w	r8, r8, #1
 8014ba2:	d1f9      	bne.n	8014b98 <__multiply+0x118>
 8014ba4:	9800      	ldr	r0, [sp, #0]
 8014ba6:	f8c0 8010 	str.w	r8, [r0, #16]
 8014baa:	b003      	add	sp, #12
 8014bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014bb0 <__pow5mult>:
 8014bb0:	f012 0303 	ands.w	r3, r2, #3
 8014bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb8:	4614      	mov	r4, r2
 8014bba:	4607      	mov	r7, r0
 8014bbc:	d12e      	bne.n	8014c1c <__pow5mult+0x6c>
 8014bbe:	460e      	mov	r6, r1
 8014bc0:	10a4      	asrs	r4, r4, #2
 8014bc2:	d01c      	beq.n	8014bfe <__pow5mult+0x4e>
 8014bc4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8014bc6:	b395      	cbz	r5, 8014c2e <__pow5mult+0x7e>
 8014bc8:	07e3      	lsls	r3, r4, #31
 8014bca:	f04f 0800 	mov.w	r8, #0
 8014bce:	d406      	bmi.n	8014bde <__pow5mult+0x2e>
 8014bd0:	1064      	asrs	r4, r4, #1
 8014bd2:	d014      	beq.n	8014bfe <__pow5mult+0x4e>
 8014bd4:	6828      	ldr	r0, [r5, #0]
 8014bd6:	b1a8      	cbz	r0, 8014c04 <__pow5mult+0x54>
 8014bd8:	4605      	mov	r5, r0
 8014bda:	07e3      	lsls	r3, r4, #31
 8014bdc:	d5f8      	bpl.n	8014bd0 <__pow5mult+0x20>
 8014bde:	462a      	mov	r2, r5
 8014be0:	4631      	mov	r1, r6
 8014be2:	4638      	mov	r0, r7
 8014be4:	f7ff ff4c 	bl	8014a80 <__multiply>
 8014be8:	b1b6      	cbz	r6, 8014c18 <__pow5mult+0x68>
 8014bea:	6872      	ldr	r2, [r6, #4]
 8014bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bee:	1064      	asrs	r4, r4, #1
 8014bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014bf4:	6031      	str	r1, [r6, #0]
 8014bf6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8014bfa:	4606      	mov	r6, r0
 8014bfc:	d1ea      	bne.n	8014bd4 <__pow5mult+0x24>
 8014bfe:	4630      	mov	r0, r6
 8014c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c04:	462a      	mov	r2, r5
 8014c06:	4629      	mov	r1, r5
 8014c08:	4638      	mov	r0, r7
 8014c0a:	f7ff ff39 	bl	8014a80 <__multiply>
 8014c0e:	6028      	str	r0, [r5, #0]
 8014c10:	f8c0 8000 	str.w	r8, [r0]
 8014c14:	4605      	mov	r5, r0
 8014c16:	e7e0      	b.n	8014bda <__pow5mult+0x2a>
 8014c18:	4606      	mov	r6, r0
 8014c1a:	e7d9      	b.n	8014bd0 <__pow5mult+0x20>
 8014c1c:	1e5a      	subs	r2, r3, #1
 8014c1e:	4d0b      	ldr	r5, [pc, #44]	; (8014c4c <__pow5mult+0x9c>)
 8014c20:	2300      	movs	r3, #0
 8014c22:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8014c26:	f7ff fe8b 	bl	8014940 <__multadd>
 8014c2a:	4606      	mov	r6, r0
 8014c2c:	e7c8      	b.n	8014bc0 <__pow5mult+0x10>
 8014c2e:	2101      	movs	r1, #1
 8014c30:	4638      	mov	r0, r7
 8014c32:	f7ff fe4d 	bl	80148d0 <_Balloc>
 8014c36:	f240 2171 	movw	r1, #625	; 0x271
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	6141      	str	r1, [r0, #20]
 8014c40:	6102      	str	r2, [r0, #16]
 8014c42:	4605      	mov	r5, r0
 8014c44:	64b8      	str	r0, [r7, #72]	; 0x48
 8014c46:	6003      	str	r3, [r0, #0]
 8014c48:	e7be      	b.n	8014bc8 <__pow5mult+0x18>
 8014c4a:	bf00      	nop
 8014c4c:	08016a90 	.word	0x08016a90

08014c50 <__lshift>:
 8014c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c54:	4691      	mov	r9, r2
 8014c56:	690a      	ldr	r2, [r1, #16]
 8014c58:	688b      	ldr	r3, [r1, #8]
 8014c5a:	ea4f 1469 	mov.w	r4, r9, asr #5
 8014c5e:	eb04 0802 	add.w	r8, r4, r2
 8014c62:	f108 0501 	add.w	r5, r8, #1
 8014c66:	429d      	cmp	r5, r3
 8014c68:	460e      	mov	r6, r1
 8014c6a:	4682      	mov	sl, r0
 8014c6c:	6849      	ldr	r1, [r1, #4]
 8014c6e:	dd04      	ble.n	8014c7a <__lshift+0x2a>
 8014c70:	005b      	lsls	r3, r3, #1
 8014c72:	429d      	cmp	r5, r3
 8014c74:	f101 0101 	add.w	r1, r1, #1
 8014c78:	dcfa      	bgt.n	8014c70 <__lshift+0x20>
 8014c7a:	4650      	mov	r0, sl
 8014c7c:	f7ff fe28 	bl	80148d0 <_Balloc>
 8014c80:	2c00      	cmp	r4, #0
 8014c82:	f100 0214 	add.w	r2, r0, #20
 8014c86:	dd38      	ble.n	8014cfa <__lshift+0xaa>
 8014c88:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	f842 1b04 	str.w	r1, [r2], #4
 8014c92:	4293      	cmp	r3, r2
 8014c94:	d1fb      	bne.n	8014c8e <__lshift+0x3e>
 8014c96:	6934      	ldr	r4, [r6, #16]
 8014c98:	f106 0114 	add.w	r1, r6, #20
 8014c9c:	f019 091f 	ands.w	r9, r9, #31
 8014ca0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8014ca4:	d021      	beq.n	8014cea <__lshift+0x9a>
 8014ca6:	f1c9 0220 	rsb	r2, r9, #32
 8014caa:	2400      	movs	r4, #0
 8014cac:	680f      	ldr	r7, [r1, #0]
 8014cae:	fa07 fc09 	lsl.w	ip, r7, r9
 8014cb2:	ea4c 0404 	orr.w	r4, ip, r4
 8014cb6:	469c      	mov	ip, r3
 8014cb8:	f843 4b04 	str.w	r4, [r3], #4
 8014cbc:	f851 4b04 	ldr.w	r4, [r1], #4
 8014cc0:	458e      	cmp	lr, r1
 8014cc2:	fa24 f402 	lsr.w	r4, r4, r2
 8014cc6:	d8f1      	bhi.n	8014cac <__lshift+0x5c>
 8014cc8:	f8cc 4004 	str.w	r4, [ip, #4]
 8014ccc:	b10c      	cbz	r4, 8014cd2 <__lshift+0x82>
 8014cce:	f108 0502 	add.w	r5, r8, #2
 8014cd2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8014cd6:	6872      	ldr	r2, [r6, #4]
 8014cd8:	3d01      	subs	r5, #1
 8014cda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014cde:	6105      	str	r5, [r0, #16]
 8014ce0:	6031      	str	r1, [r6, #0]
 8014ce2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8014ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cea:	3b04      	subs	r3, #4
 8014cec:	f851 2b04 	ldr.w	r2, [r1], #4
 8014cf0:	f843 2f04 	str.w	r2, [r3, #4]!
 8014cf4:	458e      	cmp	lr, r1
 8014cf6:	d8f9      	bhi.n	8014cec <__lshift+0x9c>
 8014cf8:	e7eb      	b.n	8014cd2 <__lshift+0x82>
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	e7cb      	b.n	8014c96 <__lshift+0x46>
 8014cfe:	bf00      	nop

08014d00 <__mcmp>:
 8014d00:	6902      	ldr	r2, [r0, #16]
 8014d02:	690b      	ldr	r3, [r1, #16]
 8014d04:	1ad2      	subs	r2, r2, r3
 8014d06:	d113      	bne.n	8014d30 <__mcmp+0x30>
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	3014      	adds	r0, #20
 8014d0c:	3114      	adds	r1, #20
 8014d0e:	4419      	add	r1, r3
 8014d10:	b410      	push	{r4}
 8014d12:	4403      	add	r3, r0
 8014d14:	e001      	b.n	8014d1a <__mcmp+0x1a>
 8014d16:	4298      	cmp	r0, r3
 8014d18:	d20c      	bcs.n	8014d34 <__mcmp+0x34>
 8014d1a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8014d1e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d22:	4294      	cmp	r4, r2
 8014d24:	d0f7      	beq.n	8014d16 <__mcmp+0x16>
 8014d26:	d309      	bcc.n	8014d3c <__mcmp+0x3c>
 8014d28:	2001      	movs	r0, #1
 8014d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d2e:	4770      	bx	lr
 8014d30:	4610      	mov	r0, r2
 8014d32:	4770      	bx	lr
 8014d34:	2000      	movs	r0, #0
 8014d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d3a:	4770      	bx	lr
 8014d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d40:	e7f3      	b.n	8014d2a <__mcmp+0x2a>
 8014d42:	bf00      	nop
	...

08014d50 <__mdiff>:
 8014d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d54:	690b      	ldr	r3, [r1, #16]
 8014d56:	460f      	mov	r7, r1
 8014d58:	6911      	ldr	r1, [r2, #16]
 8014d5a:	1a5b      	subs	r3, r3, r1
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	4690      	mov	r8, r2
 8014d60:	d117      	bne.n	8014d92 <__mdiff+0x42>
 8014d62:	0089      	lsls	r1, r1, #2
 8014d64:	f107 0214 	add.w	r2, r7, #20
 8014d68:	f108 0514 	add.w	r5, r8, #20
 8014d6c:	1853      	adds	r3, r2, r1
 8014d6e:	4429      	add	r1, r5
 8014d70:	e001      	b.n	8014d76 <__mdiff+0x26>
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d25e      	bcs.n	8014e34 <__mdiff+0xe4>
 8014d76:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8014d7a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014d7e:	42a6      	cmp	r6, r4
 8014d80:	d0f7      	beq.n	8014d72 <__mdiff+0x22>
 8014d82:	d260      	bcs.n	8014e46 <__mdiff+0xf6>
 8014d84:	463b      	mov	r3, r7
 8014d86:	4614      	mov	r4, r2
 8014d88:	4647      	mov	r7, r8
 8014d8a:	f04f 0901 	mov.w	r9, #1
 8014d8e:	4698      	mov	r8, r3
 8014d90:	e006      	b.n	8014da0 <__mdiff+0x50>
 8014d92:	db5d      	blt.n	8014e50 <__mdiff+0x100>
 8014d94:	f107 0514 	add.w	r5, r7, #20
 8014d98:	f102 0414 	add.w	r4, r2, #20
 8014d9c:	f04f 0900 	mov.w	r9, #0
 8014da0:	6879      	ldr	r1, [r7, #4]
 8014da2:	f7ff fd95 	bl	80148d0 <_Balloc>
 8014da6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014daa:	693e      	ldr	r6, [r7, #16]
 8014dac:	f8c0 900c 	str.w	r9, [r0, #12]
 8014db0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8014db4:	46a6      	mov	lr, r4
 8014db6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8014dba:	f100 0414 	add.w	r4, r0, #20
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	f85e 1b04 	ldr.w	r1, [lr], #4
 8014dc4:	f855 8b04 	ldr.w	r8, [r5], #4
 8014dc8:	b28a      	uxth	r2, r1
 8014dca:	fa13 f388 	uxtah	r3, r3, r8
 8014dce:	0c09      	lsrs	r1, r1, #16
 8014dd0:	1a9a      	subs	r2, r3, r2
 8014dd2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8014dd6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8014dda:	b292      	uxth	r2, r2
 8014ddc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014de0:	45f4      	cmp	ip, lr
 8014de2:	f844 2b04 	str.w	r2, [r4], #4
 8014de6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014dea:	d8e9      	bhi.n	8014dc0 <__mdiff+0x70>
 8014dec:	42af      	cmp	r7, r5
 8014dee:	d917      	bls.n	8014e20 <__mdiff+0xd0>
 8014df0:	46a4      	mov	ip, r4
 8014df2:	4629      	mov	r1, r5
 8014df4:	f851 eb04 	ldr.w	lr, [r1], #4
 8014df8:	fa13 f28e 	uxtah	r2, r3, lr
 8014dfc:	1413      	asrs	r3, r2, #16
 8014dfe:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8014e02:	b292      	uxth	r2, r2
 8014e04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014e08:	428f      	cmp	r7, r1
 8014e0a:	f84c 2b04 	str.w	r2, [ip], #4
 8014e0e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014e12:	d8ef      	bhi.n	8014df4 <__mdiff+0xa4>
 8014e14:	43ed      	mvns	r5, r5
 8014e16:	443d      	add	r5, r7
 8014e18:	f025 0503 	bic.w	r5, r5, #3
 8014e1c:	3504      	adds	r5, #4
 8014e1e:	442c      	add	r4, r5
 8014e20:	3c04      	subs	r4, #4
 8014e22:	b922      	cbnz	r2, 8014e2e <__mdiff+0xde>
 8014e24:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8014e28:	3e01      	subs	r6, #1
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d0fa      	beq.n	8014e24 <__mdiff+0xd4>
 8014e2e:	6106      	str	r6, [r0, #16]
 8014e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e34:	2100      	movs	r1, #0
 8014e36:	f7ff fd4b 	bl	80148d0 <_Balloc>
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	6102      	str	r2, [r0, #16]
 8014e40:	6143      	str	r3, [r0, #20]
 8014e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e46:	462c      	mov	r4, r5
 8014e48:	f04f 0900 	mov.w	r9, #0
 8014e4c:	4615      	mov	r5, r2
 8014e4e:	e7a7      	b.n	8014da0 <__mdiff+0x50>
 8014e50:	463b      	mov	r3, r7
 8014e52:	f107 0414 	add.w	r4, r7, #20
 8014e56:	f108 0514 	add.w	r5, r8, #20
 8014e5a:	4647      	mov	r7, r8
 8014e5c:	f04f 0901 	mov.w	r9, #1
 8014e60:	4698      	mov	r8, r3
 8014e62:	e79d      	b.n	8014da0 <__mdiff+0x50>
	...

08014e70 <__d2b>:
 8014e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e74:	ec57 6b10 	vmov	r6, r7, d0
 8014e78:	b083      	sub	sp, #12
 8014e7a:	4688      	mov	r8, r1
 8014e7c:	2101      	movs	r1, #1
 8014e7e:	463c      	mov	r4, r7
 8014e80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014e84:	4617      	mov	r7, r2
 8014e86:	f7ff fd23 	bl	80148d0 <_Balloc>
 8014e8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014e8e:	4681      	mov	r9, r0
 8014e90:	b10d      	cbz	r5, 8014e96 <__d2b+0x26>
 8014e92:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8014e96:	9401      	str	r4, [sp, #4]
 8014e98:	b31e      	cbz	r6, 8014ee2 <__d2b+0x72>
 8014e9a:	a802      	add	r0, sp, #8
 8014e9c:	f840 6d08 	str.w	r6, [r0, #-8]!
 8014ea0:	f7ff fdae 	bl	8014a00 <__lo0bits>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d134      	bne.n	8014f12 <__d2b+0xa2>
 8014ea8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8014eac:	f8c9 2014 	str.w	r2, [r9, #20]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	bf0c      	ite	eq
 8014eb4:	2101      	moveq	r1, #1
 8014eb6:	2102      	movne	r1, #2
 8014eb8:	f8c9 3018 	str.w	r3, [r9, #24]
 8014ebc:	f8c9 1010 	str.w	r1, [r9, #16]
 8014ec0:	b9dd      	cbnz	r5, 8014efa <__d2b+0x8a>
 8014ec2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8014ec6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014eca:	f8c8 0000 	str.w	r0, [r8]
 8014ece:	6918      	ldr	r0, [r3, #16]
 8014ed0:	f7ff fd76 	bl	80149c0 <__hi0bits>
 8014ed4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014ed8:	6038      	str	r0, [r7, #0]
 8014eda:	4648      	mov	r0, r9
 8014edc:	b003      	add	sp, #12
 8014ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ee2:	a801      	add	r0, sp, #4
 8014ee4:	f7ff fd8c 	bl	8014a00 <__lo0bits>
 8014ee8:	9b01      	ldr	r3, [sp, #4]
 8014eea:	f8c9 3014 	str.w	r3, [r9, #20]
 8014eee:	2101      	movs	r1, #1
 8014ef0:	3020      	adds	r0, #32
 8014ef2:	f8c9 1010 	str.w	r1, [r9, #16]
 8014ef6:	2d00      	cmp	r5, #0
 8014ef8:	d0e3      	beq.n	8014ec2 <__d2b+0x52>
 8014efa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014efe:	4405      	add	r5, r0
 8014f00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014f04:	f8c8 5000 	str.w	r5, [r8]
 8014f08:	6038      	str	r0, [r7, #0]
 8014f0a:	4648      	mov	r0, r9
 8014f0c:	b003      	add	sp, #12
 8014f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f12:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8014f16:	f1c0 0120 	rsb	r1, r0, #32
 8014f1a:	fa03 f101 	lsl.w	r1, r3, r1
 8014f1e:	430a      	orrs	r2, r1
 8014f20:	40c3      	lsrs	r3, r0
 8014f22:	9301      	str	r3, [sp, #4]
 8014f24:	f8c9 2014 	str.w	r2, [r9, #20]
 8014f28:	e7c2      	b.n	8014eb0 <__d2b+0x40>
 8014f2a:	bf00      	nop
 8014f2c:	0000      	movs	r0, r0
	...

08014f30 <__fpclassifyd>:
 8014f30:	ec53 2b10 	vmov	r2, r3, d0
 8014f34:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8014f38:	b410      	push	{r4}
 8014f3a:	d008      	beq.n	8014f4e <__fpclassifyd+0x1e>
 8014f3c:	4811      	ldr	r0, [pc, #68]	; (8014f84 <__fpclassifyd+0x54>)
 8014f3e:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8014f42:	4284      	cmp	r4, r0
 8014f44:	d808      	bhi.n	8014f58 <__fpclassifyd+0x28>
 8014f46:	2004      	movs	r0, #4
 8014f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f4c:	4770      	bx	lr
 8014f4e:	b91a      	cbnz	r2, 8014f58 <__fpclassifyd+0x28>
 8014f50:	2002      	movs	r0, #2
 8014f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f56:	4770      	bx	lr
 8014f58:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8014f5c:	4809      	ldr	r0, [pc, #36]	; (8014f84 <__fpclassifyd+0x54>)
 8014f5e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014f62:	4283      	cmp	r3, r0
 8014f64:	d9ef      	bls.n	8014f46 <__fpclassifyd+0x16>
 8014f66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014f6a:	d201      	bcs.n	8014f70 <__fpclassifyd+0x40>
 8014f6c:	2003      	movs	r0, #3
 8014f6e:	e7eb      	b.n	8014f48 <__fpclassifyd+0x18>
 8014f70:	4b05      	ldr	r3, [pc, #20]	; (8014f88 <__fpclassifyd+0x58>)
 8014f72:	4299      	cmp	r1, r3
 8014f74:	d001      	beq.n	8014f7a <__fpclassifyd+0x4a>
 8014f76:	2000      	movs	r0, #0
 8014f78:	e7e6      	b.n	8014f48 <__fpclassifyd+0x18>
 8014f7a:	fab2 f082 	clz	r0, r2
 8014f7e:	0940      	lsrs	r0, r0, #5
 8014f80:	e7e2      	b.n	8014f48 <__fpclassifyd+0x18>
 8014f82:	bf00      	nop
 8014f84:	7fdfffff 	.word	0x7fdfffff
 8014f88:	7ff00000 	.word	0x7ff00000
 8014f8c:	00000000 	.word	0x00000000

08014f90 <__sread>:
 8014f90:	b510      	push	{r4, lr}
 8014f92:	460c      	mov	r4, r1
 8014f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f98:	f7f9 f8fa 	bl	800e190 <_read_r>
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	db03      	blt.n	8014fa8 <__sread+0x18>
 8014fa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014fa2:	4403      	add	r3, r0
 8014fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8014fa6:	bd10      	pop	{r4, pc}
 8014fa8:	89a3      	ldrh	r3, [r4, #12]
 8014faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014fae:	81a3      	strh	r3, [r4, #12]
 8014fb0:	bd10      	pop	{r4, pc}
 8014fb2:	bf00      	nop
	...

08014fc0 <__swrite>:
 8014fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc4:	4616      	mov	r6, r2
 8014fc6:	898a      	ldrh	r2, [r1, #12]
 8014fc8:	461f      	mov	r7, r3
 8014fca:	05d3      	lsls	r3, r2, #23
 8014fcc:	460c      	mov	r4, r1
 8014fce:	4605      	mov	r5, r0
 8014fd0:	d506      	bpl.n	8014fe0 <__swrite+0x20>
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	2302      	movs	r3, #2
 8014fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fda:	f7f9 f8e1 	bl	800e1a0 <_lseek_r>
 8014fde:	89a2      	ldrh	r2, [r4, #12]
 8014fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fe4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014fe8:	81a2      	strh	r2, [r4, #12]
 8014fea:	463b      	mov	r3, r7
 8014fec:	4632      	mov	r2, r6
 8014fee:	4628      	mov	r0, r5
 8014ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ff4:	f7f9 b8dc 	b.w	800e1b0 <_write_r>
	...

08015000 <__sseek>:
 8015000:	b510      	push	{r4, lr}
 8015002:	460c      	mov	r4, r1
 8015004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015008:	f7f9 f8ca 	bl	800e1a0 <_lseek_r>
 801500c:	89a3      	ldrh	r3, [r4, #12]
 801500e:	1c42      	adds	r2, r0, #1
 8015010:	bf0e      	itee	eq
 8015012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801501a:	6520      	strne	r0, [r4, #80]	; 0x50
 801501c:	81a3      	strh	r3, [r4, #12]
 801501e:	bd10      	pop	{r4, pc}

08015020 <__sclose>:
 8015020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015024:	f7f9 b8cc 	b.w	800e1c0 <_close_r>
	...

08015030 <__ssprint_r>:
 8015030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015034:	6893      	ldr	r3, [r2, #8]
 8015036:	b083      	sub	sp, #12
 8015038:	4690      	mov	r8, r2
 801503a:	2b00      	cmp	r3, #0
 801503c:	d072      	beq.n	8015124 <__ssprint_r+0xf4>
 801503e:	4683      	mov	fp, r0
 8015040:	f04f 0900 	mov.w	r9, #0
 8015044:	6816      	ldr	r6, [r2, #0]
 8015046:	6808      	ldr	r0, [r1, #0]
 8015048:	688b      	ldr	r3, [r1, #8]
 801504a:	460d      	mov	r5, r1
 801504c:	464c      	mov	r4, r9
 801504e:	2c00      	cmp	r4, #0
 8015050:	d045      	beq.n	80150de <__ssprint_r+0xae>
 8015052:	429c      	cmp	r4, r3
 8015054:	461f      	mov	r7, r3
 8015056:	469a      	mov	sl, r3
 8015058:	d346      	bcc.n	80150e8 <__ssprint_r+0xb8>
 801505a:	89ab      	ldrh	r3, [r5, #12]
 801505c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8015060:	d02d      	beq.n	80150be <__ssprint_r+0x8e>
 8015062:	696f      	ldr	r7, [r5, #20]
 8015064:	6929      	ldr	r1, [r5, #16]
 8015066:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801506a:	ebc1 0a00 	rsb	sl, r1, r0
 801506e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8015072:	1c60      	adds	r0, r4, #1
 8015074:	107f      	asrs	r7, r7, #1
 8015076:	4450      	add	r0, sl
 8015078:	42b8      	cmp	r0, r7
 801507a:	463a      	mov	r2, r7
 801507c:	bf84      	itt	hi
 801507e:	4607      	movhi	r7, r0
 8015080:	463a      	movhi	r2, r7
 8015082:	055b      	lsls	r3, r3, #21
 8015084:	d533      	bpl.n	80150ee <__ssprint_r+0xbe>
 8015086:	4611      	mov	r1, r2
 8015088:	4658      	mov	r0, fp
 801508a:	f7fb fe71 	bl	8010d70 <_malloc_r>
 801508e:	2800      	cmp	r0, #0
 8015090:	d037      	beq.n	8015102 <__ssprint_r+0xd2>
 8015092:	4652      	mov	r2, sl
 8015094:	6929      	ldr	r1, [r5, #16]
 8015096:	9001      	str	r0, [sp, #4]
 8015098:	f7f4 ff32 	bl	8009f00 <memcpy>
 801509c:	89aa      	ldrh	r2, [r5, #12]
 801509e:	9b01      	ldr	r3, [sp, #4]
 80150a0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80150a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80150a8:	81aa      	strh	r2, [r5, #12]
 80150aa:	ebca 0207 	rsb	r2, sl, r7
 80150ae:	eb03 000a 	add.w	r0, r3, sl
 80150b2:	616f      	str	r7, [r5, #20]
 80150b4:	612b      	str	r3, [r5, #16]
 80150b6:	6028      	str	r0, [r5, #0]
 80150b8:	60aa      	str	r2, [r5, #8]
 80150ba:	4627      	mov	r7, r4
 80150bc:	46a2      	mov	sl, r4
 80150be:	4652      	mov	r2, sl
 80150c0:	4649      	mov	r1, r9
 80150c2:	f7fc f945 	bl	8011350 <memmove>
 80150c6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80150ca:	68ab      	ldr	r3, [r5, #8]
 80150cc:	6828      	ldr	r0, [r5, #0]
 80150ce:	1bdb      	subs	r3, r3, r7
 80150d0:	4450      	add	r0, sl
 80150d2:	1b14      	subs	r4, r2, r4
 80150d4:	60ab      	str	r3, [r5, #8]
 80150d6:	6028      	str	r0, [r5, #0]
 80150d8:	f8c8 4008 	str.w	r4, [r8, #8]
 80150dc:	b314      	cbz	r4, 8015124 <__ssprint_r+0xf4>
 80150de:	f8d6 9000 	ldr.w	r9, [r6]
 80150e2:	6874      	ldr	r4, [r6, #4]
 80150e4:	3608      	adds	r6, #8
 80150e6:	e7b2      	b.n	801504e <__ssprint_r+0x1e>
 80150e8:	4627      	mov	r7, r4
 80150ea:	46a2      	mov	sl, r4
 80150ec:	e7e7      	b.n	80150be <__ssprint_r+0x8e>
 80150ee:	4658      	mov	r0, fp
 80150f0:	f7fc fa2e 	bl	8011550 <_realloc_r>
 80150f4:	4603      	mov	r3, r0
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d1d7      	bne.n	80150aa <__ssprint_r+0x7a>
 80150fa:	6929      	ldr	r1, [r5, #16]
 80150fc:	4658      	mov	r0, fp
 80150fe:	f7ff fa57 	bl	80145b0 <_free_r>
 8015102:	230c      	movs	r3, #12
 8015104:	f8cb 3000 	str.w	r3, [fp]
 8015108:	89ab      	ldrh	r3, [r5, #12]
 801510a:	2200      	movs	r2, #0
 801510c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015114:	81ab      	strh	r3, [r5, #12]
 8015116:	f8c8 2008 	str.w	r2, [r8, #8]
 801511a:	f8c8 2004 	str.w	r2, [r8, #4]
 801511e:	b003      	add	sp, #12
 8015120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015124:	2000      	movs	r0, #0
 8015126:	f8c8 0004 	str.w	r0, [r8, #4]
 801512a:	b003      	add	sp, #12
 801512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015130 <_calloc_r>:
 8015130:	b510      	push	{r4, lr}
 8015132:	fb02 f101 	mul.w	r1, r2, r1
 8015136:	f7fb fe1b 	bl	8010d70 <_malloc_r>
 801513a:	4604      	mov	r4, r0
 801513c:	b1d8      	cbz	r0, 8015176 <_calloc_r+0x46>
 801513e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015142:	f022 0203 	bic.w	r2, r2, #3
 8015146:	3a04      	subs	r2, #4
 8015148:	2a24      	cmp	r2, #36	; 0x24
 801514a:	d818      	bhi.n	801517e <_calloc_r+0x4e>
 801514c:	2a13      	cmp	r2, #19
 801514e:	d914      	bls.n	801517a <_calloc_r+0x4a>
 8015150:	2300      	movs	r3, #0
 8015152:	2a1b      	cmp	r2, #27
 8015154:	6003      	str	r3, [r0, #0]
 8015156:	6043      	str	r3, [r0, #4]
 8015158:	d916      	bls.n	8015188 <_calloc_r+0x58>
 801515a:	2a24      	cmp	r2, #36	; 0x24
 801515c:	6083      	str	r3, [r0, #8]
 801515e:	60c3      	str	r3, [r0, #12]
 8015160:	bf11      	iteee	ne
 8015162:	f100 0210 	addne.w	r2, r0, #16
 8015166:	6103      	streq	r3, [r0, #16]
 8015168:	6143      	streq	r3, [r0, #20]
 801516a:	f100 0218 	addeq.w	r2, r0, #24
 801516e:	2300      	movs	r3, #0
 8015170:	6013      	str	r3, [r2, #0]
 8015172:	6053      	str	r3, [r2, #4]
 8015174:	6093      	str	r3, [r2, #8]
 8015176:	4620      	mov	r0, r4
 8015178:	bd10      	pop	{r4, pc}
 801517a:	4602      	mov	r2, r0
 801517c:	e7f7      	b.n	801516e <_calloc_r+0x3e>
 801517e:	2100      	movs	r1, #0
 8015180:	f7fc f94e 	bl	8011420 <memset>
 8015184:	4620      	mov	r0, r4
 8015186:	bd10      	pop	{r4, pc}
 8015188:	f100 0208 	add.w	r2, r0, #8
 801518c:	e7ef      	b.n	801516e <_calloc_r+0x3e>
 801518e:	bf00      	nop

08015190 <_fclose_r>:
 8015190:	2900      	cmp	r1, #0
 8015192:	d03d      	beq.n	8015210 <_fclose_r+0x80>
 8015194:	b570      	push	{r4, r5, r6, lr}
 8015196:	4605      	mov	r5, r0
 8015198:	460c      	mov	r4, r1
 801519a:	b108      	cbz	r0, 80151a0 <_fclose_r+0x10>
 801519c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801519e:	b37b      	cbz	r3, 8015200 <_fclose_r+0x70>
 80151a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151a4:	b90b      	cbnz	r3, 80151aa <_fclose_r+0x1a>
 80151a6:	2000      	movs	r0, #0
 80151a8:	bd70      	pop	{r4, r5, r6, pc}
 80151aa:	4621      	mov	r1, r4
 80151ac:	4628      	mov	r0, r5
 80151ae:	f7ff f857 	bl	8014260 <__sflush_r>
 80151b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80151b4:	4606      	mov	r6, r0
 80151b6:	b133      	cbz	r3, 80151c6 <_fclose_r+0x36>
 80151b8:	69e1      	ldr	r1, [r4, #28]
 80151ba:	4628      	mov	r0, r5
 80151bc:	4798      	blx	r3
 80151be:	2800      	cmp	r0, #0
 80151c0:	bfb8      	it	lt
 80151c2:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80151c6:	89a3      	ldrh	r3, [r4, #12]
 80151c8:	061b      	lsls	r3, r3, #24
 80151ca:	d41c      	bmi.n	8015206 <_fclose_r+0x76>
 80151cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80151ce:	b141      	cbz	r1, 80151e2 <_fclose_r+0x52>
 80151d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80151d4:	4299      	cmp	r1, r3
 80151d6:	d002      	beq.n	80151de <_fclose_r+0x4e>
 80151d8:	4628      	mov	r0, r5
 80151da:	f7ff f9e9 	bl	80145b0 <_free_r>
 80151de:	2300      	movs	r3, #0
 80151e0:	6323      	str	r3, [r4, #48]	; 0x30
 80151e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80151e4:	b121      	cbz	r1, 80151f0 <_fclose_r+0x60>
 80151e6:	4628      	mov	r0, r5
 80151e8:	f7ff f9e2 	bl	80145b0 <_free_r>
 80151ec:	2300      	movs	r3, #0
 80151ee:	6463      	str	r3, [r4, #68]	; 0x44
 80151f0:	f7ff f97e 	bl	80144f0 <__sfp_lock_acquire>
 80151f4:	2300      	movs	r3, #0
 80151f6:	81a3      	strh	r3, [r4, #12]
 80151f8:	f7ff f982 	bl	8014500 <__sfp_lock_release>
 80151fc:	4630      	mov	r0, r6
 80151fe:	bd70      	pop	{r4, r5, r6, pc}
 8015200:	f7ff f96e 	bl	80144e0 <__sinit>
 8015204:	e7cc      	b.n	80151a0 <_fclose_r+0x10>
 8015206:	6921      	ldr	r1, [r4, #16]
 8015208:	4628      	mov	r0, r5
 801520a:	f7ff f9d1 	bl	80145b0 <_free_r>
 801520e:	e7dd      	b.n	80151cc <_fclose_r+0x3c>
 8015210:	2000      	movs	r0, #0
 8015212:	4770      	bx	lr
	...

08015220 <_getpid>:
 8015220:	2001      	movs	r0, #1
 8015222:	4770      	bx	lr
	...

08015230 <_exit>:
 8015230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015234:	f000 b804 	b.w	8015240 <_kill>
	...

08015240 <_kill>:
 8015240:	2906      	cmp	r1, #6
 8015242:	b530      	push	{r4, r5, lr}
 8015244:	bf0c      	ite	eq
 8015246:	4d04      	ldreq	r5, [pc, #16]	; (8015258 <_kill+0x18>)
 8015248:	4d04      	ldrne	r5, [pc, #16]	; (801525c <_kill+0x1c>)
 801524a:	2418      	movs	r4, #24
 801524c:	4620      	mov	r0, r4
 801524e:	4629      	mov	r1, r5
 8015250:	beab      	bkpt	0x00ab
 8015252:	4604      	mov	r4, r0
 8015254:	4620      	mov	r0, r4
 8015256:	bd30      	pop	{r4, r5, pc}
 8015258:	00020023 	.word	0x00020023
 801525c:	00020026 	.word	0x00020026
 8015260:	6c6c6548 	.word	0x6c6c6548
 8015264:	6f77206f 	.word	0x6f77206f
 8015268:	00646c72 	.word	0x00646c72
	...

08015280 <standard_subs>:
 8015280:	00000074 080164fc 00000003 080164fc     t....d.......d..
 8015290:	00000003 00000000 00000000 00000061     ............a...
 80152a0:	08016500 0000000e 08016500 0000000e     .e.......e......
 80152b0:	08016510 00000009 00000062 0801651c     .e......b....e..
 80152c0:	00000011 0801651c 00000011 08016530     .....e......0e..
 80152d0:	0000000c 00000073 08016540 0000000b     ....s...@e......
 80152e0:	0801654c 00000046 08016530 0000000c     Le..F...0e......
 80152f0:	00000069 08016594 0000000c 080165a4     i....e.......e..
 8015300:	00000031 080165d8 0000000d 0000006f     1....e......o...
 8015310:	080165e8 0000000c 080165f8 00000031     .e.......e..1...
 8015320:	0801662c 0000000d 00000064 0801663c     ,f......d...<f..
 8015330:	0000000d 0801664c 00000032 08016680     ....Lf..2....f..
 8015340:	0000000e                                ....

08015344 <cplus_demangle_builtin_types>:
 8015344:	08016878 0000000b 08016878 0000000b     xh......xh......
 8015354:	00000000 08016884 00000004 0801688c     .....h.......h..
 8015364:	00000007 00000007 08016894 00000004     .........h......
 8015374:	0801689c 00000004 00000000 080168a4     .h...........h..
 8015384:	00000006 080168a4 00000006 00000008     .....h..........
 8015394:	080168ac 0000000b 080168ac 0000000b     .h.......h......
 80153a4:	00000008 080168b8 00000005 080168b8     .....h.......h..
 80153b4:	00000005 00000008 080168c0 0000000a     .........h......
 80153c4:	080168c0 0000000a 00000008 080168cc     .h...........h..
 80153d4:	0000000d 080168cc 0000000d 00000000     .....h..........
 80153e4:	080168dc 00000003 080168dc 00000003     .h.......h......
 80153f4:	00000001 080168e0 0000000c 080168f0     .....h.......h..
 8015404:	00000008 00000002 00000000 00000000     ................
	...
 8015420:	080168fc 00000004 080168fc 00000004     .h.......h......
 8015430:	00000003 08016904 0000000d 08016904     .....i.......i..
 8015440:	0000000d 00000004 08016914 00000008     .........i......
 8015450:	08016914 00000008 00000000 08016920     .i.......... i..
 8015460:	00000011 08016920 00000011 00000000     .... i..........
	...
 80154ac:	08016934 00000005 08016934 00000005     4i......4i......
 80154bc:	00000000 0801693c 0000000e 0801693c     ....<i......<i..
 80154cc:	0000000e 00000000 00000000 00000000     ................
	...
 80154e8:	0801694c 00000004 0801694c 00000004     Li......Li......
 80154f8:	00000009 08016954 00000007 08016894     ....Ti.......h..
 8015508:	00000004 00000000 0801695c 00000009     ........\i......
 8015518:	080168fc 00000004 00000005 08016968     .h..........hi..
 8015528:	00000012 08016968 00000012 00000006     ....hi..........
 8015538:	0801640c 00000003 0801640c 00000003     .d.......d......
 8015548:	00000000 0801697c 00000009 0801697c     ....|i......|i..
 8015558:	00000009 00000000 08016988 00000009     .........i......
 8015568:	08016988 00000009 00000000 08016994     .i...........i..
 8015578:	0000000a 08016994 0000000a 00000000     .....i..........
 8015588:	080169a0 00000004 080169a0 00000004     .i.......i......
 8015598:	00000008 080169a8 00000008 080169a8     .....i.......i..
 80155a8:	00000008 00000000 080169b4 00000008     .........i......
 80155b8:	080169b4 00000008 00000000 080169c0     .i...........i..
 80155c8:	00000011 080169c0 00000011 00000000     .....i..........

080155d8 <cplus_demangle_operators>:
 80155d8:	08016690 08016694 00000002 00000002     .f...f..........
 80155e8:	08016698 0801669c 00000001 00000002     .f...f..........
 80155f8:	080166a0 080164ac 00000002 00000002     .f...d..........
 8015608:	080163b0 080166a4 00000001 00000001     .c...f..........
 8015618:	080166a8 080166a4 00000001 00000002     .f...f..........
 8015628:	080166ac 080166b0 00000008 00000001     .f...f..........
 8015638:	080166bc 080166b0 00000008 00000001     .f...f..........
 8015648:	080166c0 080166c4 0000000a 00000002     .f...f..........
 8015658:	080163bc 080166d0 00000002 00000002     .c...f..........
 8015668:	080166d4 080166d8 00000001 00000002     .f...f..........
 8015678:	080166dc 080166e0 00000001 00000001     .f...f..........
 8015688:	080166e4 080166e8 00000002 00000002     .f...f..........
 8015698:	080166ec 080166f0 00000009 00000001     .f...f..........
 80156a8:	080166fc 08016700 0000000c 00000002     .f...g..........
 80156b8:	08016710 08016714 00000001 00000001     .g...g..........
 80156c8:	08016718 0801671c 00000007 00000001     .g...g..........
 80156d8:	08016724 08016728 00000002 00000002     $g..(g..........
 80156e8:	080164d8 0801672c 00000001 00000002     .d..,g..........
 80156f8:	08016730 08016734 00000001 00000002     0g..4g..........
 8015708:	08016738 0801673c 00000002 00000002     8g..<g..........
 8015718:	08016740 08016744 00000001 00000002     @g..Dg..........
 8015728:	08016748 0801674c 00000002 00000002     Hg..Lg..........
 8015738:	08016750 08016754 00000002 00000002     Pg..Tg..........
 8015748:	080163b4 0801620c 00000002 00000001     .c...b..........
 8015758:	08016758 080165d4 00000001 00000002     Xg...e..........
 8015768:	080163c0 08016230 00000002 00000002     .c..0b..........
 8015778:	0801675c 08016760 00000003 00000002     \g..`g..........
 8015788:	080168a8 08016764 00000002 00000002     .h..dg..........
 8015798:	080164e8 08016768 0000000b 00000001     .d..hg..........
 80157a8:	08016774 08016778 00000002 00000002     tg..xg..........
 80157b8:	0801677c 08016780 00000001 00000002     |g...g..........
 80157c8:	08016784 08016788 00000002 00000002     .g...g..........
 80157d8:	0801678c 08016790 00000002 00000002     .g...g..........
 80157e8:	08016794 08016798 00000001 00000002     .g...g..........
 80157f8:	0801679c 08016714 00000001 00000002     .g...g..........
 8015808:	080167a0 080167a4 00000002 00000001     .g...g..........
 8015818:	080167a8 080167ac 00000005 00000003     .g...g..........
 8015828:	080167b4 080167b8 00000002 00000002     .g...g..........
 8015838:	08016978 08016798 00000001 00000001     xi...g..........
 8015848:	080167bc 080167c0 00000001 00000001     .g...g..........
 8015858:	080167c4 080167c8 00000003 00000003     .g...g..........
 8015868:	080167cc 080167d0 00000002 00000002     .g...g..........
 8015878:	080167d4 080167d8 00000002 00000002     .g...g..........
 8015888:	0801650c 080167dc 00000001 00000002     .e...g..........
 8015898:	080167e0 080167e4 00000002 00000002     .g...g..........
 80158a8:	080167e8 080167ec 00000001 00000002     .g...g..........
 80158b8:	080167f0 080167f4 00000003 00000002     .g...g..........
 80158c8:	080167f8 080167fc 00000002 00000001     .g...g..........
 80158d8:	08016800 080167ec 00000001 00000001     .h...g..........
 80158e8:	080164dc 08016804 00000002 00000002     .d...h..........
 80158f8:	080163c4 08016808 00000001 00000003     .c...h..........
 8015908:	0801680c 08016810 00000002 00000002     .h...h..........
 8015918:	08016814 08016818 00000003 00000002     .h...h..........
 8015928:	0801681c 08016820 00000010 00000002     .h.. h..........
 8015938:	08016834 08016838 00000001 00000002     4h..8h..........
 8015948:	0801683c 08016840 00000002 00000002     <h..@h..........
 8015958:	08016844 08016848 0000000b 00000002     Dh..Hh..........
 8015968:	080166cc 08016854 00000007 00000001     .f..Th..........
 8015978:	0801685c 08016854 00000007 00000001     \h..Th..........
 8015988:	08016860 08016864 00000005 00000000     `h..dh..........
 8015998:	0801686c 08016870 00000006 00000001     lh..ph..........
	...

080159c0 <ram_areas>:
 80159c0:	080176f4 20001c6c 20001c6c 20001c6c     .v..l.. l.. l.. 
 80159d0:	080176f4 20000000 20000000 20000000     .v..... ... ... 
 80159e0:	080176f4 2001c000 2001c000 2001c000     .v..... ... ... 
 80159f0:	080176f4 00000000 00000000 00000000     .v..............
 8015a00:	080176f4 10000000 10000000 10000000     .v..............
 8015a10:	080176f4 40024000 40024000 40024000     .v...@.@.@.@.@.@
 8015a20:	080176f4 00000000 00000000 00000000     .v..............
 8015a30:	080176f4 00000000 00000000 00000000     .v..............
 8015a40:	656c6469 00000000 00000000 00000000     idle............

08015a50 <ch_debug>:
 8015a50:	6e69616d 18431600 08480404 1814100c     main..C...H.....
 8015a60:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

08015a70 <vmt>:
 8015a70:	0800b7f1 0800b7d1 0800b7b1 0800b771     ............q...
 8015a80:	0800b791 0800b751 0800b731 0800b711     ....Q...1.......

08015a90 <zero_status>:
	...

08015aa0 <active_status>:
	...

08015ab0 <halted_status>:
 8015ab0:	00000001 00000000 00000000 00000000     ................

08015ac0 <_stm32_dma_streams>:
 8015ac0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8015ad0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8015ae0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8015af0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8015b00:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8015b10:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8015b20:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8015b30:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8015b40:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8015b50:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8015b60:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8015b70:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08015b80 <fsparams>:
 8015b80:	00000080 00000140 00000003 00000000     ....@...........
 8015b90:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

08015ba0 <ep0config>:
 8015ba0:	00000000 0800bc11 0800bf61 0800c021     ........a...!...
 8015bb0:	00400040 200016f0 200016f0 00000001     @.@.... ... ....
 8015bc0:	20001700 00000000 00000000 00000000     ... ............

08015bd0 <pal_default_config>:
 8015bd0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8015be0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8015bf0:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8015c00:	04000000 00000040 02208001 00000000     ....@..... .....
 8015c10:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8015c20:	00060600 55000100 00000000 ffffffff     .......U........
 8015c30:	00555055 00000fff 00000000 00000000     UPU.............
 8015c40:	00000040 00000000 ffffffff 00000000     @...............
 8015c50:	0000ffff 00000000 00000000 00000000     ................
 8015c60:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8015c80:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8015c9c:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8015cb8:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8015cd0:	6c756e28 0000296c 00000000 00000000     (null)..........

08015ce0 <pow10>:
 8015ce0:	0000000a 00000064 000003e8 00002710     ....d........'..
 8015cf0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8015d00:	3b9aca00 00000000 00000000 00000000     ...;............
 8015d10:	000a7325 00000000 00000000 00000000     %s..............

08015d20 <_ZL12vcom_string3>:
 8015d20:	00330308 00330031 00000000 00000000     ..3.1.3.........

08015d30 <_ZL12vcom_strings>:
 8015d30:	00000004 08015ea0 00000026 08015eb0     .....^..&....^..
 8015d40:	00000038 08015d60 00000008 08015d20     8...`]...... ]..

08015d50 <_ZL6usbcfg>:
 8015d50:	0800e681 0800e631 0800b921 0800e661     ....1...!...a...

08015d60 <_ZL12vcom_string2>:
 8015d60:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8015d70:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 8015d80:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 8015d90:	006f0050 00740072 00000000 00000000     P.o.r.t.........

08015da0 <_ZL22vcom_device_descriptor>:
 8015da0:	00000012 08015db0 00000000 00000000     .....]..........

08015db0 <_ZL27vcom_device_descriptor_data>:
 8015db0:	01100112 40000002 57400483 02010200     .......@..@W....
 8015dc0:	00000103 00000000 00000000 00000000     ................

08015dd0 <_ZL9ep1config>:
 8015dd0:	00000002 00000000 0800b9b1 0800ba31     ............1...
 8015de0:	00400040 20001c00 20001bf0 00000002     @.@.... ... ....
	...

08015e00 <_ZL9serusbcfg>:
 8015e00:	20001470 00020101 00000000 00000000     p.. ............

08015e10 <_ZL34vcom_configuration_descriptor_data>:
 8015e10:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8015e20:	24050001 05011000 01000124 02022404     ...$....$....$..
 8015e30:	00062405 82050701 ff000803 00010409     .$..............
 8015e40:	00000a02 01050700 00004002 02810507     .........@......
 8015e50:	00000040 00000000 00000000 00000000     @...............

08015e60 <_ZL29vcom_configuration_descriptor>:
 8015e60:	00000043 08015e10 00000000 00000000     C....^..........

08015e70 <_ZL9ep2config>:
 8015e70:	00000003 00000000 0800ba91 00000000     ................
 8015e80:	00000010 20001758 00000000 00000001     ....X.. ........
	...

08015ea0 <_ZL12vcom_string0>:
 8015ea0:	04090304 00000000 00000000 00000000     ................

08015eb0 <_ZL12vcom_string1>:
 8015eb0:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8015ec0:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8015ed0:	00630069 00000073 00000000 00000000     i.c.s...........

08015ee0 <_ZTVSt9bad_alloc>:
 8015ee0:	00000000 08015f00 0800e971 0800e991     ....._..q.......
 8015ef0:	0800e961 00000000 00000000 00000000     a...............

08015f00 <_ZTISt9bad_alloc>:
 8015f00:	08016048 08015f20 08015f60 00000000     H`.. _..`_......
 8015f10:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

08015f20 <_ZTSSt9bad_alloc>:
 8015f20:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

08015f30 <_ZTSN10__cxxabiv115__forced_unwindE>:
 8015f30:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
 8015f40:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

08015f50 <_ZTIN10__cxxabiv115__forced_unwindE>:
 8015f50:	080160d8 08015f30 00000000 00000000     .`..0_..........

08015f60 <_ZTISt9exception>:
 8015f60:	080160d8 08016000 00000000 00000000     .`...`..........

08015f70 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
 8015f70:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 8015f80:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
 8015f90:	00456e6f 00000000 00000000 00000000     onE.............
 8015fa0:	3a647473 6378653a 69747065 00006e6f     std::exception..
 8015fb0:	3a647473 6461623a 6378655f 69747065     std::bad_excepti
 8015fc0:	00006e6f 00000000 00000000 00000000     on..............

08015fd0 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
 8015fd0:	080160d8 08015f70 00000000 00000000     .`..p_..........

08015fe0 <_ZTVSt13bad_exception>:
 8015fe0:	00000000 08016030 0800eb41 0800eb61     ....0`..A...a...
 8015ff0:	0800eb51 00000000 00000000 00000000     Q...............

08016000 <_ZTSSt9exception>:
 8016000:	65397453 70656378 6e6f6974 00000000     St9exception....

08016010 <_ZTSSt13bad_exception>:
 8016010:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
 8016020:	0000006e 00000000 00000000 00000000     n...............

08016030 <_ZTISt13bad_exception>:
 8016030:	08016048 08016010 08015f60 00000000     H`...`..`_......

08016040 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 8016040:	00000000 08016070 0800ed61 0800ed81     ....p`..a.......
 8016050:	0800eeb1 0800eeb1 0800efe1 0800eef1     ................
 8016060:	0800ee71 0800eda1 0800ee31 00000000     q.......1.......

08016070 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 8016070:	08016048 08016080 08016100 00000000     H`...`...a......

08016080 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 8016080:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 8016090:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80160a0:	456f666e 00000000 00000000 00000000     nfoE............

080160b0 <_ZTISt9type_info>:
 80160b0:	080160d8 080160c0 00000000 00000000     .`...`..........

080160c0 <_ZTSSt9type_info>:
 80160c0:	74397453 5f657079 6f666e69 00000000     St9type_info....

080160d0 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80160d0:	00000000 08016100 0800ef41 0800ef61     .....a..A...a...
 80160e0:	0800eeb1 0800eeb1 0800efe1 0800eef1     ................
 80160f0:	0800ef81 0800efa1 0800ef31 00000000     ........1.......

08016100 <_ZTIN10__cxxabiv117__class_type_infoE>:
 8016100:	08016048 08016110 080160b0 00000000     H`...a...`......

08016110 <_ZTSN10__cxxabiv117__class_type_infoE>:
 8016110:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 8016120:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 8016130:	00000045 00000000 00000000 00000000     E...............
 8016140:	6d726574 74616e69 61632065 64656c6c     terminate called
 8016150:	63657220 69737275 796c6576 0000000a      recursively....
 8016160:	6d726574 74616e69 61632065 64656c6c     terminate called
 8016170:	74666120 74207265 776f7268 20676e69      after throwing 
 8016180:	69206e61 6174736e 2065636e 2720666f     an instance of '
 8016190:	00000000 00000a27 6d726574 74616e69     ....'...terminat
 80161a0:	61632065 64656c6c 74697720 74756f68     e called without
 80161b0:	206e6120 69746361 65206576 70656378      an active excep
 80161c0:	6e6f6974 0000000a 68772020 29287461     tion....  what()
 80161d0:	0020203a 00000000 00000000 00000000     :  .............
 80161e0:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
 80161f0:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
 8016200:	00000029 6962615b 0000003a 00003a3a     )...[abi:...::..
 8016210:	6665647b 746c7561 67726120 00000023     {default arg#...
 8016220:	00646c25 003a3a7d 7272414a 00007961     %ld.}::.JArray..
 8016230:	00005d5b 62617476 6620656c 0020726f     []..vtable for .
 8016240:	20545456 20726f66 00000000 736e6f63     VTT for ....cons
 8016250:	63757274 6e6f6974 61747620 20656c62     truction vtable 
 8016260:	20726f66 00000000 2d6e692d 00000000     for ....-in-....
 8016270:	65707974 6f666e69 726f6620 00000020     typeinfo for ...
 8016280:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
 8016290:	00002072 65707974 6f666e69 206e6620     r ..typeinfo fn 
 80162a0:	20726f66 00000000 2d6e6f6e 74726976     for ....non-virt
 80162b0:	206c6175 6e756874 6f74206b 00000020     ual thunk to ...
 80162c0:	61766f63 6e616972 65722074 6e727574     covariant return
 80162d0:	75687420 74206b6e 0000206f 6176616a      thunk to ..java
 80162e0:	616c4320 66207373 0020726f 72617567      Class for .guar
 80162f0:	61762064 62616972 6620656c 0020726f     d variable for .
 8016300:	20534c54 74696e69 6e756620 6f697463     TLS init functio
 8016310:	6f66206e 00002072 20534c54 70617277     n for ..TLS wrap
 8016320:	20726570 636e7566 6e6f6974 726f6620     per function for
 8016330:	00000020 65666572 636e6572 65742065      ...reference te
 8016340:	726f706d 20797261 00000023 64646968     mporary #...hidd
 8016350:	61206e65 7361696c 726f6620 00000020     en alias for ...
 8016360:	2d6e6f6e 6e617274 74636173 206e6f69     non-transaction 
 8016370:	6e6f6c63 6f662065 00002072 7461535f     clone for .._Sat
 8016380:	00000020 6363415f 00006d75 6172465f      ..._Accum.._Fra
 8016390:	00007463 0000202c 7265706f 726f7461     ct.., ..operator
 80163a0:	00000000 7265706f 726f7461 00000020     ....operator ...
 80163b0:	00006461 00007367 0000283e 00006c63     ad..gs..>(..cl..
 80163c0:	00007869 00007571 00203a20 2077656e     ix..qu.. : .new 
 80163d0:	00000000 00006c75 00006c6c 006c6c75     ....ul..ll..ull.
 80163e0:	736c6166 00000065 65757274 00000000     false...true....
 80163f0:	6176616a 73657220 6372756f 00002065     java resource ..
 8016400:	6c636564 65707974 00002820 002e2e2e     decltype (......
 8016410:	73696874 00000000 7261707b 0000236d     this....{parm#..
 8016420:	626f6c67 63206c61 74736e6f 74637572     global construct
 8016430:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
 8016440:	626f6c67 64206c61 72747365 6f746375     global destructo
 8016450:	6b207372 64657965 206f7420 00000000     rs keyed to ....
 8016460:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
 8016470:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
 8016480:	6c635b20 20656e6f 00000000 73657220      [clone .... res
 8016490:	63697274 00000074 6c6f7620 6c697461     trict... volatil
 80164a0:	00000065 6e6f6320 00007473 00002626     e... const..&&..
 80164b0:	706d6f63 2078656c 00000000 67616d69     complex ....imag
 80164c0:	72616e69 00002079 002a3a3a 765f5f20     inary ..::*. __v
 80164d0:	6f746365 00002872 00007464 00007470     ector(..dt..pt..
 80164e0:	6f747561 00000000 0000696c 69727473     auto....li..stri
 80164f0:	6c20676e 72657469 00006c61 00647473     ng literal..std.
 8016500:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
 8016510:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
 8016520:	7361623a 735f6369 6e697274 00000067     :basic_string...
 8016530:	69736162 74735f63 676e6972 00000000     basic_string....
 8016540:	3a647473 7274733a 00676e69 3a647473     std::string.std:
 8016550:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
 8016560:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
 8016570:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
 8016580:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
 8016590:	00003e20 3a647473 7473693a 6d616572      >..std::istream
 80165a0:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
 80165b0:	65727473 633c6d61 2c726168 64747320     stream<char, std
 80165c0:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
 80165d0:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
 80165e0:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
 80165f0:	6d616572 00000000 3a647473 7361623a     ream....std::bas
 8016600:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
 8016610:	64747320 68633a3a 745f7261 74696172      std::char_trait
 8016620:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
 8016630:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
 8016640:	736f693a 61657274 0000006d 3a647473     :iostream...std:
 8016650:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
 8016660:	72616863 7473202c 633a3a64 5f726168     char, std::char_
 8016670:	69617274 633c7374 3e726168 00003e20     traits<char> >..
 8016680:	69736162 6f695f63 65727473 00006d61     basic_iostream..
 8016690:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
 80166a0:	00006161 00000026 00006e61 00007461     aa..&...an..at..
 80166b0:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
 80166c0:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
 80166d0:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
 80166e0:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
 80166f0:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
 8016700:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
 8016710:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
 8016720:	00206574 00007364 00002a2e 0000002e     te .ds...*......
 8016730:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
 8016740:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
 8016750:	00006567 00003d3e 00007467 0000536c     ge..>=..gt..lS..
 8016760:	003d3c3c 00003d3c 7265706f 726f7461     <<=.<=..operator
 8016770:	00202222 0000736c 00003c3c 0000746c     "" .ls..<<..lt..
 8016780:	0000003c 0000496d 00003d2d 00004c6d     <...mI..-=..mL..
 8016790:	00003d2a 0000696d 0000002d 00006c6d     *=..mi..-...ml..
 80167a0:	00006d6d 00002d2d 0000616e 5b77656e     mm..--..na..new[
 80167b0:	0000005d 0000656e 00003d21 0000746e     ]...ne..!=..nt..
 80167c0:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
 80167d0:	00003d7c 00006f6f 00007c7c 0000007c     |=..oo..||..|...
 80167e0:	00004c70 00003d2b 00006c70 0000002b     pL..+=..pl..+...
 80167f0:	00006d70 002a3e2d 00007070 00002b2b     pm..->*.pp..++..
 8016800:	00007370 00003e2d 0000003f 00004d72     ps..->..?...rM..
 8016810:	00003d25 00005372 003d3e3e 00006372     %=..rS..>>=.rc..
 8016820:	6e696572 70726574 5f746572 74736163     reinterpret_cast
 8016830:	00000000 00006d72 00000025 00007372     ....rm..%...rs..
 8016840:	00003e3e 00006373 74617473 635f6369     >>..sc..static_c
 8016850:	00747361 657a6973 0020666f 00007a73     ast.sizeof .sz..
 8016860:	00007274 6f726874 00000077 00007774     tr..throw...tw..
 8016870:	6f726874 00002077 6e676973 63206465     throw ..signed c
 8016880:	00726168 6c6f6f62 00000000 6c6f6f62     har.bool....bool
 8016890:	006e6165 72616863 00000000 65747962     ean.char....byte
 80168a0:	00000000 62756f64 0000656c 676e6f6c     ....double..long
 80168b0:	756f6420 00656c62 616f6c66 00000074      double.float...
 80168c0:	6c665f5f 3174616f 00003832 69736e75     __float128..unsi
 80168d0:	64656e67 61686320 00000072 00746e69     gned char...int.
 80168e0:	69736e75 64656e67 746e6920 00000000     unsigned int....
 80168f0:	69736e75 64656e67 00000000 676e6f6c     unsigned....long
 8016900:	00000000 69736e75 64656e67 6e6f6c20     ....unsigned lon
 8016910:	00000067 6e695f5f 38323174 00000000     g...__int128....
 8016920:	69736e75 64656e67 695f5f20 3231746e     unsigned __int12
 8016930:	00000038 726f6873 00000074 69736e75     8...short...unsi
 8016940:	64656e67 6f687320 00007472 64696f76     gned short..void
 8016950:	00000000 61686377 00745f72 676e6f6c     ....wchar_t.long
 8016960:	6e6f6c20 00000067 69736e75 64656e67      long...unsigned
 8016970:	6e6f6c20 6f6c2067 0000676e 69636564      long long..deci
 8016980:	336c616d 00000032 69636564 366c616d     mal32...decimal6
 8016990:	00000034 69636564 316c616d 00003832     4...decimal128..
 80169a0:	666c6168 00000000 72616863 745f3631     half....char16_t
 80169b0:	00000000 72616863 745f3233 00000000     ....char32_t....
 80169c0:	6c636564 65707974 6c756e28 7274706c     decltype(nullptr
 80169d0:	00000029 00000000 00000000 00000000     )...............
 80169e0:	66776f70 00000000 00000000 00000000     powf............

080169f0 <TWO52>:
 80169f0:	00000000 43300000 00000000 c3300000     ......0C......0.
 8016a00:	00000043 00000000 00000000 00000000     C...............

08016a10 <blanks.7009>:
 8016a10:	20202020 20202020 20202020 20202020                     
 8016a20:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8016a30:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8016a40:	00000000 33323130 37363534 62613938     ....0123456789ab
 8016a50:	66656463 00000000 00000030 00000000     cdef....0.......

08016a60 <zeroes.7010>:
 8016a60:	30303030 30303030 30303030 30303030     0000000000000000
 8016a70:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8016a80:	49534f50 00000058 00000000 00000000     POSIX...........

08016a90 <p05.5404>:
 8016a90:	00000005 00000019 0000007d 00000000     ........}.......

08016aa0 <__mprec_tens>:
 8016aa0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8016ab0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8016ac0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8016ad0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8016ae0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8016af0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8016b00:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8016b10:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8016b20:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8016b30:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8016b40:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8016b50:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8016b60:	79d99db4 44ea7843 00000000 00000000     ...yCx.D........

08016b70 <__mprec_bigtens>:
 8016b70:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8016b80:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8016b90:	7f73bf3c 75154fdd                       <.s..O.u
