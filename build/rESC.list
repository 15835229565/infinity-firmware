
build/rESC.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f3bf 8f4f 	dsb	sy
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f240 0000 	movw	r0, #0
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f2:	6008      	str	r0, [r1, #0]
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f04f 0000 	mov.w	r0, #0
 8000200:	eee1 0a10 	vmsr	fpscr, r0
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020c:	6008      	str	r0, [r1, #0]
 800020e:	2006      	movs	r0, #6
 8000210:	f380 8814 	msr	CONTROL, r0
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f000 fde2 	bl	8000de0 <__core_init>
 800021c:	f004 f820 	bl	8004260 <__early_init>
 8000220:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000224:	491c      	ldr	r1, [pc, #112]	; (8000298 <endfiniloop+0x8>)
 8000226:	4a1d      	ldr	r2, [pc, #116]	; (800029c <endfiniloop+0xc>)

08000228 <msloop>:
 8000228:	4291      	cmp	r1, r2
 800022a:	bf3c      	itt	cc
 800022c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000230:	e7fa      	bcc.n	8000228 <msloop>
 8000232:	491b      	ldr	r1, [pc, #108]	; (80002a0 <endfiniloop+0x10>)
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <endfiniloop+0x4>)

08000236 <psloop>:
 8000236:	4291      	cmp	r1, r2
 8000238:	bf3c      	itt	cc
 800023a:	f841 0b04 	strcc.w	r0, [r1], #4
 800023e:	e7fa      	bcc.n	8000236 <psloop>
 8000240:	4918      	ldr	r1, [pc, #96]	; (80002a4 <endfiniloop+0x14>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <endfiniloop+0x18>)
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <endfiniloop+0x1c>)

08000246 <dloop>:
 8000246:	429a      	cmp	r2, r3
 8000248:	bf3e      	ittt	cc
 800024a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024e:	f842 0b04 	strcc.w	r0, [r2], #4
 8000252:	e7f8      	bcc.n	8000246 <dloop>
 8000254:	2000      	movs	r0, #0
 8000256:	4916      	ldr	r1, [pc, #88]	; (80002b0 <endfiniloop+0x20>)
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <endfiniloop+0x24>)

0800025a <bloop>:
 800025a:	4291      	cmp	r1, r2
 800025c:	bf3c      	itt	cc
 800025e:	f841 0b04 	strcc.w	r0, [r1], #4
 8000262:	e7fa      	bcc.n	800025a <bloop>
 8000264:	f000 fdd4 	bl	8000e10 <__init_ram_areas>
 8000268:	f000 fdc2 	bl	8000df0 <__late_init>
 800026c:	4c12      	ldr	r4, [pc, #72]	; (80002b8 <endfiniloop+0x28>)
 800026e:	4d13      	ldr	r5, [pc, #76]	; (80002bc <endfiniloop+0x2c>)

08000270 <initloop>:
 8000270:	42ac      	cmp	r4, r5
 8000272:	da03      	bge.n	800027c <endinitloop>
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
 8000278:	4788      	blx	r1
 800027a:	e7f9      	b.n	8000270 <initloop>

0800027c <endinitloop>:
 800027c:	f004 fac8 	bl	8004810 <main>
 8000280:	4c0f      	ldr	r4, [pc, #60]	; (80002c0 <endfiniloop+0x30>)
 8000282:	4d10      	ldr	r5, [pc, #64]	; (80002c4 <endfiniloop+0x34>)

08000284 <finiloop>:
 8000284:	42ac      	cmp	r4, r5
 8000286:	da03      	bge.n	8000290 <endfiniloop>
 8000288:	f854 1b04 	ldr.w	r1, [r4], #4
 800028c:	4788      	blx	r1
 800028e:	e7f9      	b.n	8000284 <finiloop>

08000290 <endfiniloop>:
 8000290:	f000 bdb6 	b.w	8000e00 <__default_exit>
 8000294:	20000800 	.word	0x20000800
 8000298:	20000000 	.word	0x20000000
 800029c:	20000400 	.word	0x20000400
 80002a0:	20000400 	.word	0x20000400
 80002a4:	08008a88 	.word	0x08008a88
 80002a8:	20000800 	.word	0x20000800
 80002ac:	20000c3c 	.word	0x20000c3c
 80002b0:	20000c40 	.word	0x20000c40
 80002b4:	200024c8 	.word	0x200024c8
 80002b8:	080001c0 	.word	0x080001c0
 80002bc:	080001c0 	.word	0x080001c0
 80002c0:	080001c0 	.word	0x080001c0
 80002c4:	080001c0 	.word	0x080001c0
	...

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	469d      	mov	sp, r3
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 80002e8:	2300      	movs	r3, #0
 80002ea:	f383 8811 	msr	BASEPRI, r3
 80002ee:	4628      	mov	r0, r5
 80002f0:	47a0      	blx	r4
 80002f2:	2000      	movs	r0, #0
 80002f4:	f001 f8c4 	bl	8001480 <chThdExit>

080002f8 <_port_switch_from_isr>:
 80002f8:	f000 fff2 	bl	80012e0 <chSchDoReschedule>

080002fc <_port_exit_from_isr>:
 80002fc:	df00      	svc	0
 80002fe:	e7fe      	b.n	80002fe <_port_exit_from_isr+0x2>

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800043e:	f1a4 0401 	sub.w	r4, r4, #1
 8000442:	d1e9      	bne.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f092 0f00 	teq	r2, #0
 80005ea:	bf14      	ite	ne
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	e720      	b.n	8000444 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aedc 	beq.w	80003f2 <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6c1      	b.n	80003f2 <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>
	...

08000aa0 <__gedf2>:
 8000aa0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aa4:	e006      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aa6:	bf00      	nop

08000aa8 <__ledf2>:
 8000aa8:	f04f 0c01 	mov.w	ip, #1
 8000aac:	e002      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aae:	bf00      	nop

08000ab0 <__cmpdf2>:
 8000ab0:	f04f 0c01 	mov.w	ip, #1
 8000ab4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	bf18      	it	ne
 8000ac6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aca:	d01b      	beq.n	8000b04 <__cmpdf2+0x54>
 8000acc:	b001      	add	sp, #4
 8000ace:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ad2:	bf0c      	ite	eq
 8000ad4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad8:	ea91 0f03 	teqne	r1, r3
 8000adc:	bf02      	ittt	eq
 8000ade:	ea90 0f02 	teqeq	r0, r2
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	4770      	bxeq	lr
 8000ae6:	f110 0f00 	cmn.w	r0, #0
 8000aea:	ea91 0f03 	teq	r1, r3
 8000aee:	bf58      	it	pl
 8000af0:	4299      	cmppl	r1, r3
 8000af2:	bf08      	it	eq
 8000af4:	4290      	cmpeq	r0, r2
 8000af6:	bf2c      	ite	cs
 8000af8:	17d8      	asrcs	r0, r3, #31
 8000afa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afe:	f040 0001 	orr.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__cmpdf2+0x64>
 8000b0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b12:	d107      	bne.n	8000b24 <__cmpdf2+0x74>
 8000b14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d1d6      	bne.n	8000acc <__cmpdf2+0x1c>
 8000b1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b22:	d0d3      	beq.n	8000acc <__cmpdf2+0x1c>
 8000b24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdrcmple>:
 8000b2c:	4684      	mov	ip, r0
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4662      	mov	r2, ip
 8000b32:	468c      	mov	ip, r1
 8000b34:	4619      	mov	r1, r3
 8000b36:	4663      	mov	r3, ip
 8000b38:	e000      	b.n	8000b3c <__aeabi_cdcmpeq>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_cdcmpeq>:
 8000b3c:	b501      	push	{r0, lr}
 8000b3e:	f7ff ffb7 	bl	8000ab0 <__cmpdf2>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	bf48      	it	mi
 8000b46:	f110 0f00 	cmnmi.w	r0, #0
 8000b4a:	bd01      	pop	{r0, pc}

08000b4c <__aeabi_dcmpeq>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff fff4 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b54:	bf0c      	ite	eq
 8000b56:	2001      	moveq	r0, #1
 8000b58:	2000      	movne	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmplt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffea 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmple>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffe0 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpge>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffce 	bl	8000b2c <__aeabi_cdrcmple>
 8000b90:	bf94      	ite	ls
 8000b92:	2001      	movls	r0, #1
 8000b94:	2000      	movhi	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpgt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffc4 	bl	8000b2c <__aeabi_cdrcmple>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <memcpy>:
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	ea41 0300 	orr.w	r3, r1, r0
 8000ca6:	f013 0303 	ands.w	r3, r3, #3
 8000caa:	d16d      	bne.n	8000d88 <memcpy+0xe8>
 8000cac:	3a40      	subs	r2, #64	; 0x40
 8000cae:	d341      	bcc.n	8000d34 <memcpy+0x94>
 8000cb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cb4:	f840 3b04 	str.w	r3, [r0], #4
 8000cb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cbc:	f840 3b04 	str.w	r3, [r0], #4
 8000cc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cc4:	f840 3b04 	str.w	r3, [r0], #4
 8000cc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ccc:	f840 3b04 	str.w	r3, [r0], #4
 8000cd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cd4:	f840 3b04 	str.w	r3, [r0], #4
 8000cd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cdc:	f840 3b04 	str.w	r3, [r0], #4
 8000ce0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ce4:	f840 3b04 	str.w	r3, [r0], #4
 8000ce8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cec:	f840 3b04 	str.w	r3, [r0], #4
 8000cf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cf4:	f840 3b04 	str.w	r3, [r0], #4
 8000cf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cfc:	f840 3b04 	str.w	r3, [r0], #4
 8000d00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d04:	f840 3b04 	str.w	r3, [r0], #4
 8000d08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d0c:	f840 3b04 	str.w	r3, [r0], #4
 8000d10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d14:	f840 3b04 	str.w	r3, [r0], #4
 8000d18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d1c:	f840 3b04 	str.w	r3, [r0], #4
 8000d20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d24:	f840 3b04 	str.w	r3, [r0], #4
 8000d28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d2c:	f840 3b04 	str.w	r3, [r0], #4
 8000d30:	3a40      	subs	r2, #64	; 0x40
 8000d32:	d2bd      	bcs.n	8000cb0 <memcpy+0x10>
 8000d34:	3230      	adds	r2, #48	; 0x30
 8000d36:	d311      	bcc.n	8000d5c <memcpy+0xbc>
 8000d38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d3c:	f840 3b04 	str.w	r3, [r0], #4
 8000d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d44:	f840 3b04 	str.w	r3, [r0], #4
 8000d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d4c:	f840 3b04 	str.w	r3, [r0], #4
 8000d50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d54:	f840 3b04 	str.w	r3, [r0], #4
 8000d58:	3a10      	subs	r2, #16
 8000d5a:	d2ed      	bcs.n	8000d38 <memcpy+0x98>
 8000d5c:	320c      	adds	r2, #12
 8000d5e:	d305      	bcc.n	8000d6c <memcpy+0xcc>
 8000d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d64:	f840 3b04 	str.w	r3, [r0], #4
 8000d68:	3a04      	subs	r2, #4
 8000d6a:	d2f9      	bcs.n	8000d60 <memcpy+0xc0>
 8000d6c:	3204      	adds	r2, #4
 8000d6e:	d008      	beq.n	8000d82 <memcpy+0xe2>
 8000d70:	07d2      	lsls	r2, r2, #31
 8000d72:	bf1c      	itt	ne
 8000d74:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000d78:	f800 3b01 	strbne.w	r3, [r0], #1
 8000d7c:	d301      	bcc.n	8000d82 <memcpy+0xe2>
 8000d7e:	880b      	ldrh	r3, [r1, #0]
 8000d80:	8003      	strh	r3, [r0, #0]
 8000d82:	4660      	mov	r0, ip
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2a08      	cmp	r2, #8
 8000d8a:	d313      	bcc.n	8000db4 <memcpy+0x114>
 8000d8c:	078b      	lsls	r3, r1, #30
 8000d8e:	d08d      	beq.n	8000cac <memcpy+0xc>
 8000d90:	f010 0303 	ands.w	r3, r0, #3
 8000d94:	d08a      	beq.n	8000cac <memcpy+0xc>
 8000d96:	f1c3 0304 	rsb	r3, r3, #4
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	07db      	lsls	r3, r3, #31
 8000d9e:	bf1c      	itt	ne
 8000da0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000da4:	f800 3b01 	strbne.w	r3, [r0], #1
 8000da8:	d380      	bcc.n	8000cac <memcpy+0xc>
 8000daa:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000dae:	f820 3b02 	strh.w	r3, [r0], #2
 8000db2:	e77b      	b.n	8000cac <memcpy+0xc>
 8000db4:	3a04      	subs	r2, #4
 8000db6:	d3d9      	bcc.n	8000d6c <memcpy+0xcc>
 8000db8:	3a01      	subs	r2, #1
 8000dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dbe:	f800 3b01 	strb.w	r3, [r0], #1
 8000dc2:	d2f9      	bcs.n	8000db8 <memcpy+0x118>
 8000dc4:	780b      	ldrb	r3, [r1, #0]
 8000dc6:	7003      	strb	r3, [r0, #0]
 8000dc8:	784b      	ldrb	r3, [r1, #1]
 8000dca:	7043      	strb	r3, [r0, #1]
 8000dcc:	788b      	ldrb	r3, [r1, #2]
 8000dce:	7083      	strb	r3, [r0, #2]
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	4770      	bx	lr
	...

08000de0 <__core_init>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
	...

08000df0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
	...

08000e00 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000e00:	e7fe      	b.n	8000e00 <__default_exit>
 8000e02:	bf00      	nop
	...

08000e10 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	4f13      	ldr	r7, [pc, #76]	; (8000e60 <__init_ram_areas+0x50>)
 8000e14:	4d13      	ldr	r5, [pc, #76]	; (8000e64 <__init_ram_areas+0x54>)
 8000e16:	4c14      	ldr	r4, [pc, #80]	; (8000e68 <__init_ram_areas+0x58>)
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <__init_ram_areas+0x5c>)
 8000e1a:	4915      	ldr	r1, [pc, #84]	; (8000e70 <__init_ram_areas+0x60>)
 8000e1c:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000e20:	2600      	movs	r6, #0
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e22:	429c      	cmp	r4, r3
 8000e24:	d911      	bls.n	8000e4a <__init_ram_areas+0x3a>
 8000e26:	3904      	subs	r1, #4
 8000e28:	461a      	mov	r2, r3
      *p = *tp;
 8000e2a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8000e2e:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e32:	4294      	cmp	r4, r2
 8000e34:	d8f9      	bhi.n	8000e2a <__init_ram_areas+0x1a>
 8000e36:	43da      	mvns	r2, r3
 8000e38:	4414      	add	r4, r2
 8000e3a:	f024 0403 	bic.w	r4, r4, #3
 8000e3e:	3404      	adds	r4, #4
 8000e40:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e42:	429d      	cmp	r5, r3
 8000e44:	d903      	bls.n	8000e4e <__init_ram_areas+0x3e>
      *p = 0;
 8000e46:	f843 6b04 	str.w	r6, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e4a:	429d      	cmp	r5, r3
 8000e4c:	d8fb      	bhi.n	8000e46 <__init_ram_areas+0x36>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000e4e:	4577      	cmp	r7, lr
 8000e50:	d005      	beq.n	8000e5e <__init_ram_areas+0x4e>
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	69bc      	ldr	r4, [r7, #24]
 8000e58:	69fd      	ldr	r5, [r7, #28]
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	e7e1      	b.n	8000e22 <__init_ram_areas+0x12>
 8000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e60:	08008300 	.word	0x08008300
 8000e64:	200024c8 	.word	0x200024c8
 8000e68:	200024c8 	.word	0x200024c8
 8000e6c:	200024c8 	.word	0x200024c8
 8000e70:	08008ec4 	.word	0x08008ec4
	...

08000e80 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000e80:	e7fe      	b.n	8000e80 <_unhandled_exception>
 8000e82:	bf00      	nop
	...

08000e90 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000e90:	e7fe      	b.n	8000e90 <_idle_thread>
 8000e92:	bf00      	nop
	...

08000ea0 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000ea0:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <chSysInit+0x88>)
  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ea4:	4821      	ldr	r0, [pc, #132]	; (8000f2c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000eae:	4e20      	ldr	r6, [pc, #128]	; (8000f30 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000eb0:	4d20      	ldr	r5, [pc, #128]	; (8000f34 <chSysInit+0x94>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000eb2:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000eb6:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                   |
 8000eb8:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	68f2      	ldr	r2, [r6, #12]
 8000ebe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ec2:	60f2      	str	r2, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ec4:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	f042 0201 	orr.w	r2, r2, #1
 8000ecc:	2610      	movs	r6, #16
 8000ece:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	77de      	strb	r6, [r3, #31]
 8000ed4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000ed8:	f000 f902 	bl	80010e0 <_scheduler_init>
  _vt_init();
 8000edc:	f000 f880 	bl	8000fe0 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000ee0:	f000 fb66 	bl	80015b0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000ee4:	f000 fbbc 	bl	8001660 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000ee8:	f000 fbf2 	bl	80016d0 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000eec:	4628      	mov	r0, r5
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	f000 fa06 	bl	8001300 <_thread_init>
 8000ef4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000ef8:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000efa:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000efc:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000efe:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f02:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	490c      	ldr	r1, [pc, #48]	; (8000f38 <chSysInit+0x98>)
 8000f08:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8000f0a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8000f0e:	9400      	str	r4, [sp, #0]
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <chSysInit+0x9c>)
 8000f12:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8000f16:	f000 fa4b 	bl	80013b0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <chSysInit+0xa0>)
 8000f1c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 8000f1e:	b003      	add	sp, #12
 8000f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	05fa0300 	.word	0x05fa0300
 8000f2c:	e0001000 	.word	0xe0001000
 8000f30:	e000edf0 	.word	0xe000edf0
 8000f34:	20000c70 	.word	0x20000c70
 8000f38:	08008390 	.word	0x08008390
 8000f3c:	08000e91 	.word	0x08000e91
 8000f40:	08008380 	.word	0x08008380
	...

08000f50 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000f52:	4b01      	ldr	r3, [pc, #4]	; (8000f58 <chSysHalt+0x8>)
 8000f54:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000f56:	e7fe      	b.n	8000f56 <chSysHalt+0x6>
 8000f58:	20000c40 	.word	0x20000c40
 8000f5c:	00000000 	.word	0x00000000

08000f60 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 8000f62:	4d13      	ldr	r5, [pc, #76]	; (8000fb0 <chSysTimerHandlerI+0x50>)
 8000f64:	69aa      	ldr	r2, [r5, #24]
 8000f66:	7fd3      	ldrb	r3, [r2, #31]
 8000f68:	b10b      	cbz	r3, 8000f6e <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 8000f6e:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f70:	69eb      	ldr	r3, [r5, #28]
 8000f72:	4e10      	ldr	r6, [pc, #64]	; (8000fb4 <chSysTimerHandlerI+0x54>)
 8000f74:	3101      	adds	r1, #1
 8000f76:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000f78:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f7a:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000f7c:	f102 0201 	add.w	r2, r2, #1
 8000f80:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f82:	d013      	beq.n	8000fac <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 8000f84:	689c      	ldr	r4, [r3, #8]
 8000f86:	3c01      	subs	r4, #1
 8000f88:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000f8a:	b97c      	cbnz	r4, 8000fac <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f8c:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000f8e:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 8000f90:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 8000f92:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000f94:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 8000f96:	61ea      	str	r2, [r5, #28]
 8000f98:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 8000f9c:	6918      	ldr	r0, [r3, #16]
 8000f9e:	4788      	blx	r1
 8000fa0:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000fa4:	69eb      	ldr	r3, [r5, #28]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d0f0      	beq.n	8000f8e <chSysTimerHandlerI+0x2e>
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000c40 	.word	0x20000c40
 8000fb4:	20000c5c 	.word	0x20000c5c
	...

08000fc0 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <chSysPolledDelayX+0x10>)
 8000fc2:	6851      	ldr	r1, [r2, #4]
 8000fc4:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8000fc6:	1a5b      	subs	r3, r3, r1
 8000fc8:	4283      	cmp	r3, r0
 8000fca:	d3fb      	bcc.n	8000fc4 <chSysPolledDelayX+0x4>
  }
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e0001000 	.word	0xe0001000
	...

08000fe0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000fe6:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 8000fea:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000fec:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 8000fee:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000ff0:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000ff2:	621a      	str	r2, [r3, #32]
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000c40 	.word	0x20000c40
 8000ffc:	00000000 	.word	0x00000000

08001000 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001000:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8001002:	4e0d      	ldr	r6, [pc, #52]	; (8001038 <chVTDoSetI+0x38>)
 8001004:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 8001006:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001008:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800100a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800100c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800100e:	d904      	bls.n	800101a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001010:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001012:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001014:	68a5      	ldr	r5, [r4, #8]
 8001016:	428d      	cmp	r5, r1
 8001018:	d3fa      	bcc.n	8001010 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800101a:	6863      	ldr	r3, [r4, #4]
 800101c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800101e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001020:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 8001022:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001024:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001026:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800102c:	1a59      	subs	r1, r3, r1
 800102e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001030:	6272      	str	r2, [r6, #36]	; 0x24
}
 8001032:	bc70      	pop	{r4, r5, r6}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000c40 	.word	0x20000c40
 800103c:	00000000 	.word	0x00000000

08001040 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001040:	6803      	ldr	r3, [r0, #0]
 8001042:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001044:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001046:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001048:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800104a:	4c06      	ldr	r4, [pc, #24]	; (8001064 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800104c:	442a      	add	r2, r5
 800104e:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001050:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001052:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 8001054:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800105a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800105c:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800105e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001060:	bc30      	pop	{r4, r5}
 8001062:	4770      	bx	lr
 8001064:	20000c40 	.word	0x20000c40
	...

08001070 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8001070:	b410      	push	{r4}
 8001072:	2320      	movs	r3, #32
 8001074:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001078:	7f03      	ldrb	r3, [r0, #28]
 800107a:	2b07      	cmp	r3, #7
 800107c:	d80e      	bhi.n	800109c <wakeup+0x2c>
 800107e:	e8df f003 	tbb	[pc, r3]
 8001082:	0d27      	.short	0x0d27
 8001084:	0408230d 	.word	0x0408230d
 8001088:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800108a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800108c:	6893      	ldr	r3, [r2, #8]
 800108e:	3301      	adds	r3, #1
 8001090:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001092:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001096:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001098:	6802      	ldr	r2, [r0, #0]
 800109a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800109c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010a0:	2200      	movs	r2, #0
 80010a2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80010a6:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010a8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80010aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	428a      	cmp	r2, r1
 80010b0:	d2fb      	bcs.n	80010aa <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80010b6:	6003      	str	r3, [r0, #0]
 80010b8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010ba:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80010bc:	6058      	str	r0, [r3, #4]
 80010be:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80010c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010c6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80010c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    break;
 80010ce:	e7e5      	b.n	800109c <wakeup+0x2c>
 80010d0:	2300      	movs	r3, #0
 80010d2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80010d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	20000c40 	.word	0x20000c40

080010e0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80010e2:	2200      	movs	r2, #0
 80010e4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80010e6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80010e8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80010ea:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	4770      	bx	lr
 80010f0:	20000c40 	.word	0x20000c40
	...

08001100 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001100:	2200      	movs	r2, #0
 8001102:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001106:	b410      	push	{r4}
 8001108:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800110a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800110c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	428a      	cmp	r2, r1
 8001112:	d2fb      	bcs.n	800110c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001118:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800111a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800111c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800111e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000c40 	.word	0x20000c40
 800112c:	00000000 	.word	0x00000000

08001130 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <chSchGoSleepS+0x24>)
 8001132:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001134:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001136:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8001138:	7708      	strb	r0, [r1, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800113a:	2004      	movs	r0, #4
 800113c:	77c8      	strb	r0, [r1, #31]

  tqp->p_next = tp->p_next;
 800113e:	6810      	ldr	r0, [r2, #0]
 8001140:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001142:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001144:	6043      	str	r3, [r0, #4]
 8001146:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8001148:	4610      	mov	r0, r2
}
 800114a:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800114e:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001150:	f7ff b8be 	b.w	80002d0 <_port_switch>
 8001154:	20000c40 	.word	0x20000c40
	...

08001160 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001160:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001162:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001164:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001166:	d012      	beq.n	800118e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001168:	4c0c      	ldr	r4, [pc, #48]	; (800119c <chSchGoSleepTimeoutS+0x3c>)
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <chSchGoSleepTimeoutS+0x40>)
 800116c:	69a3      	ldr	r3, [r4, #24]
 800116e:	4605      	mov	r5, r0
 8001170:	a801      	add	r0, sp, #4
 8001172:	f7ff ff45 	bl	8001000 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff ffda 	bl	8001130 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800117c:	9b04      	ldr	r3, [sp, #16]
 800117e:	b113      	cbz	r3, 8001186 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8001180:	a801      	add	r0, sp, #4
 8001182:	f7ff ff5d 	bl	8001040 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001186:	69a3      	ldr	r3, [r4, #24]
}
 8001188:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800118a:	b007      	add	sp, #28
 800118c:	bd30      	pop	{r4, r5, pc}
 800118e:	4c03      	ldr	r4, [pc, #12]	; (800119c <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001190:	f7ff ffce 	bl	8001130 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8001194:	69a3      	ldr	r3, [r4, #24]
}
 8001196:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001198:	b007      	add	sp, #28
 800119a:	bd30      	pop	{r4, r5, pc}
 800119c:	20000c40 	.word	0x20000c40
 80011a0:	08001071 	.word	0x08001071
	...

080011b0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80011b2:	b470      	push	{r4, r5, r6}
 80011b4:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011b6:	699d      	ldr	r5, [r3, #24]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80011b8:	6241      	str	r1, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011ba:	68a8      	ldr	r0, [r5, #8]
 80011bc:	68a1      	ldr	r1, [r4, #8]
 80011be:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011c0:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011c4:	d80b      	bhi.n	80011de <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011c6:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80011c8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4291      	cmp	r1, r2
 80011ce:	d9fb      	bls.n	80011c8 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80011d4:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80011d6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80011d8:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80011da:	bc70      	pop	{r4, r5, r6}
 80011dc:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011de:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80011e0:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 80011e2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80011e4:	6891      	ldr	r1, [r2, #8]
 80011e6:	4288      	cmp	r0, r1
 80011e8:	d9fb      	bls.n	80011e2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011ea:	6850      	ldr	r0, [r2, #4]
 80011ec:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80011ee:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80011f0:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80011f2:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 80011f4:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80011f6:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 80011f8:	4629      	mov	r1, r5
 80011fa:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80011fc:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80011fe:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001200:	f7ff b866 	b.w	80002d0 <_port_switch>
 8001204:	20000c40 	.word	0x20000c40
	...

08001210 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 8001212:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001214:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8001216:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001218:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800121a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800121c:	b921      	cbnz	r1, 8001228 <chSchIsPreemptionRequired+0x18>
 800121e:	4283      	cmp	r3, r0
 8001220:	bf34      	ite	cc
 8001222:	2000      	movcc	r0, #0
 8001224:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 8001226:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8001228:	4283      	cmp	r3, r0
 800122a:	bf94      	ite	ls
 800122c:	2000      	movls	r0, #0
 800122e:	2001      	movhi	r0, #1
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000c40 	.word	0x20000c40
	...

08001240 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001242:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8001244:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8001246:	b470      	push	{r4, r5, r6}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001248:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800124a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800124c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800124e:	2604      	movs	r6, #4
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001250:	7701      	strb	r1, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001252:	2500      	movs	r5, #0
 8001254:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001256:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001258:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800125a:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800125c:	7725      	strb	r5, [r4, #28]
 800125e:	e000      	b.n	8001262 <chSchDoRescheduleBehind+0x22>
 8001260:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	428a      	cmp	r2, r1
 8001266:	d2fb      	bcs.n	8001260 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800126c:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800126e:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001270:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001272:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 8001274:	bc70      	pop	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001276:	f7ff b82b 	b.w	80002d0 <_port_switch>
 800127a:	bf00      	nop
 800127c:	20000c40 	.word	0x20000c40

08001280 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001282:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8001284:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001286:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001288:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800128a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800128c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800128e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001290:	7701      	strb	r1, [r0, #28]
 8001292:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001294:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001296:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001298:	7725      	strb	r5, [r4, #28]
 800129a:	e000      	b.n	800129e <chSchDoRescheduleAhead+0x1e>
 800129c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	428a      	cmp	r2, r1
 80012a2:	d8fb      	bhi.n	800129c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80012a8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80012aa:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80012ac:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80012ae:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80012b0:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80012b2:	f7ff b80d 	b.w	80002d0 <_port_switch>
 80012b6:	bf00      	nop
 80012b8:	20000c40 	.word	0x20000c40
 80012bc:	00000000 	.word	0x00000000

080012c0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <chSchRescheduleS+0x14>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80012c6:	6892      	ldr	r2, [r2, #8]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d800      	bhi.n	80012d0 <chSchRescheduleS+0x10>
 80012ce:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80012d0:	f7ff bfd6 	b.w	8001280 <chSchDoRescheduleAhead>
 80012d4:	20000c40 	.word	0x20000c40
	...

080012e0 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <chSchDoReschedule+0x10>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	7fdb      	ldrb	r3, [r3, #31]
 80012e6:	b10b      	cbz	r3, 80012ec <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 80012e8:	f7ff bfca 	b.w	8001280 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 80012ec:	f7ff bfa8 	b.w	8001240 <chSchDoRescheduleBehind>
 80012f0:	20000c40 	.word	0x20000c40
	...

08001300 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001302:	4c0f      	ldr	r4, [pc, #60]	; (8001340 <_thread_init+0x40>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001304:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001306:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001308:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800130a:	2602      	movs	r6, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800130c:	2200      	movs	r2, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800130e:	7706      	strb	r6, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8001310:	f100 012c 	add.w	r1, r0, #44	; 0x2c

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001314:	f04f 0e04 	mov.w	lr, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001318:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800131a:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800131e:	6145      	str	r5, [r0, #20]
 8001320:	6104      	str	r4, [r0, #16]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001322:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001326:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001328:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800132a:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800132c:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800132e:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001330:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 8001332:	6128      	str	r0, [r5, #16]
 8001334:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001336:	6286      	str	r6, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001338:	62c1      	str	r1, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800133a:	6301      	str	r1, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133e:	bf00      	nop
 8001340:	20000c40 	.word	0x20000c40
	...

08001350 <chThdCreateI>:

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001350:	3964      	subs	r1, #100	; 0x64
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001352:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001354:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001356:	4e12      	ldr	r6, [pc, #72]	; (80013a0 <chThdCreateI+0x50>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001358:	4d12      	ldr	r5, [pc, #72]	; (80013a4 <chThdCreateI+0x54>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800135a:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800135c:	60c1      	str	r1, [r0, #12]
 800135e:	640b      	str	r3, [r1, #64]	; 0x40
 8001360:	9b05      	ldr	r3, [sp, #20]
 8001362:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001364:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001366:	660d      	str	r5, [r1, #96]	; 0x60

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001368:	f04f 0e04 	mov.w	lr, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800136c:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800136e:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001370:	7703      	strb	r3, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8001372:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001376:	2300      	movs	r3, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001378:	2501      	movs	r5, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800137a:	f100 0128 	add.w	r1, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800137e:	6106      	str	r6, [r0, #16]
 8001380:	6147      	str	r7, [r0, #20]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001382:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001386:	7785      	strb	r5, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001388:	7743      	strb	r3, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800138a:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800138c:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800138e:	6203      	str	r3, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001390:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 8001392:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001394:	6281      	str	r1, [r0, #40]	; 0x28
 8001396:	6170      	str	r0, [r6, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001398:	62c2      	str	r2, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800139a:	6302      	str	r2, [r0, #48]	; 0x30
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 800139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000c40 	.word	0x20000c40
 80013a4:	080002e9 	.word	0x080002e9
	...

080013b0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b2:	461d      	mov	r5, r3
 80013b4:	4604      	mov	r4, r0
 80013b6:	2320      	movs	r3, #32
 80013b8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013bc:	3964      	subs	r1, #100	; 0x64
 80013be:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013c0:	4e13      	ldr	r6, [pc, #76]	; (8001410 <chThdCreateStatic+0x60>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <chThdCreateStatic+0x64>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013c4:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013c6:	60c1      	str	r1, [r0, #12]
 80013c8:	640d      	str	r5, [r1, #64]	; 0x40
 80013ca:	9d06      	ldr	r5, [sp, #24]
 80013cc:	644d      	str	r5, [r1, #68]	; 0x44
 80013ce:	660b      	str	r3, [r1, #96]	; 0x60
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80013d0:	2502      	movs	r5, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 80013d2:	2304      	movs	r3, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80013d4:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80013d6:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80013d8:	7705      	strb	r5, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 80013da:	77c3      	strb	r3, [r0, #31]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80013dc:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80013de:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80013e2:	f100 0228 	add.w	r2, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80013e6:	2101      	movs	r1, #1
 80013e8:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013ea:	6106      	str	r6, [r0, #16]
 80013ec:	6147      	str	r7, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80013ee:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80013f0:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80013f2:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 80013f4:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80013f6:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80013f8:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013fa:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80013fc:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80013fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8001400:	6303      	str	r3, [r0, #48]	; 0x30
 8001402:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001404:	f7ff fed4 	bl	80011b0 <chSchWakeupS>
 8001408:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800140c:	4620      	mov	r0, r4
 800140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001410:	20000c40 	.word	0x20000c40
 8001414:	080002e9 	.word	0x080002e9
	...

08001420 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001420:	b508      	push	{r3, lr}
 8001422:	4601      	mov	r1, r0
 8001424:	2320      	movs	r3, #32
 8001426:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800142a:	2008      	movs	r0, #8
 800142c:	f7ff fe98 	bl	8001160 <chSchGoSleepTimeoutS>
 8001430:	2300      	movs	r3, #0
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	bd08      	pop	{r3, pc}
	...

08001440 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001440:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <chThdExitS+0x3c>)
 8001444:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001446:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 8001448:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800144a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800144e:	429d      	cmp	r5, r3
 8001450:	d007      	beq.n	8001462 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fe52 	bl	8001100 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800145c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800145e:	42ab      	cmp	r3, r5
 8001460:	d1f7      	bne.n	8001452 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001462:	7f63      	ldrb	r3, [r4, #29]
 8001464:	079b      	lsls	r3, r3, #30
 8001466:	d104      	bne.n	8001472 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001468:	6963      	ldr	r3, [r4, #20]
 800146a:	6922      	ldr	r2, [r4, #16]
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	6922      	ldr	r2, [r4, #16]
 8001470:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001472:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001478:	f7ff be5a 	b.w	8001130 <chSchGoSleepS>
 800147c:	20000c40 	.word	0x20000c40

08001480 <chThdExit>:
 8001480:	2320      	movs	r3, #32
 8001482:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8001486:	f7ff bfdb 	b.w	8001440 <chThdExitS>
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8001490:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001492:	4c05      	ldr	r4, [pc, #20]	; (80014a8 <chThdSuspendS+0x18>)
 8001494:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8001496:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8001498:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff fe47 	bl	8001130 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 80014a2:	69a3      	ldr	r3, [r4, #24]
}
 80014a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	20000c40 	.word	0x20000c40
 80014ac:	00000000 	.word	0x00000000

080014b0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80014b0:	6803      	ldr	r3, [r0, #0]
 80014b2:	b12b      	cbz	r3, 80014c0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80014b4:	2200      	movs	r2, #0
 80014b6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80014b8:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80014ba:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80014bc:	f7ff be20 	b.w	8001100 <chSchReadyI>
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
	...

080014d0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80014d0:	b169      	cbz	r1, 80014ee <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80014d4:	b410      	push	{r4}
 80014d6:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80014d8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80014da:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80014dc:	2004      	movs	r0, #4
 80014de:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 80014e2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80014e4:	6053      	str	r3, [r2, #4]
}
 80014e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80014ea:	f7ff be39 	b.w	8001160 <chSchGoSleepTimeoutS>
}
 80014ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f2:	4770      	bx	lr
 80014f4:	20000c40 	.word	0x20000c40
	...

08001500 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001500:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001502:	4290      	cmp	r0, r2
 8001504:	d00a      	beq.n	800151c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001506:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001508:	6814      	ldr	r4, [r2, #0]
 800150a:	6004      	str	r4, [r0, #0]
 800150c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800150e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001510:	6251      	str	r1, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001512:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001518:	f7ff bdf2 	b.w	8001100 <chSchReadyI>
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001520:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001522:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8001524:	4298      	cmp	r0, r3
 8001526:	d00b      	beq.n	8001540 <chThdDequeueAllI+0x20>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	6022      	str	r2, [r4, #0]
 8001530:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001532:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001534:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001536:	f7ff fde3 	bl	8001100 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	429c      	cmp	r4, r3
 800153e:	d1f5      	bne.n	800152c <chThdDequeueAllI+0xc>
 8001540:	bd38      	pop	{r3, r4, r5, pc}
 8001542:	bf00      	nop
	...

08001550 <chTMStartMeasurementX>:
 8001550:	4b01      	ldr	r3, [pc, #4]	; (8001558 <chTMStartMeasurementX+0x8>)
 8001552:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001554:	6083      	str	r3, [r0, #8]
 8001556:	4770      	bx	lr
 8001558:	e0001000 	.word	0xe0001000
 800155c:	00000000 	.word	0x00000000

08001560 <chTMStopMeasurementX>:
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001562:	490f      	ldr	r1, [pc, #60]	; (80015a0 <chTMStopMeasurementX+0x40>)
 8001564:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001566:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001568:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800156a:	6f8f      	ldr	r7, [r1, #120]	; 0x78
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800156c:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800156e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001570:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8001578:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800157a:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800157c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800157e:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001582:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001584:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8001588:	bf88      	it	hi
 800158a:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800158c:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800158e:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001590:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8001594:	bf38      	it	cc
 8001596:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001598:	bcf0      	pop	{r4, r5, r6, r7}
 800159a:	4770      	bx	lr
 800159c:	e0001000 	.word	0xe0001000
 80015a0:	20000c40 	.word	0x20000c40
	...

080015b0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80015b0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80015b2:	4c0c      	ldr	r4, [pc, #48]	; (80015e4 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80015b4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80015b6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80015bc:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80015be:	2600      	movs	r6, #0
 80015c0:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80015c2:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80015c4:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 80015c6:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 80015c8:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80015ca:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80015cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80015d0:	f7ff ffbe 	bl	8001550 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80015d4:	4668      	mov	r0, sp
 80015d6:	f7ff ffc3 	bl	8001560 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80015da:	9b02      	ldr	r3, [sp, #8]
 80015dc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80015de:	b006      	add	sp, #24
 80015e0:	bdd0      	pop	{r4, r6, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000c40 	.word	0x20000c40
	...

080015f0 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80015f0:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80015f2:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80015f4:	6040      	str	r0, [r0, #4]
 80015f6:	6083      	str	r3, [r0, #8]
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	0000      	movs	r0, r0
	...

08001600 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001600:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001602:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001604:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001606:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001608:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800160a:	d009      	beq.n	8001620 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800160c:	2a0b      	cmp	r2, #11
 800160e:	d000      	beq.n	8001612 <chEvtSignalI+0x12>
 8001610:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001612:	6a43      	ldr	r3, [r0, #36]	; 0x24

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001614:	438b      	bics	r3, r1
 8001616:	d1fb      	bne.n	8001610 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800161c:	f7ff bd70 	b.w	8001100 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001622:	4219      	tst	r1, r3
 8001624:	d1f8      	bne.n	8001618 <chEvtSignalI+0x18>
 8001626:	4770      	bx	lr
	...

08001630 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001630:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001632:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001634:	42a0      	cmp	r0, r4
 8001636:	d00f      	beq.n	8001658 <chEvtBroadcastFlagsI+0x28>
 8001638:	4606      	mov	r6, r0
 800163a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 800163c:	68e3      	ldr	r3, [r4, #12]
 800163e:	432b      	orrs	r3, r5
 8001640:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001642:	b115      	cbz	r5, 800164a <chEvtBroadcastFlagsI+0x1a>
 8001644:	6922      	ldr	r2, [r4, #16]
 8001646:	4213      	tst	r3, r2
 8001648:	d003      	beq.n	8001652 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800164a:	68a1      	ldr	r1, [r4, #8]
 800164c:	6860      	ldr	r0, [r4, #4]
 800164e:	f7ff ffd7 	bl	8001600 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001652:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001654:	42a6      	cmp	r6, r4
 8001656:	d1f1      	bne.n	800163c <chEvtBroadcastFlagsI+0xc>
 8001658:	bd70      	pop	{r4, r5, r6, pc}
 800165a:	bf00      	nop
 800165c:	0000      	movs	r0, r0
	...

08001660 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001664:	4806      	ldr	r0, [pc, #24]	; (8001680 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001666:	4907      	ldr	r1, [pc, #28]	; (8001684 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001668:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800166c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001670:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200024cf 	.word	0x200024cf
 800167c:	20020000 	.word	0x20020000
 8001680:	20000e9c 	.word	0x20000e9c
 8001684:	20000e98 	.word	0x20000e98
	...

08001690 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001690:	b410      	push	{r4}
 8001692:	2320      	movs	r3, #32
 8001694:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001698:	4c09      	ldr	r4, [pc, #36]	; (80016c0 <chCoreAlloc+0x30>)
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <chCoreAlloc+0x34>)
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80016a0:	1dc3      	adds	r3, r0, #7
 80016a2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80016a6:	1a89      	subs	r1, r1, r2
 80016a8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80016aa:	bf9d      	ittte	ls
 80016ac:	189b      	addls	r3, r3, r2
 80016ae:	6023      	strls	r3, [r4, #0]

  return p;
 80016b0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80016b2:	2000      	movhi	r0, #0
 80016b4:	2300      	movs	r3, #0
 80016b6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80016ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000e9c 	.word	0x20000e9c
 80016c4:	20000e98 	.word	0x20000e98
	...

080016d0 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <_heap_init+0x14>)
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_heap_init+0x18>)
 80016d4:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 80016d6:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 80016de:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 80016e0:	f7ff bf86 	b.w	80015f0 <chMtxObjectInit>
 80016e4:	20000ea0 	.word	0x20000ea0
 80016e8:	08001691 	.word	0x08001691
 80016ec:	00000000 	.word	0x00000000

080016f0 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <SVC_Handler+0x1c>)
 80016f2:	6853      	ldr	r3, [r2, #4]
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80016fa:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80016fe:	3368      	adds	r3, #104	; 0x68
 8001700:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001704:	2300      	movs	r3, #0
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	4770      	bx	lr
 800170c:	e000ef30 	.word	0xe000ef30

08001710 <_port_irq_epilogue>:
 8001710:	2320      	movs	r3, #32
 8001712:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <_port_irq_epilogue+0x50>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800171e:	d102      	bne.n	8001726 <_port_irq_epilogue+0x16>
 8001720:	f383 8811 	msr	BASEPRI, r3
 8001724:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8001726:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001728:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800172c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001732:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800173c:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001740:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 8001744:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001748:	f7ff fd62 	bl	8001210 <chSchIsPreemptionRequired>
 800174c:	b118      	cbz	r0, 8001756 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <_port_irq_epilogue+0x58>)
 8001750:	f844 3c50 	str.w	r3, [r4, #-80]
 8001754:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <_port_irq_epilogue+0x5c>)
 8001758:	f844 3c50 	str.w	r3, [r4, #-80]
 800175c:	bd10      	pop	{r4, pc}
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00
 8001764:	e000ef30 	.word	0xe000ef30
 8001768:	080002f9 	.word	0x080002f9
 800176c:	080002fc 	.word	0x080002fc

08001770 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001770:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001772:	f001 f805 	bl	8002780 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <halInit+0x2c>)
 8001778:	f001 fc42 	bl	8003000 <_pal_lld_init>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
 800177c:	f000 fa88 	bl	8001c90 <extInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 8001780:	f000 fa96 	bl	8001cb0 <i2cInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 8001784:	f000 fcbc 	bl	8002100 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 8001788:	f000 fcda 	bl	8002140 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800178c:	f000 fb70 	bl	8001e70 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001790:	f002 fd6e 	bl	8004270 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8001794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8001798:	f000 b802 	b.w	80017a0 <stInit>
 800179c:	08008520 	.word	0x08008520

080017a0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 80017a0:	f001 ba96 	b.w	8002cd0 <st_lld_init>
	...

080017b0 <ibqObjectInit>:
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 80017b0:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80017b2:	3204      	adds	r2, #4
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 80017b4:	2400      	movs	r4, #0
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80017b6:	fb03 1702 	mla	r7, r3, r2, r1
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 80017ba:	9e04      	ldr	r6, [sp, #16]
 80017bc:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80017be:	6147      	str	r7, [r0, #20]
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
 80017c0:	62c6      	str	r6, [r0, #44]	; 0x2c
  ibqp->link     = link;
 80017c2:	6305      	str	r5, [r0, #48]	; 0x30
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 80017c4:	6084      	str	r4, [r0, #8]
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
 80017c6:	6244      	str	r4, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 80017c8:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80017ca:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80017cc:	6040      	str	r0, [r0, #4]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
 80017ce:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = bp;
 80017d0:	60c1      	str	r1, [r0, #12]
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
 80017d2:	6182      	str	r2, [r0, #24]
  ibqp->bn       = n;
 80017d4:	61c3      	str	r3, [r0, #28]
  ibqp->buffers  = bp;
 80017d6:	6201      	str	r1, [r0, #32]
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
  ibqp->link     = link;
}
 80017d8:	bcf0      	pop	{r4, r5, r6, r7}
 80017da:	4770      	bx	lr
 80017dc:	0000      	movs	r0, r0
	...

080017e0 <ibqResetI>:
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 80017e0:	2200      	movs	r2, #0
  ibqp->brdptr   = ibqp->buffers;
 80017e2:	6a01      	ldr	r1, [r0, #32]
 80017e4:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = ibqp->buffers;
 80017e6:	60c1      	str	r1, [r0, #12]
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 80017e8:	6082      	str	r2, [r0, #8]
  ibqp->brdptr   = ibqp->buffers;
  ibqp->bwrptr   = ibqp->buffers;
  ibqp->ptr      = NULL;
 80017ea:	6242      	str	r2, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 80017ec:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80017ee:	f06f 0101 	mvn.w	r1, #1
 80017f2:	f7ff be95 	b.w	8001520 <chThdDequeueAllI>
 80017f6:	bf00      	nop
	...

08001800 <ibqGetEmptyBufferI>:
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001800:	68c3      	ldr	r3, [r0, #12]
 8001802:	6902      	ldr	r2, [r0, #16]
 8001804:	4293      	cmp	r3, r2
 8001806:	d001      	beq.n	800180c <ibqGetEmptyBufferI+0xc>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8001808:	1d18      	adds	r0, r3, #4
}
 800180a:	4770      	bx	lr
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 800180c:	6882      	ldr	r2, [r0, #8]
 800180e:	2a00      	cmp	r2, #0
 8001810:	d0fa      	beq.n	8001808 <ibqGetEmptyBufferI+0x8>
    return NULL;
 8001812:	2000      	movs	r0, #0
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
	...

08001820 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8001820:	b430      	push	{r4, r5}

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001822:	68c4      	ldr	r4, [r0, #12]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001824:	6945      	ldr	r5, [r0, #20]

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001826:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001828:	6983      	ldr	r3, [r0, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800182a:	6882      	ldr	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
 800182c:	4423      	add	r3, r4
  if (ibqp->bwrptr >= ibqp->btop) {
 800182e:	42ab      	cmp	r3, r5
  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001830:	60c3      	str	r3, [r0, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001832:	f102 0201 	add.w	r2, r2, #1
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 8001836:	bf28      	it	cs
 8001838:	6a03      	ldrcs	r3, [r0, #32]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800183a:	6082      	str	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 800183c:	bf28      	it	cs
 800183e:	60c3      	strcs	r3, [r0, #12]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001840:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 8001842:	bc30      	pop	{r4, r5}
 8001844:	f7ff be5c 	b.w	8001500 <chThdDequeueNextI>
	...

08001850 <ibqGetFullBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {
 8001850:	b538      	push	{r3, r4, r5, lr}
 8001852:	4604      	mov	r4, r0
 8001854:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 8001856:	e003      	b.n	8001860 <ibqGetFullBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8001858:	f7ff fe3a 	bl	80014d0 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
    if (msg < MSG_OK) {
 800185c:	2800      	cmp	r0, #0
 800185e:	db0b      	blt.n	8001878 <ibqGetFullBufferTimeoutS+0x28>
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 8001860:	68a3      	ldr	r3, [r4, #8]
 8001862:	4629      	mov	r1, r5
 8001864:	4620      	mov	r0, r4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f6      	beq.n	8001858 <ibqGetFullBufferTimeoutS+0x8>
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800186a:	6923      	ldr	r3, [r4, #16]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800186c:	681a      	ldr	r2, [r3, #0]
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800186e:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001870:	441a      	add	r2, r3
 8001872:	62a2      	str	r2, [r4, #40]	; 0x28
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001874:	6263      	str	r3, [r4, #36]	; 0x24
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001876:	2000      	movs	r0, #0

  return MSG_OK;
}
 8001878:	bd38      	pop	{r3, r4, r5, pc}
 800187a:	bf00      	nop
 800187c:	0000      	movs	r0, r0
	...

08001880 <ibqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001884:	2320      	movs	r3, #32
 8001886:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 800188a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800188c:	b1ed      	cbz	r5, 80018ca <ibqGetTimeout+0x4a>
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 800188e:	462b      	mov	r3, r5
  ibqp->ptr++;

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001890:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 8001892:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 8001896:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001898:	4293      	cmp	r3, r2
 800189a:	d311      	bcc.n	80018c0 <ibqGetTimeout+0x40>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 800189c:	f104 0010 	add.w	r0, r4, #16
 80018a0:	c80b      	ldmia	r0, {r0, r1, r3}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 80018a2:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 80018a4:	428b      	cmp	r3, r1

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 80018a6:	68a2      	ldr	r2, [r4, #8]
  ibqp->brdptr += ibqp->bsize;
 80018a8:	6123      	str	r3, [r4, #16]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 80018aa:	bf24      	itt	cs
 80018ac:	6a23      	ldrcs	r3, [r4, #32]
 80018ae:	6123      	strcs	r3, [r4, #16]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 80018b0:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 80018b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 80018b4:	60a2      	str	r2, [r4, #8]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 80018b6:	2200      	movs	r2, #0
 80018b8:	6262      	str	r2, [r4, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 80018ba:	b10b      	cbz	r3, 80018c0 <ibqGetTimeout+0x40>
    ibqp->notify(ibqp);
 80018bc:	4620      	mov	r0, r4
 80018be:	4798      	blx	r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr >= ibqp->top) {
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
 80018c6:	4628      	mov	r0, r5
}
 80018c8:	bd38      	pop	{r3, r4, r5, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 80018ca:	f7ff ffc1 	bl	8001850 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 80018ce:	b908      	cbnz	r0, 80018d4 <ibqGetTimeout+0x54>
 80018d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80018d2:	e7dc      	b.n	800188e <ibqGetTimeout+0xe>
 80018d4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 80018d8:	bd38      	pop	{r3, r4, r5, pc}
 80018da:	bf00      	nop
 80018dc:	0000      	movs	r0, r0
	...

080018e0 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
 80018e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e4:	4604      	mov	r4, r0
 80018e6:	b083      	sub	sp, #12
 80018e8:	460d      	mov	r5, r1
 80018ea:	4616      	mov	r6, r2
 80018ec:	4699      	mov	r9, r3
 80018ee:	f04f 0820 	mov.w	r8, #32
 80018f2:	f388 8811 	msr	BASEPRI, r8
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <ibqReadTimeout+0x10c>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 80018f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80018fc:	444b      	add	r3, r9
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
  size_t r = 0;
 80018fe:	f04f 0a00 	mov.w	sl, #0
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001902:	9301      	str	r3, [sp, #4]
    if (ibqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001904:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001908:	9300      	str	r3, [sp, #0]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 800190a:	4657      	mov	r7, sl

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 800190c:	2900      	cmp	r1, #0
 800190e:	d042      	beq.n	8001996 <ibqReadTimeout+0xb6>
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8001910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (size > (n - r)) {
 8001912:	ebca 0b06 	rsb	fp, sl, r6
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8001916:	1a5b      	subs	r3, r3, r1
 8001918:	459b      	cmp	fp, r3
 800191a:	bf28      	it	cs
 800191c:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 800191e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8001922:	d948      	bls.n	80019b6 <ibqReadTimeout+0xd6>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
 8001924:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8001928:	462b      	mov	r3, r5
 800192a:	f8d1 c000 	ldr.w	ip, [r1]
 800192e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001932:	6888      	ldr	r0, [r1, #8]
 8001934:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8001938:	f8c3 b00c 	str.w	fp, [r3, #12]
 800193c:	3110      	adds	r1, #16
 800193e:	4291      	cmp	r1, r2
 8001940:	f8c3 c000 	str.w	ip, [r3]
 8001944:	f8c3 e004 	str.w	lr, [r3, #4]
 8001948:	6098      	str	r0, [r3, #8]
 800194a:	f103 0310 	add.w	r3, r3, #16
 800194e:	d1ec      	bne.n	800192a <ibqReadTimeout+0x4a>
      bp        += 64U;
      ibqp->ptr += 64U;
 8001950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001952:	3340      	adds	r3, #64	; 0x40
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
 8001954:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += 64U;
      r         += 64U;
 8001956:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
      ibqp->ptr += 64U;
 800195a:	6263      	str	r3, [r4, #36]	; 0x24
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 800195c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800195e:	429a      	cmp	r2, r3
 8001960:	d810      	bhi.n	8001984 <ibqReadTimeout+0xa4>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 8001962:	f104 0110 	add.w	r1, r4, #16
 8001966:	c90e      	ldmia	r1, {r1, r2, r3}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 8001968:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 800196a:	4293      	cmp	r3, r2
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 800196c:	6123      	str	r3, [r4, #16]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800196e:	68a0      	ldr	r0, [r4, #8]
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 8001970:	bf24      	itt	cs
 8001972:	6a23      	ldrcs	r3, [r4, #32]
 8001974:	6123      	strcs	r3, [r4, #16]

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8001978:	6267      	str	r7, [r4, #36]	; 0x24

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 800197a:	3801      	subs	r0, #1
 800197c:	60a0      	str	r0, [r4, #8]

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 800197e:	b10b      	cbz	r3, 8001984 <ibqReadTimeout+0xa4>
    ibqp->notify(ibqp);
 8001980:	4620      	mov	r0, r4
 8001982:	4798      	blx	r3
 8001984:	f387 8811 	msr	BASEPRI, r7
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 8001988:	45b2      	cmp	sl, r6
 800198a:	d227      	bcs.n	80019dc <ibqReadTimeout+0xfc>
 800198c:	f388 8811 	msr	BASEPRI, r8

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001990:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001992:	2900      	cmp	r1, #0
 8001994:	d1bc      	bne.n	8001910 <ibqReadTimeout+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001996:	9b00      	ldr	r3, [sp, #0]
 8001998:	3303      	adds	r3, #3
 800199a:	d816      	bhi.n	80019ca <ibqReadTimeout+0xea>
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <ibqReadTimeout+0x10c>)
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 800199e:	9a01      	ldr	r2, [sp, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	1ad3      	subs	r3, r2, r3

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 80019a4:	4599      	cmp	r9, r3
 80019a6:	d31d      	bcc.n	80019e4 <ibqReadTimeout+0x104>
          osalSysUnlock();
          return r;
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 80019a8:	4619      	mov	r1, r3
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff ff50 	bl	8001850 <ibqGetFullBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 80019b0:	b988      	cbnz	r0, 80019d6 <ibqReadTimeout+0xf6>
 80019b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019b4:	e7ac      	b.n	8001910 <ibqReadTimeout+0x30>
      bp        += 64U;
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 80019b6:	4628      	mov	r0, r5
 80019b8:	465a      	mov	r2, fp
 80019ba:	f7ff f971 	bl	8000ca0 <memcpy>
      bp        += size;
      ibqp->ptr += size;
 80019be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019c0:	445b      	add	r3, fp
      r         += size;
 80019c2:	44da      	add	sl, fp
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
 80019c4:	445d      	add	r5, fp
      ibqp->ptr += size;
 80019c6:	6263      	str	r3, [r4, #36]	; 0x24
 80019c8:	e7c8      	b.n	800195c <ibqReadTimeout+0x7c>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 80019ca:	4649      	mov	r1, r9
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff ff3f 	bl	8001850 <ibqGetFullBufferTimeoutS>
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d0ed      	beq.n	80019b2 <ibqReadTimeout+0xd2>
 80019d6:	2300      	movs	r3, #0
 80019d8:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
      return r;
    }
    osalSysLock();
  }
}
 80019dc:	4650      	mov	r0, sl
 80019de:	b003      	add	sp, #12
 80019e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e4:	f381 8811 	msr	BASEPRI, r1
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return r;
 80019e8:	e7f8      	b.n	80019dc <ibqReadTimeout+0xfc>
 80019ea:	bf00      	nop
 80019ec:	20000c40 	.word	0x20000c40

080019f0 <obqObjectInit>:
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 80019f0:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80019f2:	3204      	adds	r2, #4
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 80019f4:	2400      	movs	r4, #0

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80019f6:	fb02 1703 	mla	r7, r2, r3, r1
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 80019fa:	9e04      	ldr	r6, [sp, #16]
 80019fc:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80019fe:	6147      	str	r7, [r0, #20]
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
 8001a00:	62c6      	str	r6, [r0, #44]	; 0x2c
  obqp->link     = link;
 8001a02:	6305      	str	r5, [r0, #48]	; 0x30
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 8001a04:	6244      	str	r4, [r0, #36]	; 0x24
  obqp->top      = NULL;
 8001a06:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001a08:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001a0a:	6040      	str	r0, [r0, #4]
                   bqnotify_t onfy, void *link) {

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
 8001a0c:	6083      	str	r3, [r0, #8]
  obqp->brdptr   = bp;
 8001a0e:	6101      	str	r1, [r0, #16]
  obqp->bwrptr   = bp;
 8001a10:	60c1      	str	r1, [r0, #12]
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
 8001a12:	6182      	str	r2, [r0, #24]
  obqp->bn       = n;
 8001a14:	61c3      	str	r3, [r0, #28]
  obqp->buffers  = bp;
 8001a16:	6201      	str	r1, [r0, #32]
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
  obqp->link     = link;
}
 8001a18:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	0000      	movs	r0, r0
	...

08001a20 <obqResetI>:
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
 8001a20:	6a01      	ldr	r1, [r0, #32]
 8001a22:	6101      	str	r1, [r0, #16]
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8001a24:	b410      	push	{r4}
  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
  obqp->ptr      = NULL;
 8001a26:	2200      	movs	r2, #0
 */
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
 8001a28:	69c4      	ldr	r4, [r0, #28]
 8001a2a:	6084      	str	r4, [r0, #8]
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
 8001a2c:	60c1      	str	r1, [r0, #12]
  obqp->ptr      = NULL;
 8001a2e:	6242      	str	r2, [r0, #36]	; 0x24
  obqp->top      = NULL;
 8001a30:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001a32:	f06f 0101 	mvn.w	r1, #1
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 8001a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a3a:	f7ff bd71 	b.w	8001520 <chThdDequeueAllI>
 8001a3e:	bf00      	nop

08001a40 <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001a40:	6903      	ldr	r3, [r0, #16]
 8001a42:	68c2      	ldr	r2, [r0, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d004      	beq.n	8001a52 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f850 3b04 	ldr.w	r3, [r0], #4
 8001a4e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001a50:	4770      	bx	lr
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001a52:	6882      	ldr	r2, [r0, #8]
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d0f7      	beq.n	8001a48 <obqGetFullBufferI+0x8>
    return NULL;
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr
 8001a5c:	0000      	movs	r0, r0
	...

08001a60 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8001a60:	b410      	push	{r4}
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001a62:	6983      	ldr	r3, [r0, #24]
 8001a64:	6904      	ldr	r4, [r0, #16]
  if (obqp->brdptr >= obqp->btop) {
 8001a66:	6941      	ldr	r1, [r0, #20]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001a68:	6882      	ldr	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
 8001a6a:	4423      	add	r3, r4
  if (obqp->brdptr >= obqp->btop) {
 8001a6c:	428b      	cmp	r3, r1
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001a6e:	6103      	str	r3, [r0, #16]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001a70:	f102 0201 	add.w	r2, r2, #1
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 8001a74:	bf28      	it	cs
 8001a76:	6a03      	ldrcs	r3, [r0, #32]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001a78:	6082      	str	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 8001a7a:	bf28      	it	cs
 8001a7c:	6103      	strcs	r3, [r0, #16]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001a7e:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 8001a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a84:	f7ff bd3c 	b.w	8001500 <chThdDequeueNextI>
	...

08001a90 <obqGetEmptyBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	4604      	mov	r4, r0
 8001a94:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 8001a96:	e003      	b.n	8001aa0 <obqGetEmptyBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8001a98:	f7ff fd1a 	bl	80014d0 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	db0b      	blt.n	8001ab8 <obqGetEmptyBufferTimeoutS+0x28>
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 8001aa0:	68a3      	ldr	r3, [r4, #8]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f6      	beq.n	8001a98 <obqGetEmptyBufferTimeoutS+0x8>
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001aaa:	68e2      	ldr	r2, [r4, #12]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001aac:	69a3      	ldr	r3, [r4, #24]
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001aae:	1d11      	adds	r1, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001ab0:	4413      	add	r3, r2
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001ab2:	6261      	str	r1, [r4, #36]	; 0x24
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ab6:	2000      	movs	r0, #0

  return MSG_OK;
}
 8001ab8:	bd38      	pop	{r3, r4, r5, pc}
 8001aba:	bf00      	nop
 8001abc:	0000      	movs	r0, r0
	...

08001ac0 <obqPutTimeout>:
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    systime_t timeout) {
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	460e      	mov	r6, r1
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8001acc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001ace:	b1fd      	cbz	r5, 8001b10 <obqPutTimeout+0x50>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8001ad0:	702e      	strb	r6, [r5, #0]
  obqp->ptr++;
 8001ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001ad4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 8001ad6:	3301      	adds	r3, #1

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001ad8:	4293      	cmp	r3, r2
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 8001ada:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001adc:	d314      	bcc.n	8001b08 <obqPutTimeout+0x48>
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001ade:	69a2      	ldr	r2, [r4, #24]
 8001ae0:	68e1      	ldr	r1, [r4, #12]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 8001ae2:	6960      	ldr	r0, [r4, #20]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001ae4:	3a04      	subs	r2, #4
 8001ae6:	600a      	str	r2, [r1, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001ae8:	69a3      	ldr	r3, [r4, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001aea:	68a2      	ldr	r2, [r4, #8]
  obqp->bwrptr += obqp->bsize;
 8001aec:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 8001aee:	4283      	cmp	r3, r0
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001af0:	60e3      	str	r3, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 8001af2:	bf24      	itt	cs
 8001af4:	6a23      	ldrcs	r3, [r4, #32]
 8001af6:	60e3      	strcs	r3, [r4, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001af8:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001afc:	60a2      	str	r2, [r4, #8]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001afe:	2200      	movs	r2, #0
 8001b00:	6262      	str	r2, [r4, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001b02:	b10b      	cbz	r3, 8001b08 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001b04:	4620      	mov	r0, r4
 8001b06:	4798      	blx	r3
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f380 8811 	msr	BASEPRI, r0
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
}
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001b10:	4611      	mov	r1, r2
 8001b12:	f7ff ffbd 	bl	8001a90 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001b16:	b908      	cbnz	r0, 8001b1c <obqPutTimeout+0x5c>
 8001b18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001b1a:	e7d9      	b.n	8001ad0 <obqPutTimeout+0x10>
 8001b1c:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	bf00      	nop
	...

08001b30 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	4605      	mov	r5, r0
 8001b36:	b083      	sub	sp, #12
 8001b38:	4617      	mov	r7, r2
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	f04f 0920 	mov.w	r9, #32
 8001b40:	f389 8811 	msr	BASEPRI, r9
 8001b44:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <obqWriteTimeout+0x10c>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001b46:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001b4a:	eb0a 0302 	add.w	r3, sl, r2
 8001b4e:	9301      	str	r3, [sp, #4]
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001b50:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
  size_t w = 0;
 8001b54:	f04f 0b00 	mov.w	fp, #0
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001b58:	9300      	str	r3, [sp, #0]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	46d8      	mov	r8, fp
 8001b5e:	460f      	mov	r7, r1
 8001b60:	461e      	mov	r6, r3

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d041      	beq.n	8001bea <obqWriteTimeout+0xba>
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001b66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    if (size > (n - w)) {
 8001b68:	ebcb 0406 	rsb	r4, fp, r6
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001b6c:	1a12      	subs	r2, r2, r0
 8001b6e:	4294      	cmp	r4, r2
 8001b70:	bf28      	it	cs
 8001b72:	4614      	movcs	r4, r2
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 8001b74:	2c40      	cmp	r4, #64	; 0x40
 8001b76:	d947      	bls.n	8001c08 <obqWriteTimeout+0xd8>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
 8001b78:	4639      	mov	r1, r7
 8001b7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b7e:	680f      	ldr	r7, [r1, #0]
 8001b80:	684c      	ldr	r4, [r1, #4]
 8001b82:	688a      	ldr	r2, [r1, #8]
 8001b84:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8001b88:	f8c0 e00c 	str.w	lr, [r0, #12]
 8001b8c:	3110      	adds	r1, #16
 8001b8e:	4299      	cmp	r1, r3
 8001b90:	6007      	str	r7, [r0, #0]
 8001b92:	6044      	str	r4, [r0, #4]
 8001b94:	6082      	str	r2, [r0, #8]
 8001b96:	f100 0010 	add.w	r0, r0, #16
 8001b9a:	d1f0      	bne.n	8001b7e <obqWriteTimeout+0x4e>
      bp        += 64U;
      obqp->ptr += 64U;
 8001b9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001b9e:	3240      	adds	r2, #64	; 0x40
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
 8001ba0:	460f      	mov	r7, r1
      obqp->ptr += 64U;
      w         += 64U;
 8001ba2:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
      obqp->ptr += 64U;
 8001ba6:	626a      	str	r2, [r5, #36]	; 0x24
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001ba8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001baa:	4291      	cmp	r1, r2
 8001bac:	d814      	bhi.n	8001bd8 <obqWriteTimeout+0xa8>
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001bae:	69a9      	ldr	r1, [r5, #24]
 8001bb0:	68ec      	ldr	r4, [r5, #12]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 8001bb2:	6968      	ldr	r0, [r5, #20]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001bb4:	3904      	subs	r1, #4
 8001bb6:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001bb8:	69aa      	ldr	r2, [r5, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001bba:	68a9      	ldr	r1, [r5, #8]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001bbc:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001bc0:	4422      	add	r2, r4
  if (obqp->bwrptr >= obqp->btop) {
 8001bc2:	4282      	cmp	r2, r0
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001bc4:	60ea      	str	r2, [r5, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 8001bc6:	bf24      	itt	cs
 8001bc8:	6a2a      	ldrcs	r2, [r5, #32]
 8001bca:	60ea      	strcs	r2, [r5, #12]

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001bcc:	6aea      	ldr	r2, [r5, #44]	; 0x2c

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001bce:	3901      	subs	r1, #1
 8001bd0:	60a9      	str	r1, [r5, #8]

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001bd2:	b10a      	cbz	r2, 8001bd8 <obqWriteTimeout+0xa8>
    obqp->notify(obqp);
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	4790      	blx	r2
 8001bd8:	f388 8811 	msr	BASEPRI, r8
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 8001bdc:	45b3      	cmp	fp, r6
 8001bde:	d226      	bcs.n	8001c2e <obqWriteTimeout+0xfe>
 8001be0:	f389 8811 	msr	BASEPRI, r9

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001be4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d1bd      	bne.n	8001b66 <obqWriteTimeout+0x36>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001bea:	9b00      	ldr	r3, [sp, #0]
 8001bec:	3303      	adds	r3, #3
 8001bee:	d815      	bhi.n	8001c1c <obqWriteTimeout+0xec>
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <obqWriteTimeout+0x10c>)
 8001bf2:	6a99      	ldr	r1, [r3, #40]	; 0x28
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001bf4:	9b01      	ldr	r3, [sp, #4]
 8001bf6:	1a59      	subs	r1, r3, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001bf8:	458a      	cmp	sl, r1
 8001bfa:	d31c      	bcc.n	8001c36 <obqWriteTimeout+0x106>
          osalSysUnlock();
          return w;
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	f7ff ff47 	bl	8001a90 <obqGetEmptyBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001c02:	b988      	cbnz	r0, 8001c28 <obqWriteTimeout+0xf8>
 8001c04:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001c06:	e7ae      	b.n	8001b66 <obqWriteTimeout+0x36>
      bp        += 64U;
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
 8001c08:	4622      	mov	r2, r4
 8001c0a:	4639      	mov	r1, r7
 8001c0c:	f7ff f848 	bl	8000ca0 <memcpy>
      bp        += size;
      obqp->ptr += size;
 8001c10:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001c12:	4422      	add	r2, r4
      w         += size;
 8001c14:	44a3      	add	fp, r4
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
 8001c16:	4427      	add	r7, r4
      obqp->ptr += size;
 8001c18:	626a      	str	r2, [r5, #36]	; 0x24
 8001c1a:	e7c5      	b.n	8001ba8 <obqWriteTimeout+0x78>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001c1c:	4651      	mov	r1, sl
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f7ff ff36 	bl	8001a90 <obqGetEmptyBufferTimeoutS>
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d0ed      	beq.n	8001c04 <obqWriteTimeout+0xd4>
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f382 8811 	msr	BASEPRI, r2
    if (w >= n) {
      return w;
    }
    osalSysLock();
  }
}
 8001c2e:	4658      	mov	r0, fp
 8001c30:	b003      	add	sp, #12
 8001c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c36:	f380 8811 	msr	BASEPRI, r0
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return w;
 8001c3a:	e7f8      	b.n	8001c2e <obqWriteTimeout+0xfe>
 8001c3c:	20000c40 	.word	0x20000c40

08001c40 <obqTryFlushI>:

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001c40:	68c2      	ldr	r2, [r0, #12]
 8001c42:	6903      	ldr	r3, [r0, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <obqTryFlushI+0xc>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 8001c48:	2000      	movs	r0, #0
 8001c4a:	4770      	bx	lr

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001c4c:	6883      	ldr	r3, [r0, #8]
 8001c4e:	b90b      	cbnz	r3, 8001c54 <obqTryFlushI+0x14>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 8001c50:	4618      	mov	r0, r3
 8001c52:	4770      	bx	lr

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0fa      	beq.n	8001c50 <obqTryFlushI+0x10>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8001c5a:	3b04      	subs	r3, #4

    if (size > 0U) {
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	d0f7      	beq.n	8001c50 <obqTryFlushI+0x10>
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8001c60:	b410      	push	{r4}
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));

    if (size > 0U) {

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8001c62:	6013      	str	r3, [r2, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 8001c64:	6983      	ldr	r3, [r0, #24]
      if (obqp->bwrptr >= obqp->btop) {
 8001c66:	6944      	ldr	r4, [r0, #20]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001c68:	6881      	ldr	r1, [r0, #8]
      obqp->bwrptr += obqp->bsize;
 8001c6a:	441a      	add	r2, r3
      if (obqp->bwrptr >= obqp->btop) {
 8001c6c:	42a2      	cmp	r2, r4
        obqp->bwrptr = obqp->buffers;
 8001c6e:	bf28      	it	cs
 8001c70:	6a03      	ldrcs	r3, [r0, #32]
      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 8001c72:	60c2      	str	r2, [r0, #12]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001c74:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
 8001c78:	bf28      	it	cs
 8001c7a:	60c3      	strcs	r3, [r0, #12]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001c7c:	2300      	movs	r3, #0

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001c7e:	6081      	str	r1, [r0, #8]
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001c80:	6243      	str	r3, [r0, #36]	; 0x24

      return true;
    }
  }
  return false;
}
 8001c82:	f85d 4b04 	ldr.w	r4, [sp], #4
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;

      return true;
 8001c86:	2001      	movs	r0, #1
    }
  }
  return false;
}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	0000      	movs	r0, r0
	...

08001c90 <extInit>:
 *
 * @init
 */
void extInit(void) {

  ext_lld_init();
 8001c90:	f001 b82e 	b.w	8002cf0 <ext_lld_init>
	...

08001ca0 <extObjectInit>:
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8001ca0:	2201      	movs	r2, #1
  extp->config = NULL;
 8001ca2:	2300      	movs	r3, #0
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8001ca4:	7002      	strb	r2, [r0, #0]
  extp->config = NULL;
 8001ca6:	6043      	str	r3, [r0, #4]
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	0000      	movs	r0, r0
	...

08001cb0 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 8001cb0:	f001 bbd6 	b.w	8003460 <i2c_lld_init>
	...

08001cc0 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001cc0:	2201      	movs	r2, #1
  i2cp->config = NULL;
 8001cc2:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001cc4:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 8001cc6:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001cc8:	300c      	adds	r0, #12
 8001cca:	f7ff bc91 	b.w	80015f0 <chMtxObjectInit>
 8001cce:	bf00      	nop

08001cd0 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8001cd0:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001cd2:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001cd4:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	7819      	ldrb	r1, [r3, #0]
 8001cdc:	2904      	cmp	r1, #4
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8001cde:	b082      	sub	sp, #8
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001ce0:	d001      	beq.n	8001ce6 <obnotify+0x16>
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
    }
  }
}
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd10      	pop	{r4, pc}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001ce6:	7a21      	ldrb	r1, [r4, #8]
 8001ce8:	2902      	cmp	r1, #2
 8001cea:	d1fa      	bne.n	8001ce2 <obnotify+0x12>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001cec:	7911      	ldrb	r1, [r2, #4]
 8001cee:	891a      	ldrh	r2, [r3, #8]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	408b      	lsls	r3, r1
 8001cf4:	4213      	tst	r3, r2
 8001cf6:	d1f4      	bne.n	8001ce2 <obnotify+0x12>
    /* Trying to get a full buffer.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001cf8:	a901      	add	r1, sp, #4
 8001cfa:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001cfe:	f7ff fe9f 	bl	8001a40 <obqGetFullBufferI>
    if (buf != NULL) {
 8001d02:	4602      	mov	r2, r0
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d0ec      	beq.n	8001ce2 <obnotify+0x12>
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001d08:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
 8001d0c:	9b01      	ldr	r3, [sp, #4]
 8001d0e:	7901      	ldrb	r1, [r0, #4]
 8001d10:	6800      	ldr	r0, [r0, #0]
 8001d12:	f000 fa75 	bl	8002200 <usbStartTransmitI>
 8001d16:	e7e4      	b.n	8001ce2 <obnotify+0x12>
	...

08001d20 <ibnotify>:
/**
 * @brief   Notification of empty buffer released into the input buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
 8001d20:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001d22:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001d24:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 8001d28:	6813      	ldr	r3, [r2, #0]
 8001d2a:	7819      	ldrb	r1, [r3, #0]
 8001d2c:	2904      	cmp	r1, #4
 8001d2e:	d000      	beq.n	8001d32 <ibnotify+0x12>
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	7a21      	ldrb	r1, [r4, #8]
 8001d34:	2902      	cmp	r1, #2
 8001d36:	d1fb      	bne.n	8001d30 <ibnotify+0x10>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8001d38:	7951      	ldrb	r1, [r2, #5]
 8001d3a:	895a      	ldrh	r2, [r3, #10]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	408b      	lsls	r3, r1
 8001d40:	4213      	tst	r3, r2
 8001d42:	d1f5      	bne.n	8001d30 <ibnotify+0x10>
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8001d44:	f104 000c 	add.w	r0, r4, #12
 8001d48:	f7ff fd5a 	bl	8001800 <ibqGetEmptyBufferI>
    if (buf != NULL) {
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d0ef      	beq.n	8001d30 <ibnotify+0x10>
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001d50:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 8001d54:	4602      	mov	r2, r0
 8001d56:	7959      	ldrb	r1, [r3, #5]
 8001d58:	6818      	ldr	r0, [r3, #0]
                       buf, SERIAL_USB_BUFFERS_SIZE);
    }
  }
}
 8001d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	f000 ba35 	b.w	80021d0 <usbStartReceiveI>
 8001d66:	bf00      	nop
	...

08001d70 <readt>:
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 8001d70:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001d72:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 8001d76:	6824      	ldr	r4, [r4, #0]
 8001d78:	7824      	ldrb	r4, [r4, #0]
 8001d7a:	2c04      	cmp	r4, #4
 8001d7c:	d003      	beq.n	8001d86 <readt+0x16>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
}
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d84:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8001d86:	300c      	adds	r0, #12
}
 8001d88:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8001d8c:	f7ff bda8 	b.w	80018e0 <ibqReadTimeout>

08001d90 <writet>:
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8001d90:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001d92:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 8001d96:	6824      	ldr	r4, [r4, #0]
 8001d98:	7824      	ldrb	r4, [r4, #0]
 8001d9a:	2c04      	cmp	r4, #4
 8001d9c:	d003      	beq.n	8001da6 <writet+0x16>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001da4:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8001da6:	3040      	adds	r0, #64	; 0x40
}
 8001da8:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8001dac:	f7ff bec0 	b.w	8001b30 <obqWriteTimeout>

08001db0 <gett>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001db0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d102      	bne.n	8001dc2 <gett+0x12>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8001dbc:	300c      	adds	r0, #12
 8001dbe:	f7ff bd5f 	b.w	8001880 <ibqGetTimeout>
}
 8001dc2:	f06f 0001 	mvn.w	r0, #1
 8001dc6:	4770      	bx	lr
	...

08001dd0 <get>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001dd0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d104      	bne.n	8001de6 <get+0x16>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8001ddc:	300c      	adds	r0, #12
 8001dde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de2:	f7ff bd4d 	b.w	8001880 <ibqGetTimeout>
}
 8001de6:	f06f 0001 	mvn.w	r0, #1
 8001dea:	4770      	bx	lr
 8001dec:	0000      	movs	r0, r0
	...

08001df0 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001df0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d102      	bne.n	8001e02 <putt+0x12>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8001dfc:	3040      	adds	r0, #64	; 0x40
 8001dfe:	f7ff be5f 	b.w	8001ac0 <obqPutTimeout>
}
 8001e02:	f06f 0001 	mvn.w	r0, #1
 8001e06:	4770      	bx	lr
	...

08001e10 <put>:
                        n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001e10:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d104      	bne.n	8001e26 <put+0x16>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8001e1c:	3040      	adds	r0, #64	; 0x40
 8001e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e22:	f7ff be4d 	b.w	8001ac0 <obqPutTimeout>
}
 8001e26:	f06f 0001 	mvn.w	r0, #1
 8001e2a:	4770      	bx	lr
 8001e2c:	0000      	movs	r0, r0
	...

08001e30 <read>:
                         n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001e30:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d001      	beq.n	8001e40 <read+0x10>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
                        n, TIME_INFINITE);
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8001e40:	300c      	adds	r0, #12
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e46:	f7ff bd4b 	b.w	80018e0 <ibqReadTimeout>
 8001e4a:	bf00      	nop
 8001e4c:	0000      	movs	r0, r0
	...

08001e50 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8001e50:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d001      	beq.n	8001e60 <write+0x10>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
                         n, TIME_INFINITE);
}
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8001e60:	3040      	adds	r0, #64	; 0x40
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e66:	f7ff be63 	b.w	8001b30 <obqWriteTimeout>
 8001e6a:	bf00      	nop
 8001e6c:	0000      	movs	r0, r0
	...

08001e70 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
	...

08001e80 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8001e80:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <sduObjectInit+0x48>)
 8001e86:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8001e8a:	b082      	sub	sp, #8

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8001e8c:	2101      	movs	r1, #1
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <sduObjectInit+0x4c>)
 8001e90:	9001      	str	r0, [sp, #4]
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8001e92:	4604      	mov	r4, r0
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8001e94:	6043      	str	r3, [r0, #4]

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8001e96:	7201      	strb	r1, [r0, #8]
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f100 0174 	add.w	r1, r0, #116	; 0x74
 8001e9e:	9200      	str	r2, [sp, #0]
 8001ea0:	300c      	adds	r0, #12
 8001ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea6:	f7ff fc83 	bl	80017b0 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, sdup->ob,
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <sduObjectInit+0x50>)
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	9401      	str	r4, [sp, #4]
 8001eb0:	f504 711f 	add.w	r1, r4, #636	; 0x27c
 8001eb4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebe:	f7ff fd97 	bl	80019f0 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd10      	pop	{r4, pc}
 8001ec6:	bf00      	nop
 8001ec8:	080083b0 	.word	0x080083b0
 8001ecc:	08001d21 	.word	0x08001d21
 8001ed0:	08001cd1 	.word	0x08001cd1
	...

08001ee0 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 8001ee0:	680b      	ldr	r3, [r1, #0]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8001ee8:	790a      	ldrb	r2, [r1, #4]
 8001eea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001eee:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8001ef0:	794a      	ldrb	r2, [r1, #5]
 8001ef2:	3209      	adds	r2, #9
 8001ef4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 8001ef8:	798a      	ldrb	r2, [r1, #6]
 8001efa:	b112      	cbz	r2, 8001f02 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 8001efc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001f00:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 8001f02:	2302      	movs	r3, #2
 8001f04:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8001f06:	f8c0 1484 	str.w	r1, [r0, #1156]	; 0x484
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f383 8811 	msr	BASEPRI, r3
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
	...

08001f20 <sduDisconnectI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduDisconnectI(SerialUSBDriver *sdup) {
 8001f20:	b510      	push	{r4, lr}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001f22:	2102      	movs	r1, #2
 8001f24:	4604      	mov	r4, r0
 8001f26:	3004      	adds	r0, #4
 8001f28:	f7ff fb82 	bl	8001630 <chEvtBroadcastFlagsI>

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
 8001f2c:	f104 000c 	add.w	r0, r4, #12
 8001f30:	f7ff fc56 	bl	80017e0 <ibqResetI>
  obqResetI(&sdup->obqueue);
 8001f34:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 8001f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void sduDisconnectI(SerialUSBDriver *sdup) {

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
  obqResetI(&sdup->obqueue);
 8001f3c:	f7ff bd70 	b.w	8001a20 <obqResetI>

08001f40 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8001f40:	b570      	push	{r4, r5, r6, lr}
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 8001f42:	f100 050c 	add.w	r5, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8001f46:	4604      	mov	r4, r0
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f7ff fc49 	bl	80017e0 <ibqResetI>
  obqResetI(&sdup->obqueue);
 8001f4e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001f52:	f7ff fd65 	bl	8001a20 <obqResetI>
 8001f56:	1d20      	adds	r0, r4, #4
 8001f58:	2101      	movs	r1, #1
 8001f5a:	f7ff fb69 	bl	8001630 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f7ff fc4e 	bl	8001800 <ibqGetEmptyBufferI>

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001f64:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 8001f68:	4602      	mov	r2, r0
 8001f6a:	7959      	ldrb	r1, [r3, #5]
 8001f6c:	6818      	ldr	r0, [r3, #0]
                   buf, SERIAL_USB_BUFFERS_SIZE);
}
 8001f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f76:	f000 b92b 	b.w	80021d0 <usbStartReceiveI>
 8001f7a:	bf00      	nop
 8001f7c:	0000      	movs	r0, r0
	...

08001f80 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001f80:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001f84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d001      	beq.n	8001f90 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 8001f8c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 8001f8e:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8001f90:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001f94:	2b21      	cmp	r3, #33	; 0x21
 8001f96:	d003      	beq.n	8001fa0 <sduRequestsHook+0x20>
 8001f98:	2b22      	cmp	r3, #34	; 0x22
 8001f9a:	d009      	beq.n	8001fb0 <sduRequestsHook+0x30>
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d1f5      	bne.n	8001f8c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <sduRequestsHook+0x3c>)
 8001fa2:	6383      	str	r3, [r0, #56]	; 0x38
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001faa:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8001fac:	2001      	movs	r0, #1
 8001fae:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6383      	str	r3, [r0, #56]	; 0x38
 8001fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001fb6:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8001fb8:	2001      	movs	r0, #1
 8001fba:	4770      	bx	lr
 8001fbc:	20000800 	.word	0x20000800

08001fc0 <sduSOFHookI>:
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001fc0:	f8d0 2484 	ldr.w	r2, [r0, #1156]	; 0x484
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	7819      	ldrb	r1, [r3, #0]
 8001fc8:	2904      	cmp	r1, #4
 8001fca:	d000      	beq.n	8001fce <sduSOFHookI+0xe>
 8001fcc:	4770      	bx	lr
 8001fce:	7a01      	ldrb	r1, [r0, #8]
 8001fd0:	2902      	cmp	r1, #2
 8001fd2:	d1fb      	bne.n	8001fcc <sduSOFHookI+0xc>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001fd4:	7911      	ldrb	r1, [r2, #4]
 8001fd6:	891a      	ldrh	r2, [r3, #8]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	408b      	lsls	r3, r1
 8001fdc:	4213      	tst	r3, r2
 8001fde:	d1f5      	bne.n	8001fcc <sduSOFHookI+0xc>
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8001fe0:	b530      	push	{r4, r5, lr}
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 8001fe2:	f100 0540 	add.w	r5, r0, #64	; 0x40
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	4604      	mov	r4, r0
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 8001fea:	4628      	mov	r0, r5
 8001fec:	f7ff fe28 	bl	8001c40 <obqTryFlushI>
 8001ff0:	b908      	cbnz	r0, 8001ff6 <sduSOFHookI+0x36>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 8001ff2:	b003      	add	sp, #12
 8001ff4:	bd30      	pop	{r4, r5, pc}

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001ff6:	a901      	add	r1, sp, #4
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f7ff fd21 	bl	8001a40 <obqGetFullBufferI>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001ffe:	f8d4 4484 	ldr.w	r4, [r4, #1156]	; 0x484
 8002002:	9b01      	ldr	r3, [sp, #4]
 8002004:	7921      	ldrb	r1, [r4, #4]
 8002006:	4602      	mov	r2, r0
 8002008:	6820      	ldr	r0, [r4, #0]
 800200a:	f000 f8f9 	bl	8002200 <usbStartTransmitI>
 800200e:	e7f0      	b.n	8001ff2 <sduSOFHookI+0x32>

08002010 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002012:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002016:	b083      	sub	sp, #12
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002018:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800201a:	b1ec      	cbz	r4, 8002058 <sduDataTransmitted+0x48>
 800201c:	460e      	mov	r6, r1
 800201e:	4605      	mov	r5, r0
 8002020:	2320      	movs	r3, #32
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800202a:	1d20      	adds	r0, r4, #4
 800202c:	2108      	movs	r1, #8
 800202e:	f7ff faff 	bl	8001630 <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	681b      	ldr	r3, [r3, #0]
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8002038:	3440      	adds	r4, #64	; 0x40

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 800203a:	b9fb      	cbnz	r3, 800207c <sduDataTransmitted+0x6c>
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800203c:	4620      	mov	r0, r4
 800203e:	a901      	add	r1, sp, #4
 8002040:	f7ff fcfe 	bl	8001a40 <obqGetFullBufferI>

  if (buf != NULL) {
 8002044:	b150      	cbz	r0, 800205c <sduDataTransmitted+0x4c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 8002046:	4602      	mov	r2, r0
 8002048:	4631      	mov	r1, r6
 800204a:	4628      	mov	r0, r5
 800204c:	9b01      	ldr	r3, [sp, #4]
 800204e:	f000 f8d7 	bl	8002200 <usbStartTransmitI>
 8002052:	2300      	movs	r3, #0
 8002054:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 8002058:	b003      	add	sp, #12
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (buf != NULL) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	2a00      	cmp	r2, #0
 8002064:	d0f5      	beq.n	8002052 <sduDataTransmitted+0x42>
 8002066:	8a1b      	ldrh	r3, [r3, #16]
 8002068:	3b01      	subs	r3, #1
 800206a:	4013      	ands	r3, r2
 800206c:	d1f1      	bne.n	8002052 <sduDataTransmitted+0x42>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 800206e:	4631      	mov	r1, r6
 8002070:	f105 0244 	add.w	r2, r5, #68	; 0x44
 8002074:	4628      	mov	r0, r5
 8002076:	f000 f8c3 	bl	8002200 <usbStartTransmitI>
 800207a:	e7ea      	b.n	8002052 <sduDataTransmitted+0x42>
  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff fcef 	bl	8001a60 <obqReleaseEmptyBufferI>
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002082:	4620      	mov	r0, r4
 8002084:	a901      	add	r1, sp, #4
 8002086:	f7ff fcdb 	bl	8001a40 <obqGetFullBufferI>

  if (buf != NULL) {
 800208a:	2800      	cmp	r0, #0
 800208c:	d1db      	bne.n	8002046 <sduDataTransmitted+0x36>
 800208e:	e7e5      	b.n	800205c <sduDataTransmitted+0x4c>

08002090 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8002090:	3109      	adds	r1, #9
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8002092:	b538      	push	{r3, r4, r5, lr}
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8002094:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 8002098:	b324      	cbz	r4, 80020e4 <sduDataReceived+0x54>
 800209a:	2320      	movs	r3, #32
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	2104      	movs	r1, #4
 80020a2:	1860      	adds	r0, r4, r1
 80020a4:	f7ff fac4 	bl	8001630 <chEvtBroadcastFlagsI>
  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80020a8:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 80020ac:	6813      	ldr	r3, [r2, #0]
 80020ae:	7952      	ldrb	r2, [r2, #5]
 80020b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 80020b4:	f104 050c 	add.w	r5, r4, #12
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80020b8:	68db      	ldr	r3, [r3, #12]

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4628      	mov	r0, r5
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	f7ff fbae 	bl	8001820 <ibqPostFullBufferI>
                                                   sdup->config->bulk_out));

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 80020c4:	4628      	mov	r0, r5
 80020c6:	f7ff fb9b 	bl	8001800 <ibqGetEmptyBufferI>
  if (buf != NULL) {
 80020ca:	b140      	cbz	r0, 80020de <sduDataReceived+0x4e>
    /* Buffer found, starting a new transaction.*/
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80020cc:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 80020d0:	4602      	mov	r2, r0
 80020d2:	7959      	ldrb	r1, [r3, #5]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020da:	f000 f879 	bl	80021d0 <usbStartReceiveI>
 80020de:	2300      	movs	r3, #0
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	bd38      	pop	{r3, r4, r5, pc}
 80020e6:	bf00      	nop
	...

080020f0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
	...

08002100 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 8002100:	f001 bfe6 	b.w	80040d0 <spi_lld_init>
	...

08002110 <spiObjectInit>:
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 8002110:	2300      	movs	r3, #0
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002112:	2201      	movs	r2, #1
 8002114:	7002      	strb	r2, [r0, #0]
  spip->config = NULL;
 8002116:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8002118:	6083      	str	r3, [r0, #8]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800211a:	300c      	adds	r0, #12
 800211c:	f7ff ba68 	b.w	80015f0 <chMtxObjectInit>

08002120 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8002120:	b510      	push	{r4, lr}
 8002122:	2320      	movs	r3, #32
 8002124:	4604      	mov	r4, r0
 8002126:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800212a:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 800212c:	f001 fff8 	bl	8004120 <spi_lld_start>
  spip->state = SPI_READY;
 8002130:	2302      	movs	r3, #2
 8002132:	7023      	strb	r3, [r4, #0]
 8002134:	2300      	movs	r3, #0
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	bd10      	pop	{r4, pc}
 800213c:	0000      	movs	r0, r0
	...

08002140 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8002140:	f001 baa6 	b.w	8003690 <usb_lld_init>
	...

08002150 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8002150:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8002152:	2201      	movs	r2, #1
 8002154:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 8002156:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002158:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800215a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800215c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800215e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002160:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8002162:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 8002164:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 8002166:	8143      	strh	r3, [r0, #10]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0000      	movs	r0, r0
	...

08002170 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4604      	mov	r4, r0
 8002174:	2320      	movs	r3, #32
 8002176:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800217a:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800217c:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800217e:	60c5      	str	r5, [r0, #12]
 8002180:	6105      	str	r5, [r0, #16]
 8002182:	6145      	str	r5, [r0, #20]
 8002184:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 8002186:	f001 fa9b 	bl	80036c0 <usb_lld_start>
  usbp->state = USB_READY;
 800218a:	2302      	movs	r3, #2
 800218c:	7023      	strb	r3, [r4, #0]
 800218e:	f385 8811 	msr	BASEPRI, r5
 8002192:	bd38      	pop	{r3, r4, r5, pc}
	...

080021a0 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80021a0:	b410      	push	{r4}

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80021a2:	6953      	ldr	r3, [r2, #20]
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 80021a4:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80021a8:	60e2      	str	r2, [r4, #12]

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80021aa:	b123      	cbz	r3, 80021b6 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80021ac:	2400      	movs	r4, #0
 80021ae:	601c      	str	r4, [r3, #0]
 80021b0:	605c      	str	r4, [r3, #4]
 80021b2:	609c      	str	r4, [r3, #8]
 80021b4:	60dc      	str	r4, [r3, #12]
  }
  if (epcp->out_state != NULL) {
 80021b6:	6993      	ldr	r3, [r2, #24]
 80021b8:	b123      	cbz	r3, 80021c4 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 80021c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80021c8:	f001 bb82 	b.w	80038d0 <usb_lld_init_endpoint>
 80021cc:	0000      	movs	r0, r0
	...

080021d0 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80021d2:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021d6:	8947      	ldrh	r7, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80021d8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021dc:	2401      	movs	r4, #1
 80021de:	fa04 f601 	lsl.w	r6, r4, r1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80021e2:	f8de 4018 	ldr.w	r4, [lr, #24]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021e6:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80021e8:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80021ea:	8146      	strh	r6, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 80021ec:	60a2      	str	r2, [r4, #8]
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80021ee:	e884 0088 	stmia.w	r4, {r3, r7}
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 80021f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80021f6:	f001 bc53 	b.w	8003aa0 <usb_lld_start_out>
 80021fa:	bf00      	nop
 80021fc:	0000      	movs	r0, r0
	...

08002200 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002202:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002206:	8907      	ldrh	r7, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002208:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800220c:	2401      	movs	r4, #1
 800220e:	fa04 f601 	lsl.w	r6, r4, r1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002212:	f8de 4014 	ldr.w	r4, [lr, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002216:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8002218:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800221a:	8106      	strh	r6, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800221c:	60a2      	str	r2, [r4, #8]
  isp->txsize = n;
  isp->txcnt  = 0;
 800221e:	e884 0088 	stmia.w	r4, {r3, r7}
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8002222:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002226:	f001 bcd3 	b.w	8003bd0 <usb_lld_start_in>
 800222a:	bf00      	nop
 800222c:	0000      	movs	r0, r0
	...

08002230 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8002230:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002232:	2302      	movs	r3, #2

  /* Resetting internal state.*/
  usbp->status        = 0;
 8002234:	2500      	movs	r5, #0
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8002236:	4604      	mov	r4, r0
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002238:	7003      	strb	r3, [r0, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 800223a:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800223e:	f880 504e 	strb.w	r5, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 8002242:	f880 504f 	strb.w	r5, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 8002246:	8105      	strh	r5, [r0, #8]
  usbp->receiving     = 0;
 8002248:	8145      	strh	r5, [r0, #10]
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 800224a:	60c5      	str	r5, [r0, #12]
 800224c:	6105      	str	r5, [r0, #16]
 800224e:	6145      	str	r5, [r0, #20]
 8002250:	6185      	str	r5, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002252:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002256:	f001 facb 	bl	80037f0 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800225a:	6863      	ldr	r3, [r4, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b123      	cbz	r3, 800226a <_usb_reset+0x3a>
 8002260:	4629      	mov	r1, r5
 8002262:	4620      	mov	r0, r4
}
 8002264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002268:	4718      	bx	r3
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	0000      	movs	r0, r0
	...

08002270 <_usb_suspend>:

  /* State transition.*/
  usbp->state = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002270:	6842      	ldr	r2, [r0, #4]
 8002272:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_SUSPENDED;
 8002274:	2105      	movs	r1, #5
 8002276:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002278:	b10b      	cbz	r3, 800227e <_usb_suspend+0xe>
 800227a:	2103      	movs	r1, #3
 800227c:	4718      	bx	r3
 800227e:	4770      	bx	lr

08002280 <_usb_wakeup>:

  /* State transition.*/
  usbp->state = USB_ACTIVE;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002280:	6842      	ldr	r2, [r0, #4]
 8002282:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_ACTIVE;
 8002284:	2104      	movs	r1, #4
 8002286:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002288:	b103      	cbz	r3, 800228c <_usb_wakeup+0xc>
 800228a:	4718      	bx	r3
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop

08002290 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002290:	b570      	push	{r4, r5, r6, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002292:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002294:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002296:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800229a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800229e:	f001 fbef 	bl	8003a80 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80022a2:	6863      	ldr	r3, [r4, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	b35b      	cbz	r3, 8002300 <_usb_ep0setup+0x70>
      !(usbp->config->requests_hook_cb(usbp))) {
 80022a8:	4620      	mov	r0, r4
 80022aa:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80022ac:	b340      	cbz	r0, 8002300 <_usb_ep0setup+0x70>
 80022ae:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80022b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80022b4:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 80022b8:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 80022bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80022c0:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 80022c2:	bf3c      	itt	cc
 80022c4:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 80022c6:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80022c8:	061a      	lsls	r2, r3, #24
 80022ca:	f100 8089 	bmi.w	80023e0 <_usb_ep0setup+0x150>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	d151      	bne.n	8002376 <_usb_ep0setup+0xe6>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80022d2:	2305      	movs	r3, #5
 80022d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80022d8:	2320      	movs	r3, #32
 80022da:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 80022de:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80022e0:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 80022e2:	695b      	ldr	r3, [r3, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 80022e4:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 80022ec:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 80022ee:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 80022f0:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 80022f2:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 80022f4:	4629      	mov	r1, r5
 80022f6:	f001 fc6b 	bl	8003bd0 <usb_lld_start_in>
 80022fa:	f385 8811 	msr	BASEPRI, r5
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8002300:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002304:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 8002308:	461a      	mov	r2, r3
 800230a:	d011      	beq.n	8002330 <_usb_ep0setup+0xa0>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800230c:	2100      	movs	r1, #0
 800230e:	4620      	mov	r0, r4
 8002310:	f001 fe5e 	bl	8003fd0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 8002314:	2100      	movs	r1, #0
 8002316:	4620      	mov	r0, r4
 8002318:	f001 fe4a 	bl	8003fb0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b113      	cbz	r3, 8002328 <_usb_ep0setup+0x98>
 8002322:	2105      	movs	r1, #5
 8002324:	4620      	mov	r0, r4
 8002326:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8002328:	2306      	movs	r3, #6
 800232a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002330:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002334:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8002338:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 800233c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8002340:	f000 8102 	beq.w	8002548 <_usb_ep0setup+0x2b8>
 8002344:	d92f      	bls.n	80023a6 <_usb_ep0setup+0x116>
 8002346:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800234a:	f000 80e4 	beq.w	8002516 <_usb_ep0setup+0x286>
 800234e:	d960      	bls.n	8002412 <_usb_ep0setup+0x182>
 8002350:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8002354:	f000 8089 	beq.w	800246a <_usb_ep0setup+0x1da>
 8002358:	f640 4202 	movw	r2, #3074	; 0xc02
 800235c:	4295      	cmp	r5, r2
 800235e:	f000 8105 	beq.w	800256c <_usb_ep0setup+0x2dc>
 8002362:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002366:	d1d1      	bne.n	800230c <_usb_ep0setup+0x7c>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8002368:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800236c:	2501      	movs	r5, #1
 800236e:	6426      	str	r6, [r4, #64]	; 0x40
 8002370:	63a2      	str	r2, [r4, #56]	; 0x38
 8002372:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002374:	e79e      	b.n	80022b4 <_usb_ep0setup+0x24>
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8002376:	2304      	movs	r3, #4
 8002378:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800237c:	2320      	movs	r3, #32
 800237e:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002382:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002384:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002386:	699b      	ldr	r3, [r3, #24]
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8002388:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800238a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800238c:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8002390:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002392:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002394:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8002396:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800239a:	4629      	mov	r1, r5
 800239c:	f001 fb80 	bl	8003aa0 <usb_lld_start_out>
 80023a0:	f385 8811 	msr	BASEPRI, r5
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80023a6:	2d02      	cmp	r5, #2
 80023a8:	f000 809e 	beq.w	80024e8 <_usb_ep0setup+0x258>
 80023ac:	f240 8092 	bls.w	80024d4 <_usb_ep0setup+0x244>
 80023b0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80023b4:	d07f      	beq.n	80024b6 <_usb_ep0setup+0x226>
 80023b6:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 80023ba:	d1a7      	bne.n	800230c <_usb_ep0setup+0x7c>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80023bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1a3      	bne.n	800230c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80023c4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80023c8:	f013 010f 	ands.w	r1, r3, #15
 80023cc:	d02f      	beq.n	800242e <_usb_ep0setup+0x19e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80023ce:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 80023d0:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80023d2:	f100 80f2 	bmi.w	80025ba <_usb_ep0setup+0x32a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 80023d6:	f001 fe0b 	bl	8003ff0 <usb_lld_clear_out>
 80023da:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80023de:	e026      	b.n	800242e <_usb_ep0setup+0x19e>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 80023e0:	b365      	cbz	r5, 800243c <_usb_ep0setup+0x1ac>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80023e8:	2320      	movs	r3, #32
 80023ea:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 80023ee:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80023f0:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 80023f2:	695b      	ldr	r3, [r3, #20]
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80023f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80023f8:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 80023fc:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80023fe:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002400:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8002402:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002406:	4629      	mov	r1, r5
 8002408:	f001 fbe2 	bl	8003bd0 <usb_lld_start_in>
 800240c:	f385 8811 	msr	BASEPRI, r5
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002412:	f240 3302 	movw	r3, #770	; 0x302
 8002416:	429d      	cmp	r5, r3
 8002418:	d03a      	beq.n	8002490 <_usb_ep0setup+0x200>
 800241a:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800241e:	f47f af75 	bne.w	800230c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8002422:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8002426:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800242a:	f000 80b4 	beq.w	8002596 <_usb_ep0setup+0x306>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800242e:	2300      	movs	r3, #0
 8002430:	63a3      	str	r3, [r4, #56]	; 0x38
 8002432:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002434:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002436:	0613      	lsls	r3, r2, #24
 8002438:	f57f af4b 	bpl.w	80022d2 <_usb_ep0setup+0x42>
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800243c:	2303      	movs	r3, #3
 800243e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002442:	2320      	movs	r3, #32
 8002444:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002448:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800244a:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800244c:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 800244e:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002456:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 8002458:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 800245a:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 800245c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800245e:	4629      	mov	r1, r5
 8002460:	f001 fb1e 	bl	8003aa0 <usb_lld_start_out>
 8002464:	f385 8811 	msr	BASEPRI, r5
 8002468:	bd70      	pop	{r4, r5, r6, pc}
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800246a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800246e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8081 	bne.w	800257a <_usb_ep0setup+0x2ea>
      usbp->state = USB_SELECTED;
 8002478:	2303      	movs	r3, #3
 800247a:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800247c:	6863      	ldr	r3, [r4, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0d4      	beq.n	800242e <_usb_ep0setup+0x19e>
 8002484:	2102      	movs	r1, #2
 8002486:	4620      	mov	r0, r4
 8002488:	4798      	blx	r3
 800248a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800248e:	e7ce      	b.n	800242e <_usb_ep0setup+0x19e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002490:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f af39 	bne.w	800230c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800249a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800249e:	f013 010f 	ands.w	r1, r3, #15
 80024a2:	d0c4      	beq.n	800242e <_usb_ep0setup+0x19e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80024a4:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 80024a6:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80024a8:	f100 808c 	bmi.w	80025c4 <_usb_ep0setup+0x334>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 80024ac:	f001 fd80 	bl	8003fb0 <usb_lld_stall_out>
 80024b0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80024b4:	e7bb      	b.n	800242e <_usb_ep0setup+0x19e>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80024b6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f47f af26 	bne.w	800230c <_usb_ep0setup+0x7c>
      usbp->status &= ~2U;
 80024c0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80024c4:	63a6      	str	r6, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80024c6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80024ca:	63e6      	str	r6, [r4, #60]	; 0x3c
 80024cc:	6426      	str	r6, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80024ce:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80024d2:	e7b0      	b.n	8002436 <_usb_ep0setup+0x1a6>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80024d4:	2d00      	cmp	r5, #0
 80024d6:	d146      	bne.n	8002566 <_usb_ep0setup+0x2d6>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80024d8:	2002      	movs	r0, #2
 80024da:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80024de:	6425      	str	r5, [r4, #64]	; 0x40
 80024e0:	63a2      	str	r2, [r4, #56]	; 0x38
 80024e2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80024e4:	4605      	mov	r5, r0
 80024e6:	e6e5      	b.n	80022b4 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80024e8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80024ec:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80024f0:	4620      	mov	r0, r4
 80024f2:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80024f6:	d143      	bne.n	8002580 <_usb_ep0setup+0x2f0>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 80024f8:	f001 faa2 	bl	8003a40 <usb_lld_get_status_out>
 80024fc:	2801      	cmp	r0, #1
 80024fe:	d043      	beq.n	8002588 <_usb_ep0setup+0x2f8>
 8002500:	2802      	cmp	r0, #2
 8002502:	f47f af03 	bne.w	800230c <_usb_ep0setup+0x7c>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <_usb_ep0setup+0x340>)
 8002508:	63a3      	str	r3, [r4, #56]	; 0x38
 800250a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800250c:	6426      	str	r6, [r4, #64]	; 0x40
 800250e:	4605      	mov	r5, r0
 8002510:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002514:	e6ce      	b.n	80022b4 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8002516:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800251a:	6861      	ldr	r1, [r4, #4]
 800251c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002520:	684d      	ldr	r5, [r1, #4]
 8002522:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002526:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800252a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800252e:	4620      	mov	r0, r4
 8002530:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8002532:	2800      	cmp	r0, #0
 8002534:	f43f aeea 	beq.w	800230c <_usb_ep0setup+0x7c>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8002538:	6843      	ldr	r3, [r0, #4]
 800253a:	6805      	ldr	r5, [r0, #0]
 800253c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800253e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002540:	6426      	str	r6, [r4, #64]	; 0x40
 8002542:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002546:	e6b5      	b.n	80022b4 <_usb_ep0setup+0x24>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002548:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800254c:	2b01      	cmp	r3, #1
 800254e:	f47f aedd 	bne.w	800230c <_usb_ep0setup+0x7c>
      usbp->status |= 2U;
 8002552:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002556:	63a6      	str	r6, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002558:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800255c:	63e6      	str	r6, [r4, #60]	; 0x3c
 800255e:	6426      	str	r6, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002560:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8002564:	e767      	b.n	8002436 <_usb_ep0setup+0x1a6>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002566:	2d01      	cmp	r5, #1
 8002568:	f47f aed0 	bne.w	800230c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <_usb_ep0setup+0x344>)
 800256e:	63a2      	str	r2, [r4, #56]	; 0x38
 8002570:	2502      	movs	r5, #2
 8002572:	2200      	movs	r2, #0
 8002574:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002576:	6422      	str	r2, [r4, #64]	; 0x40
 8002578:	e69c      	b.n	80022b4 <_usb_ep0setup+0x24>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800257a:	2304      	movs	r3, #4
 800257c:	7023      	strb	r3, [r4, #0]
 800257e:	e77d      	b.n	800247c <_usb_ep0setup+0x1ec>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8002580:	f001 fa6e 	bl	8003a60 <usb_lld_get_status_in>
 8002584:	2801      	cmp	r0, #1
 8002586:	d1bb      	bne.n	8002500 <_usb_ep0setup+0x270>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <_usb_ep0setup+0x348>)
 800258a:	63a3      	str	r3, [r4, #56]	; 0x38
 800258c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800258e:	6426      	str	r6, [r4, #64]	; 0x40
 8002590:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002594:	e68e      	b.n	80022b4 <_usb_ep0setup+0x24>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8002596:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800259a:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800259e:	4620      	mov	r0, r4
 80025a0:	f001 f986 	bl	80038b0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80025a4:	6863      	ldr	r3, [r4, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b113      	cbz	r3, 80025b0 <_usb_ep0setup+0x320>
 80025aa:	2101      	movs	r1, #1
 80025ac:	4620      	mov	r0, r4
 80025ae:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80025b6:	7023      	strb	r3, [r4, #0]
 80025b8:	e739      	b.n	800242e <_usb_ep0setup+0x19e>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 80025ba:	f001 fd29 	bl	8004010 <usb_lld_clear_in>
 80025be:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80025c2:	e734      	b.n	800242e <_usb_ep0setup+0x19e>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 80025c4:	f001 fd04 	bl	8003fd0 <usb_lld_stall_in>
 80025c8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80025cc:	e72f      	b.n	800242e <_usb_ep0setup+0x19e>
 80025ce:	bf00      	nop
 80025d0:	080083e0 	.word	0x080083e0
 80025d4:	080083d0 	.word	0x080083d0
 80025d8:	080083f0 	.word	0x080083f0
 80025dc:	00000000 	.word	0x00000000

080025e0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80025e0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80025e2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80025e6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d815      	bhi.n	8002618 <_usb_ep0in+0x38>
 80025ec:	e8df f003 	tbb	[pc, r3]
 80025f0:	04251504 	.word	0x04251504
 80025f4:	3c04      	.short	0x3c04
 80025f6:	04          	.byte	0x04
 80025f7:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 80025f8:	2100      	movs	r1, #0
 80025fa:	f001 fce9 	bl	8003fd0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 80025fe:	2100      	movs	r1, #0
 8002600:	4620      	mov	r0, r4
 8002602:	f001 fcd5 	bl	8003fb0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002606:	6863      	ldr	r3, [r4, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b113      	cbz	r3, 8002612 <_usb_ep0in+0x32>
 800260c:	2105      	movs	r1, #5
 800260e:	4620      	mov	r0, r4
 8002610:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002612:	2306      	movs	r3, #6
 8002614:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002618:	bd38      	pop	{r3, r4, r5, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800261a:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800261e:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8002622:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002624:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002628:	4293      	cmp	r3, r2
 800262a:	d906      	bls.n	800263a <_usb_ep0in+0x5a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800262c:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800262e:	8a1d      	ldrh	r5, [r3, #16]
 8002630:	fbb2 f3f5 	udiv	r3, r2, r5
 8002634:	fb05 2513 	mls	r5, r5, r3, r2
 8002638:	b1ed      	cbz	r5, 8002676 <_usb_ep0in+0x96>
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800263a:	2303      	movs	r3, #3
 800263c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002640:	2320      	movs	r3, #32
 8002642:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002646:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002648:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800264a:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 800264c:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002654:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 8002656:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 8002658:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 800265a:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800265c:	4629      	mov	r1, r5
 800265e:	f001 fa1f 	bl	8003aa0 <usb_lld_start_out>
 8002662:	f385 8811 	msr	BASEPRI, r5
 8002666:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8002668:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800266a:	b103      	cbz	r3, 800266e <_usb_ep0in+0x8e>
      usbp->ep0endcb(usbp);
 800266c:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800266e:	2300      	movs	r3, #0
 8002670:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 8002674:	bd38      	pop	{r3, r4, r5, pc}
 8002676:	2320      	movs	r3, #32
 8002678:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800267c:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800267e:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002680:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	8102      	strh	r2, [r0, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002688:	4629      	mov	r1, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800268a:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 800268c:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800268e:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002690:	f001 fa9e 	bl	8003bd0 <usb_lld_start_in>
 8002694:	f385 8811 	msr	BASEPRI, r5
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8002698:	2302      	movs	r3, #2
 800269a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800269e:	bd38      	pop	{r3, r4, r5, pc}

080026a0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 80026a0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80026a4:	2a06      	cmp	r2, #6
 80026a6:	d80c      	bhi.n	80026c2 <_usb_ep0out+0x22>
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	2301      	movs	r3, #1
 80026ac:	4093      	lsls	r3, r2
 80026ae:	f013 0f67 	tst.w	r3, #103	; 0x67
 80026b2:	4604      	mov	r4, r0
 80026b4:	d112      	bne.n	80026dc <_usb_ep0out+0x3c>
 80026b6:	f013 0508 	ands.w	r5, r3, #8
 80026ba:	d103      	bne.n	80026c4 <_usb_ep0out+0x24>
 80026bc:	06db      	lsls	r3, r3, #27
 80026be:	d41e      	bmi.n	80026fe <_usb_ep0out+0x5e>
 80026c0:	bd38      	pop	{r3, r4, r5, pc}
 80026c2:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 80026c4:	68c3      	ldr	r3, [r0, #12]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f8      	bne.n	80026c0 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 80026ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026d0:	b103      	cbz	r3, 80026d4 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 80026d2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 80026da:	bd38      	pop	{r3, r4, r5, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 80026dc:	2100      	movs	r1, #0
 80026de:	f001 fc77 	bl	8003fd0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 80026e2:	2100      	movs	r1, #0
 80026e4:	4620      	mov	r0, r4
 80026e6:	f001 fc63 	bl	8003fb0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80026ea:	6863      	ldr	r3, [r4, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b113      	cbz	r3, 80026f6 <_usb_ep0out+0x56>
 80026f0:	2105      	movs	r1, #5
 80026f2:	4620      	mov	r0, r4
 80026f4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 80026f6:	2306      	movs	r3, #6
 80026f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80026fc:	bd38      	pop	{r3, r4, r5, pc}

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 80026fe:	2305      	movs	r3, #5
 8002700:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8002704:	2320      	movs	r3, #32
 8002706:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800270a:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800270c:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800270e:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	8102      	strh	r2, [r0, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002716:	4629      	mov	r1, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8002718:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 800271a:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 800271c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800271e:	f001 fa57 	bl	8003bd0 <usb_lld_start_in>
 8002722:	f385 8811 	msr	BASEPRI, r5
 8002726:	bd38      	pop	{r3, r4, r5, pc}
	...

08002730 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8002730:	0943      	lsrs	r3, r0, #5
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	b410      	push	{r4}
 8002736:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800273a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800273e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8002742:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002746:	0109      	lsls	r1, r1, #4
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002748:	f000 001f 	and.w	r0, r0, #31
 800274c:	2201      	movs	r2, #1
 800274e:	fa02 f000 	lsl.w	r0, r2, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002752:	b2c9      	uxtb	r1, r1
 8002754:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002758:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800275c:	6018      	str	r0, [r3, #0]
}
 800275e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002762:	4770      	bx	lr
	...

08002770 <nvicSetSystemHandlerPriority>:
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 8002770:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002774:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 8002778:	0109      	lsls	r1, r1, #4
 800277a:	b2c9      	uxtb	r1, r1
 800277c:	7601      	strb	r1, [r0, #24]
 800277e:	4770      	bx	lr

08002780 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <hal_lld_init+0x60>)
 8002782:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800278a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800278c:	6119      	str	r1, [r3, #16]
 800278e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8002790:	6958      	ldr	r0, [r3, #20]
 8002792:	6159      	str	r1, [r3, #20]
 8002794:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002796:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002798:	4c12      	ldr	r4, [pc, #72]	; (80027e4 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800279a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800279e:	6218      	str	r0, [r3, #32]
 80027a0:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80027a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027a4:	6259      	str	r1, [r3, #36]	; 0x24
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80027a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027aa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80027ae:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80027b0:	6821      	ldr	r1, [r4, #0]
 80027b2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80027b6:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80027b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80027ba:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80027be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80027c2:	d003      	beq.n	80027cc <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80027c4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80027c8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80027ca:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80027cc:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80027ce:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80027d2:	6853      	ldr	r3, [r2, #4]
 80027d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d8:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 80027da:	f000 b9f1 	b.w	8002bc0 <dmaInit>
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000
	...

080027f0 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80027f0:	492c      	ldr	r1, [pc, #176]	; (80028a4 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80027f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80027f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80027fc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80027fe:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002800:	680b      	ldr	r3, [r1, #0]
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002808:	680a      	ldr	r2, [r1, #0]
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <stm32_clock_init+0xb4>)
 800280c:	0790      	lsls	r0, r2, #30
 800280e:	d5fb      	bpl.n	8002808 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	f022 0203 	bic.w	r2, r2, #3
 8002816:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800281c:	4619      	mov	r1, r3
 800281e:	688b      	ldr	r3, [r1, #8]
 8002820:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <stm32_clock_init+0xb4>)
 8002822:	f013 030c 	ands.w	r3, r3, #12
 8002826:	d1fa      	bne.n	800281e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002828:	6811      	ldr	r1, [r2, #0]
 800282a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800282e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002830:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <stm32_clock_init+0xb4>)
 800283e:	0389      	lsls	r1, r1, #14
 8002840:	d5fb      	bpl.n	800283a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8002842:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002844:	f042 0201 	orr.w	r2, r2, #1
 8002848:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800284a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800284c:	4915      	ldr	r1, [pc, #84]	; (80028a4 <stm32_clock_init+0xb4>)
 800284e:	0790      	lsls	r0, r2, #30
 8002850:	d5fb      	bpl.n	800284a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <stm32_clock_init+0xbc>)
 8002854:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002856:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002858:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002860:	6853      	ldr	r3, [r2, #4]
 8002862:	0459      	lsls	r1, r3, #17
 8002864:	d5fc      	bpl.n	8002860 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002866:	490f      	ldr	r1, [pc, #60]	; (80028a4 <stm32_clock_init+0xb4>)
 8002868:	680a      	ldr	r2, [r1, #0]
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <stm32_clock_init+0xb4>)
 800286c:	0192      	lsls	r2, r2, #6
 800286e:	d5fb      	bpl.n	8002868 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002870:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002872:	4910      	ldr	r1, [pc, #64]	; (80028b4 <stm32_clock_init+0xc4>)
 8002874:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002876:	f240 7105 	movw	r1, #1797	; 0x705
 800287a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	f042 0202 	orr.w	r2, r2, #2
 8002882:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002884:	461a      	mov	r2, r3
 8002886:	6893      	ldr	r3, [r2, #8]
 8002888:	4906      	ldr	r1, [pc, #24]	; (80028a4 <stm32_clock_init+0xb4>)
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b08      	cmp	r3, #8
 8002890:	d1f9      	bne.n	8002886 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8002892:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8002894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002898:	644b      	str	r3, [r1, #68]	; 0x44
 800289a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	664b      	str	r3, [r1, #100]	; 0x64
 80028a2:	4770      	bx	lr
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40007000 	.word	0x40007000
 80028ac:	07405408 	.word	0x07405408
 80028b0:	40023c00 	.word	0x40023c00
 80028b4:	38889400 	.word	0x38889400
	...

080028c0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80028c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 80028c4:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80028cc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	b10b      	cbz	r3, 80028d6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 80028d2:	6850      	ldr	r0, [r2, #4]
 80028d4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80028d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80028da:	f7fe bf19 	b.w	8001710 <_port_irq_epilogue>
 80028de:	bf00      	nop
 80028e0:	40026000 	.word	0x40026000
 80028e4:	20000ec0 	.word	0x20000ec0
	...

080028f0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <Vector70+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80028f4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 80028f6:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80028f8:	0989      	lsrs	r1, r1, #6
 80028fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80028fe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
 8002900:	018c      	lsls	r4, r1, #6
 8002902:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8002904:	b10a      	cbz	r2, 800290a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002906:	68c0      	ldr	r0, [r0, #12]
 8002908:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800290a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800290e:	f7fe beff 	b.w	8001710 <_port_irq_epilogue>
 8002912:	bf00      	nop
 8002914:	40026000 	.word	0x40026000
 8002918:	20000ec0 	.word	0x20000ec0
 800291c:	00000000 	.word	0x00000000

08002920 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002922:	4809      	ldr	r0, [pc, #36]	; (8002948 <Vector74+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002924:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002926:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002928:	0c09      	lsrs	r1, r1, #16
 800292a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800292e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
 8002930:	040c      	lsls	r4, r1, #16
 8002932:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8002934:	b10a      	cbz	r2, 800293a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002936:	6940      	ldr	r0, [r0, #20]
 8002938:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800293a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800293e:	f7fe bee7 	b.w	8001710 <_port_irq_epilogue>
 8002942:	bf00      	nop
 8002944:	40026000 	.word	0x40026000
 8002948:	20000ec0 	.word	0x20000ec0
 800294c:	00000000 	.word	0x00000000

08002950 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002952:	4809      	ldr	r0, [pc, #36]	; (8002978 <Vector78+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002954:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002956:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002958:	0d89      	lsrs	r1, r1, #22
 800295a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800295e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
 8002960:	058c      	lsls	r4, r1, #22
 8002962:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8002964:	b10a      	cbz	r2, 800296a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8002966:	69c0      	ldr	r0, [r0, #28]
 8002968:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800296a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800296e:	f7fe becf 	b.w	8001710 <_port_irq_epilogue>
 8002972:	bf00      	nop
 8002974:	40026000 	.word	0x40026000
 8002978:	20000ec0 	.word	0x20000ec0
 800297c:	00000000 	.word	0x00000000

08002980 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002980:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002984:	4807      	ldr	r0, [pc, #28]	; (80029a4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002986:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002988:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800298a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800298e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8002990:	b10a      	cbz	r2, 8002996 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002992:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002994:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800299a:	f7fe beb9 	b.w	8001710 <_port_irq_epilogue>
 800299e:	bf00      	nop
 80029a0:	40026000 	.word	0x40026000
 80029a4:	20000ec0 	.word	0x20000ec0
	...

080029b0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 80029b2:	4809      	ldr	r0, [pc, #36]	; (80029d8 <Vector80+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80029b4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 80029b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80029b8:	0989      	lsrs	r1, r1, #6
 80029ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80029be:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
 80029c0:	018c      	lsls	r4, r1, #6
 80029c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 80029c4:	b10a      	cbz	r2, 80029ca <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 80029c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80029c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80029ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80029ce:	f7fe be9f 	b.w	8001710 <_port_irq_epilogue>
 80029d2:	bf00      	nop
 80029d4:	40026000 	.word	0x40026000
 80029d8:	20000ec0 	.word	0x20000ec0
 80029dc:	00000000 	.word	0x00000000

080029e0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <Vector84+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80029e4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 80029e6:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80029e8:	0c09      	lsrs	r1, r1, #16
 80029ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80029ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
 80029f0:	040c      	lsls	r4, r1, #16
 80029f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 80029f4:	b10a      	cbz	r2, 80029fa <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 80029f6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80029f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80029fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80029fe:	f7fe be87 	b.w	8001710 <_port_irq_epilogue>
 8002a02:	bf00      	nop
 8002a04:	40026000 	.word	0x40026000
 8002a08:	20000ec0 	.word	0x20000ec0
 8002a0c:	00000000 	.word	0x00000000

08002a10 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002a12:	4809      	ldr	r0, [pc, #36]	; (8002a38 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a14:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002a16:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a18:	0d89      	lsrs	r1, r1, #22
 8002a1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002a1e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
 8002a20:	058c      	lsls	r4, r1, #22
 8002a22:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8002a24:	b10a      	cbz	r2, 8002a2a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002a26:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002a28:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002a2e:	f7fe be6f 	b.w	8001710 <_port_irq_epilogue>
 8002a32:	bf00      	nop
 8002a34:	40026000 	.word	0x40026000
 8002a38:	20000ec0 	.word	0x20000ec0
 8002a3c:	00000000 	.word	0x00000000

08002a40 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002a40:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002a44:	4807      	ldr	r0, [pc, #28]	; (8002a64 <Vector120+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002a46:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002a48:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002a4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002a4e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8002a50:	b10a      	cbz	r2, 8002a56 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002a52:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002a54:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002a5a:	f7fe be59 	b.w	8001710 <_port_irq_epilogue>
 8002a5e:	bf00      	nop
 8002a60:	40026400 	.word	0x40026400
 8002a64:	20000ec0 	.word	0x20000ec0
	...

08002a70 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002a72:	4809      	ldr	r0, [pc, #36]	; (8002a98 <Vector124+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002a74:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002a76:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002a78:	0989      	lsrs	r1, r1, #6
 8002a7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002a7e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
 8002a80:	018c      	lsls	r4, r1, #6
 8002a82:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8002a84:	b10a      	cbz	r2, 8002a8a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8002a86:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002a88:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002a8e:	f7fe be3f 	b.w	8001710 <_port_irq_epilogue>
 8002a92:	bf00      	nop
 8002a94:	40026400 	.word	0x40026400
 8002a98:	20000ec0 	.word	0x20000ec0
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002aa2:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <Vector128+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002aa4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002aa6:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002aa8:	0c09      	lsrs	r1, r1, #16
 8002aaa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002aae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
 8002ab0:	040c      	lsls	r4, r1, #16
 8002ab2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8002ab4:	b10a      	cbz	r2, 8002aba <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002ab6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002ab8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002abe:	f7fe be27 	b.w	8001710 <_port_irq_epilogue>
 8002ac2:	bf00      	nop
 8002ac4:	40026400 	.word	0x40026400
 8002ac8:	20000ec0 	.word	0x20000ec0
 8002acc:	00000000 	.word	0x00000000

08002ad0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002ad2:	4809      	ldr	r0, [pc, #36]	; (8002af8 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ad4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002ad6:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ad8:	0d89      	lsrs	r1, r1, #22
 8002ada:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002ade:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
 8002ae0:	058c      	lsls	r4, r1, #22
 8002ae2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8002ae4:	b10a      	cbz	r2, 8002aea <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002ae6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002ae8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002aee:	f7fe be0f 	b.w	8001710 <_port_irq_epilogue>
 8002af2:	bf00      	nop
 8002af4:	40026400 	.word	0x40026400
 8002af8:	20000ec0 	.word	0x20000ec0
 8002afc:	00000000 	.word	0x00000000

08002b00 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002b00:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <Vector130+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002b06:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002b08:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002b0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002b0e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8002b10:	b10a      	cbz	r2, 8002b16 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002b12:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002b14:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002b1a:	f7fe bdf9 	b.w	8001710 <_port_irq_epilogue>
 8002b1e:	bf00      	nop
 8002b20:	40026400 	.word	0x40026400
 8002b24:	20000ec0 	.word	0x20000ec0
	...

08002b30 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002b32:	4809      	ldr	r0, [pc, #36]	; (8002b58 <Vector150+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b34:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002b36:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b38:	0989      	lsrs	r1, r1, #6
 8002b3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002b3e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
 8002b40:	018c      	lsls	r4, r1, #6
 8002b42:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8002b44:	b10a      	cbz	r2, 8002b4a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002b46:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002b48:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002b4e:	f7fe bddf 	b.w	8001710 <_port_irq_epilogue>
 8002b52:	bf00      	nop
 8002b54:	40026400 	.word	0x40026400
 8002b58:	20000ec0 	.word	0x20000ec0
 8002b5c:	00000000 	.word	0x00000000

08002b60 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002b62:	4809      	ldr	r0, [pc, #36]	; (8002b88 <Vector154+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002b64:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002b66:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002b68:	0c09      	lsrs	r1, r1, #16
 8002b6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002b6e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
 8002b70:	040c      	lsls	r4, r1, #16
 8002b72:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8002b74:	b10a      	cbz	r2, 8002b7a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8002b76:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002b78:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002b7e:	f7fe bdc7 	b.w	8001710 <_port_irq_epilogue>
 8002b82:	bf00      	nop
 8002b84:	40026400 	.word	0x40026400
 8002b88:	20000ec0 	.word	0x20000ec0
 8002b8c:	00000000 	.word	0x00000000

08002b90 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002b92:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <Vector158+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b94:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002b96:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b98:	0d89      	lsrs	r1, r1, #22
 8002b9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002b9e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
 8002ba0:	058c      	lsls	r4, r1, #22
 8002ba2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8002ba4:	b10a      	cbz	r2, 8002baa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8002ba6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002ba8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002bae:	f7fe bdaf 	b.w	8001710 <_port_irq_epilogue>
 8002bb2:	bf00      	nop
 8002bb4:	40026400 	.word	0x40026400
 8002bb8:	20000ec0 	.word	0x20000ec0
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8002bc0:	490e      	ldr	r1, [pc, #56]	; (8002bfc <dmaInit+0x3c>)
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <dmaInit+0x40>)
 8002bc4:	480f      	ldr	r0, [pc, #60]	; (8002c04 <dmaInit+0x44>)
 8002bc6:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8002bc8:	b410      	push	{r4}
  unsigned i;

  dma_streams_mask = 0U;
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	4c0e      	ldr	r4, [pc, #56]	; (8002c08 <dmaInit+0x48>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 8002bce:	4619      	mov	r1, r3
 8002bd0:	e001      	b.n	8002bd6 <dmaInit+0x16>
 8002bd2:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8002bd6:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8002bd8:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002bdc:	3301      	adds	r3, #1
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	f102 020c 	add.w	r2, r2, #12
 8002be4:	d1f5      	bne.n	8002bd2 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002be6:	4909      	ldr	r1, [pc, #36]	; (8002c0c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002be8:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 8002bea:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf2:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002bf4:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002bf6:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002bf8:	60d3      	str	r3, [r2, #12]
}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000f40 	.word	0x20000f40
 8002c00:	0800840c 	.word	0x0800840c
 8002c04:	40026010 	.word	0x40026010
 8002c08:	20000ec0 	.word	0x20000ec0
 8002c0c:	40026000 	.word	0x40026000
 8002c10:	40026400 	.word	0x40026400
	...

08002c20 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8002c22:	4f1f      	ldr	r7, [pc, #124]	; (8002ca0 <dmaStreamAllocate+0x80>)
 8002c24:	7a46      	ldrb	r6, [r0, #9]
 8002c26:	683d      	ldr	r5, [r7, #0]
 8002c28:	2401      	movs	r4, #1
 8002c2a:	fa04 fe06 	lsl.w	lr, r4, r6
 8002c2e:	ea1e 0f05 	tst.w	lr, r5
 8002c32:	d131      	bne.n	8002c98 <dmaStreamAllocate+0x78>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002c34:	4c1b      	ldr	r4, [pc, #108]	; (8002ca4 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002c36:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002c3a:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002c3e:	f015 0fff 	tst.w	r5, #255	; 0xff
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002c42:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002c44:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002c48:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002c4c:	d004      	beq.n	8002c58 <dmaStreamAllocate+0x38>
    rccEnableDMA1(false);
 8002c4e:	4c16      	ldr	r4, [pc, #88]	; (8002ca8 <dmaStreamAllocate+0x88>)
 8002c50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c56:	6323      	str	r3, [r4, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8002c58:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8002c5c:	d116      	bne.n	8002c8c <dmaStreamAllocate+0x6c>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002c5e:	6805      	ldr	r5, [r0, #0]
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	f023 031f 	bic.w	r3, r3, #31
 8002c66:	602b      	str	r3, [r5, #0]
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	f013 0401 	ands.w	r4, r3, #1
 8002c6e:	d1fb      	bne.n	8002c68 <dmaStreamAllocate+0x48>
 8002c70:	7a07      	ldrb	r7, [r0, #8]
 8002c72:	6846      	ldr	r6, [r0, #4]
 8002c74:	233d      	movs	r3, #61	; 0x3d
 8002c76:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002c78:	2721      	movs	r7, #33	; 0x21
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002c7a:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002c7c:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002c7e:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8002c80:	b162      	cbz	r2, 8002c9c <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 8002c82:	7a80      	ldrb	r0, [r0, #10]
 8002c84:	f7ff fd54 	bl	8002730 <nvicEnableVector>
  }

  return false;
 8002c88:	4620      	mov	r0, r4
 8002c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
    rccEnableDMA1(false);
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
 8002c8c:	4c06      	ldr	r4, [pc, #24]	; (8002ca8 <dmaStreamAllocate+0x88>)
 8002c8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c94:	6323      	str	r3, [r4, #48]	; 0x30
 8002c96:	e7e2      	b.n	8002c5e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;
 8002c98:	4620      	mov	r0, r4
 8002c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  }

  return false;
 8002c9c:	4610      	mov	r0, r2
}
 8002c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ca0:	20000f40 	.word	0x20000f40
 8002ca4:	20000ec0 	.word	0x20000ec0
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00000000 	.word	0x00000000

08002cb0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 8002cb0:	b508      	push	{r3, lr}
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 8002cb8:	f7fe f952 	bl	8000f60 <chSysTimerHandlerI>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8002cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8002cc6:	f7fe bd23 	b.w	8001710 <_port_irq_epilogue>
 8002cca:	bf00      	nop
 8002ccc:	0000      	movs	r0, r0
	...

08002cd0 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <st_lld_init+0x18>)
 8002cd2:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 8002cd6:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd8:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8002cda:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 8002cdc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8002cde:	2108      	movs	r1, #8
 8002ce0:	200b      	movs	r0, #11
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8002ce4:	f7ff bd44 	b.w	8002770 <nvicSetSystemHandlerPriority>
 8002ce8:	e000e010 	.word	0xe000e010
 8002cec:	00000000 	.word	0x00000000

08002cf0 <ext_lld_init>:
 * @notapi
 */
void ext_lld_init(void) {

  /* Driver initialization.*/
  extObjectInit(&EXTD1);
 8002cf0:	4801      	ldr	r0, [pc, #4]	; (8002cf8 <ext_lld_init+0x8>)
 8002cf2:	f7fe bfd5 	b.w	8001ca0 <extObjectInit>
 8002cf6:	bf00      	nop
 8002cf8:	20000f44 	.word	0x20000f44
 8002cfc:	00000000 	.word	0x00000000

08002d00 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <Vector58+0x24>)
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 8002d02:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d04:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	400b      	ands	r3, r1
 8002d0a:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8002d0e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
 8002d10:	b123      	cbz	r3, 8002d1c <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <Vector58+0x28>)
 8002d14:	6843      	ldr	r3, [r0, #4]
 8002d16:	2100      	movs	r1, #0
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 0);
  EXTI->PR = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[0].cb(&EXTD1, 0);

  OSAL_IRQ_EPILOGUE();
 8002d20:	f7fe bcf6 	b.w	8001710 <_port_irq_epilogue>
 8002d24:	40013c00 	.word	0x40013c00
 8002d28:	20000f44 	.word	0x20000f44
 8002d2c:	00000000 	.word	0x00000000

08002d30 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d30:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <Vector5C+0x24>)
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 8002d32:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d34:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	400b      	ands	r3, r1
 8002d3a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8002d3e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
 8002d40:	b123      	cbz	r3, 8002d4c <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <Vector5C+0x28>)
 8002d44:	6843      	ldr	r3, [r0, #4]
 8002d46:	2101      	movs	r1, #1
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 1);
  EXTI->PR = pr;
  if (pr & (1U << 1))
    EXTD1.config->channels[1].cb(&EXTD1, 1);

  OSAL_IRQ_EPILOGUE();
 8002d50:	f7fe bcde 	b.w	8001710 <_port_irq_epilogue>
 8002d54:	40013c00 	.word	0x40013c00
 8002d58:	20000f44 	.word	0x20000f44
 8002d5c:	00000000 	.word	0x00000000

08002d60 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d60:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <Vector60+0x24>)
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8002d62:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d64:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	400b      	ands	r3, r1
 8002d6a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8002d6e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
 8002d70:	b123      	cbz	r3, 8002d7c <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <Vector60+0x28>)
 8002d74:	6843      	ldr	r3, [r0, #4]
 8002d76:	2102      	movs	r1, #2
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002d7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 2);
  EXTI->PR = pr;
  if (pr & (1U << 2))
    EXTD1.config->channels[2].cb(&EXTD1, 2);

  OSAL_IRQ_EPILOGUE();
 8002d80:	f7fe bcc6 	b.w	8001710 <_port_irq_epilogue>
 8002d84:	40013c00 	.word	0x40013c00
 8002d88:	20000f44 	.word	0x20000f44
 8002d8c:	00000000 	.word	0x00000000

08002d90 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d90:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <Vector64+0x24>)
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 8002d92:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002d94:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	400b      	ands	r3, r1
 8002d9a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8002d9e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
 8002da0:	b123      	cbz	r3, 8002dac <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <Vector64+0x28>)
 8002da4:	6843      	ldr	r3, [r0, #4]
 8002da6:	2103      	movs	r1, #3
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 3);
  EXTI->PR = pr;
  if (pr & (1U << 3))
    EXTD1.config->channels[3].cb(&EXTD1, 3);

  OSAL_IRQ_EPILOGUE();
 8002db0:	f7fe bcae 	b.w	8001710 <_port_irq_epilogue>
 8002db4:	40013c00 	.word	0x40013c00
 8002db8:	20000f44 	.word	0x20000f44
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002dc0:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <Vector68+0x24>)
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8002dc2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002dc4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	400b      	ands	r3, r1
 8002dca:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8002dce:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
 8002dd0:	b123      	cbz	r3, 8002ddc <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <Vector68+0x28>)
 8002dd4:	6843      	ldr	r3, [r0, #4]
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 4);
  EXTI->PR = pr;
  if (pr & (1U << 4))
    EXTD1.config->channels[4].cb(&EXTD1, 4);

  OSAL_IRQ_EPILOGUE();
 8002de0:	f7fe bc96 	b.w	8001710 <_port_irq_epilogue>
 8002de4:	40013c00 	.word	0x40013c00
 8002de8:	20000f44 	.word	0x20000f44
 8002dec:	00000000 	.word	0x00000000

08002df0 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <Vector9C+0x68>)
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8002df2:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002df4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4014      	ands	r4, r2
 8002dfa:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 8002dfe:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
 8002e00:	06a3      	lsls	r3, r4, #26
 8002e02:	d422      	bmi.n	8002e4a <Vector9C+0x5a>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
 8002e04:	0660      	lsls	r0, r4, #25
 8002e06:	d41a      	bmi.n	8002e3e <Vector9C+0x4e>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
 8002e08:	0621      	lsls	r1, r4, #24
 8002e0a:	d412      	bmi.n	8002e32 <Vector9C+0x42>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
 8002e0c:	05e2      	lsls	r2, r4, #23
 8002e0e:	d40a      	bmi.n	8002e26 <Vector9C+0x36>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
 8002e10:	05a3      	lsls	r3, r4, #22
 8002e12:	d504      	bpl.n	8002e1e <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
 8002e14:	4811      	ldr	r0, [pc, #68]	; (8002e5c <Vector9C+0x6c>)
 8002e16:	6843      	ldr	r3, [r0, #4]
 8002e18:	2109      	movs	r1, #9
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
    EXTD1.config->channels[9].cb(&EXTD1, 9);

  OSAL_IRQ_EPILOGUE();
 8002e22:	f7fe bc75 	b.w	8001710 <_port_irq_epilogue>
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
 8002e26:	480d      	ldr	r0, [pc, #52]	; (8002e5c <Vector9C+0x6c>)
 8002e28:	6843      	ldr	r3, [r0, #4]
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4798      	blx	r3
 8002e30:	e7ee      	b.n	8002e10 <Vector9C+0x20>
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
 8002e32:	480a      	ldr	r0, [pc, #40]	; (8002e5c <Vector9C+0x6c>)
 8002e34:	6843      	ldr	r3, [r0, #4]
 8002e36:	2107      	movs	r1, #7
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	4798      	blx	r3
 8002e3c:	e7e6      	b.n	8002e0c <Vector9C+0x1c>
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
 8002e3e:	4807      	ldr	r0, [pc, #28]	; (8002e5c <Vector9C+0x6c>)
 8002e40:	6843      	ldr	r3, [r0, #4]
 8002e42:	2106      	movs	r1, #6
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	4798      	blx	r3
 8002e48:	e7de      	b.n	8002e08 <Vector9C+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
 8002e4a:	4804      	ldr	r0, [pc, #16]	; (8002e5c <Vector9C+0x6c>)
 8002e4c:	6843      	ldr	r3, [r0, #4]
 8002e4e:	2105      	movs	r1, #5
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	4798      	blx	r3
 8002e54:	e7d6      	b.n	8002e04 <Vector9C+0x14>
 8002e56:	bf00      	nop
 8002e58:	40013c00 	.word	0x40013c00
 8002e5c:	20000f44 	.word	0x20000f44

08002e60 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <VectorE0+0x78>)
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8002e62:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002e64:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4014      	ands	r4, r2
 8002e6a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 8002e6e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
 8002e70:	0562      	lsls	r2, r4, #21
 8002e72:	d42a      	bmi.n	8002eca <VectorE0+0x6a>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
 8002e74:	0523      	lsls	r3, r4, #20
 8002e76:	d422      	bmi.n	8002ebe <VectorE0+0x5e>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
 8002e78:	04e0      	lsls	r0, r4, #19
 8002e7a:	d41a      	bmi.n	8002eb2 <VectorE0+0x52>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
 8002e7c:	04a1      	lsls	r1, r4, #18
 8002e7e:	d412      	bmi.n	8002ea6 <VectorE0+0x46>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
 8002e80:	0462      	lsls	r2, r4, #17
 8002e82:	d40a      	bmi.n	8002e9a <VectorE0+0x3a>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
 8002e84:	0423      	lsls	r3, r4, #16
 8002e86:	d504      	bpl.n	8002e92 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
 8002e88:	4814      	ldr	r0, [pc, #80]	; (8002edc <VectorE0+0x7c>)
 8002e8a:	6843      	ldr	r3, [r0, #4]
 8002e8c:	210f      	movs	r1, #15
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
    EXTD1.config->channels[15].cb(&EXTD1, 15);

  OSAL_IRQ_EPILOGUE();
 8002e96:	f7fe bc3b 	b.w	8001710 <_port_irq_epilogue>
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
 8002e9a:	4810      	ldr	r0, [pc, #64]	; (8002edc <VectorE0+0x7c>)
 8002e9c:	6843      	ldr	r3, [r0, #4]
 8002e9e:	210e      	movs	r1, #14
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	4798      	blx	r3
 8002ea4:	e7ee      	b.n	8002e84 <VectorE0+0x24>
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
 8002ea6:	480d      	ldr	r0, [pc, #52]	; (8002edc <VectorE0+0x7c>)
 8002ea8:	6843      	ldr	r3, [r0, #4]
 8002eaa:	210d      	movs	r1, #13
 8002eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eae:	4798      	blx	r3
 8002eb0:	e7e6      	b.n	8002e80 <VectorE0+0x20>
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
 8002eb2:	480a      	ldr	r0, [pc, #40]	; (8002edc <VectorE0+0x7c>)
 8002eb4:	6843      	ldr	r3, [r0, #4]
 8002eb6:	210c      	movs	r1, #12
 8002eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eba:	4798      	blx	r3
 8002ebc:	e7de      	b.n	8002e7c <VectorE0+0x1c>
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
 8002ebe:	4807      	ldr	r0, [pc, #28]	; (8002edc <VectorE0+0x7c>)
 8002ec0:	6843      	ldr	r3, [r0, #4]
 8002ec2:	210b      	movs	r1, #11
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	4798      	blx	r3
 8002ec8:	e7d6      	b.n	8002e78 <VectorE0+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
 8002eca:	4804      	ldr	r0, [pc, #16]	; (8002edc <VectorE0+0x7c>)
 8002ecc:	6843      	ldr	r3, [r0, #4]
 8002ece:	210a      	movs	r1, #10
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	4798      	blx	r3
 8002ed4:	e7ce      	b.n	8002e74 <VectorE0+0x14>
 8002ed6:	bf00      	nop
 8002ed8:	40013c00 	.word	0x40013c00
 8002edc:	20000f44 	.word	0x20000f44

08002ee0 <Vector44>:
OSAL_IRQ_HANDLER(Vector44) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002ee0:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <Vector44+0x24>)
/**
 * @brief   EXTI[16] interrupt handler (PVD).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector44) {
 8002ee2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002ee4:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 16);
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
 8002eec:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
 8002eee:	b12b      	cbz	r3, 8002efc <Vector44+0x1c>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
 8002ef0:	4805      	ldr	r0, [pc, #20]	; (8002f08 <Vector44+0x28>)
 8002ef2:	6843      	ldr	r3, [r0, #4]
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efa:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 16);
  EXTI->PR = pr;
  if (pr & (1U << 16))
    EXTD1.config->channels[16].cb(&EXTD1, 16);

  OSAL_IRQ_EPILOGUE();
 8002f00:	f7fe bc06 	b.w	8001710 <_port_irq_epilogue>
 8002f04:	40013c00 	.word	0x40013c00
 8002f08:	20000f44 	.word	0x20000f44
 8002f0c:	00000000 	.word	0x00000000

08002f10 <VectorE4>:
OSAL_IRQ_HANDLER(VectorE4) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002f10:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <VectorE4+0x24>)
/**
 * @brief   EXTI[17] interrupt handler (RTC_ALARM).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE4) {
 8002f12:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002f14:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 17);
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
 8002f1c:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
 8002f1e:	b12b      	cbz	r3, 8002f2c <VectorE4+0x1c>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
 8002f20:	4805      	ldr	r0, [pc, #20]	; (8002f38 <VectorE4+0x28>)
 8002f22:	6843      	ldr	r3, [r0, #4]
 8002f24:	2111      	movs	r1, #17
 8002f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f2a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 17);
  EXTI->PR = pr;
  if (pr & (1U << 17))
    EXTD1.config->channels[17].cb(&EXTD1, 17);

  OSAL_IRQ_EPILOGUE();
 8002f30:	f7fe bbee 	b.w	8001710 <_port_irq_epilogue>
 8002f34:	40013c00 	.word	0x40013c00
 8002f38:	20000f44 	.word	0x20000f44
 8002f3c:	00000000 	.word	0x00000000

08002f40 <VectorE8>:
OSAL_IRQ_HANDLER(VectorE8) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002f40:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <VectorE8+0x28>)
/**
 * @brief   EXTI[18] interrupt handler (OTG_FS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE8) {
 8002f42:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002f44:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	400b      	ands	r3, r1
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
 8002f4e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
 8002f50:	b12b      	cbz	r3, 8002f5e <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
 8002f52:	4806      	ldr	r0, [pc, #24]	; (8002f6c <VectorE8+0x2c>)
 8002f54:	6843      	ldr	r3, [r0, #4]
 8002f56:	2112      	movs	r1, #18
 8002f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 18);
  EXTI->PR = pr;
  if (pr & (1U << 18))
    EXTD1.config->channels[18].cb(&EXTD1, 18);

  OSAL_IRQ_EPILOGUE();
 8002f62:	f7fe bbd5 	b.w	8001710 <_port_irq_epilogue>
 8002f66:	bf00      	nop
 8002f68:	40013c00 	.word	0x40013c00
 8002f6c:	20000f44 	.word	0x20000f44

08002f70 <Vector170>:
OSAL_IRQ_HANDLER(Vector170) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002f70:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <Vector170+0x28>)
/**
 * @brief   EXTI[20] interrupt handler (OTG_HS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector170) {
 8002f72:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002f74:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	400b      	ands	r3, r1
 8002f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
 8002f7e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
 8002f80:	b12b      	cbz	r3, 8002f8e <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
 8002f82:	4806      	ldr	r0, [pc, #24]	; (8002f9c <Vector170+0x2c>)
 8002f84:	6843      	ldr	r3, [r0, #4]
 8002f86:	2114      	movs	r1, #20
 8002f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f8c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 20);
  EXTI->PR = pr;
  if (pr & (1U << 20))
    EXTD1.config->channels[20].cb(&EXTD1, 20);

  OSAL_IRQ_EPILOGUE();
 8002f92:	f7fe bbbd 	b.w	8001710 <_port_irq_epilogue>
 8002f96:	bf00      	nop
 8002f98:	40013c00 	.word	0x40013c00
 8002f9c:	20000f44 	.word	0x20000f44

08002fa0 <Vector48>:
OSAL_IRQ_HANDLER(Vector48) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002fa0:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <Vector48+0x28>)
/**
 * @brief   EXTI[21] interrupt handler (TAMPER_STAMP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector48) {
 8002fa2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002fa4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	400b      	ands	r3, r1
 8002faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
 8002fae:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
 8002fb0:	b12b      	cbz	r3, 8002fbe <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
 8002fb2:	4806      	ldr	r0, [pc, #24]	; (8002fcc <Vector48+0x2c>)
 8002fb4:	6843      	ldr	r3, [r0, #4]
 8002fb6:	2115      	movs	r1, #21
 8002fb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fbc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 21);
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);

  OSAL_IRQ_EPILOGUE();
 8002fc2:	f7fe bba5 	b.w	8001710 <_port_irq_epilogue>
 8002fc6:	bf00      	nop
 8002fc8:	40013c00 	.word	0x40013c00
 8002fcc:	20000f44 	.word	0x20000f44

08002fd0 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002fd0:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <Vector4C+0x28>)
/**
 * @brief   EXTI[22] interrupt handler (RTC_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector4C) {
 8002fd2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8002fd4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	400b      	ands	r3, r1
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
 8002fde:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
 8002fe0:	b12b      	cbz	r3, 8002fee <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <Vector4C+0x2c>)
 8002fe4:	6843      	ldr	r3, [r0, #4]
 8002fe6:	2116      	movs	r1, #22
 8002fe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 22);
  EXTI->PR = pr;
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);

  OSAL_IRQ_EPILOGUE();
 8002ff2:	f7fe bb8d 	b.w	8001710 <_port_irq_epilogue>
 8002ff6:	bf00      	nop
 8002ff8:	40013c00 	.word	0x40013c00
 8002ffc:	20000f44 	.word	0x20000f44

08003000 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8003000:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003002:	4d65      	ldr	r5, [pc, #404]	; (8003198 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003004:	4c65      	ldr	r4, [pc, #404]	; (800319c <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003006:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003008:	4965      	ldr	r1, [pc, #404]	; (80031a0 <_pal_lld_init+0x1a0>)
 800300a:	4a66      	ldr	r2, [pc, #408]	; (80031a4 <_pal_lld_init+0x1a4>)
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800300e:	f240 16ff 	movw	r6, #511	; 0x1ff
 8003012:	4337      	orrs	r7, r6
 8003014:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8003016:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8003018:	433e      	orrs	r6, r7
 800301a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800301c:	6845      	ldr	r5, [r0, #4]
 800301e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003020:	6885      	ldr	r5, [r0, #8]
 8003022:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8003024:	68c5      	ldr	r5, [r0, #12]
 8003026:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8003028:	6905      	ldr	r5, [r0, #16]
 800302a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800302c:	6945      	ldr	r5, [r0, #20]
 800302e:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8003030:	6985      	ldr	r5, [r0, #24]
 8003032:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003034:	6805      	ldr	r5, [r0, #0]
 8003036:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003038:	6a04      	ldr	r4, [r0, #32]
 800303a:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800303c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800303e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8003040:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003042:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8003044:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003046:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8003048:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800304a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800304c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800304e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003050:	69c4      	ldr	r4, [r0, #28]
 8003052:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003054:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003056:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003058:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800305a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800305c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800305e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8003060:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003062:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8003064:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003066:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8003068:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800306a:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800306c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800306e:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003070:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003072:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003074:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003076:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8003078:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800307a:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800307c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800307e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8003080:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003082:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8003084:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003088:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800308a:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800308c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800308e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 8003092:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8003094:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8003098:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800309a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800309e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80030a2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 80030a6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80030aa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 80030ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80030b2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 80030b6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80030b8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80030bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80030c0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 80030c4:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80030c8:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 80030cc:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 80030d0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 80030d4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 80030d8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 80030dc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 80030e0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 80030e4:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80030e8:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 80030ec:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80030f0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80030f4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80030f8:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 80030fc:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80030fe:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8003102:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8003104:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8003108:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800310a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800310e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8003110:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8003114:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8003116:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800311c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 8003120:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003122:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8003126:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800312a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800312e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8003132:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 8003136:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800313a:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800313e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 8003142:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 8003146:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800314a:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800314e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 8003152:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 8003156:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800315a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800315e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 8003162:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 8003166:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800316a:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800316e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 8003172:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 8003176:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800317a:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800317e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 8003182:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 8003186:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800318a:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800318e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOJ, &config->PJData);
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
#endif
}
 8003192:	bcf0      	pop	{r4, r5, r6, r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	40020000 	.word	0x40020000
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40020800 	.word	0x40020800
 80031a8:	40020c00 	.word	0x40020c00
 80031ac:	00000000 	.word	0x00000000

080031b0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80031b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 80031b4:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80031b8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80031bc:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80031c0:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 80031c4:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80031c6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80031ca:	f04f 0b0f 	mov.w	fp, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80031ce:	f04f 0a01 	mov.w	sl, #1
 80031d2:	e00f      	b.n	80031f4 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80031d4:	6a04      	ldr	r4, [r0, #32]
 80031d6:	ea24 0303 	bic.w	r3, r4, r3
 80031da:	431d      	orrs	r5, r3
 80031dc:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80031de:	0849      	lsrs	r1, r1, #1
 80031e0:	d039      	beq.n	8003256 <_pal_lld_setgroupmode+0xa6>
      return;
    otyper <<= 1;
 80031e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 80031e6:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 80031ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 80031ee:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 80031f2:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 80031f4:	07cb      	lsls	r3, r1, #31
 80031f6:	d5f2      	bpl.n	80031de <_pal_lld_setgroupmode+0x2e>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80031f8:	6843      	ldr	r3, [r0, #4]
 80031fa:	fa0a f407 	lsl.w	r4, sl, r7
 80031fe:	ea23 0304 	bic.w	r3, r3, r4
 8003202:	ea43 0309 	orr.w	r3, r3, r9
 8003206:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003208:	2503      	movs	r5, #3
 800320a:	007c      	lsls	r4, r7, #1
 800320c:	6883      	ldr	r3, [r0, #8]
 800320e:	fa05 f404 	lsl.w	r4, r5, r4
 8003212:	43e4      	mvns	r4, r4
 8003214:	4023      	ands	r3, r4
 8003216:	ea43 0308 	orr.w	r3, r3, r8
 800321a:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800321c:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800321e:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8003222:	4025      	ands	r5, r4
 8003224:	ea45 050c 	orr.w	r5, r5, ip
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003228:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800322a:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800322e:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003230:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8003234:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8003238:	d00f      	beq.n	800325a <_pal_lld_setgroupmode+0xaa>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800323a:	6806      	ldr	r6, [r0, #0]
 800323c:	4034      	ands	r4, r6
 800323e:	ea44 040e 	orr.w	r4, r4, lr
        if (bit < 8)
 8003242:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8003244:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 8003246:	d9c5      	bls.n	80031d4 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003248:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800324a:	ea24 0303 	bic.w	r3, r4, r3
 800324e:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 8003250:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003252:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8003254:	d1c5      	bne.n	80031e2 <_pal_lld_setgroupmode+0x32>
 8003256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 800325a:	2f07      	cmp	r7, #7
 800325c:	d80a      	bhi.n	8003274 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800325e:	6a06      	ldr	r6, [r0, #32]
 8003260:	ea26 0303 	bic.w	r3, r6, r3
 8003264:	431d      	orrs	r5, r3
 8003266:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8003268:	6803      	ldr	r3, [r0, #0]
 800326a:	401c      	ands	r4, r3
 800326c:	f044 0402 	orr.w	r4, r4, #2
 8003270:	6004      	str	r4, [r0, #0]
 8003272:	e7b4      	b.n	80031de <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003274:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003276:	ea26 0303 	bic.w	r3, r6, r3
 800327a:	431d      	orrs	r5, r3
 800327c:	6245      	str	r5, [r0, #36]	; 0x24
 800327e:	e7f3      	b.n	8003268 <_pal_lld_setgroupmode+0xb8>

08003280 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003280:	483a      	ldr	r0, [pc, #232]	; (800336c <VectorBC+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003282:	4a3b      	ldr	r2, [pc, #236]	; (8003370 <VectorBC+0xf0>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8003284:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003286:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8003288:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800328a:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800328c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003290:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003294:	4293      	cmp	r3, r2
 8003296:	d04c      	beq.n	8003332 <VectorBC+0xb2>
 8003298:	d81e      	bhi.n	80032d8 <VectorBC+0x58>
 800329a:	3a07      	subs	r2, #7
 800329c:	4293      	cmp	r3, r2
 800329e:	d03c      	beq.n	800331a <VectorBC+0x9a>
 80032a0:	3201      	adds	r2, #1
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d110      	bne.n	80032c8 <VectorBC+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80032a6:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80032a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80032aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 80032ae:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80032b0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80032ba:	6862      	ldr	r2, [r4, #4]
 80032bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d94b      	bls.n	8003360 <VectorBC+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80032c8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80032cc:	bf18      	it	ne
 80032ce:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 80032d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80032d4:	f7fe ba1c 	b.w	8001710 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80032d8:	4a26      	ldr	r2, [pc, #152]	; (8003374 <VectorBC+0xf4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d012      	beq.n	8003304 <VectorBC+0x84>
 80032de:	3202      	adds	r2, #2
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d1f1      	bne.n	80032c8 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80032e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685e      	ldr	r6, [r3, #4]
 80032ea:	b33e      	cbz	r6, 800333c <VectorBC+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80032ec:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80032ee:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80032f0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80032fa:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 80032fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8003300:	f7fe ba06 	b.w	8001710 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003304:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003306:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800330c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800330e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e7d6      	b.n	80032c8 <VectorBC+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800331a:	8c03      	ldrh	r3, [r0, #32]
 800331c:	0a1a      	lsrs	r2, r3, #8
 800331e:	d00b      	beq.n	8003338 <VectorBC+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003328:	f002 0206 	and.w	r2, r2, #6
 800332c:	4313      	orrs	r3, r2
 800332e:	6123      	str	r3, [r4, #16]
 8003330:	e7ca      	b.n	80032c8 <VectorBC+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8003332:	8c03      	ldrh	r3, [r0, #32]
 8003334:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003338:	6123      	str	r3, [r4, #16]
 800333a:	e7c5      	b.n	80032c8 <VectorBC+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003342:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800334a:	6023      	str	r3, [r4, #0]
 800334c:	2320      	movs	r3, #32
 800334e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003352:	301c      	adds	r0, #28
 8003354:	4631      	mov	r1, r6
 8003356:	f7fe f8ab 	bl	80014b0 <chThdResumeI>
 800335a:	f386 8811 	msr	BASEPRI, r6
 800335e:	e7b3      	b.n	80032c8 <VectorBC+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003366:	6023      	str	r3, [r4, #0]
 8003368:	e7ae      	b.n	80032c8 <VectorBC+0x48>
 800336a:	bf00      	nop
 800336c:	20000f4c 	.word	0x20000f4c
 8003370:	00030008 	.word	0x00030008
 8003374:	00070082 	.word	0x00070082
	...

08003380 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003380:	4833      	ldr	r0, [pc, #204]	; (8003450 <VectorC0+0xd0>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8003382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8003384:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003386:	6b07      	ldr	r7, [r0, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003388:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800338a:	683a      	ldr	r2, [r7, #0]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800338c:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800338e:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 8003392:	43db      	mvns	r3, r3
 8003394:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	f023 031f 	bic.w	r3, r3, #31
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	07db      	lsls	r3, r3, #31
 80033a2:	d4fc      	bmi.n	800339e <VectorC0+0x1e>
 80033a4:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 80033a6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80033a8:	687f      	ldr	r7, [r7, #4]
 80033aa:	233d      	movs	r3, #61	; 0x3d
 80033ac:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 80033ae:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80033b0:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	f023 031f 	bic.w	r3, r3, #31
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	f013 0301 	ands.w	r3, r3, #1
 80033c0:	d1fb      	bne.n	80033ba <VectorC0+0x3a>
 80033c2:	7a2f      	ldrb	r7, [r5, #8]
 80033c4:	686d      	ldr	r5, [r5, #4]
 80033c6:	223d      	movs	r2, #61	; 0x3d
 80033c8:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 80033ca:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 80033cc:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 80033ce:	bf48      	it	mi
 80033d0:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80033d2:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 80033d4:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80033d6:	bf44      	itt	mi
 80033d8:	f043 0302 	orrmi.w	r3, r3, #2
 80033dc:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80033de:	054a      	lsls	r2, r1, #21
 80033e0:	d50a      	bpl.n	80033f8 <VectorC0+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80033e2:	6862      	ldr	r2, [r4, #4]
 80033e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033e8:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80033ea:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80033ec:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80033f6:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80033f8:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 80033fa:	bf44      	itt	mi
 80033fc:	f043 0308 	orrmi.w	r3, r3, #8
 8003400:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8003402:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8003404:	bf44      	itt	mi
 8003406:	f043 0320 	orrmi.w	r3, r3, #32
 800340a:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800340c:	04cc      	lsls	r4, r1, #19
 800340e:	d513      	bpl.n	8003438 <VectorC0+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 8003410:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003414:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8003416:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003418:	d416      	bmi.n	8003448 <VectorC0+0xc8>
 800341a:	2320      	movs	r3, #32
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f06f 0101 	mvn.w	r1, #1
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <VectorC0+0xd4>)
 8003426:	f7fe f843 	bl	80014b0 <chThdResumeI>
 800342a:	2300      	movs	r3, #0
 800342c:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003430:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8003434:	f7fe b96c 	b.w	8001710 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003438:	0432      	lsls	r2, r6, #16
 800343a:	d405      	bmi.n	8003448 <VectorC0+0xc8>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ec      	bne.n	800341a <VectorC0+0x9a>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8003444:	f7fe b964 	b.w	8001710 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 8003448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344c:	6083      	str	r3, [r0, #8]
 800344e:	e7e4      	b.n	800341a <VectorC0+0x9a>
 8003450:	20000f4c 	.word	0x20000f4c
 8003454:	20000f68 	.word	0x20000f68
	...

08003460 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8003460:	b510      	push	{r4, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 8003462:	4c07      	ldr	r4, [pc, #28]	; (8003480 <i2c_lld_init+0x20>)
 8003464:	4620      	mov	r0, r4
 8003466:	f7fe fc2b 	bl	8001cc0 <i2cObjectInit>
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <i2c_lld_init+0x24>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 800346c:	4a06      	ldr	r2, [pc, #24]	; (8003488 <i2c_lld_init+0x28>)
 800346e:	6362      	str	r2, [r4, #52]	; 0x34
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8003470:	2100      	movs	r1, #0
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8003472:	f103 0248 	add.w	r2, r3, #72	; 0x48
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8003476:	61e1      	str	r1, [r4, #28]
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003478:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800347a:	6322      	str	r2, [r4, #48]	; 0x30
 800347c:	bd10      	pop	{r4, pc}
 800347e:	bf00      	nop
 8003480:	20000f4c 	.word	0x20000f4c
 8003484:	08008400 	.word	0x08008400
 8003488:	40005400 	.word	0x40005400
 800348c:	00000000 	.word	0x00000000

08003490 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 8003490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8003494:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <usb_lld_pump+0x1f8>)
 8003496:	497d      	ldr	r1, [pc, #500]	; (800368c <usb_lld_pump+0x1fc>)
 8003498:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 800349a:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
 800349e:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 80034a0:	b083      	sub	sp, #12
 80034a2:	4683      	mov	fp, r0
 80034a4:	2320      	movs	r3, #32
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80034ae:	9301      	str	r3, [sp, #4]
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 80034b0:	f89b 3000 	ldrb.w	r3, [fp]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d006      	beq.n	80034c6 <usb_lld_pump+0x36>
 80034b8:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 80034bc:	b963      	cbnz	r3, 80034d8 <usb_lld_pump+0x48>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 80034be:	f8da 3014 	ldr.w	r3, [sl, #20]
 80034c2:	06de      	lsls	r6, r3, #27
 80034c4:	d408      	bmi.n	80034d8 <usb_lld_pump+0x48>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 80034c6:	f8da 3018 	ldr.w	r3, [sl, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 80034ca:	9801      	ldr	r0, [sp, #4]
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	f8ca 3018 	str.w	r3, [sl, #24]
 80034d4:	f7fd ffdc 	bl	8001490 <chThdSuspendS>
 80034d8:	2300      	movs	r3, #0
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	469e      	mov	lr, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 80034e0:	f8da 3014 	ldr.w	r3, [sl, #20]
 80034e4:	f013 0310 	ands.w	r3, r3, #16
 80034e8:	d050      	beq.n	800358c <usb_lld_pump+0xfc>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 80034ea:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 80034ee:	6a1a      	ldr	r2, [r3, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80034f0:	f402 11f0 	and.w	r1, r2, #1966080	; 0x1e0000
 80034f4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80034f8:	d01e      	beq.n	8003538 <usb_lld_pump+0xa8>
 80034fa:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80034fe:	d1ef      	bne.n	80034e0 <usb_lld_pump+0x50>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003500:	f002 010f 	and.w	r1, r2, #15
 8003504:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
  sts = usbp->otg->GRXSTSP;
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8003508:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800350c:	68c9      	ldr	r1, [r1, #12]
 800350e:	6a0c      	ldr	r4, [r1, #32]
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003510:	2a00      	cmp	r2, #0
 8003512:	d0e5      	beq.n	80034e0 <usb_lld_pump+0x50>
 8003514:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 8003516:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800351a:	460b      	mov	r3, r1
 800351c:	e001      	b.n	8003522 <usb_lld_pump+0x92>
 800351e:	429a      	cmp	r2, r3
 8003520:	d0de      	beq.n	80034e0 <usb_lld_pump+0x50>
    if ((i & 3) == 0){
 8003522:	079d      	lsls	r5, r3, #30
      w = *fifop;
 8003524:	bf08      	it	eq
 8003526:	6801      	ldreq	r1, [r0, #0]
    }
    if (i < max) {
 8003528:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 800352a:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 800352e:	d8f6      	bhi.n	800351e <usb_lld_pump+0x8e>
      *buf++ = (uint8_t)w;
 8003530:	7021      	strb	r1, [r4, #0]
      w >>= 8;
 8003532:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 8003534:	3401      	adds	r4, #1
 8003536:	e7f2      	b.n	800351e <usb_lld_pump+0x8e>
 8003538:	f002 060f 	and.w	r6, r2, #15
 800353c:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8003540:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
 8003544:	68f1      	ldr	r1, [r6, #12]
 8003546:	6989      	ldr	r1, [r1, #24]
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
 8003548:	684c      	ldr	r4, [r1, #4]
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 800354a:	680d      	ldr	r5, [r1, #0]
 800354c:	6888      	ldr	r0, [r1, #8]
 800354e:	1b2d      	subs	r5, r5, r4
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003550:	b38a      	cbz	r2, 80035b6 <usb_lld_pump+0x126>
 8003552:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 8003554:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003558:	460b      	mov	r3, r1
    if ((i & 3) == 0){
 800355a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 800355c:	bf08      	it	eq
 800355e:	6821      	ldreq	r1, [r4, #0]
    }
    if (i < max) {
 8003560:	429d      	cmp	r5, r3
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 8003562:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 8003566:	d902      	bls.n	800356e <usb_lld_pump+0xde>
      *buf++ = (uint8_t)w;
 8003568:	7001      	strb	r1, [r0, #0]
      w >>= 8;
 800356a:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 800356c:	3001      	adds	r0, #1
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800356e:	429a      	cmp	r2, r3
 8003570:	d1f3      	bne.n	800355a <usb_lld_pump+0xca>
 8003572:	68f3      	ldr	r3, [r6, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	6898      	ldr	r0, [r3, #8]
 8003578:	685c      	ldr	r4, [r3, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800357a:	4410      	add	r0, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800357c:	4422      	add	r2, r4
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800357e:	6098      	str	r0, [r3, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8003580:	605a      	str	r2, [r3, #4]

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 8003582:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003586:	f013 0310 	ands.w	r3, r3, #16
 800358a:	d1ae      	bne.n	80034ea <usb_lld_pump+0x5a>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
      if (usbp->txpending & epmask) {
 800358c:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f10e 	lsl.w	r1, r1, lr
      if (usbp->txpending & epmask) {
 8003596:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8003598:	9100      	str	r1, [sp, #0]
      if (usbp->txpending & epmask) {
 800359a:	d10e      	bne.n	80035ba <usb_lld_pump+0x12a>
 800359c:	f10e 0e01 	add.w	lr, lr, #1
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80035a0:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	fa5f fe8e 	uxtb.w	lr, lr
 80035aa:	459e      	cmp	lr, r3
 80035ac:	d998      	bls.n	80034e0 <usb_lld_pump+0x50>
 80035ae:	2320      	movs	r3, #32
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	e77c      	b.n	80034b0 <usb_lld_pump+0x20>
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 80035b6:	460b      	mov	r3, r1
 80035b8:	e7df      	b.n	800357a <usb_lld_pump+0xea>
 80035ba:	2220      	movs	r2, #32
 80035bc:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 80035c0:	f8da 1008 	ldr.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 80035c4:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 80035c8:	9800      	ldr	r0, [sp, #0]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 80035ca:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 80035ce:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 80035d2:	f8ca 1008 	str.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 80035d6:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 80035da:	f383 8811 	msr	BASEPRI, r3
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80035de:	eb0b 038e 	add.w	r3, fp, lr, lsl #2
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	695f      	ldr	r7, [r3, #20]
 80035e6:	687d      	ldr	r5, [r7, #4]
 80035e8:	f8d7 c000 	ldr.w	ip, [r7]
 80035ec:	45ac      	cmp	ip, r5
 80035ee:	d947      	bls.n	8003680 <usb_lld_pump+0x1f0>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80035f0:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 80035f4:	f8b3 9010 	ldrh.w	r9, [r3, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80035f8:	eb00 184e 	add.w	r8, r0, lr, lsl #5
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80035fc:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003600:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 8003604:	454c      	cmp	r4, r9
 8003606:	bf28      	it	cs
 8003608:	464c      	movcs	r4, r9
 800360a:	b29b      	uxth	r3, r3
 800360c:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8003610:	f10e 0e01 	add.w	lr, lr, #1
 8003614:	d81f      	bhi.n	8003656 <usb_lld_pump+0x1c6>
 8003616:	68be      	ldr	r6, [r7, #8]
 8003618:	eb00 300e 	add.w	r0, r0, lr, lsl #12
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8003620:	2c04      	cmp	r4, #4
 8003622:	d907      	bls.n	8003634 <usb_lld_pump+0x1a4>
 8003624:	4623      	mov	r3, r4
 8003626:	4632      	mov	r2, r6
      break;
    }
    n -= 4;
 8003628:	3b04      	subs	r3, #4
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800362a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800362e:	6001      	str	r1, [r0, #0]
    if (n <= 4) {
 8003630:	2b04      	cmp	r3, #4
 8003632:	d8f9      	bhi.n	8003628 <usb_lld_pump+0x198>
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 8003634:	4425      	add	r5, r4
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 8003636:	4426      	add	r6, r4
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 8003638:	4565      	cmp	r5, ip
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 800363a:	60be      	str	r6, [r7, #8]
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800363c:	607d      	str	r5, [r7, #4]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800363e:	d221      	bcs.n	8003684 <usb_lld_pump+0x1f4>
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003640:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003644:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 8003648:	454c      	cmp	r4, r9
 800364a:	b29b      	uxth	r3, r3
 800364c:	bf28      	it	cs
 800364e:	464c      	movcs	r4, r9
 8003650:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8003654:	d9e2      	bls.n	800361c <usb_lld_pump+0x18c>
      return false;
 8003656:	2200      	movs	r2, #0
 8003658:	2320      	movs	r3, #32
 800365a:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800365e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	f8ca 3008 	str.w	r3, [sl, #8]
        if (!done)
 800366a:	b92a      	cbnz	r2, 8003678 <usb_lld_pump+0x1e8>
          otgp->DIEPEMPMSK |= epmask;
 800366c:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8003670:	9a00      	ldr	r2, [sp, #0]
 8003672:	431a      	orrs	r2, r3
 8003674:	f8ca 2834 	str.w	r2, [sl, #2100]	; 0x834
 8003678:	2300      	movs	r3, #0
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	e78f      	b.n	80035a0 <usb_lld_pump+0x110>
 8003680:	f10e 0e01 	add.w	lr, lr, #1
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;
 8003684:	2201      	movs	r2, #1
 8003686:	e7e7      	b.n	8003658 <usb_lld_pump+0x1c8>
 8003688:	20000c40 	.word	0x20000c40
 800368c:	080084d0 	.word	0x080084d0

08003690 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 8003690:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 8003692:	4c06      	ldr	r4, [pc, #24]	; (80036ac <usb_lld_init+0x1c>)
 8003694:	4620      	mov	r0, r4
 8003696:	f7fe fd5b 	bl	8002150 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800369a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 80036a0:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 80036a2:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 80036a4:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 80036a6:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 80036a8:	6663      	str	r3, [r4, #100]	; 0x64
 80036aa:	bd10      	pop	{r4, pc}
 80036ac:	20000f88 	.word	0x20000f88
 80036b0:	080084c0 	.word	0x080084c0
	...

080036c0 <usb_lld_start>:
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 80036c0:	7803      	ldrb	r3, [r0, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d000      	beq.n	80036c8 <usb_lld_start+0x8>
 80036c6:	4770      	bx	lr
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80036ca:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <usb_lld_start+0x108>)
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80036cc:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80036ce:	4298      	cmp	r0, r3
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 80036d0:	b083      	sub	sp, #12
 80036d2:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
 80036d4:	bf18      	it	ne
 80036d6:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80036d8:	d050      	beq.n	800377c <usb_lld_start+0xbc>
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 80036da:	2300      	movs	r3, #0

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80036dc:	21c0      	movs	r1, #192	; 0xc0
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80036de:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 80036e2:	65eb      	str	r3, [r5, #92]	; 0x5c
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 80036e4:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 80036e6:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80036ea:	6031      	str	r1, [r6, #0]
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80036ec:	63b2      	str	r2, [r6, #56]	; 0x38
 80036ee:	f7fd fc67 	bl	8000fc0 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 80036f2:	2301      	movs	r3, #1
 80036f4:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	07db      	lsls	r3, r3, #31
 80036fa:	d4fc      	bmi.n	80036f6 <usb_lld_start+0x36>
 80036fc:	2012      	movs	r0, #18
 80036fe:	f7fd fc5f 	bl	8000fc0 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(18);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8003702:	6923      	ldr	r3, [r4, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	dafc      	bge.n	8003702 <usb_lld_start+0x42>

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003708:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800370a:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800370c:	f8d3 e008 	ldr.w	lr, [r3, #8]

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 8003710:	2300      	movs	r3, #0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003712:	461a      	mov	r2, r3

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 8003714:	60b3      	str	r3, [r6, #8]
static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    otgp->ie[i].DIEPCTL = 0;
 8003716:	4619      	mov	r1, r3
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003718:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800371c:	eb07 1342 	add.w	r3, r7, r2, lsl #5

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003720:	3201      	adds	r2, #1
 8003722:	4572      	cmp	r2, lr
    otgp->ie[i].DIEPCTL = 0;
 8003724:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
 8003728:	f04f 0000 	mov.w	r0, #0
    otgp->ie[i].DIEPTSIZ = 0;
 800372c:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003730:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

    otgp->oe[i].DOEPCTL = 0;
 8003734:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 8003738:	f8c3 1b10 	str.w	r1, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800373c:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003740:	d9ec      	bls.n	800371c <usb_lld_start+0x5c>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 8003742:	686b      	ldr	r3, [r5, #4]
 8003744:	68db      	ldr	r3, [r3, #12]

    otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003746:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800374a:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 800374e:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8003752:	f8c6 0814 	str.w	r0, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8003756:	f8c6 081c 	str.w	r0, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800375a:	b163      	cbz	r3, 8003776 <usb_lld_start+0xb6>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <usb_lld_start+0x10c>)
 800375e:	61b3      	str	r3, [r6, #24]
    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 8003760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM |
                       GINTMSK_SOFM;

    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;
 8003762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003766:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 8003768:	b1f3      	cbz	r3, 80037a8 <usb_lld_start+0xe8>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800376a:	68b3      	ldr	r3, [r6, #8]
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	60b3      	str	r3, [r6, #8]
  }
}
 8003772:	b003      	add	sp, #12
 8003774:	bdf0      	pop	{r4, r5, r6, r7, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <usb_lld_start+0x110>)
 8003778:	61b3      	str	r3, [r6, #24]
 800377a:	e7f1      	b.n	8003760 <usb_lld_start+0xa0>
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <usb_lld_start+0x114>)
 800377e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003784:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	2000      	movs	r0, #0
 800378a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800378e:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8003790:	210e      	movs	r1, #14

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
      rccResetOTG_FS();
 8003792:	6158      	str	r0, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8003794:	2043      	movs	r0, #67	; 0x43
 8003796:	f7fe ffcb 	bl	8002730 <nvicEnableVector>

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <usb_lld_start+0x118>)
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <usb_lld_start+0x11c>)
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800379e:	60f2      	str	r2, [r6, #12]
 80037a0:	6d2c      	ldr	r4, [r5, #80]	; 0x50
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80037a2:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
 80037a6:	e798      	b.n	80036da <usb_lld_start+0x1a>
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <usb_lld_start+0x120>)
 80037aa:	9500      	str	r5, [sp, #0]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f44f 7106 	mov.w	r1, #536	; 0x218
 80037b2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80037b6:	f7fd fdcb 	bl	8001350 <chThdCreateI>
 80037ba:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 80037bc:	f7fd fca0 	bl	8001100 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 80037c0:	f7fd fd7e 	bl	80012c0 <chSchRescheduleS>
 80037c4:	e7d1      	b.n	800376a <usb_lld_start+0xaa>
 80037c6:	bf00      	nop
 80037c8:	20000f88 	.word	0x20000f88
 80037cc:	c0303c08 	.word	0xc0303c08
 80037d0:	c0303c00 	.word	0xc0303c00
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40001440 	.word	0x40001440
 80037dc:	02200003 	.word	0x02200003
 80037e0:	08003491 	.word	0x08003491
	...

080037f0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 80037f2:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80037f4:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80037f6:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80037f8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80037fa:	692b      	ldr	r3, [r5, #16]
 80037fc:	f013 0420 	ands.w	r4, r3, #32
 8003800:	d1fb      	bne.n	80037fa <usb_lld_reset+0xa>
 8003802:	2012      	movs	r0, #18
 8003804:	f7fd fbdc 	bl	8000fc0 <chSysPolledDelayX>
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003808:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
 800380c:	f8c5 4834 	str.w	r4, [r5, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003810:	f04f 1201 	mov.w	r2, #65537	; 0x10001

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003814:	f8de 6008 	ldr.w	r6, [lr, #8]
  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003818:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800381c:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800381e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003822:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003826:	eb05 1243 	add.w	r2, r5, r3, lsl #5
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800382a:	3301      	adds	r3, #1
 800382c:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800382e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003832:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003836:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800383a:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800383e:	d9f2      	bls.n	8003826 <usb_lld_reset+0x36>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003840:	f8de 3000 	ldr.w	r3, [lr]
 8003844:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8003846:	f8de 3000 	ldr.w	r3, [lr]
 800384a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800384c:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800384e:	2310      	movs	r3, #16
 8003850:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8003852:	6913      	ldr	r3, [r2, #16]
 8003854:	f013 0410 	ands.w	r4, r3, #16
 8003858:	d1fb      	bne.n	8003852 <usb_lld_reset+0x62>
 800385a:	2012      	movs	r0, #18
 800385c:	f7fd fbb0 	bl	8000fc0 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003860:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003864:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <usb_lld_reset+0xb8>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8003866:	4811      	ldr	r0, [pc, #68]	; (80038ac <usb_lld_reset+0xbc>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003868:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800386c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003870:	69ab      	ldr	r3, [r5, #24]
 8003872:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003876:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800387a:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800387c:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800387e:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8003882:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8003886:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 8003888:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800388c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 8003890:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8003894:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8003898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800389a:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800389e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 80038a2:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80038a4:	62ab      	str	r3, [r5, #40]	; 0x28
 80038a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a8:	10008040 	.word	0x10008040
 80038ac:	080084e0 	.word	0x080084e0

080038b0 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80038b0:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80038b2:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 80038b6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80038ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038be:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80038c2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 80038c6:	4770      	bx	lr
	...

080038d0 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80038d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d4:	fa0f f881 	sxth.w	r8, r1
 80038d8:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 80038dc:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	f002 0203 	and.w	r2, r2, #3
 80038e6:	2a02      	cmp	r2, #2
 80038e8:	d05e      	beq.n	80039a8 <usb_lld_init_endpoint+0xd8>
 80038ea:	2a03      	cmp	r2, #3
 80038ec:	d05e      	beq.n	80039ac <usb_lld_init_endpoint+0xdc>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 80038ee:	4e4c      	ldr	r6, [pc, #304]	; (8003a20 <usb_lld_init_endpoint+0x150>)
 80038f0:	494c      	ldr	r1, [pc, #304]	; (8003a24 <usb_lld_init_endpoint+0x154>)
 80038f2:	2a01      	cmp	r2, #1
 80038f4:	bf18      	it	ne
 80038f6:	460e      	movne	r6, r1
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 80038f8:	6d04      	ldr	r4, [r0, #80]	; 0x50
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
  if (usbp->epc[ep]->out_state != NULL) {
 80038fa:	6999      	ldr	r1, [r3, #24]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 80038fc:	016a      	lsls	r2, r5, #5
 80038fe:	eb04 0e02 	add.w	lr, r4, r2
 8003902:	f04f 0c00 	mov.w	ip, #0
 8003906:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_state != NULL) {
 800390a:	2900      	cmp	r1, #0
 800390c:	d073      	beq.n	80039f6 <usb_lld_init_endpoint+0x126>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 800390e:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8003912:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8003916:	0149      	lsls	r1, r1, #5
 8003918:	ea4e 0e06 	orr.w	lr, lr, r6
 800391c:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8003920:	f105 0c10 	add.w	ip, r5, #16
 8003924:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8003928:	f04f 0e01 	mov.w	lr, #1
 800392c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003930:	ea4e 0101 	orr.w	r1, lr, r1
 8003934:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 8003938:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_state != NULL) {
 800393a:	6959      	ldr	r1, [r3, #20]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800393c:	f04f 0e00 	mov.w	lr, #0
 8003940:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8003944:	2900      	cmp	r1, #0
 8003946:	d033      	beq.n	80039b0 <usb_lld_init_endpoint+0xe0>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 8003948:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800394a:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 800394c:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800394e:	ea4f 0392 	mov.w	r3, r2, lsr #2
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8003952:	6d82      	ldr	r2, [r0, #88]	; 0x58
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 8003954:	bf88      	it	hi
 8003956:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003958:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800395c:	eb03 0e02 	add.w	lr, r3, r2
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003960:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003964:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003968:	01aa      	lsls	r2, r5, #6
 800396a:	f042 0220 	orr.w	r2, r2, #32
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800396e:	f8c0 e058 	str.w	lr, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003972:	604b      	str	r3, [r1, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003974:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003976:	6923      	ldr	r3, [r4, #16]
 8003978:	069a      	lsls	r2, r3, #26
 800397a:	d4fc      	bmi.n	8003976 <usb_lld_init_endpoint+0xa6>
 800397c:	2012      	movs	r0, #18
 800397e:	f7fd fb1f 	bl	8000fc0 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8003982:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 8003984:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8003986:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800398a:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800398e:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8003990:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8003992:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8003994:	2101      	movs	r1, #1
 8003996:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 800399a:	fa01 f505 	lsl.w	r5, r1, r5
 800399e:	431d      	orrs	r5, r3
 80039a0:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
 80039a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 80039a8:	4e1f      	ldr	r6, [pc, #124]	; (8003a28 <usb_lld_init_endpoint+0x158>)
    break;
 80039aa:	e7a5      	b.n	80038f8 <usb_lld_init_endpoint+0x28>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 80039ac:	4e1f      	ldr	r6, [pc, #124]	; (8003a2c <usb_lld_init_endpoint+0x15c>)
    break;
 80039ae:	e7a3      	b.n	80038f8 <usb_lld_init_endpoint+0x28>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80039b0:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 80039b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80039b8:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80039ba:	491d      	ldr	r1, [pc, #116]	; (8003a30 <usb_lld_init_endpoint+0x160>)
 80039bc:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80039be:	f043 0320 	orr.w	r3, r3, #32
 80039c2:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	069b      	lsls	r3, r3, #26
 80039c8:	d4fc      	bmi.n	80039c4 <usb_lld_init_endpoint+0xf4>
 80039ca:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 80039ce:	2012      	movs	r0, #18
 80039d0:	f7fd faf6 	bl	8000fc0 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 80039d4:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 80039d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039dc:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 80039e0:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 80039e4:	2201      	movs	r2, #1
 80039e6:	fa02 f505 	lsl.w	r5, r2, r5
 80039ea:	ea23 0305 	bic.w	r3, r3, r5
 80039ee:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 80039f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039f6:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80039fa:	f105 0910 	add.w	r9, r5, #16
  if (usbp->epc[ep]->out_state != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80039fe:	f8d1 cb00 	ldr.w	ip, [r1, #2816]	; 0xb00
 8003a02:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8003a06:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8003a0a:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8003a0e:	f04f 0e01 	mov.w	lr, #1
 8003a12:	fa0e fe09 	lsl.w	lr, lr, r9
 8003a16:	ea21 010e 	bic.w	r1, r1, lr
 8003a1a:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 8003a1e:	e78b      	b.n	8003938 <usb_lld_init_endpoint+0x68>
 8003a20:	10048000 	.word	0x10048000
 8003a24:	10008000 	.word	0x10008000
 8003a28:	10088000 	.word	0x10088000
 8003a2c:	100c8000 	.word	0x100c8000
 8003a30:	02000400 	.word	0x02000400
	...

08003a40 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 8003a40:	3158      	adds	r1, #88	; 0x58
 8003a42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a44:	0149      	lsls	r1, r1, #5
 8003a46:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8003a48:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003a4c:	d004      	beq.n	8003a58 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 8003a4e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8003a52:	bf14      	ite	ne
 8003a54:	2001      	movne	r0, #1
 8003a56:	2002      	moveq	r0, #2
}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	0000      	movs	r0, r0
	...

08003a60 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 8003a60:	3148      	adds	r1, #72	; 0x48
 8003a62:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a64:	0149      	lsls	r1, r1, #5
 8003a66:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8003a68:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003a6c:	d004      	beq.n	8003a78 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 8003a6e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8003a72:	bf14      	ite	ne
 8003a74:	2001      	movne	r0, #1
 8003a76:	2002      	moveq	r0, #2
}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	0000      	movs	r0, r0
	...

08003a80 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8003a80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003a84:	68cb      	ldr	r3, [r1, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	6053      	str	r3, [r2, #4]
 8003a8e:	6011      	str	r1, [r2, #0]
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
	...

08003aa0 <usb_lld_start_out>:
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003aa0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8003aa4:	b430      	push	{r4, r5}
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003aa6:	68dc      	ldr	r4, [r3, #12]
 8003aa8:	69a2      	ldr	r2, [r4, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	60d3      	str	r3, [r2, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8003aae:	b909      	cbnz	r1, 8003ab4 <usb_lld_start_out+0x14>
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d822      	bhi.n	8003afa <usb_lld_start_out+0x5a>
 8003ab4:	1e5a      	subs	r2, r3, #1
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8003ab6:	8a63      	ldrh	r3, [r4, #18]
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003ab8:	6d00      	ldr	r0, [r0, #80]	; 0x50
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003aba:	6824      	ldr	r4, [r4, #0]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8003abc:	441a      	add	r2, r3
 8003abe:	fbb2 f2f3 	udiv	r2, r2, r3
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	3303      	adds	r3, #3
 8003ac8:	f023 0303 	bic.w	r3, r3, #3
 8003acc:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8003ad0:	eb00 1541 	add.w	r5, r0, r1, lsl #5
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003ad4:	f004 0203 	and.w	r2, r4, #3
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003ad8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003adc:	2a01      	cmp	r2, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003ade:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003ae2:	d00e      	beq.n	8003b02 <usb_lld_start_out+0x62>
 8003ae4:	b209      	sxth	r1, r1
 8003ae6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
}
 8003aea:	bc30      	pop	{r4, r5}
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8003aec:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003af0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003af4:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8003af8:	4770      	bx	lr
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;
 8003afa:	2340      	movs	r3, #64	; 0x40
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	223f      	movs	r2, #63	; 0x3f
 8003b00:	e7d9      	b.n	8003ab6 <usb_lld_start_out+0x16>
 8003b02:	b209      	sxth	r1, r1
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
    /* Odd/even bit toggling for isochronous endpoint.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003b04:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003b08:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8003b0c:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8003b10:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003b14:	bf14      	ite	ne
 8003b16:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8003b1a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8003b1e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8003b22:	e7e0      	b.n	8003ae6 <usb_lld_start_out+0x46>
	...

08003b30 <otg_epout_handler.constprop.9>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8003b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8003b34:	4d24      	ldr	r5, [pc, #144]	; (8003bc8 <otg_epout_handler.constprop.9+0x98>)
 8003b36:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003b38:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8003b3c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003b3e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 8003b42:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003b46:	0720      	lsls	r0, r4, #28
 8003b48:	d503      	bpl.n	8003b52 <otg_epout_handler.constprop.9+0x22>
 8003b4a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003b4e:	0719      	lsls	r1, r3, #28
 8003b50:	d431      	bmi.n	8003bb6 <otg_epout_handler.constprop.9+0x86>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003b52:	07e2      	lsls	r2, r4, #31
 8003b54:	d51b      	bpl.n	8003b8e <otg_epout_handler.constprop.9+0x5e>
 8003b56:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003b5a:	07db      	lsls	r3, r3, #31
 8003b5c:	d517      	bpl.n	8003b8e <otg_epout_handler.constprop.9+0x5e>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003b5e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	6991      	ldr	r1, [r2, #24]

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8003b66:	8a50      	ldrh	r0, [r2, #18]
 8003b68:	684c      	ldr	r4, [r1, #4]
 8003b6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8003b6e:	fb00 4413 	mls	r4, r0, r3, r4
 8003b72:	b174      	cbz	r4, 8003b92 <otg_epout_handler.constprop.9+0x62>
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8003b74:	8969      	ldrh	r1, [r5, #10]
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	40b3      	lsls	r3, r6
 8003b7c:	ea21 0303 	bic.w	r3, r1, r3
 8003b80:	816b      	strh	r3, [r5, #10]
 8003b82:	b122      	cbz	r2, 8003b8e <otg_epout_handler.constprop.9+0x5e>
 8003b84:	4631      	mov	r1, r6
 8003b86:	4810      	ldr	r0, [pc, #64]	; (8003bc8 <otg_epout_handler.constprop.9+0x98>)
    }
  }
}
 8003b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8003b8c:	4710      	bx	r2
 8003b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
        (osp->rxsize < osp->totsize)) {
 8003b92:	6808      	ldr	r0, [r1, #0]
 8003b94:	68cb      	ldr	r3, [r1, #12]
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8003b96:	4298      	cmp	r0, r3
 8003b98:	d2ec      	bcs.n	8003b74 <otg_epout_handler.constprop.9+0x44>
        (osp->rxsize < osp->totsize)) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 8003b9a:	1a1b      	subs	r3, r3, r0
      osp->rxcnt  = 0;
 8003b9c:	e881 0018 	stmia.w	r1, {r3, r4}
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_out(usbp, ep);
 8003ba6:	4808      	ldr	r0, [pc, #32]	; (8003bc8 <otg_epout_handler.constprop.9+0x98>)
 8003ba8:	4631      	mov	r1, r6
 8003baa:	f7ff ff79 	bl	8003aa0 <usb_lld_start_out>
 8003bae:	f384 8811 	msr	BASEPRI, r4
 8003bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003bb6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8003bba:	4631      	mov	r1, r6
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4798      	blx	r3
 8003bc4:	e7c5      	b.n	8003b52 <otg_epout_handler.constprop.9+0x22>
 8003bc6:	bf00      	nop
 8003bc8:	20000f88 	.word	0x20000f88
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003bd0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8003bd4:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003bd6:	68dc      	ldr	r4, [r3, #12]
 8003bd8:	6965      	ldr	r5, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8003bda:	682b      	ldr	r3, [r5, #0]
 8003bdc:	60eb      	str	r3, [r5, #12]
  if (isp->txsize == 0) {
 8003bde:	b9f3      	cbnz	r3, 8003c1e <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003be0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003be2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003be6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003bea:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d026      	beq.n	8003c46 <usb_lld_start_in+0x76>
 8003bf8:	b20b      	sxth	r3, r1
 8003bfa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003bfe:	2201      	movs	r2, #1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003c00:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003c04:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003c08:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003c0c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003c10:	fa02 f101 	lsl.w	r1, r2, r1
 8003c14:	4319      	orrs	r1, r3
 8003c16:	f8c0 1834 	str.w	r1, [r0, #2100]	; 0x834
}
 8003c1a:	bcf0      	pop	{r4, r5, r6, r7}
 8003c1c:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003c1e:	b319      	cbz	r1, 8003c68 <usb_lld_start_in+0x98>
 8003c20:	1e5d      	subs	r5, r3, #1
 8003c22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003c26:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003c28:	8a26      	ldrh	r6, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003c2a:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8003c2e:	1973      	adds	r3, r6, r5
 8003c30:	fbb3 f3f6 	udiv	r3, r3, r6
 8003c34:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 8003c38:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d1d8      	bne.n	8003bf8 <usb_lld_start_in+0x28>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003c46:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003c4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c4e:	b20b      	sxth	r3, r1
 8003c50:	eb00 1443 	add.w	r4, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003c54:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 8003c58:	bf14      	ite	ne
 8003c5a:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003c5e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8003c62:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
 8003c66:	e7c8      	b.n	8003bfa <usb_lld_start_in+0x2a>
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d9d9      	bls.n	8003c20 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 8003c6c:	2340      	movs	r3, #64	; 0x40
 8003c6e:	602b      	str	r3, [r5, #0]
 8003c70:	4a01      	ldr	r2, [pc, #4]	; (8003c78 <usb_lld_start_in+0xa8>)
 8003c72:	253f      	movs	r5, #63	; 0x3f
 8003c74:	e7d7      	b.n	8003c26 <usb_lld_start_in+0x56>
 8003c76:	bf00      	nop
 8003c78:	20000040 	.word	0x20000040
 8003c7c:	00000000 	.word	0x00000000

08003c80 <otg_epin_handler.constprop.10>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8003c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8003c84:	4e29      	ldr	r6, [pc, #164]	; (8003d2c <otg_epin_handler.constprop.10+0xac>)
 8003c86:	6d35      	ldr	r5, [r6, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003c88:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8003c8c:	4607      	mov	r7, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003c8e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 8003c92:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003c96:	07e1      	lsls	r1, r4, #31
 8003c98:	d503      	bpl.n	8003ca2 <otg_epin_handler.constprop.10+0x22>
 8003c9a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 8003c9e:	07da      	lsls	r2, r3, #31
 8003ca0:	d409      	bmi.n	8003cb6 <otg_epin_handler.constprop.10+0x36>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8003ca2:	0623      	lsls	r3, r4, #24
 8003ca4:	d505      	bpl.n	8003cb2 <otg_epin_handler.constprop.10+0x32>
 8003ca6:	2101      	movs	r1, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003ca8:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8003cac:	40b9      	lsls	r1, r7
 8003cae:	4219      	tst	r1, r3
 8003cb0:	d118      	bne.n	8003ce4 <otg_epin_handler.constprop.10+0x64>
 8003cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003cb6:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 8003cba:	68d9      	ldr	r1, [r3, #12]
 8003cbc:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	4290      	cmp	r0, r2
 8003cc4:	d323      	bcc.n	8003d0e <otg_epin_handler.constprop.10+0x8e>
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8003cc6:	8932      	ldrh	r2, [r6, #8]
 8003cc8:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	40bb      	lsls	r3, r7
 8003cd0:	ea22 0303 	bic.w	r3, r2, r3
 8003cd4:	8133      	strh	r3, [r6, #8]
 8003cd6:	f1b8 0f00 	cmp.w	r8, #0
 8003cda:	d0e2      	beq.n	8003ca2 <otg_epin_handler.constprop.10+0x22>
 8003cdc:	4639      	mov	r1, r7
 8003cde:	4630      	mov	r0, r6
 8003ce0:	47c0      	blx	r8
 8003ce2:	e7de      	b.n	8003ca2 <otg_epin_handler.constprop.10+0x22>
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8003cea:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8003cee:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003cf0:	480f      	ldr	r0, [pc, #60]	; (8003d30 <otg_epin_handler.constprop.10+0xb0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8003cf2:	ea22 0201 	bic.w	r2, r2, r1
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8003cf6:	430b      	orrs	r3, r1
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8003cf8:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
 8003cfc:	2100      	movs	r1, #0
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8003cfe:	65f3      	str	r3, [r6, #92]	; 0x5c
 8003d00:	f7fd fbd6 	bl	80014b0 <chThdResumeI>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 8003d0e:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8003d10:	f04f 0800 	mov.w	r8, #0
 8003d14:	e883 0104 	stmia.w	r3, {r2, r8}
 8003d18:	2320      	movs	r3, #32
 8003d1a:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_in(usbp, ep);
 8003d1e:	4639      	mov	r1, r7
 8003d20:	4630      	mov	r0, r6
 8003d22:	f7ff ff55 	bl	8003bd0 <usb_lld_start_in>
 8003d26:	f388 8811 	msr	BASEPRI, r8
 8003d2a:	e7ba      	b.n	8003ca2 <otg_epin_handler.constprop.10+0x22>
 8003d2c:	20000f88 	.word	0x20000f88
 8003d30:	20000fe8 	.word	0x20000fe8
	...

08003d40 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8003d44:	4e95      	ldr	r6, [pc, #596]	; (8003f9c <Vector14C+0x25c>)
 8003d46:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 8003d48:	697d      	ldr	r5, [r7, #20]
  sts &= otgp->GINTMSK;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	401d      	ands	r5, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8003d4e:	f415 5980 	ands.w	r9, r5, #4096	; 0x1000
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 8003d52:	617d      	str	r5, [r7, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8003d54:	f040 80c8 	bne.w	8003ee8 <Vector14C+0x1a8>
    /* Preventing execution of more handlers, the core has been reset.*/
    return;
  }

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	db55      	blt.n	8003e08 <Vector14C+0xc8>

    _usb_wakeup(usbp);
  }

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {
 8003d5c:	052b      	lsls	r3, r5, #20
 8003d5e:	d44d      	bmi.n	8003dfc <Vector14C+0xbc>
    /* Default suspend action.*/
    _usb_suspend(usbp);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 8003d60:	04ac      	lsls	r4, r5, #18
 8003d62:	d50c      	bpl.n	8003d7e <Vector14C+0x3e>
    /* Full or High speed timing selection.*/
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8003d64:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003d68:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003d72:	bf0c      	ite	eq
 8003d74:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
                      GUSBCFG_TRDT(TRDT_VALUE_HS);
    }
    else {
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8003d78:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8003d7c:	60fb      	str	r3, [r7, #12]
                      GUSBCFG_TRDT(TRDT_VALUE_FS);
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 8003d7e:	0728      	lsls	r0, r5, #28
 8003d80:	d504      	bpl.n	8003d8c <Vector14C+0x4c>
    _usb_isr_invoke_sof_cb(usbp);
 8003d82:	6873      	ldr	r3, [r6, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	b10b      	cbz	r3, 8003d8c <Vector14C+0x4c>
 8003d88:	4884      	ldr	r0, [pc, #528]	; (8003f9c <Vector14C+0x25c>)
 8003d8a:	4798      	blx	r3
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 8003d8c:	02ea      	lsls	r2, r5, #11
 8003d8e:	d44f      	bmi.n	8003e30 <Vector14C+0xf0>
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 8003d90:	02aa      	lsls	r2, r5, #10
 8003d92:	f100 80b9 	bmi.w	8003f08 <Vector14C+0x1c8>
    otg_isoc_out_failed_handler(usbp);
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 8003d96:	06eb      	lsls	r3, r5, #27
 8003d98:	d421      	bmi.n	8003dde <Vector14C+0x9e>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 8003d9a:	036e      	lsls	r6, r5, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 8003d9c:	f8d7 4818 	ldr.w	r4, [r7, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 8003da0:	d50b      	bpl.n	8003dba <Vector14C+0x7a>
    if (src & (1 << 0))
 8003da2:	07e0      	lsls	r0, r4, #31
 8003da4:	f100 80f5 	bmi.w	8003f92 <Vector14C+0x252>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 8003da8:	07a1      	lsls	r1, r4, #30
 8003daa:	f100 80ee 	bmi.w	8003f8a <Vector14C+0x24a>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 8003dae:	0762      	lsls	r2, r4, #29
 8003db0:	f100 80e7 	bmi.w	8003f82 <Vector14C+0x242>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 8003db4:	0723      	lsls	r3, r4, #28
 8003db6:	f100 80d1 	bmi.w	8003f5c <Vector14C+0x21c>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8003dba:	032f      	lsls	r7, r5, #12
 8003dbc:	d50b      	bpl.n	8003dd6 <Vector14C+0x96>
    if (src & (1 << 16))
 8003dbe:	03e6      	lsls	r6, r4, #15
 8003dc0:	f100 80db 	bmi.w	8003f7a <Vector14C+0x23a>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 8003dc4:	03a5      	lsls	r5, r4, #14
 8003dc6:	f100 80d4 	bmi.w	8003f72 <Vector14C+0x232>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 8003dca:	0360      	lsls	r0, r4, #13
 8003dcc:	f100 80cd 	bmi.w	8003f6a <Vector14C+0x22a>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 8003dd0:	0321      	lsls	r1, r4, #12
 8003dd2:	f100 8092 	bmi.w	8003efa <Vector14C+0x1ba>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8003dd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8003dda:	f7fd bc99 	b.w	8001710 <_port_irq_epilogue>
 8003dde:	2320      	movs	r3, #32
 8003de0:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	486e      	ldr	r0, [pc, #440]	; (8003fa0 <Vector14C+0x260>)
 8003de8:	f023 0310 	bic.w	r3, r3, #16
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	2100      	movs	r1, #0
 8003df0:	f7fd fb5e 	bl	80014b0 <chThdResumeI>
 8003df4:	2300      	movs	r3, #0
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	e7ce      	b.n	8003d9a <Vector14C+0x5a>

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 8003dfc:	2300      	movs	r3, #0

    /* Default suspend action.*/
    _usb_suspend(usbp);
 8003dfe:	4867      	ldr	r0, [pc, #412]	; (8003f9c <Vector14C+0x25c>)

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 8003e00:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default suspend action.*/
    _usb_suspend(usbp);
 8003e02:	f7fe fa35 	bl	8002270 <_usb_suspend>
 8003e06:	e7ab      	b.n	8003d60 <Vector14C+0x20>

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
    /* If clocks are gated off, turn them back on (may be the case if
       coming out of suspend mode).*/
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8003e08:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 8003e0c:	079a      	lsls	r2, r3, #30
 8003e0e:	d005      	beq.n	8003e1c <Vector14C+0xdc>
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8003e10:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 8003e14:	f023 0303 	bic.w	r3, r3, #3
 8003e18:	f8c7 3e00 	str.w	r3, [r7, #3584]	; 0xe00
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 8003e1c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 8003e20:	485e      	ldr	r0, [pc, #376]	; (8003f9c <Vector14C+0x25c>)
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 8003e2a:	f7fe fa29 	bl	8002280 <_usb_wakeup>
 8003e2e:	e795      	b.n	8003d5c <Vector14C+0x1c>
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8003e30:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 8003e34:	2400      	movs	r4, #0
 8003e36:	e007      	b.n	8003e48 <Vector14C+0x108>

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003e38:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8003e3a:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <Vector14C+0x25c>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	3401      	adds	r4, #1
 8003e40:	b2e4      	uxtb	r4, r4
 8003e42:	429c      	cmp	r4, r3
 8003e44:	46a1      	mov	r9, r4
 8003e46:	d849      	bhi.n	8003edc <Vector14C+0x19c>
 8003e48:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8003e4c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003e50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e58:	d1ee      	bne.n	8003e38 <Vector14C+0xf8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8003e5a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	daea      	bge.n	8003e38 <Vector14C+0xf8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
      /* Endpoint enabled -> ISOC IN transfer failed */
      /* Disable endpoint */
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8003e62:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003e66:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8003e6a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8003e6e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dbfb      	blt.n	8003e6e <Vector14C+0x12e>
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003e76:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8003e7a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8003e7c:	f049 0320 	orr.w	r3, r9, #32
 8003e80:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003e82:	6913      	ldr	r3, [r2, #16]
 8003e84:	0699      	lsls	r1, r3, #26
 8003e86:	d4fc      	bmi.n	8003e82 <Vector14C+0x142>
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 8003e88:	2012      	movs	r0, #18
 8003e8a:	f7fd f899 	bl	8000fc0 <chSysPolledDelayX>

      /* Flush FIFO */
      otg_txfifo_flush(usbp, ep);

      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);
 8003e8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003e92:	f04f 0901 	mov.w	r9, #1
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	8933      	ldrh	r3, [r6, #8]
 8003e9a:	6892      	ldr	r2, [r2, #8]
 8003e9c:	fa09 f904 	lsl.w	r9, r9, r4
 8003ea0:	ea6f 0a09 	mvn.w	sl, r9
 8003ea4:	ea0a 0303 	and.w	r3, sl, r3
 8003ea8:	8133      	strh	r3, [r6, #8]
 8003eaa:	b112      	cbz	r2, 8003eb2 <Vector14C+0x172>
 8003eac:	4621      	mov	r1, r4
 8003eae:	483b      	ldr	r0, [pc, #236]	; (8003f9c <Vector14C+0x25c>)
 8003eb0:	4790      	blx	r2
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	f383 8811 	msr	BASEPRI, r3

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8003eb8:	f8d8 2834 	ldr.w	r2, [r8, #2100]	; 0x834
      usbp->txpending |= (1 << ep);
 8003ebc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003ebe:	4838      	ldr	r0, [pc, #224]	; (8003fa0 <Vector14C+0x260>)
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8003ec0:	ea0a 0202 	and.w	r2, sl, r2
      usbp->txpending |= (1 << ep);
 8003ec4:	ea43 0309 	orr.w	r3, r3, r9
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8003ec8:	f8c8 2834 	str.w	r2, [r8, #2100]	; 0x834
 8003ecc:	2100      	movs	r1, #0
      usbp->txpending |= (1 << ep);
 8003ece:	65f3      	str	r3, [r6, #92]	; 0x5c
 8003ed0:	f7fd faee 	bl	80014b0 <chThdResumeI>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	e7ad      	b.n	8003e38 <Vector14C+0xf8>
  if (sts & GINTSTS_IISOIXFR) {
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 8003edc:	02ab      	lsls	r3, r5, #10
 8003ede:	f57f af5a 	bpl.w	8003d96 <Vector14C+0x56>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8003ee2:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
 8003ee6:	e011      	b.n	8003f0c <Vector14C+0x1cc>

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 8003ee8:	2300      	movs	r3, #0

    /* Default reset action.*/
    _usb_reset(usbp);
 8003eea:	4630      	mov	r0, r6

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 8003eec:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default reset action.*/
    _usb_reset(usbp);
 8003eee:	f7fe f99f 	bl	8002230 <_usb_reset>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8003ef2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8003ef6:	f7fd bc0b 	b.w	8001710 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 8003efa:	2003      	movs	r0, #3
 8003efc:	f7ff fe18 	bl	8003b30 <otg_epout_handler.constprop.9>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8003f00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8003f04:	f7fd bc04 	b.w	8001710 <_port_irq_epilogue>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8003f08:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8003f0c:	2400      	movs	r4, #0
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 8003f0e:	f04f 0901 	mov.w	r9, #1
 8003f12:	e006      	b.n	8003f22 <Vector14C+0x1e2>
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003f14:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8003f16:	3401      	adds	r4, #1
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	b2e4      	uxtb	r4, r4
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	f63f af3a 	bhi.w	8003d96 <Vector14C+0x56>
 8003f22:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8003f26:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003f2a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f32:	d1ef      	bne.n	8003f14 <Vector14C+0x1d4>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8003f34:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	daeb      	bge.n	8003f14 <Vector14C+0x1d4>
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 8003f3c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 8003f40:	8973      	ldrh	r3, [r6, #10]
 8003f42:	68d2      	ldr	r2, [r2, #12]
 8003f44:	4815      	ldr	r0, [pc, #84]	; (8003f9c <Vector14C+0x25c>)
 8003f46:	68d2      	ldr	r2, [r2, #12]
 8003f48:	fa09 f104 	lsl.w	r1, r9, r4
 8003f4c:	ea23 0301 	bic.w	r3, r3, r1
 8003f50:	8173      	strh	r3, [r6, #10]
 8003f52:	4621      	mov	r1, r4
 8003f54:	2a00      	cmp	r2, #0
 8003f56:	d0dd      	beq.n	8003f14 <Vector14C+0x1d4>
 8003f58:	4790      	blx	r2
 8003f5a:	e7db      	b.n	8003f14 <Vector14C+0x1d4>
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
      otg_epin_handler(usbp, 3);
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	f7ff fe8f 	bl	8003c80 <otg_epin_handler.constprop.10>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8003f62:	032f      	lsls	r7, r5, #12
 8003f64:	f57f af37 	bpl.w	8003dd6 <Vector14C+0x96>
 8003f68:	e729      	b.n	8003dbe <Vector14C+0x7e>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 8003f6a:	2002      	movs	r0, #2
 8003f6c:	f7ff fde0 	bl	8003b30 <otg_epout_handler.constprop.9>
 8003f70:	e72e      	b.n	8003dd0 <Vector14C+0x90>
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f7ff fddc 	bl	8003b30 <otg_epout_handler.constprop.9>
 8003f78:	e727      	b.n	8003dca <Vector14C+0x8a>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7ff fdd8 	bl	8003b30 <otg_epout_handler.constprop.9>
 8003f80:	e720      	b.n	8003dc4 <Vector14C+0x84>
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
 8003f82:	2002      	movs	r0, #2
 8003f84:	f7ff fe7c 	bl	8003c80 <otg_epin_handler.constprop.10>
 8003f88:	e714      	b.n	8003db4 <Vector14C+0x74>
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7ff fe78 	bl	8003c80 <otg_epin_handler.constprop.10>
 8003f90:	e70d      	b.n	8003dae <Vector14C+0x6e>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7ff fe74 	bl	8003c80 <otg_epin_handler.constprop.10>
 8003f98:	e706      	b.n	8003da8 <Vector14C+0x68>
 8003f9a:	bf00      	nop
 8003f9c:	20000f88 	.word	0x20000f88
 8003fa0:	20000fe8 	.word	0x20000fe8
	...

08003fb0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8003fb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003fb2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8003fb6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fbe:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8003fc2:	4770      	bx	lr
	...

08003fd0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8003fd0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003fd2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8003fd6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8003fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fde:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8003fe2:	4770      	bx	lr
	...

08003ff0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8003ff0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003ff2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8003ff6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003ffa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ffe:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004002:	4770      	bx	lr
	...

08004010 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8004010:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004012:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8004016:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800401a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800401e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004022:	4770      	bx	lr
	...

08004030 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004030:	f011 0f0c 	tst.w	r1, #12
 8004034:	d100      	bne.n	8004038 <spi_lld_serve_tx_interrupt+0x8>
 8004036:	4770      	bx	lr
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <spi_lld_serve_tx_interrupt+0x10>)
 800403a:	f7fc bf89 	b.w	8000f50 <chSysHalt>
 800403e:	bf00      	nop
 8004040:	08008510 	.word	0x08008510
	...

08004050 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004050:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004058:	d134      	bne.n	80040c4 <spi_lld_serve_rx_interrupt+0x74>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800405a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800405c:	6802      	ldr	r2, [r0, #0]
 800405e:	6813      	ldr	r3, [r2, #0]
 8004060:	f023 031f 	bic.w	r3, r3, #31
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	07d9      	lsls	r1, r3, #31
 800406a:	d4fc      	bmi.n	8004066 <spi_lld_serve_rx_interrupt+0x16>
 800406c:	7a05      	ldrb	r5, [r0, #8]
  dmaStreamDisable(spip->dmarx);
 800406e:	6a21      	ldr	r1, [r4, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004070:	6840      	ldr	r0, [r0, #4]
  dmaStreamDisable(spip->dmarx);
 8004072:	680a      	ldr	r2, [r1, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004074:	233d      	movs	r3, #61	; 0x3d
 8004076:	40ab      	lsls	r3, r5
 8004078:	6003      	str	r3, [r0, #0]
  dmaStreamDisable(spip->dmarx);
 800407a:	6813      	ldr	r3, [r2, #0]
 800407c:	f023 031f 	bic.w	r3, r3, #31
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	07db      	lsls	r3, r3, #31
 8004086:	d4fc      	bmi.n	8004082 <spi_lld_serve_rx_interrupt+0x32>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004088:	6863      	ldr	r3, [r4, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 800408a:	7a08      	ldrb	r0, [r1, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 800408c:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 800408e:	6849      	ldr	r1, [r1, #4]
 8004090:	233d      	movs	r3, #61	; 0x3d
 8004092:	4083      	lsls	r3, r0
 8004094:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004096:	b192      	cbz	r2, 80040be <spi_lld_serve_rx_interrupt+0x6e>
 8004098:	2304      	movs	r3, #4
 800409a:	7023      	strb	r3, [r4, #0]
 800409c:	4620      	mov	r0, r4
 800409e:	4790      	blx	r2
 80040a0:	7823      	ldrb	r3, [r4, #0]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d00b      	beq.n	80040be <spi_lld_serve_rx_interrupt+0x6e>
 80040a6:	2320      	movs	r3, #32
 80040a8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80040ac:	2100      	movs	r1, #0
 80040ae:	f104 0008 	add.w	r0, r4, #8
 80040b2:	f7fd f9fd 	bl	80014b0 <chThdResumeI>
 80040b6:	2300      	movs	r3, #0
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	bd38      	pop	{r3, r4, r5, pc}
 80040be:	2302      	movs	r3, #2
 80040c0:	7023      	strb	r3, [r4, #0]
 80040c2:	e7f0      	b.n	80040a6 <spi_lld_serve_rx_interrupt+0x56>
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 80040c4:	4801      	ldr	r0, [pc, #4]	; (80040cc <spi_lld_serve_rx_interrupt+0x7c>)
 80040c6:	f7fc ff43 	bl	8000f50 <chSysHalt>
 80040ca:	e7c6      	b.n	800405a <spi_lld_serve_rx_interrupt+0xa>
 80040cc:	08008510 	.word	0x08008510

080040d0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 80040d0:	b510      	push	{r4, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80040d2:	4c0a      	ldr	r4, [pc, #40]	; (80040fc <spi_lld_init+0x2c>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <spi_lld_init+0x30>)
 80040d6:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80040da:	4620      	mov	r0, r4
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 80040dc:	801a      	strh	r2, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80040de:	f7fe f817 	bl	8002110 <spiObjectInit>
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <spi_lld_init+0x34>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80040e4:	4808      	ldr	r0, [pc, #32]	; (8004108 <spi_lld_init+0x38>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80040e6:	4909      	ldr	r1, [pc, #36]	; (800410c <spi_lld_init+0x3c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80040e8:	4a09      	ldr	r2, [pc, #36]	; (8004110 <spi_lld_init+0x40>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80040ea:	61e0      	str	r0, [r4, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80040ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80040f0:	6223      	str	r3, [r4, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80040f2:	6260      	str	r0, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80040f4:	62a1      	str	r1, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80040f6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	bf00      	nop
 80040fc:	20001224 	.word	0x20001224
 8004100:	20001220 	.word	0x20001220
 8004104:	08008460 	.word	0x08008460
 8004108:	40013000 	.word	0x40013000
 800410c:	06010016 	.word	0x06010016
 8004110:	06010046 	.word	0x06010046
	...

08004120 <spi_lld_start>:
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004120:	7803      	ldrb	r3, [r0, #0]
 8004122:	2b01      	cmp	r3, #1
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004124:	b510      	push	{r4, lr}
 8004126:	4604      	mov	r4, r0

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004128:	d01d      	beq.n	8004166 <spi_lld_start+0x46>
 800412a:	69c3      	ldr	r3, [r0, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800412c:	6862      	ldr	r2, [r4, #4]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800412e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004130:	8952      	ldrh	r2, [r2, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004132:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004134:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004138:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800413c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004140:	bf1c      	itt	ne
 8004142:	f440 5020 	orrne.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004146:	f441 5120 	orrne.w	r1, r1, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800414a:	62a0      	str	r0, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800414c:	62e1      	str	r1, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800414e:	f442 7241 	orr.w	r2, r2, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004152:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004154:	2107      	movs	r1, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004156:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004158:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800415a:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	bd10      	pop	{r4, pc}
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <spi_lld_start+0x84>)
 8004168:	4298      	cmp	r0, r3
 800416a:	d009      	beq.n	8004180 <spi_lld_start+0x60>
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800416c:	6a21      	ldr	r1, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800416e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004170:	69e3      	ldr	r3, [r4, #28]
 8004172:	6808      	ldr	r0, [r1, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004174:	6811      	ldr	r1, [r2, #0]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004176:	f103 020c 	add.w	r2, r3, #12
 800417a:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800417c:	608a      	str	r2, [r1, #8]
 800417e:	e7d5      	b.n	800412c <spi_lld_start+0xc>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8004180:	4603      	mov	r3, r0
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <spi_lld_start+0x88>)
 8004184:	6a00      	ldr	r0, [r0, #32]
 8004186:	210a      	movs	r1, #10
 8004188:	f7fe fd4a 	bl	8002c20 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 800418c:	4623      	mov	r3, r4
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <spi_lld_start+0x8c>)
 8004190:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004192:	210a      	movs	r1, #10
 8004194:	f7fe fd44 	bl	8002c20 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <spi_lld_start+0x90>)
 800419a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800419c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041a0:	6453      	str	r3, [r2, #68]	; 0x44
 80041a2:	e7e3      	b.n	800416c <spi_lld_start+0x4c>
 80041a4:	20001224 	.word	0x20001224
 80041a8:	08004051 	.word	0x08004051
 80041ac:	08004031 	.word	0x08004031
 80041b0:	40023800 	.word	0x40023800
	...

080041c0 <spi_lld_select>:
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 80041c0:	6842      	ldr	r2, [r0, #4]
 80041c2:	8911      	ldrh	r1, [r2, #8]
 80041c4:	6852      	ldr	r2, [r2, #4]
 80041c6:	2301      	movs	r3, #1
 80041c8:	408b      	lsls	r3, r1
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8353      	strh	r3, [r2, #26]
 80041ce:	4770      	bx	lr

080041d0 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80041d0:	6842      	ldr	r2, [r0, #4]
 80041d2:	8911      	ldrh	r1, [r2, #8]
 80041d4:	6852      	ldr	r2, [r2, #4]
 80041d6:	2301      	movs	r3, #1
 80041d8:	408b      	lsls	r3, r1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8313      	strh	r3, [r2, #24]
 80041de:	4770      	bx	lr

080041e0 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 80041e0:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80041e2:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80041e4:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80041e6:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80041e8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80041ea:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80041ec:	6838      	ldr	r0, [r7, #0]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80041ee:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80041f0:	f446 6680 	orr.w	r6, r6, #1024	; 0x400

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80041f4:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80041f8:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80041fa:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80041fc:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80041fe:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004200:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6023      	str	r3, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 800420a:	6803      	ldr	r3, [r0, #0]
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6003      	str	r3, [r0, #0]
}
 8004212:	bcf0      	pop	{r4, r5, r6, r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
	...

08004220 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8004220:	b470      	push	{r4, r5, r6}

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004222:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004224:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004226:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004228:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800422a:	681b      	ldr	r3, [r3, #0]
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800422c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800422e:	4e09      	ldr	r6, [pc, #36]	; (8004254 <spi_lld_send+0x34>)
 8004230:	60e6      	str	r6, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004232:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004236:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8004238:	6020      	str	r0, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800423a:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800423c:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800423e:	601d      	str	r5, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
}
 8004250:	bc70      	pop	{r4, r5, r6}
 8004252:	4770      	bx	lr
 8004254:	20001254 	.word	0x20001254
	...

08004260 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8004260:	f7fe bac6 	b.w	80027f0 <stm32_clock_init>
	...

08004270 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
	...

08004280 <ch_ltoa>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8004280:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004282:	f100 070b 	add.w	r7, r0, #11
 8004286:	463c      	mov	r4, r7
 8004288:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 800428a:	fbb1 f6f2 	udiv	r6, r1, r2
 800428e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8004292:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8004296:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8004298:	bfc8      	it	gt
 800429a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 80042a4:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 80042a8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 80042aa:	2d00      	cmp	r5, #0
 80042ac:	d1ed      	bne.n	800428a <ch_ltoa+0xa>
 80042ae:	1b3a      	subs	r2, r7, r4
 80042b0:	4402      	add	r2, r0
 80042b2:	e001      	b.n	80042b8 <ch_ltoa+0x38>
 80042b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 80042b8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 80042bc:	4290      	cmp	r0, r2
 80042be:	d1f9      	bne.n	80042b4 <ch_ltoa+0x34>
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
}
 80042c0:	bcf0      	pop	{r4, r5, r6, r7}
 80042c2:	4770      	bx	lr
	...

080042d0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	ed2d 8b02 	vpush	{d8}
 80042d8:	b091      	sub	sp, #68	; 0x44
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80042da:	2300      	movs	r3, #0
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80042dc:	4606      	mov	r6, r0
 80042de:	468b      	mov	fp, r1
 80042e0:	4692      	mov	sl, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80042e2:	9300      	str	r3, [sp, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80042e4:	f89b 1000 	ldrb.w	r1, [fp]
 80042e8:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 80042ec:	b179      	cbz	r1, 800430e <chvprintf+0x3e>
      return n;
    if (c != '%') {
 80042ee:	2925      	cmp	r1, #37	; 0x25
 80042f0:	d013      	beq.n	800431a <chvprintf+0x4a>
      streamPut(chp, (uint8_t)c);
      n++;
 80042f2:	9c00      	ldr	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80042f4:	6832      	ldr	r2, [r6, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80042f6:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80042f8:	6892      	ldr	r2, [r2, #8]
 80042fa:	4630      	mov	r0, r6
      n++;
 80042fc:	3401      	adds	r4, #1
 80042fe:	9400      	str	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004300:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004302:	f89b 1000 	ldrb.w	r1, [fp]
 8004306:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 800430a:	2900      	cmp	r1, #0
 800430c:	d1ef      	bne.n	80042ee <chvprintf+0x1e>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800430e:	9800      	ldr	r0, [sp, #0]
 8004310:	b011      	add	sp, #68	; 0x44
 8004312:	ecbd 8b02 	vpop	{d8}
 8004316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800431a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800431e:	2a2d      	cmp	r2, #45	; 0x2d
 8004320:	bf03      	ittte	eq
 8004322:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8004326:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 800432a:	2101      	moveq	r1, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800432c:	2100      	movne	r1, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 800432e:	2a30      	cmp	r2, #48	; 0x30
 8004330:	bf08      	it	eq
 8004332:	785a      	ldrbeq	r2, [r3, #1]
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8004334:	9101      	str	r1, [sp, #4]
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 8004336:	bf06      	itte	eq
 8004338:	3301      	addeq	r3, #1
      filler = '0';
 800433a:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 800433c:	2720      	movne	r7, #32
 800433e:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8004340:	2400      	movs	r4, #0
 8004342:	e008      	b.n	8004356 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8004344:	f89a 3000 	ldrb.w	r3, [sl]
 8004348:	f10a 0a04 	add.w	sl, sl, #4
 800434c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8004350:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 8004354:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004356:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800435e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8004360:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004364:	d9f2      	bls.n	800434c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8004366:	2a2a      	cmp	r2, #42	; 0x2a
 8004368:	d0ec      	beq.n	8004344 <chvprintf+0x74>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800436a:	2a2e      	cmp	r2, #46	; 0x2e
 800436c:	f04f 0800 	mov.w	r8, #0
 8004370:	d045      	beq.n	80043fe <chvprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8004372:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8004376:	2b4c      	cmp	r3, #76	; 0x4c
 8004378:	d050      	beq.n	800441c <chvprintf+0x14c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800437a:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 800437e:	2b34      	cmp	r3, #52	; 0x34
 8004380:	f200 81c9 	bhi.w	8004716 <chvprintf+0x446>
 8004384:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004388:	01c701b7 	.word	0x01c701b7
 800438c:	01c701c7 	.word	0x01c701c7
 8004390:	01b701c7 	.word	0x01b701c7
 8004394:	01c701c7 	.word	0x01c701c7
 8004398:	01c701c7 	.word	0x01c701c7
 800439c:	01b501c7 	.word	0x01b501c7
 80043a0:	01c701c7 	.word	0x01c701c7
 80043a4:	01c701c7 	.word	0x01c701c7
 80043a8:	010601c7 	.word	0x010601c7
 80043ac:	01c701c7 	.word	0x01c701c7
 80043b0:	01c7008d 	.word	0x01c7008d
 80043b4:	01c701c7 	.word	0x01c701c7
 80043b8:	01c701c7 	.word	0x01c701c7
 80043bc:	01c701c7 	.word	0x01c701c7
 80043c0:	01c701c7 	.word	0x01c701c7
 80043c4:	01a701c7 	.word	0x01a701c7
 80043c8:	01c701b7 	.word	0x01c701b7
 80043cc:	01c70108 	.word	0x01c70108
 80043d0:	01b701c7 	.word	0x01b701c7
 80043d4:	01c701c7 	.word	0x01c701c7
 80043d8:	01c701c7 	.word	0x01c701c7
 80043dc:	01b501c7 	.word	0x01b501c7
 80043e0:	01c701c7 	.word	0x01c701c7
 80043e4:	00db01c7 	.word	0x00db01c7
 80043e8:	010601c7 	.word	0x010601c7
 80043ec:	01c701c7 	.word	0x01c701c7
 80043f0:	008d      	.short	0x008d
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80043f2:	f89a 3000 	ldrb.w	r3, [sl]
 80043f6:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 80043fa:	eb03 0841 	add.w	r8, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80043fe:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 8004402:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800440a:	eb08 0188 	add.w	r1, r8, r8, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800440e:	d9f4      	bls.n	80043fa <chvprintf+0x12a>
          c -= '0';
        else if (c == '*')
 8004410:	2a2a      	cmp	r2, #42	; 0x2a
 8004412:	d0ee      	beq.n	80043f2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8004414:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8004418:	2b4c      	cmp	r3, #76	; 0x4c
 800441a:	d1ae      	bne.n	800437a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 800441c:	f89b 1000 	ldrb.w	r1, [fp]
 8004420:	2900      	cmp	r1, #0
 8004422:	f000 8178 	beq.w	8004716 <chvprintf+0x446>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004426:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 800442a:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800442e:	2b34      	cmp	r3, #52	; 0x34
 8004430:	f200 8170 	bhi.w	8004714 <chvprintf+0x444>
 8004434:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004438:	016e015f 	.word	0x016e015f
 800443c:	016e016e 	.word	0x016e016e
 8004440:	015f016e 	.word	0x015f016e
 8004444:	016e016e 	.word	0x016e016e
 8004448:	016e016e 	.word	0x016e016e
 800444c:	015d016e 	.word	0x015d016e
 8004450:	016e016e 	.word	0x016e016e
 8004454:	016e016e 	.word	0x016e016e
 8004458:	00ae016e 	.word	0x00ae016e
 800445c:	016e016e 	.word	0x016e016e
 8004460:	016e0035 	.word	0x016e0035
 8004464:	016e016e 	.word	0x016e016e
 8004468:	016e016e 	.word	0x016e016e
 800446c:	016e016e 	.word	0x016e016e
 8004470:	016e016e 	.word	0x016e016e
 8004474:	014f016e 	.word	0x014f016e
 8004478:	016e015f 	.word	0x016e015f
 800447c:	016e00b0 	.word	0x016e00b0
 8004480:	015f016e 	.word	0x015f016e
 8004484:	016e016e 	.word	0x016e016e
 8004488:	016e016e 	.word	0x016e016e
 800448c:	015d016e 	.word	0x015d016e
 8004490:	016e016e 	.word	0x016e016e
 8004494:	0083016e 	.word	0x0083016e
 8004498:	00ae016e 	.word	0x00ae016e
 800449c:	016e016e 	.word	0x016e016e
 80044a0:	0035      	.short	0x0035
 80044a2:	2210      	movs	r2, #16
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
 80044a4:	ad0a      	add	r5, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80044a6:	f8da 1000 	ldr.w	r1, [sl]
      p = ch_ltoa(p, l, c);
 80044aa:	4628      	mov	r0, r5
 80044ac:	f7ff fee8 	bl	8004280 <ch_ltoa>
 80044b0:	1b40      	subs	r0, r0, r5
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80044b2:	f10a 0a04 	add.w	sl, sl, #4
 80044b6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80044ba:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80044bc:	1a24      	subs	r4, r4, r0
 80044be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d162      	bne.n	800458c <chvprintf+0x2bc>
      width = -width;
 80044c6:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
 80044ca:	f1b9 0f00 	cmp.w	r9, #0
 80044ce:	f000 812b 	beq.w	8004728 <chvprintf+0x458>
      if (*s == '-' && filler == '0') {
 80044d2:	7829      	ldrb	r1, [r5, #0]
 80044d4:	292d      	cmp	r1, #45	; 0x2d
 80044d6:	f000 813a 	beq.w	800474e <chvprintf+0x47e>
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 80044da:	6833      	ldr	r3, [r6, #0]
 80044dc:	4639      	mov	r1, r7
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4630      	mov	r0, r6
 80044e2:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80044e4:	f119 0901 	adds.w	r9, r9, #1
 80044e8:	d1f7      	bne.n	80044da <chvprintf+0x20a>
 80044ea:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 80044ec:	f1b8 0f00 	cmp.w	r8, #0
 80044f0:	4423      	add	r3, r4
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	f6ff aef6 	blt.w	80042e4 <chvprintf+0x14>
 80044f8:	464c      	mov	r4, r9
 80044fa:	46c1      	mov	r9, r8
      streamPut(chp, (uint8_t)*s++);
 80044fc:	6833      	ldr	r3, [r6, #0]
 80044fe:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004502:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8004504:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8004508:	4630      	mov	r0, r6
 800450a:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800450c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004510:	d1f4      	bne.n	80044fc <chvprintf+0x22c>
 8004512:	9b00      	ldr	r3, [sp, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	f1b8 0f00 	cmp.w	r8, #0
 800451a:	bfa8      	it	ge
 800451c:	4443      	addge	r3, r8
 800451e:	9300      	str	r3, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8004520:	2c00      	cmp	r4, #0
 8004522:	f43f aedf 	beq.w	80042e4 <chvprintf+0x14>
 8004526:	4625      	mov	r5, r4
      streamPut(chp, (uint8_t)filler);
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	4639      	mov	r1, r7
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4630      	mov	r0, r6
 8004530:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8004532:	3d01      	subs	r5, #1
 8004534:	d1f8      	bne.n	8004528 <chvprintf+0x258>
 8004536:	9b00      	ldr	r3, [sp, #0]
 8004538:	4423      	add	r3, r4
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	e6d2      	b.n	80042e4 <chvprintf+0x14>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800453e:	f8da 5000 	ldr.w	r5, [sl]
        s = "(null)";
 8004542:	4b9b      	ldr	r3, [pc, #620]	; (80047b0 <chvprintf+0x4e0>)
 8004544:	2d00      	cmp	r5, #0
 8004546:	bf08      	it	eq
 8004548:	461d      	moveq	r5, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800454a:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800454e:	782b      	ldrb	r3, [r5, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8004550:	f1b8 0f00 	cmp.w	r8, #0
 8004554:	f000 80ee 	beq.w	8004734 <chvprintf+0x464>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80f0 	beq.w	800473e <chvprintf+0x46e>
 800455e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004562:	4628      	mov	r0, r5
 8004564:	e002      	b.n	800456c <chvprintf+0x29c>
 8004566:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800456a:	d005      	beq.n	8004578 <chvprintf+0x2a8>
 800456c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004570:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f6      	bne.n	8004566 <chvprintf+0x296>
 8004578:	1b40      	subs	r0, r0, r5
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800457a:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800457c:	1a24      	subs	r4, r4, r0
 800457e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8004582:	2720      	movs	r7, #32
 8004584:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8004588:	2b00      	cmp	r3, #0
 800458a:	d09c      	beq.n	80044c6 <chvprintf+0x1f6>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800458c:	f1b8 0f00 	cmp.w	r8, #0
 8004590:	dab3      	bge.n	80044fa <chvprintf+0x22a>
 8004592:	e7c5      	b.n	8004520 <chvprintf+0x250>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 8004594:	220a      	movs	r2, #10
 8004596:	e785      	b.n	80044a4 <chvprintf+0x1d4>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8004598:	f10a 0a07 	add.w	sl, sl, #7
 800459c:	f02a 0a07 	bic.w	sl, sl, #7
 80045a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80045a4:	f7fc fb2c 	bl	8000c00 <__aeabi_d2f>
 80045a8:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 80045ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 80045b4:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 80045b8:	f100 80e8 	bmi.w	800478c <chvprintf+0x4bc>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80045bc:	ad0a      	add	r5, sp, #40	; 0x28
 80045be:	462a      	mov	r2, r5
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 80045c0:	ee18 0a10 	vmov	r0, s16
 80045c4:	9204      	str	r2, [sp, #16]
 80045c6:	f7fb ffff 	bl	80005c8 <__aeabi_f2d>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80045ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80045ce:	f1b8 0f08 	cmp.w	r8, #8
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 80045d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80045d6:	9a04      	ldr	r2, [sp, #16]
 80045d8:	f200 80c7 	bhi.w	800476a <chvprintf+0x49a>
 80045dc:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <chvprintf+0x4e4>)
 80045de:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 80045e2:	4640      	mov	r0, r8
 80045e4:	f7fb ffce 	bl	8000584 <__aeabi_ui2d>
 80045e8:	4b73      	ldr	r3, [pc, #460]	; (80047b8 <chvprintf+0x4e8>)
 80045ea:	9a04      	ldr	r2, [sp, #16]
 80045ec:	fba3 3808 	umull	r3, r8, r3, r8
 80045f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045f4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
 80045fa:	4698      	mov	r8, r3
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 80045fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004600:	f102 030b 	add.w	r3, r2, #11
 8004604:	ee17 1a90 	vmov	r1, s15
                                         long divisor) {
  int i;
  char *q;
  long l, ll;

  l = num;
 8004608:	ee17 ea90 	vmov	lr, s15

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 800460c:	edcd 7a04 	vstr	s15, [sp, #16]
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004610:	9305      	str	r3, [sp, #20]
 8004612:	4618      	mov	r0, r3
 8004614:	9208      	str	r2, [sp, #32]
  do {
    i = (int)(l % radix);
 8004616:	4b68      	ldr	r3, [pc, #416]	; (80047b8 <chvprintf+0x4e8>)
 8004618:	fba3 230e 	umull	r2, r3, r3, lr
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8004622:	4a65      	ldr	r2, [pc, #404]	; (80047b8 <chvprintf+0x4e8>)
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8004624:	469c      	mov	ip, r3
 8004626:	ebae 0349 	sub.w	r3, lr, r9, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800462a:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 800462c:	fba2 2101 	umull	r2, r1, r2, r1
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8004630:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 8004632:	08c9      	lsrs	r1, r1, #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8004634:	f800 3d01 	strb.w	r3, [r0, #-1]!
    l /= radix;
 8004638:	46e6      	mov	lr, ip
  } while ((ll /= radix) != 0);
 800463a:	d1ec      	bne.n	8004616 <chvprintf+0x346>
 800463c:	9905      	ldr	r1, [sp, #20]
 800463e:	9a08      	ldr	r2, [sp, #32]
 8004640:	ebc0 0901 	rsb	r9, r0, r1
 8004644:	4491      	add	r9, r2
 8004646:	e001      	b.n	800464c <chvprintf+0x37c>
 8004648:	f810 3f01 	ldrb.w	r3, [r0, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 800464c:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8004650:	454a      	cmp	r2, r9
 8004652:	d1f9      	bne.n	8004648 <chvprintf+0x378>
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 8004654:	464a      	mov	r2, r9
 8004656:	232e      	movs	r3, #46	; 0x2e
 8004658:	f802 3b0c 	strb.w	r3, [r2], #12
  l = (long)((num - l) * precision);
 800465c:	9804      	ldr	r0, [sp, #16]
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800465e:	9204      	str	r2, [sp, #16]
  l = (long)((num - l) * precision);
 8004660:	f7fb ffa0 	bl	80005a4 <__aeabi_i2d>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800466c:	f7fb fe4c 	bl	8000308 <__aeabi_dsub>
 8004670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004674:	f7fb fffc 	bl	8000670 <__aeabi_dmul>
 8004678:	f7fc fa9a 	bl	8000bb0 <__aeabi_d2iz>
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 800467c:	9909      	ldr	r1, [sp, #36]	; 0x24
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800467e:	9a04      	ldr	r2, [sp, #16]
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8004680:	2900      	cmp	r1, #0
 8004682:	bf08      	it	eq
 8004684:	4680      	moveq	r8, r0
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 8004686:	f109 0e01 	add.w	lr, r9, #1
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 800468a:	4b4b      	ldr	r3, [pc, #300]	; (80047b8 <chvprintf+0x4e8>)
 800468c:	fba3 1300 	umull	r1, r3, r3, r0
 8004690:	08db      	lsrs	r3, r3, #3
 8004692:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8004696:	4619      	mov	r1, r3
 8004698:	eba0 034c 	sub.w	r3, r0, ip, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800469c:	4846      	ldr	r0, [pc, #280]	; (80047b8 <chvprintf+0x4e8>)
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800469e:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 80046a0:	fba0 0808 	umull	r0, r8, r0, r8
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 80046a4:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 80046a6:	ea5f 08d8 	movs.w	r8, r8, lsr #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 80046aa:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 80046ae:	4608      	mov	r0, r1
  } while ((ll /= radix) != 0);
 80046b0:	d1eb      	bne.n	800468a <chvprintf+0x3ba>
 80046b2:	9904      	ldr	r1, [sp, #16]
 80046b4:	1a89      	subs	r1, r1, r2
 80046b6:	1c48      	adds	r0, r1, #1
 80046b8:	4481      	add	r9, r0

  i = (int)(p + MAX_FILLER - q);
 80046ba:	4670      	mov	r0, lr
 80046bc:	e001      	b.n	80046c2 <chvprintf+0x3f2>
 80046be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  do
    *p++ = *q++;
 80046c2:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 80046c6:	4581      	cmp	r9, r0
 80046c8:	d1f9      	bne.n	80046be <chvprintf+0x3ee>
 80046ca:	eb0e 0001 	add.w	r0, lr, r1
 80046ce:	1b40      	subs	r0, r0, r5
 80046d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80046d4:	e6f1      	b.n	80044ba <chvprintf+0x1ea>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80046d6:	ad10      	add	r5, sp, #64	; 0x40
 80046d8:	f8da 3000 	ldr.w	r3, [sl]
 80046dc:	f805 3d18 	strb.w	r3, [r5, #-24]!
 80046e0:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 80046e4:	1b40      	subs	r0, r0, r5
 80046e6:	f10a 0a04 	add.w	sl, sl, #4
 80046ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80046ee:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
      break;
 80046f0:	e6e3      	b.n	80044ba <chvprintf+0x1ea>
 80046f2:	2208      	movs	r2, #8
 80046f4:	e6d6      	b.n	80044a4 <chvprintf+0x1d4>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80046f6:	f8da 1000 	ldr.w	r1, [sl]
      if (l < 0) {
 80046fa:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80046fc:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 8004700:	db3c      	blt.n	800477c <chvprintf+0x4ac>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8004702:	ad0a      	add	r5, sp, #40	; 0x28
 8004704:	4628      	mov	r0, r5
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
      }
      p = ch_ltoa(p, l, 10);
 8004706:	220a      	movs	r2, #10
 8004708:	f7ff fdba 	bl	8004280 <ch_ltoa>
 800470c:	1b40      	subs	r0, r0, r5
 800470e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 8004712:	e6d2      	b.n	80044ba <chvprintf+0x1ea>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004714:	460a      	mov	r2, r1
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8004716:	ad10      	add	r5, sp, #64	; 0x40
 8004718:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800471c:	f805 2d18 	strb.w	r2, [r5, #-24]!
 8004720:	1b40      	subs	r0, r0, r5
 8004722:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 8004726:	e6c8      	b.n	80044ba <chvprintf+0x1ea>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8004728:	f1b8 0f00 	cmp.w	r8, #0
 800472c:	f6ff adda 	blt.w	80042e4 <chvprintf+0x14>
 8004730:	464c      	mov	r4, r9
 8004732:	e6e2      	b.n	80044fa <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8004734:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 8004738:	2b00      	cmp	r3, #0
 800473a:	f47f af12 	bne.w	8004562 <chvprintf+0x292>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800473e:	9b01      	ldr	r3, [sp, #4]
 8004740:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004744:	bb5b      	cbnz	r3, 800479e <chvprintf+0x4ce>
 8004746:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800474a:	2720      	movs	r7, #32
 800474c:	e6bb      	b.n	80044c6 <chvprintf+0x1f6>
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800474e:	2f30      	cmp	r7, #48	; 0x30
 8004750:	f47f aec3 	bne.w	80044da <chvprintf+0x20a>
        streamPut(chp, (uint8_t)*s++);
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	4630      	mov	r0, r6
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4798      	blx	r3
        n++;
 800475c:	9b00      	ldr	r3, [sp, #0]
 800475e:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8004760:	3501      	adds	r5, #1
        n++;
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004768:	e6b7      	b.n	80044da <chvprintf+0x20a>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800476a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80047a8 <chvprintf+0x4d8>
 800476e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80047bc <chvprintf+0x4ec>
 8004772:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8004776:	ed8d 7b06 	vstr	d7, [sp, #24]
 800477a:	e73f      	b.n	80045fc <chvprintf+0x32c>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800477c:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800477e:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8004780:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004784:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8004788:	ad0a      	add	r5, sp, #40	; 0x28
 800478a:	e7bc      	b.n	8004706 <chvprintf+0x436>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800478c:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 800478e:	eeb1 8a48 	vneg.f32	s16, s16
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8004792:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004796:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 800479a:	ad0a      	add	r5, sp, #40	; 0x28
 800479c:	e710      	b.n	80045c0 <chvprintf+0x2f0>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800479e:	2720      	movs	r7, #32
 80047a0:	e6be      	b.n	8004520 <chvprintf+0x250>
 80047a2:	bf00      	nop
 80047a4:	f3af 8000 	nop.w
 80047a8:	00000000 	.word	0x00000000
 80047ac:	41cdcd65 	.word	0x41cdcd65
 80047b0:	08008620 	.word	0x08008620
 80047b4:	08008630 	.word	0x08008630
 80047b8:	cccccccd 	.word	0xcccccccd
 80047bc:	05f5e100 	.word	0x05f5e100

080047c0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80047c0:	b40e      	push	{r1, r2, r3}
 80047c2:	b500      	push	{lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	aa03      	add	r2, sp, #12
 80047c8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80047cc:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80047ce:	f7ff fd7f 	bl	80042d0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80047d2:	b002      	add	sp, #8
 80047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d8:	b003      	add	sp, #12
 80047da:	4770      	bx	lr
 80047dc:	0000      	movs	r0, r0
	...

080047e0 <led_update>:
#include <stdio.h>
#include <string.h>
#include "math.h"

static THD_WORKING_AREA(led_update_wa, 1024);
static THD_FUNCTION(led_update, arg) {
 80047e0:	b508      	push	{r3, lr}
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <led_update+0x28>)
 80047e4:	4a09      	ldr	r2, [pc, #36]	; (800480c <led_update+0x2c>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	619a      	str	r2, [r3, #24]
    (void)arg;

    chRegSetThreadName("LED update");

    for(;;) {
		ws2812b_set_all(0x0000FF);
 80047ea:	20ff      	movs	r0, #255	; 0xff
 80047ec:	f000 fdc8 	bl	8005380 <ws2812b_set_all>
        chThdSleepMilliseconds(500);
 80047f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80047f4:	f7fc fe14 	bl	8001420 <chThdSleep>
		ws2812b_set_all(0);
 80047f8:	2000      	movs	r0, #0
 80047fa:	f000 fdc1 	bl	8005380 <ws2812b_set_all>
        chThdSleepMilliseconds(500);
 80047fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8004802:	f7fc fe0d 	bl	8001420 <chThdSleep>
 8004806:	e7f0      	b.n	80047ea <led_update+0xa>
 8004808:	20000c40 	.word	0x20000c40
 800480c:	08008660 	.word	0x08008660

08004810 <main>:
    }
}


int main(void) {
 8004810:	b500      	push	{lr}
 8004812:	b083      	sub	sp, #12
	halInit();
 8004814:	f7fc ffac 	bl	8001770 <halInit>
	chSysInit();
 8004818:	f7fc fb42 	bl	8000ea0 <chSysInit>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800481c:	2101      	movs	r1, #1
 800481e:	4608      	mov	r0, r1
 8004820:	f000 ffa6 	bl	8005770 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8004824:	2101      	movs	r1, #1
 8004826:	2002      	movs	r0, #2
 8004828:	f000 ffa2 	bl	8005770 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800482c:	2101      	movs	r1, #1
 800482e:	2004      	movs	r0, #4
 8004830:	f000 ff9e 	bl	8005770 <RCC_AHB1PeriphClockCmd>

	comm_init();
 8004834:	f000 f99c 	bl	8004b70 <comm_init>
	ws2812b_init();
 8004838:	f000 fcc2 	bl	80051c0 <ws2812b_init>
    encoder_init();
 800483c:	f000 fbe0 	bl	8005000 <encoder_init>
	controller_init();
 8004840:	f000 f9ae 	bl	8004ba0 <controller_init>
	comm_usb_serial_init();
 8004844:	f000 f93c 	bl	8004ac0 <comm_usb_serial_init>

    chThdCreateStatic(led_update_wa, sizeof(led_update_wa), NORMALPRIO, led_update, NULL);
 8004848:	2300      	movs	r3, #0
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4806      	ldr	r0, [pc, #24]	; (8004868 <main+0x58>)
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <main+0x5c>)
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8004856:	f7fc fdab 	bl	80013b0 <chThdCreateStatic>
	for(;;)
	{
		controller_print_adc();
 800485a:	f000 fb11 	bl	8004e80 <controller_print_adc>
		chThdSleepMilliseconds(100);
 800485e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004862:	f7fc fddd 	bl	8001420 <chThdSleep>
 8004866:	e7f8      	b.n	800485a <main+0x4a>
 8004868:	20001258 	.word	0x20001258
 800486c:	080047e1 	.word	0x080047e1

08004870 <spicb>:
uint16_t as5x47_get_raw_position(void)
{
	return lastRawPosition;
}

static void spicb(SPIDriver *spip) {
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	2320      	movs	r3, #32
 8004874:	4606      	mov	r6, r0
 8004876:	f383 8811 	msr	BASEPRI, r3
	chSysLockFromISR();
	spiUnselectI(spip);
	if (inTransaction)
 800487a:	4d14      	ldr	r5, [pc, #80]	; (80048cc <spicb+0x5c>)
	return lastRawPosition;
}

static void spicb(SPIDriver *spip) {
	chSysLockFromISR();
	spiUnselectI(spip);
 800487c:	f7ff fca8 	bl	80041d0 <spi_lld_unselect>
	if (inTransaction)
 8004880:	782b      	ldrb	r3, [r5, #0]
 8004882:	b1ab      	cbz	r3, 80048b0 <spicb+0x40>
 8004884:	2414      	movs	r4, #20
	{
		int i = 0;
		for(i = 0; i < 20; i++)
		{
			__asm__("NOP");
 8004886:	bf00      	nop
	chSysLockFromISR();
	spiUnselectI(spip);
	if (inTransaction)
	{
		int i = 0;
		for(i = 0; i < 20; i++)
 8004888:	3c01      	subs	r4, #1
 800488a:	d1fc      	bne.n	8004886 <spicb+0x16>
		{
			__asm__("NOP");
		}
		spiSelectI(spip);
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff fc97 	bl	80041c0 <spi_lld_select>
		tx[0] = 0;
 8004892:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <spicb+0x60>)
		tx[1] = 0;
		spiStartExchangeI(spip, 2, tx, rx);
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <spicb+0x64>)
		for(i = 0; i < 20; i++)
		{
			__asm__("NOP");
		}
		spiSelectI(spip);
		tx[0] = 0;
 8004896:	7014      	strb	r4, [r2, #0]
		tx[1] = 0;
		spiStartExchangeI(spip, 2, tx, rx);
 8004898:	2103      	movs	r1, #3
		{
			__asm__("NOP");
		}
		spiSelectI(spip);
		tx[0] = 0;
		tx[1] = 0;
 800489a:	7054      	strb	r4, [r2, #1]
		spiStartExchangeI(spip, 2, tx, rx);
 800489c:	4630      	mov	r0, r6
 800489e:	7031      	strb	r1, [r6, #0]
 80048a0:	2102      	movs	r1, #2
 80048a2:	f7ff fc9d 	bl	80041e0 <spi_lld_exchange>
		inTransaction = false;
 80048a6:	702c      	strb	r4, [r5, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		lastRawPosition = (uint16_t)(((rx[0] << 8) | rx[1]) & 0x3FFF);
 80048b0:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <spicb+0x64>)
 80048b2:	4909      	ldr	r1, [pc, #36]	; (80048d8 <spicb+0x68>)
 80048b4:	7810      	ldrb	r0, [r2, #0]
 80048b6:	7853      	ldrb	r3, [r2, #1]
 80048b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80048bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80048c0:	800b      	strh	r3, [r1, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	bd70      	pop	{r4, r5, r6, pc}
 80048ca:	bf00      	nop
 80048cc:	200017f6 	.word	0x200017f6
 80048d0:	200017f4 	.word	0x200017f4
 80048d4:	200017f0 	.word	0x200017f0
 80048d8:	200017f8 	.word	0x200017f8
 80048dc:	00000000 	.word	0x00000000

080048e0 <as5x47_init>:
	}
    chSysUnlockFromISR();
}

void as5x47_init(void)
{
 80048e0:	b530      	push	{r4, r5, lr}
	palSetPadMode(GPIOA, 5, PAL_MODE_ALTERNATE(5) |
 80048e2:	4c1f      	ldr	r4, [pc, #124]	; (8004960 <as5x47_init+0x80>)
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / 20000) - 1);
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 80048e4:	4d1f      	ldr	r5, [pc, #124]	; (8004964 <as5x47_init+0x84>)
	}
    chSysUnlockFromISR();
}

void as5x47_init(void)
{
 80048e6:	b085      	sub	sp, #20
	palSetPadMode(GPIOA, 5, PAL_MODE_ALTERNATE(5) |
 80048e8:	4620      	mov	r0, r4
 80048ea:	f240 229a 	movw	r2, #666	; 0x29a
 80048ee:	2120      	movs	r1, #32
 80048f0:	f7fe fc5e 	bl	80031b0 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);     /* SCK. */
	palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(5) |
 80048f4:	4620      	mov	r0, r4
 80048f6:	f240 229a 	movw	r2, #666	; 0x29a
 80048fa:	2140      	movs	r1, #64	; 0x40
 80048fc:	f7fe fc58 	bl	80031b0 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);     /* MISO.*/
	palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(5) |
 8004900:	4620      	mov	r0, r4
 8004902:	f240 229a 	movw	r2, #666	; 0x29a
 8004906:	2180      	movs	r1, #128	; 0x80
 8004908:	f7fe fc52 	bl	80031b0 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);     /* MOSI.*/
	palSetPadMode(GPIOA, GPIOA_LRCK, PAL_MODE_OUTPUT_PUSHPULL |
 800490c:	2219      	movs	r2, #25
 800490e:	4620      	mov	r0, r4
 8004910:	2110      	movs	r1, #16
 8004912:	f7fe fc4d 	bl	80031b0 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);
	palSetPad(GPIOA, GPIOA_LRCK);
 8004916:	2310      	movs	r3, #16
 8004918:	8323      	strh	r3, [r4, #24]
    spiStart(&SPID1, &encoderSPI);
 800491a:	4913      	ldr	r1, [pc, #76]	; (8004968 <as5x47_init+0x88>)
 800491c:	4813      	ldr	r0, [pc, #76]	; (800496c <as5x47_init+0x8c>)
 800491e:	f7fd fbff 	bl	8002120 <spiStart>

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8004922:	2101      	movs	r1, #1
 8004924:	2004      	movs	r0, #4
 8004926:	f000 ff33 	bl	8005790 <RCC_APB1PeriphClockCmd>

    // Time Base configuration
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800492a:	2300      	movs	r3, #0
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / 20000) - 1);
 800492c:	f241 0267 	movw	r2, #4199	; 0x1067
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8004930:	4628      	mov	r0, r5
 8004932:	a901      	add	r1, sp, #4

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

    // Time Base configuration
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8004934:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004938:	f8ad 3006 	strh.w	r3, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / 20000) - 1);
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800493c:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8004940:	f88d 300e 	strb.w	r3, [sp, #14]

    // Time Base configuration
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / 20000) - 1);
 8004944:	9202      	str	r2, [sp, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8004946:	f001 f843 	bl	80059d0 <TIM_TimeBaseInit>
	nvicEnableVector(TIM4_IRQn, 6);
 800494a:	2106      	movs	r1, #6
 800494c:	201e      	movs	r0, #30
 800494e:	f7fd feef 	bl	8002730 <nvicEnableVector>

	// Enable overflow interrupt
	// TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);

	// Enable timers
	TIM_Cmd(TIM4, ENABLE);
 8004952:	4628      	mov	r0, r5
 8004954:	2101      	movs	r1, #1
 8004956:	f001 f89b 	bl	8005a90 <TIM_Cmd>

}
 800495a:	b005      	add	sp, #20
 800495c:	bd30      	pop	{r4, r5, pc}
 800495e:	bf00      	nop
 8004960:	40020000 	.word	0x40020000
 8004964:	40000800 	.word	0x40000800
 8004968:	08008670 	.word	0x08008670
 800496c:	20001224 	.word	0x20001224

08004970 <as5x47_update_raw_position>:
	float raw = as5x47_get_raw_position() % 8192;
	return 360.0 * raw / 8192.0;
}

void as5x47_update_raw_position(void)
{
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	spiSelectI(&SPID1);
 8004972:	4c0a      	ldr	r4, [pc, #40]	; (800499c <as5x47_update_raw_position+0x2c>)
 8004974:	4620      	mov	r0, r4
 8004976:	f7ff fc23 	bl	80041c0 <spi_lld_select>
	tx[0] = 0x3F | (1 << 6);
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <as5x47_update_raw_position+0x30>)
	tx[1] = 0xFF;
	spiStartSendI(&SPID1, 2, tx);
 800497c:	2703      	movs	r7, #3
 800497e:	461a      	mov	r2, r3
 8004980:	4620      	mov	r0, r4
}

void as5x47_update_raw_position(void)
{
	spiSelectI(&SPID1);
	tx[0] = 0x3F | (1 << 6);
 8004982:	267f      	movs	r6, #127	; 0x7f
	tx[1] = 0xFF;
 8004984:	25ff      	movs	r5, #255	; 0xff
	spiStartSendI(&SPID1, 2, tx);
 8004986:	2102      	movs	r1, #2
}

void as5x47_update_raw_position(void)
{
	spiSelectI(&SPID1);
	tx[0] = 0x3F | (1 << 6);
 8004988:	701e      	strb	r6, [r3, #0]
	tx[1] = 0xFF;
 800498a:	705d      	strb	r5, [r3, #1]
	spiStartSendI(&SPID1, 2, tx);
 800498c:	7027      	strb	r7, [r4, #0]
 800498e:	f7ff fc47 	bl	8004220 <spi_lld_send>
	inTransaction = true;
 8004992:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <as5x47_update_raw_position+0x34>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800499a:	bf00      	nop
 800499c:	20001224 	.word	0x20001224
 80049a0:	200017f4 	.word	0x200017f4
 80049a4:	200017f6 	.word	0x200017f6
	...

080049b0 <as5x47_get_angle>:
	TIM_Cmd(TIM4, ENABLE);

}

float as5x47_get_angle(void)
{
 80049b0:	b508      	push	{r3, lr}
	as5x47_update_raw_position();
 80049b2:	f7ff ffdd 	bl	8004970 <as5x47_update_raw_position>
	inTransaction = true;
}

uint16_t as5x47_get_raw_position(void)
{
	return lastRawPosition;
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <as5x47_get_angle+0x28>)

float as5x47_get_angle(void)
{
	as5x47_update_raw_position();
	float raw = as5x47_get_raw_position() % 8192;
	return 360.0 * raw / 8192.0;
 80049b8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80049dc <as5x47_get_angle+0x2c>
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80049e0 <as5x47_get_angle+0x30>
 80049c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80049d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80049d6:	bd08      	pop	{r3, pc}
 80049d8:	200017f8 	.word	0x200017f8
 80049dc:	43b40000 	.word	0x43b40000
 80049e0:	39000000 	.word	0x39000000
	...

080049f0 <comm_can_init>:
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
	...

08004a00 <comm_can_update>:
{
    
}

void comm_can_update(void)
{
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
	...

08004a10 <get_descriptor>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 8004a10:	2902      	cmp	r1, #2
 8004a12:	d006      	beq.n	8004a22 <get_descriptor+0x12>
 8004a14:	2903      	cmp	r1, #3
 8004a16:	d006      	beq.n	8004a26 <get_descriptor+0x16>
 8004a18:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 8004a1a:	4806      	ldr	r0, [pc, #24]	; (8004a34 <get_descriptor+0x24>)
 8004a1c:	bf18      	it	ne
 8004a1e:	2000      	movne	r0, #0
 8004a20:	4770      	bx	lr
	(void)lang;
	switch (dtype) {
	case USB_DESCRIPTOR_DEVICE:
		return &vcom_device_descriptor;
	case USB_DESCRIPTOR_CONFIGURATION:
		return &vcom_configuration_descriptor;
 8004a22:	4805      	ldr	r0, [pc, #20]	; (8004a38 <get_descriptor+0x28>)
 8004a24:	4770      	bx	lr
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
 8004a26:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 8004a28:	bf9a      	itte	ls
 8004a2a:	4b04      	ldrls	r3, [pc, #16]	; (8004a3c <get_descriptor+0x2c>)
 8004a2c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
	}
	return NULL;
 8004a30:	2000      	movhi	r0, #0
}
 8004a32:	4770      	bx	lr
 8004a34:	08008830 	.word	0x08008830
 8004a38:	080086b0 	.word	0x080086b0
 8004a3c:	08008800 	.word	0x08008800

08004a40 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8004a40:	b508      	push	{r3, lr}
 8004a42:	2320      	movs	r3, #32
 8004a44:	f383 8811 	msr	BASEPRI, r3

  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
 8004a48:	4803      	ldr	r0, [pc, #12]	; (8004a58 <sof_handler+0x18>)
 8004a4a:	f7fd fab9 	bl	8001fc0 <sduSOFHookI>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	bd08      	pop	{r3, pc}
 8004a56:	bf00      	nop
 8004a58:	2000180c 	.word	0x2000180c
 8004a5c:	00000000 	.word	0x00000000

08004a60 <usb_event>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 	extern SerialUSBDriver SDU1;

	switch (event) {
 8004a60:	2902      	cmp	r1, #2
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8004a62:	b538      	push	{r3, r4, r5, lr}
 8004a64:	460c      	mov	r4, r1
 	extern SerialUSBDriver SDU1;

	switch (event) {
 8004a66:	d00c      	beq.n	8004a82 <usb_event+0x22>
 8004a68:	2903      	cmp	r1, #3
 8004a6a:	d109      	bne.n	8004a80 <usb_event+0x20>
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	f383 8811 	msr	BASEPRI, r3
		return;
	case USB_EVENT_SUSPEND:
	    chSysLockFromISR();

	    /* Disconnection event on suspend.*/
	    sduDisconnectI(&SDU1);
 8004a72:	480e      	ldr	r0, [pc, #56]	; (8004aac <usb_event+0x4c>)
 8004a74:	f7fd fa54 	bl	8001f20 <sduDisconnectI>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	bd38      	pop	{r3, r4, r5, pc}
 8004a82:	4605      	mov	r5, r0
 8004a84:	2320      	movs	r3, #32
 8004a86:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <usb_event+0x50>)
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	f7fd fb87 	bl	80021a0 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8004a92:	4621      	mov	r1, r4
 8004a94:	4628      	mov	r0, r5
 8004a96:	4a07      	ldr	r2, [pc, #28]	; (8004ab4 <usb_event+0x54>)
 8004a98:	f7fd fb82 	bl	80021a0 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 8004a9c:	4803      	ldr	r0, [pc, #12]	; (8004aac <usb_event+0x4c>)
 8004a9e:	f7fd fa4f 	bl	8001f40 <sduConfigureHookI>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000180c 	.word	0x2000180c
 8004ab0:	08008680 	.word	0x08008680
 8004ab4:	080086c0 	.word	0x080086c0
	...

08004ac0 <comm_usb_serial_init>:
		USBD1_DATA_REQUEST_EP,
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
 8004ac0:	b570      	push	{r4, r5, r6, lr}
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 8004ac2:	4e15      	ldr	r6, [pc, #84]	; (8004b18 <comm_usb_serial_init+0x58>)
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
	sduObjectInit(&SDU1);
 8004ac4:	4d15      	ldr	r5, [pc, #84]	; (8004b1c <comm_usb_serial_init+0x5c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8004ac6:	4c16      	ldr	r4, [pc, #88]	; (8004b20 <comm_usb_serial_init+0x60>)
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f240 5202 	movw	r2, #1282	; 0x502
 8004ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ad2:	f7fe fb6d 	bl	80031b0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
 8004ad6:	f240 5202 	movw	r2, #1282	; 0x502
 8004ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f7fe fb66 	bl	80031b0 <_pal_lld_setgroupmode>
	sduObjectInit(&SDU1);
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f7fd f9cb 	bl	8001e80 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 8004aea:	490e      	ldr	r1, [pc, #56]	; (8004b24 <comm_usb_serial_init+0x64>)
 8004aec:	4628      	mov	r0, r5
 8004aee:	f7fd f9f7 	bl	8001ee0 <sduStart>
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8004af2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004af4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004af6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004afa:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 8004afc:	f643 2098 	movw	r0, #15000	; 0x3a98
 8004b00:	f7fc fc8e 	bl	8001420 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 8004b04:	4620      	mov	r0, r4
 8004b06:	4908      	ldr	r1, [pc, #32]	; (8004b28 <comm_usb_serial_init+0x68>)
 8004b08:	f7fd fb32 	bl	8002170 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 8004b0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004b0e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b14:	6393      	str	r3, [r2, #56]	; 0x38
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	40020000 	.word	0x40020000
 8004b1c:	2000180c 	.word	0x2000180c
 8004b20:	20000f88 	.word	0x20000f88
 8004b24:	08008820 	.word	0x08008820
 8004b28:	080086f0 	.word	0x080086f0
 8004b2c:	00000000 	.word	0x00000000

08004b30 <comm_usb_serial_is_active>:
}

int comm_usb_serial_is_active(void) {
	return SDU1.config->usbp->state == USB_ACTIVE;
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <comm_usb_serial_is_active+0x18>)
 8004b32:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	7818      	ldrb	r0, [r3, #0]
 8004b3a:	f1a0 0004 	sub.w	r0, r0, #4
 8004b3e:	fab0 f080 	clz	r0, r0
 8004b42:	0940      	lsrs	r0, r0, #5
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2000180c 	.word	0x2000180c
 8004b4c:	00000000 	.word	0x00000000

08004b50 <comm_update>:
#include "hal.h"

static CommInterface comm = CAN;

static THD_WORKING_AREA(comm_update_wa, 1024);
static THD_FUNCTION(comm_update, arg) {
 8004b50:	b508      	push	{r3, lr}
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <comm_update+0x18>)
 8004b54:	4a05      	ldr	r2, [pc, #20]	; (8004b6c <comm_update+0x1c>)
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	619a      	str	r2, [r3, #24]
    chRegSetThreadName("Comm update");

    for(;;) {
        switch(comm) {
            case CAN:
                comm_can_update();
 8004b5a:	f7ff ff51 	bl	8004a00 <comm_can_update>
                break;
        }

        // Forward commands to CAN and USB
        
        chThdSleepMilliseconds(10);
 8004b5e:	2064      	movs	r0, #100	; 0x64
 8004b60:	f7fc fc5e 	bl	8001420 <chThdSleep>
 8004b64:	e7f9      	b.n	8004b5a <comm_update+0xa>
 8004b66:	bf00      	nop
 8004b68:	20000c40 	.word	0x20000c40
 8004b6c:	08008840 	.word	0x08008840

08004b70 <comm_init>:
    }
}

void comm_init(void)
{
 8004b70:	b500      	push	{lr}
 8004b72:	b083      	sub	sp, #12
    switch(comm) {
        case CAN:
            comm_can_init();
 8004b74:	f7ff ff3c 	bl	80049f0 <comm_can_init>
        case NUNCHUK:
            break;
        case CUSTOM:
            break;
    }
    chThdCreateStatic(comm_update_wa, sizeof(comm_update_wa), NORMALPRIO, comm_update, NULL);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2240      	movs	r2, #64	; 0x40
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <comm_init+0x20>)
 8004b80:	4804      	ldr	r0, [pc, #16]	; (8004b94 <comm_init+0x24>)
 8004b82:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8004b86:	f7fc fc13 	bl	80013b0 <chThdCreateStatic>
 8004b8a:	b003      	add	sp, #12
 8004b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b90:	08004b51 	.word	0x08004b51
 8004b94:	20001cb8 	.word	0x20001cb8
	...

08004ba0 <controller_init>:
    chSysUnlockFromISR();
    CH_IRQ_EPILOGUE();
}

void controller_init(void)
{   
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 8004ba4:	4dae      	ldr	r5, [pc, #696]	; (8004e60 <controller_init+0x2c0>)
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8004ba6:	4eaf      	ldr	r6, [pc, #700]	; (8004e64 <controller_init+0x2c4>)
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef  TIM_OCInitStructure;
    TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
    TIM_DeInit(TIM1);
 8004ba8:	4caf      	ldr	r4, [pc, #700]	; (8004e68 <controller_init+0x2c8>)
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8004baa:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8004e74 <controller_init+0x2d4>
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
    ADC_InitStructure.ADC_ExternalTrigConv = 0;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfConversion = 1;

    ADC_Init(ADC1, &ADC_InitStructure);
 8004bae:	4faf      	ldr	r7, [pc, #700]	; (8004e6c <controller_init+0x2cc>)
    chSysUnlockFromISR();
    CH_IRQ_EPILOGUE();
}

void controller_init(void)
{   
 8004bb0:	b0a9      	sub	sp, #164	; 0xa4
    palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	f7fe fafa 	bl	80031b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	f7fe faf5 	bl	80031b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	2203      	movs	r2, #3
 8004bca:	2104      	movs	r1, #4
 8004bcc:	f7fe faf0 	bl	80031b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	229a      	movs	r2, #154	; 0x9a
 8004bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bd8:	f7fe faea 	bl	80031b0 <_pal_lld_setgroupmode>
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8004bdc:	4628      	mov	r0, r5
 8004bde:	229a      	movs	r2, #154	; 0x9a
 8004be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004be4:	f7fe fae4 	bl	80031b0 <_pal_lld_setgroupmode>
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8004be8:	4628      	mov	r0, r5
 8004bea:	229a      	movs	r2, #154	; 0x9a
 8004bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bf0:	f7fe fade 	bl	80031b0 <_pal_lld_setgroupmode>
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	229a      	movs	r2, #154	; 0x9a
 8004bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bfc:	f7fe fad8 	bl	80031b0 <_pal_lld_setgroupmode>
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8004c00:	4630      	mov	r0, r6
 8004c02:	229a      	movs	r2, #154	; 0x9a
 8004c04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c08:	f7fe fad2 	bl	80031b0 <_pal_lld_setgroupmode>
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |
 8004c0c:	229a      	movs	r2, #154	; 0x9a
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c14:	f7fe facc 	bl	80031b0 <_pal_lld_setgroupmode>
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef  TIM_OCInitStructure;
    TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
    TIM_DeInit(TIM1);
 8004c18:	4620      	mov	r0, r4
    TIM1->CNT = 0;
 8004c1a:	2500      	movs	r5, #0
            PAL_STM32_OSPEED_HIGHEST |
            PAL_STM32_PUPDR_FLOATING);
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef  TIM_OCInitStructure;
    TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
    TIM_DeInit(TIM1);
 8004c1c:	f000 fdf8 	bl	8005810 <TIM_DeInit>
    TIM1->CNT = 0;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004c20:	2101      	movs	r1, #1
 8004c22:	4608      	mov	r0, r1
            PAL_STM32_PUPDR_FLOATING);
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef  TIM_OCInitStructure;
    TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
    TIM_DeInit(TIM1);
    TIM1->CNT = 0;
 8004c24:	6265      	str	r5, [r4, #36]	; 0x24
    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned2; // compare flag when upcounting
    TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / 2 / PWM_FREQ;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 1; // Only generate update event on underflow
 8004c26:	2601      	movs	r6, #1
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef  TIM_OCInitStructure;
    TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
    TIM_DeInit(TIM1);
    TIM1->CNT = 0;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004c28:	f000 fdc2 	bl	80057b0 <RCC_APB2PeriphClockCmd>
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned2; // compare flag when upcounting
    TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / 2 / PWM_FREQ;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 1; // Only generate update event on underflow

    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8004c2c:	4620      	mov	r0, r4
    TIM1->CNT = 0;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned2; // compare flag when upcounting
 8004c2e:	2240      	movs	r2, #64	; 0x40
    TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / 2 / PWM_FREQ;
 8004c30:	f241 0368 	movw	r3, #4200	; 0x1068
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 1; // Only generate update event on underflow

    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8004c34:	a903      	add	r1, sp, #12
    TIM1->CNT = 0;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned2; // compare flag when upcounting
 8004c36:	f8ad 200e 	strh.w	r2, [sp, #14]
    TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / 2 / PWM_FREQ;
 8004c3a:	9304      	str	r3, [sp, #16]
    TIM_DeInit(TIM1);
    TIM1->CNT = 0;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8004c3c:	f8ad 500c 	strh.w	r5, [sp, #12]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned2; // compare flag when upcounting
    TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK / 2 / PWM_FREQ;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8004c40:	f8ad 5014 	strh.w	r5, [sp, #20]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 1; // Only generate update event on underflow
 8004c44:	f88d 6016 	strb.w	r6, [sp, #22]

    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8004c48:	f000 fec2 	bl	80059d0 <TIM_TimeBaseInit>

    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
    TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8004c4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8004c4e:	f8ad 603a 	strh.w	r6, [sp, #58]	; 0x3a
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
    TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8004c52:	40f3      	lsrs	r3, r6
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 1; // Only generate update event on underflow

    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8004c54:	2260      	movs	r2, #96	; 0x60
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

    TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8004c56:	4620      	mov	r0, r4
 8004c58:	a90e      	add	r1, sp, #56	; 0x38
    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8004c5a:	f04f 0a04 	mov.w	sl, #4
    TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8004c5e:	f44f 7980 	mov.w	r9, #256	; 0x100

    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
    TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8004c62:	9310      	str	r3, [sp, #64]	; 0x40
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 8004c64:	f44f 7300 	mov.w	r3, #512	; 0x200
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 1; // Only generate update event on underflow

    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8004c68:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
    TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 8004c6c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
    TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8004c70:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
    TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8004c74:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8004c78:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

    // Channel 1, 2 and 3 Configuration in PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8004c7c:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

    TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8004c80:	f000 ff16 	bl	8005ab0 <TIM_OC1Init>
    TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 8004c84:	a90e      	add	r1, sp, #56	; 0x38
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 ff52 	bl	8005b30 <TIM_OC2Init>
    TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 8004c8c:	a90e      	add	r1, sp, #56	; 0x38
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 ff8e 	bl	8005bb0 <TIM_OC3Init>
    TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8004c94:	a90e      	add	r1, sp, #56	; 0x38
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 ffd2 	bl	8005c40 <TIM_OC4Init>

    TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	2108      	movs	r1, #8
 8004ca0:	f001 f806 	bl	8005cb0 <TIM_OC1PreloadConfig>
    TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	2108      	movs	r1, #8
 8004ca8:	f001 f80a 	bl	8005cc0 <TIM_OC2PreloadConfig>
    TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8004cac:	4620      	mov	r0, r4
 8004cae:	2108      	movs	r1, #8
 8004cb0:	f001 f816 	bl	8005ce0 <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	2108      	movs	r1, #8
 8004cb8:	f001 f81a 	bl	8005cf0 <TIM_OC4PreloadConfig>

    // Automatic Output enable, Break, dead time and lock configuration
    TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
    TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
    TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    TIM_BDTRInitStructure.TIM_DeadTime = DEAD_TIME_CYCLES;
 8004cbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
    TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
    TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

    // Automatic Output enable, Break, dead time and lock configuration
    TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8004cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 8004cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    TIM_BDTRInitStructure.TIM_DeadTime = DEAD_TIME_CYCLES;
    TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
    TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
    TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

    TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8004cc8:	4620      	mov	r0, r4
    TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
    TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
    TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    TIM_BDTRInitStructure.TIM_DeadTime = DEAD_TIME_CYCLES;
    TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
    TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 8004cca:	f44f 5b00 	mov.w	fp, #8192	; 0x2000

    // Automatic Output enable, Break, dead time and lock configuration
    TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
    TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
    TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    TIM_BDTRInitStructure.TIM_DeadTime = DEAD_TIME_CYCLES;
 8004cce:	f8ad 101e 	strh.w	r1, [sp, #30]
    TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
    TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
    TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

    TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8004cd2:	a906      	add	r1, sp, #24
    TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
    TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
    TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

    // Automatic Output enable, Break, dead time and lock configuration
    TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8004cd4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8004cd8:	9301      	str	r3, [sp, #4]
    TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
 8004cda:	f8ad 201a 	strh.w	r2, [sp, #26]
 8004cde:	9200      	str	r2, [sp, #0]
    TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8004ce0:	f8ad 501c 	strh.w	r5, [sp, #28]
    TIM_BDTRInitStructure.TIM_DeadTime = DEAD_TIME_CYCLES;
    TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 8004ce4:	f8ad 5020 	strh.w	r5, [sp, #32]
    TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
    TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8004ce8:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
    TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
    TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    TIM_BDTRInitStructure.TIM_DeadTime = DEAD_TIME_CYCLES;
    TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
    TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 8004cec:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
    TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

    TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8004cf0:	f001 f80e 	bl	8005d10 <TIM_BDTRConfig>
    TIM_CCPreloadControl(TIM1, ENABLE);
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f001 f832 	bl	8005d60 <TIM_CCPreloadControl>
    TIM_ARRPreloadConfig(TIM1, ENABLE);
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 feb6 	bl	8005a70 <TIM_ARRPreloadConfig>
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    DMA_InitTypeDef DMA_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;

    // Clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8004d04:	4631      	mov	r1, r6
 8004d06:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004d0a:	f000 fd31 	bl	8005770 <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 8004d0e:	4631      	mov	r1, r6
 8004d10:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8004d14:	f000 fd4c 	bl	80057b0 <RCC_APB2PeriphClockCmd>
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    DMA_InitStructure.DMA_BufferSize = 3;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8004d18:	9a00      	ldr	r2, [sp, #0]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8004d1a:	9b01      	ldr	r3, [sp, #4]
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

    // DMA for the ADC
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 8004d1c:	f8df e158 	ldr.w	lr, [pc, #344]	; 8004e78 <controller_init+0x2d8>
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    DMA_InitStructure.DMA_BufferSize = 3;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8004d20:	921f      	str	r2, [sp, #124]	; 0x7c
    // DMA for the ADC
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    DMA_InitStructure.DMA_BufferSize = 3;
 8004d22:	f04f 0c03 	mov.w	ip, #3
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

    // DMA for the ADC
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 8004d26:	4a52      	ldr	r2, [pc, #328]	; (8004e70 <controller_init+0x2d0>)
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    DMA_InitStructure.DMA_BufferSize = 3;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8004d28:	9320      	str	r3, [sp, #128]	; 0x80
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8004d2a:	4640      	mov	r0, r8
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8004d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8004d30:	a919      	add	r1, sp, #100	; 0x64
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

    // DMA for the ADC
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 8004d32:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    DMA_InitStructure.DMA_BufferSize = 3;
 8004d36:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

    // DMA for the ADC
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 8004d3a:	921a      	str	r2, [sp, #104]	; 0x68
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8004d3c:	9323      	str	r3, [sp, #140]	; 0x8c
    DMA_InitStructure.DMA_BufferSize = 3;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8004d3e:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
    // Clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

    // DMA for the ADC
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8004d42:	9519      	str	r5, [sp, #100]	; 0x64
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8004d44:	951c      	str	r5, [sp, #112]	; 0x70
    DMA_InitStructure.DMA_BufferSize = 3;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004d46:	951e      	str	r5, [sp, #120]	; 0x78
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8004d48:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8004d4c:	9524      	str	r5, [sp, #144]	; 0x90
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8004d4e:	9525      	str	r5, [sp, #148]	; 0x94
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8004d50:	9526      	str	r5, [sp, #152]	; 0x98
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004d52:	9527      	str	r5, [sp, #156]	; 0x9c
    DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8004d54:	f000 fccc 	bl	80056f0 <DMA_Init>

    // DMA2_Stream0 enable
    DMA_Cmd(DMA2_Stream4, ENABLE);
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	f000 fcf8 	bl	8005750 <DMA_Cmd>

    // ADC Common Init
    // Note that the ADC is running at 42MHz, which is higher than the
    // specified 36MHz in the data sheet, but it works.
    ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_InjecSimult;
 8004d60:	2215      	movs	r2, #21
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8004d62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure);
 8004d66:	a80a      	add	r0, sp, #40	; 0x28
    DMA_Cmd(DMA2_Stream4, ENABLE);

    // ADC Common Init
    // Note that the ADC is running at 42MHz, which is higher than the
    // specified 36MHz in the data sheet, but it works.
    ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_InjecSimult;
 8004d68:	920a      	str	r2, [sp, #40]	; 0x28
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8004d6a:	930c      	str	r3, [sp, #48]	; 0x30
    ADC_InitStructure.ADC_ExternalTrigConv = 0;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfConversion = 1;

    ADC_Init(ADC1, &ADC_InitStructure);
    ADC_Init(ADC2, &ADC_InitStructure);
 8004d6c:	44b9      	add	r9, r7
    ADC_Init(ADC3, &ADC_InitStructure);
 8004d6e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004e7c <controller_init+0x2dc>

    // ADC Common Init
    // Note that the ADC is running at 42MHz, which is higher than the
    // specified 36MHz in the data sheet, but it works.
    ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_InjecSimult;
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8004d72:	950b      	str	r5, [sp, #44]	; 0x2c
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8004d74:	950d      	str	r5, [sp, #52]	; 0x34
    ADC_CommonInit(&ADC_CommonInitStructure);
 8004d76:	f000 fb7b 	bl	8005470 <ADC_CommonInit>
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
    ADC_InitStructure.ADC_ExternalTrigConv = 0;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfConversion = 1;

    ADC_Init(ADC1, &ADC_InitStructure);
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	a913      	add	r1, sp, #76	; 0x4c
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure);

    // Channel-specific settings
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8004d7e:	9513      	str	r5, [sp, #76]	; 0x4c
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8004d80:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8004d84:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    // ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
    // ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC4;
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8004d88:	9515      	str	r5, [sp, #84]	; 0x54
    ADC_InitStructure.ADC_ExternalTrigConv = 0;
 8004d8a:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8004d8c:	9517      	str	r5, [sp, #92]	; 0x5c
    ADC_InitStructure.ADC_NbrOfConversion = 1;
 8004d8e:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60

    ADC_Init(ADC1, &ADC_InitStructure);
 8004d92:	f000 fb45 	bl	8005420 <ADC_Init>
    ADC_Init(ADC2, &ADC_InitStructure);
 8004d96:	a913      	add	r1, sp, #76	; 0x4c
 8004d98:	4648      	mov	r0, r9
 8004d9a:	f000 fb41 	bl	8005420 <ADC_Init>
    ADC_Init(ADC3, &ADC_InitStructure);
 8004d9e:	a913      	add	r1, sp, #76	; 0x4c
 8004da0:	4640      	mov	r0, r8
 8004da2:	f000 fb3d 	bl	8005420 <ADC_Init>

    // Enable Vrefint channel
    // ADC_TempSensorVrefintCmd(ENABLE);

    // Enable DMA request after last transfer (Multi-ADC mode)
    ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 8004da6:	4630      	mov	r0, r6
 8004da8:	f000 fb8a 	bl	80054c0 <ADC_MultiModeDMARequestAfterLastTransferCmd>

    // Injected channels for current measurement at end of cycle
    ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_T1_CC4);
 8004dac:	4629      	mov	r1, r5
 8004dae:	4638      	mov	r0, r7
 8004db0:	f000 fbce 	bl	8005550 <ADC_ExternalTrigInjectedConvConfig>
    // ADC_ExternalTrigInjectedConvConfig(ADC2, ADC_ExternalTrigInjecConv_T8_CC2);
    ADC_ExternalTrigInjectedConvEdgeConfig(ADC1, ADC_ExternalTrigInjecConvEdge_Falling);
 8004db4:	4638      	mov	r0, r7
 8004db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dba:	f000 fbd1 	bl	8005560 <ADC_ExternalTrigInjectedConvEdgeConfig>
    // ADC_ExternalTrigInjectedConvEdgeConfig(ADC2, ADC_ExternalTrigInjecConvEdge_Falling);
    ADC_InjectedSequencerLengthConfig(ADC1, 1);
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f000 fbbd 	bl	8005540 <ADC_InjectedSequencerLengthConfig>
    ADC_InjectedSequencerLengthConfig(ADC2, 1);
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4648      	mov	r0, r9
 8004dca:	f000 fbb9 	bl	8005540 <ADC_InjectedSequencerLengthConfig>
    ADC_InjectedSequencerLengthConfig(ADC3, 1);
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f000 fbb5 	bl	8005540 <ADC_InjectedSequencerLengthConfig>
    // ADC_InjectedSequencerLengthConfig(ADC2, 2);

    // ADC1 regular channels
    ADC_InjectedChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8004dd6:	4633      	mov	r3, r6
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f000 fb7f 	bl	80054e0 <ADC_InjectedChannelConfig>
    // ADC_RegularChannelConfig(ADC1, ADC_Channel_Vrefint, 3, ADC_SampleTime_15Cycles);

    // ADC2 regular channels
    ADC_InjectedChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8004de2:	4633      	mov	r3, r6
 8004de4:	4632      	mov	r2, r6
 8004de6:	4631      	mov	r1, r6
 8004de8:	4648      	mov	r0, r9
 8004dea:	f000 fb79 	bl	80054e0 <ADC_InjectedChannelConfig>

    // ADC3 regular channels
    ADC_InjectedChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 8004dee:	4633      	mov	r3, r6
 8004df0:	4632      	mov	r2, r6
 8004df2:	4640      	mov	r0, r8
 8004df4:	2102      	movs	r1, #2
 8004df6:	f000 fb73 	bl	80054e0 <ADC_InjectedChannelConfig>

    // Interrupt
    ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f240 4107 	movw	r1, #1031	; 0x407
 8004e02:	f000 fbc5 	bl	8005590 <ADC_ITConfig>
    nvicEnableVector(ADC_IRQn, 4);
 8004e06:	4651      	mov	r1, sl
 8004e08:	2012      	movs	r0, #18
 8004e0a:	f7fd fc91 	bl	8002730 <nvicEnableVector>

    // Enable ADC1
    ADC_Cmd(ADC1, ENABLE);
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4638      	mov	r0, r7
 8004e12:	f000 fb45 	bl	80054a0 <ADC_Cmd>

    // Enable ADC2
    ADC_Cmd(ADC2, ENABLE);
 8004e16:	4631      	mov	r1, r6
 8004e18:	4648      	mov	r0, r9
 8004e1a:	f000 fb41 	bl	80054a0 <ADC_Cmd>

    // Enable ADC3
    ADC_Cmd(ADC3, ENABLE);
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4640      	mov	r0, r8
 8004e22:	f000 fb3d 	bl	80054a0 <ADC_Cmd>

    TIM_Cmd(TIM1, ENABLE);
 8004e26:	4631      	mov	r1, r6
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 fe31 	bl	8005a90 <TIM_Cmd>
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 ff85 	bl	8005d40 <TIM_CtrlPWMOutputs>

    SET_DUTY(0, 0, 0);
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e40:	6365      	str	r5, [r4, #52]	; 0x34
 8004e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e44:	63a5      	str	r5, [r4, #56]	; 0x38
 8004e46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e48:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004e4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e4c:	3b02      	subs	r3, #2
 8004e4e:	6423      	str	r3, [r4, #64]	; 0x40
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	f023 0302 	bic.w	r3, r3, #2
 8004e56:	6023      	str	r3, [r4, #0]
}
 8004e58:	b029      	add	sp, #164	; 0xa4
 8004e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5e:	bf00      	nop
 8004e60:	40020000 	.word	0x40020000
 8004e64:	40020400 	.word	0x40020400
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40012000 	.word	0x40012000
 8004e70:	40012308 	.word	0x40012308
 8004e74:	40026470 	.word	0x40026470
 8004e78:	20002254 	.word	0x20002254
 8004e7c:	40012200 	.word	0x40012200

08004e80 <controller_print_adc>:
    }

}

void controller_print_adc(void)
{
 8004e80:	b510      	push	{r4, lr}
    // if (state == ZEROING)
    {
        USB_PRINT("%f\n", angle);
 8004e82:	f7ff fe55 	bl	8004b30 <comm_usb_serial_is_active>
 8004e86:	b900      	cbnz	r0, 8004e8a <controller_print_adc+0xa>
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <controller_print_adc+0x24>)
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	f7fb fb9b 	bl	80005c8 <__aeabi_f2d>
    }
    // USB_PRINT("%d %d %d\n", adc1, adc2, adc3);
}
 8004e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void controller_print_adc(void)
{
    // if (state == ZEROING)
    {
        USB_PRINT("%f\n", angle);
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4803      	ldr	r0, [pc, #12]	; (8004ea8 <controller_print_adc+0x28>)
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <controller_print_adc+0x2c>)
 8004e9e:	f7ff bc8f 	b.w	80047c0 <chprintf>
 8004ea2:	bf00      	nop
 8004ea4:	2000225c 	.word	0x2000225c
 8004ea8:	2000180c 	.word	0x2000180c
 8004eac:	08008850 	.word	0x08008850

08004eb0 <controller_apply_zsm>:
void controller_apply_zsm(float *a, float *b, float *c)
{
    switch(zsm_mode)
    {
        case SINUSOIDAL:
            zsm_sinusoidal(a, b, c);
 8004eb0:	f000 ba96 	b.w	80053e0 <zsm_sinusoidal>
	...

08004ec0 <controller_update>:
static int e = 0;
static float angle = 0;

/* Updates the controller state machine. Called as an interrupt handler on new ADC sample. */
void controller_update(void)
{
 8004ec0:	b500      	push	{lr}
    switch(state)
 8004ec2:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <controller_update+0xf0>)
 8004ec4:	7813      	ldrb	r3, [r2, #0]
 8004ec6:	2b01      	cmp	r3, #1
static int e = 0;
static float angle = 0;

/* Updates the controller state machine. Called as an interrupt handler on new ADC sample. */
void controller_update(void)
{
 8004ec8:	b087      	sub	sp, #28
    switch(state)
 8004eca:	d00f      	beq.n	8004eec <controller_update+0x2c>
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d10a      	bne.n	8004ee6 <controller_update+0x26>
            // transforms_inverse_clarke(alpha, beta, &a, &b, &c);
            // controller_apply_zsm(&a, &b, &c);
            // SET_DUTY(a, b, c);
            break;
        case ZEROING:
            if (e++ < 4000)
 8004ed0:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <controller_update+0xf4>)
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	1c48      	adds	r0, r1, #1
 8004ed6:	f5b1 6f7a 	cmp.w	r1, #4000	; 0xfa0
 8004eda:	6018      	str	r0, [r3, #0]
 8004edc:	db1a      	blt.n	8004f14 <controller_update+0x54>
                SET_DUTY(a, b, c);
                angle = encoder_get_angle();
            }
            else
            {
                e = 0;
 8004ede:	2000      	movs	r0, #0
                state = RUNNING;
 8004ee0:	2101      	movs	r1, #1
                SET_DUTY(a, b, c);
                angle = encoder_get_angle();
            }
            else
            {
                e = 0;
 8004ee2:	6018      	str	r0, [r3, #0]
                state = RUNNING;
 8004ee4:	7011      	strb	r1, [r2, #0]
            }
            break;
    }

}
 8004ee6:	b007      	add	sp, #28
 8004ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    switch(state)
    {
        case STOPPED:
            break;
        case RUNNING:
            angle = encoder_get_angle();
 8004eec:	f000 f890 	bl	8005010 <encoder_get_angle>
 8004ef0:	4b31      	ldr	r3, [pc, #196]	; (8004fb8 <controller_update+0xf8>)
            adc1 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8004ef2:	4832      	ldr	r0, [pc, #200]	; (8004fbc <controller_update+0xfc>)
    switch(state)
    {
        case STOPPED:
            break;
        case RUNNING:
            angle = encoder_get_angle();
 8004ef4:	ed83 0a00 	vstr	s0, [r3]
            adc1 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8004ef8:	2114      	movs	r1, #20
 8004efa:	f000 fb39 	bl	8005570 <ADC_GetInjectedConversionValue>
            adc2 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8004efe:	2114      	movs	r1, #20
 8004f00:	482f      	ldr	r0, [pc, #188]	; (8004fc0 <controller_update+0x100>)
 8004f02:	f000 fb35 	bl	8005570 <ADC_GetInjectedConversionValue>
            adc3 = ADC_GetInjectedConversionValue(ADC3, ADC_InjectedChannel_1);
 8004f06:	2114      	movs	r1, #20
 8004f08:	482e      	ldr	r0, [pc, #184]	; (8004fc4 <controller_update+0x104>)
 8004f0a:	f000 fb31 	bl	8005570 <ADC_GetInjectedConversionValue>
                state = RUNNING;
            }
            break;
    }

}
 8004f0e:	b007      	add	sp, #28
 8004f10:	f85d fb04 	ldr.w	pc, [sp], #4
            break;
        case ZEROING:
            if (e++ < 4000)
            {
                float a, b, c, alpha, beta;
                transforms_inverse_park(0.25, 0, 0, &alpha, &beta);
 8004f14:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8004fc8 <controller_update+0x108>
 8004f18:	a905      	add	r1, sp, #20
 8004f1a:	eef0 0a41 	vmov.f32	s1, s2
 8004f1e:	a804      	add	r0, sp, #16
 8004f20:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8004f24:	f000 f89c 	bl	8005060 <transforms_inverse_park>
                transforms_inverse_clarke(alpha, beta, &a, &b, &c);
 8004f28:	eddd 0a05 	vldr	s1, [sp, #20]
 8004f2c:	ed9d 0a04 	vldr	s0, [sp, #16]
 8004f30:	aa03      	add	r2, sp, #12
 8004f32:	a902      	add	r1, sp, #8
 8004f34:	a801      	add	r0, sp, #4
 8004f36:	f000 f913 	bl	8005160 <transforms_inverse_clarke>
                controller_apply_zsm(&a, &b, &c);
 8004f3a:	aa03      	add	r2, sp, #12
 8004f3c:	a902      	add	r1, sp, #8
 8004f3e:	a801      	add	r0, sp, #4
 8004f40:	f7ff ffb6 	bl	8004eb0 <controller_apply_zsm>
                SET_DUTY(a, b, c);
 8004f44:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <controller_update+0x10c>)
 8004f46:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	eddd 7a02 	vldr	s15, [sp, #8]
 8004f50:	ed9d 6a03 	vldr	s12, [sp, #12]
 8004f54:	f042 0202 	orr.w	r2, r2, #2
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8004f5e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f62:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004f66:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8004f6a:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
 8004f6e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004f72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f7a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004f7e:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
 8004f82:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f92:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	3a02      	subs	r2, #2
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	f022 0202 	bic.w	r2, r2, #2
 8004fa2:	601a      	str	r2, [r3, #0]
                angle = encoder_get_angle();
 8004fa4:	f000 f834 	bl	8005010 <encoder_get_angle>
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <controller_update+0xf8>)
 8004faa:	ed83 0a00 	vstr	s0, [r3]
 8004fae:	e79a      	b.n	8004ee6 <controller_update+0x26>
 8004fb0:	20000807 	.word	0x20000807
 8004fb4:	20002250 	.word	0x20002250
 8004fb8:	2000225c 	.word	0x2000225c
 8004fbc:	40012000 	.word	0x40012000
 8004fc0:	40012100 	.word	0x40012100
 8004fc4:	40012200 	.word	0x40012200
 8004fc8:	00000000 	.word	0x00000000
 8004fcc:	40010000 	.word	0x40010000

08004fd0 <Vector88>:

static ZSMMode zsm_mode = SINUSOIDAL;
static ControllerState state = ZEROING;
volatile uint16_t ADC_Value[3];

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
 8004fd0:	b508      	push	{r3, lr}
 8004fd2:	2320      	movs	r3, #32
 8004fd4:	f383 8811 	msr	BASEPRI, r3
    CH_IRQ_PROLOGUE();
    chSysLockFromISR();
    ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
 8004fd8:	f240 4107 	movw	r1, #1031	; 0x407
 8004fdc:	4805      	ldr	r0, [pc, #20]	; (8004ff4 <Vector88+0x24>)
 8004fde:	f000 fae7 	bl	80055b0 <ADC_ClearITPendingBit>
    controller_update();
 8004fe2:	f7ff ff6d 	bl	8004ec0 <controller_update>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f383 8811 	msr	BASEPRI, r3
    chSysUnlockFromISR();
    CH_IRQ_EPILOGUE();
}
 8004fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    CH_IRQ_PROLOGUE();
    chSysLockFromISR();
    ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
    controller_update();
    chSysUnlockFromISR();
    CH_IRQ_EPILOGUE();
 8004ff0:	f7fc bb8e 	b.w	8001710 <_port_irq_epilogue>
 8004ff4:	40012000 	.word	0x40012000
	...

08005000 <encoder_init>:
        case AS5045B:
        case AS5145B:
            as5x45_init(encoderType);
            break;
        case AS5x47P:
            as5x47_init();
 8005000:	f7ff bc6e 	b.w	80048e0 <as5x47_init>
	...

08005010 <encoder_get_angle>:
    }
}

/* Returns rotor electrical degrees */
float encoder_get_angle(void)
{
 8005010:	b508      	push	{r3, lr}
        case AS5145B:
            deg = as5x45_get_angle() - encoderZero;
            edeg = fmod(deg, 360.0f / polePairs) * polePairs;
            break;
        case AS5x47P:
            deg = as5x47_get_angle() - encoderZero;
 8005012:	f7ff fccd 	bl	80049b0 <as5x47_get_angle>
            edeg = fmod(deg, 360.0f / polePairs) * polePairs;
 8005016:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800501a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800501e:	ee17 0a90 	vmov	r0, s15
 8005022:	f7fb fad1 	bl	80005c8 <__aeabi_f2d>
 8005026:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8005048 <encoder_get_angle+0x38>
 800502a:	ec41 0b10 	vmov	d0, r0, r1
 800502e:	f000 ffa7 	bl	8005f80 <fmod>
        case NONE:
            break;
        default:
            break;
    }
    return edeg;
 8005032:	2200      	movs	r2, #0
 8005034:	ec51 0b10 	vmov	r0, r1, d0
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <encoder_get_angle+0x40>)
 800503a:	f7fb fb19 	bl	8000670 <__aeabi_dmul>
 800503e:	f7fb fddf 	bl	8000c00 <__aeabi_d2f>
 8005042:	ee00 0a10 	vmov	s0, r0
 8005046:	bd08      	pop	{r3, pc}
 8005048:	60000000 	.word	0x60000000
 800504c:	4049b6db 	.word	0x4049b6db
 8005050:	401c0000 	.word	0x401c0000
	...

08005060 <transforms_inverse_park>:
    *d = alpha * (float)cos(fmod(theta, 360)) + beta * (float)sin(fmod(theta, 360));
    *q = beta * (float)cos(fmod(theta, 360)) - alpha * (float)sin(fmod(theta, 360));
}

void transforms_inverse_park(float d, float q, float theta, float *alpha, float *beta)
{
 8005060:	b530      	push	{r4, r5, lr}
 8005062:	ed2d 8b08 	vpush	{d8-d11}
 8005066:	4605      	mov	r5, r0
 8005068:	b085      	sub	sp, #20
    *alpha = d * (float)cos(fmod(theta, 360)) - q * (float)sin(fmod(theta, 360));
 800506a:	ee11 0a10 	vmov	r0, s2
 800506e:	ed9f ab3a 	vldr	d10, [pc, #232]	; 8005158 <transforms_inverse_park+0xf8>
    *d = alpha * (float)cos(fmod(theta, 360)) + beta * (float)sin(fmod(theta, 360));
    *q = beta * (float)cos(fmod(theta, 360)) - alpha * (float)sin(fmod(theta, 360));
}

void transforms_inverse_park(float d, float q, float theta, float *alpha, float *beta)
{
 8005072:	eeb0 8a40 	vmov.f32	s16, s0
 8005076:	eef0 8a60 	vmov.f32	s17, s1
 800507a:	460c      	mov	r4, r1
    *alpha = d * (float)cos(fmod(theta, 360)) - q * (float)sin(fmod(theta, 360));
 800507c:	f7fb faa4 	bl	80005c8 <__aeabi_f2d>
 8005080:	eeb0 1a4a 	vmov.f32	s2, s20
 8005084:	eef0 1a6a 	vmov.f32	s3, s21
 8005088:	ec41 0b10 	vmov	d0, r0, r1
 800508c:	ec41 0b19 	vmov	d9, r0, r1
 8005090:	f000 ff76 	bl	8005f80 <fmod>
 8005094:	f000 fe84 	bl	8005da0 <cos>
 8005098:	eeb0 1a4a 	vmov.f32	s2, s20
 800509c:	eef0 1a6a 	vmov.f32	s3, s21
 80050a0:	ec51 0b10 	vmov	r0, r1, d0
 80050a4:	eeb0 0a49 	vmov.f32	s0, s18
 80050a8:	eef0 0a69 	vmov.f32	s1, s19
 80050ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b0:	f000 ff66 	bl	8005f80 <fmod>
 80050b4:	f000 fed4 	bl	8005e60 <sin>
 80050b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050bc:	ed8d 0b00 	vstr	d0, [sp]
 80050c0:	f7fb fd9e 	bl	8000c00 <__aeabi_d2f>
 80050c4:	ed9d 0b00 	vldr	d0, [sp]
 80050c8:	ee07 0a90 	vmov	s15, r0
 80050cc:	ec51 0b10 	vmov	r0, r1, d0
 80050d0:	ee27 ba88 	vmul.f32	s22, s15, s16
 80050d4:	f7fb fd94 	bl	8000c00 <__aeabi_d2f>
    *beta = d * (float)sin(fmod(theta, 360)) + q * (float)cos(fmod(theta, 360));
 80050d8:	eeb0 1a4a 	vmov.f32	s2, s20
 80050dc:	eef0 1a6a 	vmov.f32	s3, s21
 80050e0:	eeb0 0a49 	vmov.f32	s0, s18
 80050e4:	eef0 0a69 	vmov.f32	s1, s19
    *q = beta * (float)cos(fmod(theta, 360)) - alpha * (float)sin(fmod(theta, 360));
}

void transforms_inverse_park(float d, float q, float theta, float *alpha, float *beta)
{
    *alpha = d * (float)cos(fmod(theta, 360)) - q * (float)sin(fmod(theta, 360));
 80050e8:	ee07 0a90 	vmov	s15, r0
 80050ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80050f0:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80050f4:	edc5 7a00 	vstr	s15, [r5]
    *beta = d * (float)sin(fmod(theta, 360)) + q * (float)cos(fmod(theta, 360));
 80050f8:	f000 ff42 	bl	8005f80 <fmod>
 80050fc:	f000 feb0 	bl	8005e60 <sin>
 8005100:	eeb0 1a4a 	vmov.f32	s2, s20
 8005104:	eef0 1a6a 	vmov.f32	s3, s21
 8005108:	ec51 0b10 	vmov	r0, r1, d0
 800510c:	eeb0 0a49 	vmov.f32	s0, s18
 8005110:	eef0 0a69 	vmov.f32	s1, s19
 8005114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005118:	f000 ff32 	bl	8005f80 <fmod>
 800511c:	f000 fe40 	bl	8005da0 <cos>
 8005120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005124:	ed8d 0b00 	vstr	d0, [sp]
 8005128:	f7fb fd6a 	bl	8000c00 <__aeabi_d2f>
 800512c:	ed9d 0b00 	vldr	d0, [sp]
 8005130:	ee07 0a90 	vmov	s15, r0
 8005134:	ec51 0b10 	vmov	r0, r1, d0
 8005138:	ee27 8a88 	vmul.f32	s16, s15, s16
 800513c:	f7fb fd60 	bl	8000c00 <__aeabi_d2f>
 8005140:	ee07 0a90 	vmov	s15, r0
 8005144:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8005148:	ee38 8a28 	vadd.f32	s16, s16, s17
 800514c:	ed84 8a00 	vstr	s16, [r4]
}
 8005150:	b005      	add	sp, #20
 8005152:	ecbd 8b08 	vpop	{d8-d11}
 8005156:	bd30      	pop	{r4, r5, pc}
 8005158:	00000000 	.word	0x00000000
 800515c:	40768000 	.word	0x40768000

08005160 <transforms_inverse_clarke>:
}

void transforms_inverse_clarke(float alpha, float beta, float *a, float *b, float *c)
{
    *a = alpha;
    *b = -alpha / 2.0 + (0.866 * beta);
 8005160:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80051b0 <transforms_inverse_clarke+0x50>
    *beta = (0.577 * a) + (1.154 * b);
}

void transforms_inverse_clarke(float alpha, float beta, float *a, float *b, float *c)
{
    *a = alpha;
 8005164:	ed80 0a00 	vstr	s0, [r0]
    *b = -alpha / 2.0 + (0.866 * beta);
 8005168:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800516c:	ee60 7a67 	vnmul.f32	s15, s0, s15
 8005170:	ee60 0a87 	vmul.f32	s1, s1, s14
    *c = -alpha / 2.0 - (0.866 * beta);
    // Multiply by 1/sqrt(3) because phase voltages have amplitude 1/sqrt(3) of bus voltage
    *a = (0.577 * (*a));
 8005174:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80051b4 <transforms_inverse_clarke+0x54>
}

void transforms_inverse_clarke(float alpha, float beta, float *a, float *b, float *c)
{
    *a = alpha;
    *b = -alpha / 2.0 + (0.866 * beta);
 8005178:	ee37 7aa0 	vadd.f32	s14, s15, s1
    *c = -alpha / 2.0 - (0.866 * beta);
 800517c:	ee77 7ae0 	vsub.f32	s15, s15, s1
}

void transforms_inverse_clarke(float alpha, float beta, float *a, float *b, float *c)
{
    *a = alpha;
    *b = -alpha / 2.0 + (0.866 * beta);
 8005180:	ed81 7a00 	vstr	s14, [r1]
    *c = -alpha / 2.0 - (0.866 * beta);
 8005184:	edc2 7a00 	vstr	s15, [r2]
    // Multiply by 1/sqrt(3) because phase voltages have amplitude 1/sqrt(3) of bus voltage
    *a = (0.577 * (*a));
 8005188:	edd0 7a00 	vldr	s15, [r0]
 800518c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005190:	edc0 7a00 	vstr	s15, [r0]
    *b = (0.577 * (*b));
 8005194:	edd1 7a00 	vldr	s15, [r1]
 8005198:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800519c:	edc1 7a00 	vstr	s15, [r1]
    *c = (0.577 * (*c));
 80051a0:	edd2 7a00 	vldr	s15, [r2]
 80051a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051a8:	edc2 7a00 	vstr	s15, [r2]
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	3f5db22d 	.word	0x3f5db22d
 80051b4:	3f13b646 	.word	0x3f13b646
	...

080051c0 <ws2812b_init>:
static uint8_t gamma_table[256];

// Private function prototypes
static uint32_t rgb_to_local(uint32_t color);

void ws2812b_init(void) {
 80051c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c4:	ed2d 8b02 	vpush	{d8}

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 80051c8:	4b61      	ldr	r3, [pc, #388]	; (8005350 <ws2812b_init+0x190>)
 80051ca:	4e62      	ldr	r6, [pc, #392]	; (8005354 <ws2812b_init+0x194>)
 80051cc:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8005374 <ws2812b_init+0x1b4>
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	611a      	str	r2, [r3, #16]
 80051dc:	469e      	mov	lr, r3
static uint8_t gamma_table[256];

// Private function prototypes
static uint32_t rgb_to_local(uint32_t color);

void ws2812b_init(void) {
 80051de:	b098      	sub	sp, #96	; 0x60

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 80051e0:	4615      	mov	r5, r2
 80051e2:	4611      	mov	r1, r2
 80051e4:	4637      	mov	r7, r6
 80051e6:	4633      	mov	r3, r6

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 80051e8:	2421      	movs	r4, #33	; 0x21
	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 80051ea:	2042      	movs	r0, #66	; 0x42
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 80051ec:	f3c1 4207 	ubfx	r2, r1, #16, #8
	g = gamma_table[g];
 80051f0:	f3c1 2807 	ubfx	r8, r1, #8, #8
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 80051f4:	f81c 2002 	ldrb.w	r2, [ip, r2]
	g = gamma_table[g];
 80051f8:	f81c 8008 	ldrb.w	r8, [ip, r8]
	b = gamma_table[b];
 80051fc:	b2c9      	uxtb	r1, r1

	return (g << 16) | (r << 8) | b;
 80051fe:	0212      	lsls	r2, r2, #8
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
	g = gamma_table[g];
	b = gamma_table[b];
 8005200:	f81c 1001 	ldrb.w	r1, [ip, r1]

	return (g << 16) | (r << 8) | b;
 8005204:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8005208:	430a      	orrs	r2, r1
 800520a:	f103 0130 	add.w	r1, r3, #48	; 0x30

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
 800520e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 8005212:	bf14      	ite	ne
 8005214:	8018      	strhne	r0, [r3, #0]
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 8005216:	801c      	strheq	r4, [r3, #0]
 8005218:	3302      	adds	r3, #2
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 800521a:	428b      	cmp	r3, r1
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
			}
			tmp_color <<= 1;
 800521c:	ea4f 0242 	mov.w	r2, r2, lsl #1
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 8005220:	d1f5      	bne.n	800520e <ws2812b_init+0x4e>
 8005222:	3518      	adds	r5, #24

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
 8005224:	2d78      	cmp	r5, #120	; 0x78
 8005226:	d002      	beq.n	800522e <ws2812b_init+0x6e>
 8005228:	f85e 1f04 	ldr.w	r1, [lr, #4]!
 800522c:	e7de      	b.n	80051ec <ws2812b_init+0x2c>
 800522e:	4b4a      	ldr	r3, [pc, #296]	; (8005358 <ws2812b_init+0x198>)
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
 8005230:	2100      	movs	r1, #0
 8005232:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005236:	f823 1f02 	strh.w	r1, [r3, #2]!
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 800523a:	429a      	cmp	r2, r3
 800523c:	d1fb      	bne.n	8005236 <ws2812b_init+0x76>
 800523e:	4d47      	ldr	r5, [pc, #284]	; (800535c <ws2812b_init+0x19c>)
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 8005240:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8005360 <ws2812b_init+0x1a0>
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 8005244:	2400      	movs	r4, #0
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 8005246:	ee07 4a90 	vmov	s15, r4
 800524a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800524e:	eddf 0a45 	vldr	s1, [pc, #276]	; 8005364 <ws2812b_init+0x1a4>
 8005252:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8005256:	f000 fefb 	bl	8006050 <powf>
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 800525a:	3401      	adds	r4, #1
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 800525c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005260:	f000 fe5e 	bl	8005f20 <roundf>
 8005264:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 8005268:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 800526c:	ee17 3a90 	vmov	r3, s15
 8005270:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 8005274:	d1e7      	bne.n	8005246 <ws2812b_init+0x86>
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
	}

	palSetPadMode(GPIOB, 0,
 8005276:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800527a:	2101      	movs	r1, #1
 800527c:	483a      	ldr	r0, [pc, #232]	; (8005368 <ws2812b_init+0x1a8>)
 800527e:	f7fd ff97 	bl	80031b0 <_pal_lld_setgroupmode>
			PAL_MODE_ALTERNATE(GPIO_AF_TIM3) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8005282:	2101      	movs	r1, #1
 8005284:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005288:	f000 fa72 	bl	8005770 <RCC_AHB1PeriphClockCmd>

	DMA_DeInit(DMA1_Stream7);
 800528c:	4837      	ldr	r0, [pc, #220]	; (800536c <ws2812b_init+0x1ac>)
 800528e:	f000 f997 	bl	80055c0 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM3->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_5;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8005292:	2240      	movs	r2, #64	; 0x40
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 8005294:	23aa      	movs	r3, #170	; 0xaa
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8005296:	f44f 6180 	mov.w	r1, #1024	; 0x400

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM3->CCR3;
 800529a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005378 <ws2812b_init+0x1b8>

	DMA_InitStructure.DMA_Channel = DMA_Channel_5;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
 800529e:	960b      	str	r6, [sp, #44]	; 0x2c
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM3->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_5;
 80052a0:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80052a4:	2500      	movs	r5, #0
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80052a6:	9412      	str	r4, [sp, #72]	; 0x48
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80052a8:	f44f 6600 	mov.w	r6, #2048	; 0x800
	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM3->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_5;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80052ac:	920c      	str	r2, [sp, #48]	; 0x30
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 80052ae:	930d      	str	r3, [sp, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80052b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80052b4:	2303      	movs	r3, #3
	DMA_InitStructure.DMA_Channel = DMA_Channel_5;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80052b6:	910f      	str	r1, [sp, #60]	; 0x3c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 80052b8:	482c      	ldr	r0, [pc, #176]	; (800536c <ws2812b_init+0x1ac>)

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM3->CCR3;
 80052ba:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 80052be:	a909      	add	r1, sp, #36	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80052c0:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM3->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_5;
 80052c4:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80052c8:	9213      	str	r2, [sp, #76]	; 0x4c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80052ca:	9315      	str	r3, [sp, #84]	; 0x54
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80052cc:	9411      	str	r4, [sp, #68]	; 0x44

	DMA_InitStructure.DMA_Channel = DMA_Channel_5;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80052ce:	950e      	str	r5, [sp, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80052d0:	9514      	str	r5, [sp, #80]	; 0x50
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80052d2:	9516      	str	r5, [sp, #88]	; 0x58
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80052d4:	9517      	str	r5, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80052d6:	9610      	str	r6, [sp, #64]	; 0x40
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 80052d8:	f000 fa0a 	bl	80056f0 <DMA_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80052dc:	2101      	movs	r1, #1
 80052de:	2002      	movs	r0, #2
 80052e0:	f000 fa56 	bl	8005790 <RCC_APB1PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 80052e4:	2368      	movs	r3, #104	; 0x68
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80052e6:	a901      	add	r1, sp, #4
 80052e8:	4821      	ldr	r0, [pc, #132]	; (8005370 <ws2812b_init+0x1b0>)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 80052ea:	9302      	str	r3, [sp, #8]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80052ec:	2401      	movs	r4, #1
	DMA_Init(DMA1_Stream7, &DMA_InitStructure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80052ee:	f8ad 5004 	strh.w	r5, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80052f2:	f8ad 5006 	strh.w	r5, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80052f6:	f8ad 500c 	strh.w	r5, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80052fa:	f88d 500e 	strb.w	r5, [sp, #14]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80052fe:	f000 fb67 	bl	80059d0 <TIM_TimeBaseInit>

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8005302:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 8005304:	883a      	ldrh	r2, [r7, #0]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 8005306:	481a      	ldr	r0, [pc, #104]	; (8005370 <ws2812b_init+0x1b0>)
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8005308:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 800530c:	a904      	add	r1, sp, #16
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 800530e:	9206      	str	r2, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8005310:	f8ad 501c 	strh.w	r5, [sp, #28]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005314:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 8005318:	f000 fc4a 	bl	8005bb0 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
 800531c:	2108      	movs	r1, #8
 800531e:	4814      	ldr	r0, [pc, #80]	; (8005370 <ws2812b_init+0x1b0>)
 8005320:	f000 fcde 	bl	8005ce0 <TIM_OC3PreloadConfig>

	// TIM4 counter enable
	TIM_Cmd(TIM3, ENABLE);
 8005324:	4621      	mov	r1, r4
 8005326:	4812      	ldr	r0, [pc, #72]	; (8005370 <ws2812b_init+0x1b0>)
 8005328:	f000 fbb2 	bl	8005a90 <TIM_Cmd>

	DMA_Cmd(DMA1_Stream7, ENABLE);
 800532c:	4621      	mov	r1, r4
 800532e:	480f      	ldr	r0, [pc, #60]	; (800536c <ws2812b_init+0x1ac>)
 8005330:	f000 fa0e 	bl	8005750 <DMA_Cmd>

	// TIM4 Update DMA Request enable
	TIM_DMACmd(TIM3, TIM_DMA_CC3, ENABLE);
 8005334:	4622      	mov	r2, r4
 8005336:	4631      	mov	r1, r6
 8005338:	480d      	ldr	r0, [pc, #52]	; (8005370 <ws2812b_init+0x1b0>)
 800533a:	f000 fd21 	bl	8005d80 <TIM_DMACmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 800533e:	4621      	mov	r1, r4
 8005340:	480b      	ldr	r0, [pc, #44]	; (8005370 <ws2812b_init+0x1b0>)
 8005342:	f000 fcfd 	bl	8005d40 <TIM_CtrlPWMOutputs>
}
 8005346:	b018      	add	sp, #96	; 0x60
 8005348:	ecbd 8b02 	vpop	{d8}
 800534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005350:	20002260 	.word	0x20002260
 8005354:	20002274 	.word	0x20002274
 8005358:	20002360 	.word	0x20002360
 800535c:	200023c7 	.word	0x200023c7
 8005360:	437f0000 	.word	0x437f0000
 8005364:	400e38e4 	.word	0x400e38e4
 8005368:	40020400 	.word	0x40020400
 800536c:	400260b8 	.word	0x400260b8
 8005370:	40000400 	.word	0x40000400
 8005374:	200023c8 	.word	0x200023c8
 8005378:	4000043c 	.word	0x4000043c
 800537c:	00000000 	.word	0x00000000

08005380 <ws2812b_set_all>:
	for (i = 0; i < (WS2812B_LED_NUM * 24); i++) {
		bitbuffer[i] = WS2812B_ZERO;
	}
}

void ws2812b_set_all(uint32_t color) {
 8005380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <ws2812b_set_all+0x50>)
 8005384:	4f13      	ldr	r7, [pc, #76]	; (80053d4 <ws2812b_set_all+0x54>)
 8005386:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800538a:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800538e:	5cd1      	ldrb	r1, [r2, r3]
 8005390:	f812 e005 	ldrb.w	lr, [r2, r5]
 8005394:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <ws2812b_set_all+0x58>)
 8005396:	b2c4      	uxtb	r4, r0
 8005398:	0209      	lsls	r1, r1, #8
 800539a:	5d12      	ldrb	r2, [r2, r4]
 800539c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80053a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80053a4:	2600      	movs	r6, #0

		for (bit = 0; bit < 24; bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 80053a6:	2521      	movs	r5, #33	; 0x21

		uint32_t tmp_color = rgb_to_local(color);

		for (bit = 0; bit < 24; bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 80053a8:	2442      	movs	r4, #66	; 0x42

void ws2812b_set_all(uint32_t color) {
	int i, bit;

	for (i = 0; i < WS2812B_LED_NUM; i++) {
		RGBdata[i] = color;
 80053aa:	f847 0b04 	str.w	r0, [r7], #4
 80053ae:	f103 0130 	add.w	r1, r3, #48	; 0x30

		uint32_t tmp_color = rgb_to_local(color);
 80053b2:	4672      	mov	r2, lr

		for (bit = 0; bit < 24; bit++) {
			if(tmp_color & (1 << 23)) {
 80053b4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 80053b8:	bf14      	ite	ne
 80053ba:	801c      	strhne	r4, [r3, #0]
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 80053bc:	801d      	strheq	r5, [r3, #0]
 80053be:	3302      	adds	r3, #2
	for (i = 0; i < WS2812B_LED_NUM; i++) {
		RGBdata[i] = color;

		uint32_t tmp_color = rgb_to_local(color);

		for (bit = 0; bit < 24; bit++) {
 80053c0:	428b      	cmp	r3, r1
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
			}
			tmp_color <<= 1;
 80053c2:	ea4f 0242 	mov.w	r2, r2, lsl #1
	for (i = 0; i < WS2812B_LED_NUM; i++) {
		RGBdata[i] = color;

		uint32_t tmp_color = rgb_to_local(color);

		for (bit = 0; bit < 24; bit++) {
 80053c6:	d1f5      	bne.n	80053b4 <ws2812b_set_all+0x34>
 80053c8:	3618      	adds	r6, #24
}

void ws2812b_set_all(uint32_t color) {
	int i, bit;

	for (i = 0; i < WS2812B_LED_NUM; i++) {
 80053ca:	2e60      	cmp	r6, #96	; 0x60
 80053cc:	d1ed      	bne.n	80053aa <ws2812b_set_all+0x2a>
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
			}
			tmp_color <<= 1;
		}
	}
}
 80053ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d0:	200023c8 	.word	0x200023c8
 80053d4:	20002260 	.word	0x20002260
 80053d8:	20002274 	.word	0x20002274
 80053dc:	00000000 	.word	0x00000000

080053e0 <zsm_sinusoidal>:
#define min(x, y) (x < y ? x : y)
#define max(x, y) (x > y ? x : y)

void zsm_sinusoidal(float *a, float *b, float *c)
{
    *a = (0.866f * (*a)) + 1.0f / 2;
 80053e0:	ed90 7a00 	vldr	s14, [r0]
 80053e4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800541c <zsm_sinusoidal+0x3c>
 80053e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80053f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80053f4:	ed80 7a00 	vstr	s14, [r0]
    *b = (0.866f * (*b)) + 1.0f / 2;
 80053f8:	ed91 7a00 	vldr	s14, [r1]
 80053fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005400:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005404:	ed81 7a00 	vstr	s14, [r1]
    *c = (0.866f * (*c)) + 1.0f / 2;
 8005408:	ed92 7a00 	vldr	s14, [r2]
 800540c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005414:	edc2 7a00 	vstr	s15, [r2]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	3f5db22d 	.word	0x3f5db22d

08005420 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8005420:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8005422:	6844      	ldr	r4, [r0, #4]
 8005424:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005426:	790e      	ldrb	r6, [r1, #4]
 8005428:	f8d1 e010 	ldr.w	lr, [r1, #16]
 800542c:	68cd      	ldr	r5, [r1, #12]
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <ADC_Init+0x4c>)
 8005430:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 8005434:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8005438:	4322      	orrs	r2, r4
 800543a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800543e:	6042      	str	r2, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005440:	6887      	ldr	r7, [r0, #8]
 8005442:	688a      	ldr	r2, [r1, #8]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005444:	794e      	ldrb	r6, [r1, #5]
 8005446:	ea4e 0405 	orr.w	r4, lr, r5
 800544a:	4322      	orrs	r2, r4
 800544c:	403b      	ands	r3, r7
 800544e:	4313      	orrs	r3, r2
 8005450:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005454:	6083      	str	r3, [r0, #8]
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8005456:	7d0a      	ldrb	r2, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8005458:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800545a:	3a01      	subs	r2, #1
 800545c:	b2d2      	uxtb	r2, r2
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800545e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8005462:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005466:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546a:	bf00      	nop
 800546c:	c0fff7fd 	.word	0xc0fff7fd

08005470 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8005470:	b470      	push	{r4, r5, r6}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005472:	6842      	ldr	r2, [r0, #4]
 8005474:	6806      	ldr	r6, [r0, #0]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8005476:	4d06      	ldr	r5, [pc, #24]	; (8005490 <ADC_CommonInit+0x20>)
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005478:	6884      	ldr	r4, [r0, #8]
 800547a:	68c1      	ldr	r1, [r0, #12]
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800547e:	6868      	ldr	r0, [r5, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005480:	4332      	orrs	r2, r6
 8005482:	4322      	orrs	r2, r4
 8005484:	430a      	orrs	r2, r1
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8005486:	4003      	ands	r3, r0
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005488:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800548a:	606b      	str	r3, [r5, #4]
}
 800548c:	bc70      	pop	{r4, r5, r6}
 800548e:	4770      	bx	lr
 8005490:	40012300 	.word	0x40012300
 8005494:	fffc30e0 	.word	0xfffc30e0
	...

080054a0 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80054a0:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80054a2:	b919      	cbnz	r1, 80054ac <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	6083      	str	r3, [r0, #8]
 80054aa:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	6083      	str	r3, [r0, #8]
 80054b2:	4770      	bx	lr
	...

080054c0 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80054c0:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 80054c2:	6853      	ldr	r3, [r2, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80054c4:	b918      	cbnz	r0, 80054ce <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80054c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ca:	6053      	str	r3, [r2, #4]
 80054cc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80054ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054d2:	6053      	str	r3, [r2, #4]
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40012300 	.word	0x40012300
 80054dc:	00000000 	.word	0x00000000

080054e0 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80054e0:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80054e2:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80054e4:	d81b      	bhi.n	800551e <ADC_InjectedChannelConfig+0x3e>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80054e6:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80054ea:	6905      	ldr	r5, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80054ec:	2407      	movs	r4, #7
 80054ee:	40b4      	lsls	r4, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80054f0:	40b3      	lsls	r3, r6
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80054f2:	ea25 0404 	bic.w	r4, r5, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80054f6:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80054f8:	6103      	str	r3, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80054fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80054fc:	3202      	adds	r2, #2
 80054fe:	f3c3 5401 	ubfx	r4, r3, #20, #2
 8005502:	1b12      	subs	r2, r2, r4
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 800550a:	241f      	movs	r4, #31
 800550c:	4094      	lsls	r4, r2
 800550e:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005512:	fa01 f202 	lsl.w	r2, r1, r2
 8005516:	4313      	orrs	r3, r2
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005518:	6383      	str	r3, [r0, #56]	; 0x38
}
 800551a:	bc70      	pop	{r4, r5, r6}
 800551c:	4770      	bx	lr
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 800551e:	f1a1 060a 	sub.w	r6, r1, #10
 8005522:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005526:	68c5      	ldr	r5, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005528:	2407      	movs	r4, #7
 800552a:	40b4      	lsls	r4, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800552c:	40b3      	lsls	r3, r6
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800552e:	ea25 0404 	bic.w	r4, r5, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005532:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005534:	60c3      	str	r3, [r0, #12]
 8005536:	e7e0      	b.n	80054fa <ADC_InjectedChannelConfig+0x1a>
	...

08005540 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005540:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8005542:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8005544:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8005548:	ea43 5101 	orr.w	r1, r3, r1, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800554c:	6381      	str	r1, [r0, #56]	; 0x38
 800554e:	4770      	bx	lr

08005550 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005550:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8005552:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005556:	4319      	orrs	r1, r3
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005558:	6081      	str	r1, [r0, #8]
 800555a:	4770      	bx	lr
 800555c:	0000      	movs	r0, r0
	...

08005560 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005560:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8005562:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8005566:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005568:	6081      	str	r1, [r0, #8]
 800556a:	4770      	bx	lr
 800556c:	0000      	movs	r0, r0
	...

08005570 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8005570:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8005576:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8005578:	9b01      	ldr	r3, [sp, #4]
 800557a:	3328      	adds	r3, #40	; 0x28
 800557c:	4419      	add	r1, r3
 800557e:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8005580:	9b01      	ldr	r3, [sp, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
}
 8005584:	b280      	uxth	r0, r0
 8005586:	b002      	add	sp, #8
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	0000      	movs	r0, r0
	...

08005590 <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8005590:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 8005592:	2301      	movs	r3, #1
 8005594:	408b      	lsls	r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005596:	6841      	ldr	r1, [r0, #4]

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
 8005598:	b91a      	cbnz	r2, 80055a2 <ADC_ITConfig+0x12>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 800559a:	ea21 0303 	bic.w	r3, r1, r3
 800559e:	6043      	str	r3, [r0, #4]
 80055a0:	4770      	bx	lr
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6043      	str	r3, [r0, #4]
 80055a6:	4770      	bx	lr
	...

080055b0 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80055b0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80055b4:	6001      	str	r1, [r0, #0]
 80055b6:	4770      	bx	lr
	...

080055c0 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80055c0:	6802      	ldr	r2, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80055c2:	4937      	ldr	r1, [pc, #220]	; (80056a0 <DMA_DeInit+0xe0>)

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80055c4:	2300      	movs	r3, #0
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80055c6:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80055c8:	f022 0201 	bic.w	r2, r2, #1

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80055cc:	2421      	movs	r4, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80055ce:	4288      	cmp	r0, r1
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80055d0:	6002      	str	r2, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80055d2:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80055d4:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80055d6:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80055d8:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80055da:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80055dc:	6144      	str	r4, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80055de:	d04d      	beq.n	800567c <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80055e0:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <DMA_DeInit+0xe4>)
 80055e2:	4298      	cmp	r0, r3
 80055e4:	d035      	beq.n	8005652 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80055e6:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <DMA_DeInit+0xe8>)
 80055e8:	4298      	cmp	r0, r3
 80055ea:	d039      	beq.n	8005660 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80055ec:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <DMA_DeInit+0xec>)
 80055ee:	4298      	cmp	r0, r3
 80055f0:	d03d      	beq.n	800566e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80055f2:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <DMA_DeInit+0xf0>)
 80055f4:	4298      	cmp	r0, r3
 80055f6:	d047      	beq.n	8005688 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80055f8:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <DMA_DeInit+0xf4>)
 80055fa:	4298      	cmp	r0, r3
 80055fc:	d048      	beq.n	8005690 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80055fe:	4b2e      	ldr	r3, [pc, #184]	; (80056b8 <DMA_DeInit+0xf8>)
 8005600:	4298      	cmp	r0, r3
 8005602:	d01d      	beq.n	8005640 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8005604:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <DMA_DeInit+0xfc>)
 8005606:	4298      	cmp	r0, r3
 8005608:	d01e      	beq.n	8005648 <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800560a:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <DMA_DeInit+0x100>)
 800560c:	4298      	cmp	r0, r3
 800560e:	d043      	beq.n	8005698 <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8005610:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <DMA_DeInit+0x104>)
 8005612:	4298      	cmp	r0, r3
 8005614:	d01d      	beq.n	8005652 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8005616:	4b2c      	ldr	r3, [pc, #176]	; (80056c8 <DMA_DeInit+0x108>)
 8005618:	4298      	cmp	r0, r3
 800561a:	d021      	beq.n	8005660 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <DMA_DeInit+0x10c>)
 800561e:	4298      	cmp	r0, r3
 8005620:	d025      	beq.n	800566e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8005622:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <DMA_DeInit+0x110>)
 8005624:	4298      	cmp	r0, r3
 8005626:	d02f      	beq.n	8005688 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8005628:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <DMA_DeInit+0x114>)
 800562a:	4298      	cmp	r0, r3
 800562c:	d030      	beq.n	8005690 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800562e:	4b2a      	ldr	r3, [pc, #168]	; (80056d8 <DMA_DeInit+0x118>)
 8005630:	4298      	cmp	r0, r3
 8005632:	d005      	beq.n	8005640 <DMA_DeInit+0x80>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8005634:	4b29      	ldr	r3, [pc, #164]	; (80056dc <DMA_DeInit+0x11c>)
 8005636:	4298      	cmp	r0, r3
 8005638:	d006      	beq.n	8005648 <DMA_DeInit+0x88>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800563a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800563e:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005640:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <DMA_DeInit+0x120>)
 8005642:	f843 2c94 	str.w	r2, [r3, #-148]
 8005646:	e7f8      	b.n	800563a <DMA_DeInit+0x7a>
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005648:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800564c:	f843 2cac 	str.w	r2, [r3, #-172]
    }
  }
}
 8005650:	e7f3      	b.n	800563a <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8005652:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005656:	f843 2c20 	str.w	r2, [r3, #-32]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800565a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800565e:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8005660:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005664:	f843 2c38 	str.w	r2, [r3, #-56]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800566c:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800566e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005672:	f843 2c50 	str.w	r2, [r3, #-80]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800567a:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <DMA_DeInit+0x124>)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800567e:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005682:	223d      	movs	r2, #61	; 0x3d
 8005684:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005686:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <DMA_DeInit+0x128>)
 800568a:	f843 2c64 	str.w	r2, [r3, #-100]
 800568e:	e7d4      	b.n	800563a <DMA_DeInit+0x7a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8005690:	4a16      	ldr	r2, [pc, #88]	; (80056ec <DMA_DeInit+0x12c>)
 8005692:	f843 2c7c 	str.w	r2, [r3, #-124]
 8005696:	e7d0      	b.n	800563a <DMA_DeInit+0x7a>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8005698:	223d      	movs	r2, #61	; 0x3d
 800569a:	f843 2c08 	str.w	r2, [r3, #-8]
 800569e:	e7cc      	b.n	800563a <DMA_DeInit+0x7a>
 80056a0:	40026010 	.word	0x40026010
 80056a4:	40026028 	.word	0x40026028
 80056a8:	40026040 	.word	0x40026040
 80056ac:	40026058 	.word	0x40026058
 80056b0:	40026070 	.word	0x40026070
 80056b4:	40026088 	.word	0x40026088
 80056b8:	400260a0 	.word	0x400260a0
 80056bc:	400260b8 	.word	0x400260b8
 80056c0:	40026410 	.word	0x40026410
 80056c4:	40026428 	.word	0x40026428
 80056c8:	40026440 	.word	0x40026440
 80056cc:	40026458 	.word	0x40026458
 80056d0:	40026470 	.word	0x40026470
 80056d4:	40026488 	.word	0x40026488
 80056d8:	400264a0 	.word	0x400264a0
 80056dc:	400264b8 	.word	0x400264b8
 80056e0:	203d0000 	.word	0x203d0000
 80056e4:	40026000 	.word	0x40026000
 80056e8:	2000003d 	.word	0x2000003d
 80056ec:	20000f40 	.word	0x20000f40

080056f0 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80056f0:	f101 0218 	add.w	r2, r1, #24
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80056f4:	b4f0      	push	{r4, r5, r6, r7}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80056f6:	ca8c      	ldmia	r2, {r2, r3, r7}
 80056f8:	68cd      	ldr	r5, [r1, #12]
 80056fa:	680e      	ldr	r6, [r1, #0]
 80056fc:	694c      	ldr	r4, [r1, #20]
 80056fe:	432e      	orrs	r6, r5
 8005700:	4326      	orrs	r6, r4
 8005702:	4316      	orrs	r6, r2
 8005704:	431e      	orrs	r6, r3
 8005706:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005708:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800570a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800570c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800570e:	433e      	orrs	r6, r7
 8005710:	4316      	orrs	r6, r2
 8005712:	431e      	orrs	r6, r3
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005714:	4a0b      	ldr	r2, [pc, #44]	; (8005744 <DMA_Init+0x54>)
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005716:	6803      	ldr	r3, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005718:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800571a:	4335      	orrs	r5, r6
 800571c:	432c      	orrs	r4, r5
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800571e:	401a      	ands	r2, r3
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005720:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005722:	6002      	str	r2, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005724:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8005726:	6942      	ldr	r2, [r0, #20]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005728:	690d      	ldr	r5, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800572a:	684c      	ldr	r4, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800572c:	6889      	ldr	r1, [r1, #8]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800572e:	433b      	orrs	r3, r7
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005730:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005734:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005736:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005738:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800573a:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800573c:	60c1      	str	r1, [r0, #12]
}
 800573e:	bcf0      	pop	{r4, r5, r6, r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	f01c803f 	.word	0xf01c803f
	...

08005750 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8005750:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005752:	b919      	cbnz	r1, 800575c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	6003      	str	r3, [r0, #0]
 800575a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6003      	str	r3, [r0, #0]
 8005762:	4770      	bx	lr
	...

08005770 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005770:	b929      	cbnz	r1, 800577e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8005772:	4a05      	ldr	r2, [pc, #20]	; (8005788 <RCC_AHB1PeriphClockCmd+0x18>)
 8005774:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005776:	ea23 0000 	bic.w	r0, r3, r0
 800577a:	6310      	str	r0, [r2, #48]	; 0x30
 800577c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800577e:	4b02      	ldr	r3, [pc, #8]	; (8005788 <RCC_AHB1PeriphClockCmd+0x18>)
 8005780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005782:	4310      	orrs	r0, r2
 8005784:	6318      	str	r0, [r3, #48]	; 0x30
 8005786:	4770      	bx	lr
 8005788:	40023800 	.word	0x40023800
 800578c:	00000000 	.word	0x00000000

08005790 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005790:	b929      	cbnz	r1, 800579e <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8005792:	4a05      	ldr	r2, [pc, #20]	; (80057a8 <RCC_APB1PeriphClockCmd+0x18>)
 8005794:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005796:	ea23 0000 	bic.w	r0, r3, r0
 800579a:	6410      	str	r0, [r2, #64]	; 0x40
 800579c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800579e:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <RCC_APB1PeriphClockCmd+0x18>)
 80057a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a2:	4310      	orrs	r0, r2
 80057a4:	6418      	str	r0, [r3, #64]	; 0x40
 80057a6:	4770      	bx	lr
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00000000 	.word	0x00000000

080057b0 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80057b0:	b929      	cbnz	r1, 80057be <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80057b2:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <RCC_APB2PeriphClockCmd+0x18>)
 80057b4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80057b6:	ea23 0000 	bic.w	r0, r3, r0
 80057ba:	6450      	str	r0, [r2, #68]	; 0x44
 80057bc:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80057be:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <RCC_APB2PeriphClockCmd+0x18>)
 80057c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c2:	4310      	orrs	r0, r2
 80057c4:	6458      	str	r0, [r3, #68]	; 0x44
 80057c6:	4770      	bx	lr
 80057c8:	40023800 	.word	0x40023800
 80057cc:	00000000 	.word	0x00000000

080057d0 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80057d0:	b929      	cbnz	r1, 80057de <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80057d2:	4a05      	ldr	r2, [pc, #20]	; (80057e8 <RCC_APB1PeriphResetCmd+0x18>)
 80057d4:	6a13      	ldr	r3, [r2, #32]
 80057d6:	ea23 0000 	bic.w	r0, r3, r0
 80057da:	6210      	str	r0, [r2, #32]
 80057dc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80057de:	4b02      	ldr	r3, [pc, #8]	; (80057e8 <RCC_APB1PeriphResetCmd+0x18>)
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	4310      	orrs	r0, r2
 80057e4:	6218      	str	r0, [r3, #32]
 80057e6:	4770      	bx	lr
 80057e8:	40023800 	.word	0x40023800
 80057ec:	00000000 	.word	0x00000000

080057f0 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80057f0:	b929      	cbnz	r1, 80057fe <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80057f2:	4a05      	ldr	r2, [pc, #20]	; (8005808 <RCC_APB2PeriphResetCmd+0x18>)
 80057f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80057f6:	ea23 0000 	bic.w	r0, r3, r0
 80057fa:	6250      	str	r0, [r2, #36]	; 0x24
 80057fc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80057fe:	4b02      	ldr	r3, [pc, #8]	; (8005808 <RCC_APB2PeriphResetCmd+0x18>)
 8005800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005802:	4310      	orrs	r0, r2
 8005804:	6258      	str	r0, [r3, #36]	; 0x24
 8005806:	4770      	bx	lr
 8005808:	40023800 	.word	0x40023800
 800580c:	00000000 	.word	0x00000000

08005810 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005810:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8005812:	4b60      	ldr	r3, [pc, #384]	; (8005994 <TIM_DeInit+0x184>)
 8005814:	4298      	cmp	r0, r3
 8005816:	d035      	beq.n	8005884 <TIM_DeInit+0x74>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8005818:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800581c:	d03c      	beq.n	8005898 <TIM_DeInit+0x88>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 800581e:	4b5e      	ldr	r3, [pc, #376]	; (8005998 <TIM_DeInit+0x188>)
 8005820:	4298      	cmp	r0, r3
 8005822:	d043      	beq.n	80058ac <TIM_DeInit+0x9c>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8005824:	4b5d      	ldr	r3, [pc, #372]	; (800599c <TIM_DeInit+0x18c>)
 8005826:	4298      	cmp	r0, r3
 8005828:	d04a      	beq.n	80058c0 <TIM_DeInit+0xb0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 800582a:	4b5d      	ldr	r3, [pc, #372]	; (80059a0 <TIM_DeInit+0x190>)
 800582c:	4298      	cmp	r0, r3
 800582e:	d051      	beq.n	80058d4 <TIM_DeInit+0xc4>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8005830:	4b5c      	ldr	r3, [pc, #368]	; (80059a4 <TIM_DeInit+0x194>)
 8005832:	4298      	cmp	r0, r3
 8005834:	d058      	beq.n	80058e8 <TIM_DeInit+0xd8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8005836:	4b5c      	ldr	r3, [pc, #368]	; (80059a8 <TIM_DeInit+0x198>)
 8005838:	4298      	cmp	r0, r3
 800583a:	d05f      	beq.n	80058fc <TIM_DeInit+0xec>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 800583c:	4b5b      	ldr	r3, [pc, #364]	; (80059ac <TIM_DeInit+0x19c>)
 800583e:	4298      	cmp	r0, r3
 8005840:	d066      	beq.n	8005910 <TIM_DeInit+0x100>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8005842:	4b5b      	ldr	r3, [pc, #364]	; (80059b0 <TIM_DeInit+0x1a0>)
 8005844:	4298      	cmp	r0, r3
 8005846:	d06d      	beq.n	8005924 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8005848:	4b5a      	ldr	r3, [pc, #360]	; (80059b4 <TIM_DeInit+0x1a4>)
 800584a:	4298      	cmp	r0, r3
 800584c:	d076      	beq.n	800593c <TIM_DeInit+0x12c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 800584e:	4b5a      	ldr	r3, [pc, #360]	; (80059b8 <TIM_DeInit+0x1a8>)
 8005850:	4298      	cmp	r0, r3
 8005852:	d07f      	beq.n	8005954 <TIM_DeInit+0x144>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <TIM_DeInit+0x1ac>)
 8005856:	4298      	cmp	r0, r3
 8005858:	f000 8088 	beq.w	800596c <TIM_DeInit+0x15c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 800585c:	4b58      	ldr	r3, [pc, #352]	; (80059c0 <TIM_DeInit+0x1b0>)
 800585e:	4298      	cmp	r0, r3
 8005860:	f000 808e 	beq.w	8005980 <TIM_DeInit+0x170>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8005864:	4b57      	ldr	r3, [pc, #348]	; (80059c4 <TIM_DeInit+0x1b4>)
 8005866:	4298      	cmp	r0, r3
 8005868:	d000      	beq.n	800586c <TIM_DeInit+0x5c>
 800586a:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800586c:	2101      	movs	r1, #1
 800586e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005872:	f7ff ffad 	bl	80057d0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8005876:	2100      	movs	r1, #0
 8005878:	f44f 7080 	mov.w	r0, #256	; 0x100
    }   
  }
}
 800587c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8005880:	f7ff bfa6 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8005884:	2101      	movs	r1, #1
 8005886:	4608      	mov	r0, r1
 8005888:	f7ff ffb2 	bl	80057f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800588c:	2100      	movs	r1, #0
 800588e:	2001      	movs	r0, #1
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8005894:	f7ff bfac 	b.w	80057f0 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8005898:	2101      	movs	r1, #1
 800589a:	4608      	mov	r0, r1
 800589c:	f7ff ff98 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80058a0:	2100      	movs	r1, #0
 80058a2:	2001      	movs	r0, #1
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80058a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80058a8:	f7ff bf92 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80058ac:	2101      	movs	r1, #1
 80058ae:	2002      	movs	r0, #2
 80058b0:	f7ff ff8e 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80058b4:	2100      	movs	r1, #0
 80058b6:	2002      	movs	r0, #2
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80058b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80058bc:	f7ff bf88 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80058c0:	2101      	movs	r1, #1
 80058c2:	2004      	movs	r0, #4
 80058c4:	f7ff ff84 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80058c8:	2100      	movs	r1, #0
 80058ca:	2004      	movs	r0, #4
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80058cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80058d0:	f7ff bf7e 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80058d4:	2101      	movs	r1, #1
 80058d6:	2008      	movs	r0, #8
 80058d8:	f7ff ff7a 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80058dc:	2100      	movs	r1, #0
 80058de:	2008      	movs	r0, #8
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80058e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80058e4:	f7ff bf74 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80058e8:	2101      	movs	r1, #1
 80058ea:	2010      	movs	r0, #16
 80058ec:	f7ff ff70 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80058f0:	2100      	movs	r1, #0
 80058f2:	2010      	movs	r0, #16
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80058f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80058f8:	f7ff bf6a 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80058fc:	2101      	movs	r1, #1
 80058fe:	2020      	movs	r0, #32
 8005900:	f7ff ff66 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8005904:	2100      	movs	r1, #0
 8005906:	2020      	movs	r0, #32
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800590c:	f7ff bf60 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8005910:	2101      	movs	r1, #1
 8005912:	2002      	movs	r0, #2
 8005914:	f7ff ff6c 	bl	80057f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005918:	2100      	movs	r1, #0
 800591a:	2002      	movs	r0, #2
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800591c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005920:	f7ff bf66 	b.w	80057f0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8005924:	2101      	movs	r1, #1
 8005926:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800592a:	f7ff ff61 	bl	80057f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800592e:	2100      	movs	r1, #0
 8005930:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8005938:	f7ff bf5a 	b.w	80057f0 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800593c:	2101      	movs	r1, #1
 800593e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005942:	f7ff ff55 	bl	80057f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8005946:	2100      	movs	r1, #0
 8005948:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800594c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8005950:	f7ff bf4e 	b.w	80057f0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8005954:	2101      	movs	r1, #1
 8005956:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800595a:	f7ff ff49 	bl	80057f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800595e:	2100      	movs	r1, #0
 8005960:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8005968:	f7ff bf42 	b.w	80057f0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800596c:	2101      	movs	r1, #1
 800596e:	2040      	movs	r0, #64	; 0x40
 8005970:	f7ff ff2e 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8005974:	2100      	movs	r1, #0
 8005976:	2040      	movs	r0, #64	; 0x40
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800597c:	f7ff bf28 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8005980:	2101      	movs	r1, #1
 8005982:	2080      	movs	r0, #128	; 0x80
 8005984:	f7ff ff24 	bl	80057d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8005988:	2100      	movs	r1, #0
 800598a:	2080      	movs	r0, #128	; 0x80
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800598c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8005990:	f7ff bf1e 	b.w	80057d0 <RCC_APB1PeriphResetCmd>
 8005994:	40010000 	.word	0x40010000
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40001000 	.word	0x40001000
 80059a8:	40001400 	.word	0x40001400
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800
 80059bc:	40001800 	.word	0x40001800
 80059c0:	40001c00 	.word	0x40001c00
 80059c4:	40002000 	.word	0x40002000
	...

080059d0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80059d2:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80059d4:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80059d6:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80059d8:	d012      	beq.n	8005a00 <TIM_TimeBaseInit+0x30>
 80059da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059de:	4290      	cmp	r0, r2
 80059e0:	d00e      	beq.n	8005a00 <TIM_TimeBaseInit+0x30>
 80059e2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80059e6:	d00b      	beq.n	8005a00 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80059e8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80059ec:	4290      	cmp	r0, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_TimeBaseInit+0x30>
 80059f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059f4:	4290      	cmp	r0, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80059f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059fc:	4290      	cmp	r0, r2
 80059fe:	d103      	bne.n	8005a08 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005a00:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005a06:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <TIM_TimeBaseInit+0x90>)
 8005a0a:	4290      	cmp	r0, r2
 8005a0c:	d01e      	beq.n	8005a4c <TIM_TimeBaseInit+0x7c>
 8005a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a12:	4290      	cmp	r0, r2
 8005a14:	d01a      	beq.n	8005a4c <TIM_TimeBaseInit+0x7c>
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005a16:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005a18:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005a1e:	4c0f      	ldr	r4, [pc, #60]	; (8005a5c <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005a20:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005a22:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8005a24:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005a26:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005a28:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005a2a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005a2c:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005a2e:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005a30:	d006      	beq.n	8005a40 <TIM_TimeBaseInit+0x70>
 8005a32:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <TIM_TimeBaseInit+0x94>)
 8005a34:	4298      	cmp	r0, r3
 8005a36:	d003      	beq.n	8005a40 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005a38:	2301      	movs	r3, #1
 8005a3a:	6143      	str	r3, [r0, #20]
}
 8005a3c:	bc70      	pop	{r4, r5, r6}
 8005a3e:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005a40:	7a8b      	ldrb	r3, [r1, #10]
 8005a42:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005a44:	2301      	movs	r3, #1
 8005a46:	6143      	str	r3, [r0, #20]
}
 8005a48:	bc70      	pop	{r4, r5, r6}
 8005a4a:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005a4c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005a4e:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005a50:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005a52:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005a54:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005a56:	2301      	movs	r3, #1
 8005a58:	6143      	str	r3, [r0, #20]
 8005a5a:	4770      	bx	lr
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40001000 	.word	0x40001000
 8005a64:	40010400 	.word	0x40010400
	...

08005a70 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005a70:	b929      	cbnz	r1, 8005a7e <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8005a72:	6802      	ldr	r2, [r0, #0]
 8005a74:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8005a78:	4013      	ands	r3, r2
 8005a7a:	6003      	str	r3, [r0, #0]
 8005a7c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8005a7e:	6803      	ldr	r3, [r0, #0]
 8005a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a84:	6003      	str	r3, [r0, #0]
 8005a86:	4770      	bx	lr
	...

08005a90 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005a90:	b929      	cbnz	r1, 8005a9e <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8005a92:	6802      	ldr	r2, [r0, #0]
 8005a94:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005a98:	4013      	ands	r3, r2
 8005a9a:	6003      	str	r3, [r0, #0]
 8005a9c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005a9e:	6803      	ldr	r3, [r0, #0]
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	6003      	str	r3, [r0, #0]
 8005aa6:	4770      	bx	lr
	...

08005ab0 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005ab0:	6a02      	ldr	r2, [r0, #32]
 8005ab2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005aba:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005abc:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005ac0:	898b      	ldrh	r3, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac2:	6844      	ldr	r4, [r0, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005ac4:	4f15      	ldr	r7, [pc, #84]	; (8005b1c <TIM_OC1Init+0x6c>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac6:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8005aca:	f64f 76fd 	movw	r6, #65533	; 0xfffd
 8005ace:	402e      	ands	r6, r5
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	4333      	orrs	r3, r6
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8005ad4:	f64f 758c 	movw	r5, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005ad8:	880e      	ldrh	r6, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8005ada:	ea0e 0505 	and.w	r5, lr, r5
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005ade:	42b8      	cmp	r0, r7
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	b2a2      	uxth	r2, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005ae2:	b29b      	uxth	r3, r3
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005ae4:	ea45 0406 	orr.w	r4, r5, r6
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005ae8:	d008      	beq.n	8005afc <TIM_OC1Init+0x4c>
 8005aea:	4d0d      	ldr	r5, [pc, #52]	; (8005b20 <TIM_OC1Init+0x70>)
 8005aec:	42a8      	cmp	r0, r5
 8005aee:	d005      	beq.n	8005afc <TIM_OC1Init+0x4c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005af0:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af4:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005af6:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	6203      	str	r3, [r0, #32]
 8005afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8005afc:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005afe:	8a0f      	ldrh	r7, [r1, #16]
 8005b00:	8a4d      	ldrh	r5, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8005b02:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8005b06:	4333      	orrs	r3, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8005b08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8005b0c:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005b0e:	433d      	orrs	r5, r7
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8005b10:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005b14:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8005b16:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	e7e9      	b.n	8005af0 <TIM_OC1Init+0x40>
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400
	...

08005b30 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005b30:	6a02      	ldr	r2, [r0, #32]
 8005b32:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005b36:	4013      	ands	r3, r2
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005b3a:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005b3c:	884a      	ldrh	r2, [r1, #2]
 8005b3e:	898c      	ldrh	r4, [r1, #12]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005b40:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	6846      	ldr	r6, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b46:	6987      	ldr	r7, [r0, #24]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005b48:	4d18      	ldr	r5, [pc, #96]	; (8005bac <TIM_OC2Init+0x7c>)
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005b4a:	4314      	orrs	r4, r2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8005b4c:	f648 42ff 	movw	r2, #36095	; 0x8cff
 8005b50:	403a      	ands	r2, r7
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8005b52:	f64f 73df 	movw	r3, #65503	; 0xffdf
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005b56:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8005b58:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005b5c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005b60:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005b64:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005b66:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	b2b4      	uxth	r4, r6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005b6a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005b6c:	d009      	beq.n	8005b82 <TIM_OC2Init+0x52>
 8005b6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b72:	42a8      	cmp	r0, r5
 8005b74:	d005      	beq.n	8005b82 <TIM_OC2Init+0x52>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005b76:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005b7c:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	6203      	str	r3, [r0, #32]
 8005b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005b82:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005b84:	8a0f      	ldrh	r7, [r1, #16]
 8005b86:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8005b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005b8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8005b90:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8005b94:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005b96:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8005b98:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005b9c:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005b9e:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005ba2:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005ba6:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005ba8:	b2a4      	uxth	r4, r4
 8005baa:	e7e4      	b.n	8005b76 <TIM_OC2Init+0x46>
 8005bac:	40010000 	.word	0x40010000

08005bb0 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005bb0:	6a02      	ldr	r2, [r0, #32]
 8005bb2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005bba:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005bbc:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005bc2:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005bc6:	4e1a      	ldr	r6, [pc, #104]	; (8005c30 <TIM_OC3Init+0x80>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc8:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8005bca:	f64f 53ff 	movw	r3, #65023	; 0xfdff
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005bce:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8005bd0:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005bd4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8005bd8:	f64f 728c 	movw	r2, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005bdc:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8005bde:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005be0:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005be2:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005be6:	ea42 0204 	orr.w	r2, r2, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005bea:	d009      	beq.n	8005c00 <TIM_OC3Init+0x50>
 8005bec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005bf0:	42b0      	cmp	r0, r6
 8005bf2:	d005      	beq.n	8005c00 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005bf4:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf6:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf8:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005bfa:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	6203      	str	r3, [r0, #32]
 8005bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005c00:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005c02:	8a0c      	ldrh	r4, [r1, #16]
 8005c04:	f8b1 e012 	ldrh.w	lr, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8005c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005c0c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8005c10:	f64f 36ff 	movw	r6, #64511	; 0xfbff
 8005c14:	401e      	ands	r6, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005c16:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8005c18:	f425 5740 	bic.w	r7, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005c1c:	ea44 050e 	orr.w	r5, r4, lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005c20:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005c24:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005c28:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005c2a:	b2ad      	uxth	r5, r5
 8005c2c:	e7e2      	b.n	8005bf4 <TIM_OC3Init+0x44>
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
	...

08005c40 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8005c40:	6a02      	ldr	r2, [r0, #32]
 8005c42:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005c46:	4013      	ands	r3, r2
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005c48:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8005c4a:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005c4c:	884a      	ldrh	r2, [r1, #2]
 8005c4e:	898d      	ldrh	r5, [r1, #12]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c50:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005c58:	4e11      	ldr	r6, [pc, #68]	; (8005ca0 <TIM_OC4Init+0x60>)
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005c5a:	4315      	orrs	r5, r2
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8005c5c:	f648 42ff 	movw	r2, #36095	; 0x8cff
 8005c60:	403a      	ands	r2, r7
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8005c62:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005c66:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8005c68:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005c6c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005c70:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005c74:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005c76:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005c7a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005c7c:	d008      	beq.n	8005c90 <TIM_OC4Init+0x50>
 8005c7e:	4d09      	ldr	r5, [pc, #36]	; (8005ca4 <TIM_OC4Init+0x64>)
 8005c80:	42a8      	cmp	r0, r5
 8005c82:	d005      	beq.n	8005c90 <TIM_OC4Init+0x50>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005c84:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005c88:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005c8a:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	6203      	str	r3, [r0, #32]
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005c90:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8005c92:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005c96:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005c9a:	b2a4      	uxth	r4, r4
 8005c9c:	e7f2      	b.n	8005c84 <TIM_OC4Init+0x44>
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010400 	.word	0x40010400
	...

08005cb0 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005cb0:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8005cb2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8005cb6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005cb8:	4319      	orrs	r1, r3
 8005cba:	6181      	str	r1, [r0, #24]
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop

08005cc0 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005cc0:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8005cc2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8005cc6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005cc8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005ccc:	b289      	uxth	r1, r1
 8005cce:	6181      	str	r1, [r0, #24]
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
	...

08005ce0 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005ce0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8005ce2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8005ce6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005ce8:	4319      	orrs	r1, r3
 8005cea:	61c1      	str	r1, [r0, #28]
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop

08005cf0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005cf0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8005cf2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8005cf6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005cf8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005cfc:	b289      	uxth	r1, r1
 8005cfe:	61c1      	str	r1, [r0, #28]
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
	...

08005d10 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8005d10:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8005d12:	884b      	ldrh	r3, [r1, #2]
 8005d14:	f8b1 e000 	ldrh.w	lr, [r1]
 8005d18:	888f      	ldrh	r7, [r1, #4]
 8005d1a:	88ce      	ldrh	r6, [r1, #6]
 8005d1c:	890d      	ldrh	r5, [r1, #8]
 8005d1e:	894c      	ldrh	r4, [r1, #10]
 8005d20:	898a      	ldrh	r2, [r1, #12]
 8005d22:	ea4e 0303 	orr.w	r3, lr, r3
 8005d26:	433b      	orrs	r3, r7
 8005d28:	4333      	orrs	r3, r6
 8005d2a:	432b      	orrs	r3, r5
 8005d2c:	4323      	orrs	r3, r4
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8005d32:	6443      	str	r3, [r0, #68]	; 0x44
 8005d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d36:	bf00      	nop
	...

08005d40 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005d40:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005d42:	b919      	cbnz	r1, 8005d4c <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8005d44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d48:	6443      	str	r3, [r0, #68]	; 0x44
 8005d4a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d50:	6443      	str	r3, [r0, #68]	; 0x44
 8005d52:	4770      	bx	lr
	...

08005d60 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005d60:	b929      	cbnz	r1, 8005d6e <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8005d62:	6842      	ldr	r2, [r0, #4]
 8005d64:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005d68:	4013      	ands	r3, r2
 8005d6a:	6043      	str	r3, [r0, #4]
 8005d6c:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8005d6e:	6843      	ldr	r3, [r0, #4]
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	6043      	str	r3, [r0, #4]
 8005d76:	4770      	bx	lr
	...

08005d80 <TIM_DMACmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005d80:	b92a      	cbnz	r2, 8005d8e <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8005d82:	68c3      	ldr	r3, [r0, #12]
 8005d84:	43c9      	mvns	r1, r1
 8005d86:	b289      	uxth	r1, r1
 8005d88:	4019      	ands	r1, r3
 8005d8a:	60c1      	str	r1, [r0, #12]
 8005d8c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8005d8e:	68c3      	ldr	r3, [r0, #12]
 8005d90:	4319      	orrs	r1, r3
 8005d92:	60c1      	str	r1, [r0, #12]
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
	...

08005da0 <cos>:
 8005da0:	b500      	push	{lr}
 8005da2:	ec51 0b10 	vmov	r0, r1, d0
 8005da6:	4a2c      	ldr	r2, [pc, #176]	; (8005e58 <cos+0xb8>)
 8005da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005dac:	4293      	cmp	r3, r2
 8005dae:	b085      	sub	sp, #20
 8005db0:	dd20      	ble.n	8005df4 <cos+0x54>
 8005db2:	4a2a      	ldr	r2, [pc, #168]	; (8005e5c <cos+0xbc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	dd09      	ble.n	8005dcc <cos+0x2c>
 8005db8:	ee10 2a10 	vmov	r2, s0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	f7fa faa3 	bl	8000308 <__aeabi_dsub>
 8005dc2:	ec41 0b10 	vmov	d0, r0, r1
 8005dc6:	b005      	add	sp, #20
 8005dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dcc:	4668      	mov	r0, sp
 8005dce:	f000 fc2f 	bl	8006630 <__ieee754_rem_pio2>
 8005dd2:	f000 0003 	and.w	r0, r0, #3
 8005dd6:	2801      	cmp	r0, #1
 8005dd8:	d028      	beq.n	8005e2c <cos+0x8c>
 8005dda:	2802      	cmp	r0, #2
 8005ddc:	d015      	beq.n	8005e0a <cos+0x6a>
 8005dde:	b360      	cbz	r0, 8005e3a <cos+0x9a>
 8005de0:	2001      	movs	r0, #1
 8005de2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005de6:	ed9d 0b00 	vldr	d0, [sp]
 8005dea:	f001 fef9 	bl	8007be0 <__kernel_sin>
 8005dee:	ec51 0b10 	vmov	r0, r1, d0
 8005df2:	e7e6      	b.n	8005dc2 <cos+0x22>
 8005df4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8005e50 <cos+0xb0>
 8005df8:	f001 f99a 	bl	8007130 <__kernel_cos>
 8005dfc:	ec51 0b10 	vmov	r0, r1, d0
 8005e00:	ec41 0b10 	vmov	d0, r0, r1
 8005e04:	b005      	add	sp, #20
 8005e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e0e:	ed9d 0b00 	vldr	d0, [sp]
 8005e12:	f001 f98d 	bl	8007130 <__kernel_cos>
 8005e16:	ec53 2b10 	vmov	r2, r3, d0
 8005e1a:	ee10 0a10 	vmov	r0, s0
 8005e1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e22:	ec41 0b10 	vmov	d0, r0, r1
 8005e26:	b005      	add	sp, #20
 8005e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e30:	ed9d 0b00 	vldr	d0, [sp]
 8005e34:	f001 fed4 	bl	8007be0 <__kernel_sin>
 8005e38:	e7ed      	b.n	8005e16 <cos+0x76>
 8005e3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e3e:	ed9d 0b00 	vldr	d0, [sp]
 8005e42:	f001 f975 	bl	8007130 <__kernel_cos>
 8005e46:	ec51 0b10 	vmov	r0, r1, d0
 8005e4a:	e7ba      	b.n	8005dc2 <cos+0x22>
 8005e4c:	f3af 8000 	nop.w
	...
 8005e58:	3fe921fb 	.word	0x3fe921fb
 8005e5c:	7fefffff 	.word	0x7fefffff

08005e60 <sin>:
 8005e60:	b500      	push	{lr}
 8005e62:	ec51 0b10 	vmov	r0, r1, d0
 8005e66:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <sin+0xb8>)
 8005e68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	b085      	sub	sp, #20
 8005e70:	dd27      	ble.n	8005ec2 <sin+0x62>
 8005e72:	4a2a      	ldr	r2, [pc, #168]	; (8005f1c <sin+0xbc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	dd09      	ble.n	8005e8c <sin+0x2c>
 8005e78:	ee10 2a10 	vmov	r2, s0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	f7fa fa43 	bl	8000308 <__aeabi_dsub>
 8005e82:	ec41 0b10 	vmov	d0, r0, r1
 8005e86:	b005      	add	sp, #20
 8005e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e8c:	4668      	mov	r0, sp
 8005e8e:	f000 fbcf 	bl	8006630 <__ieee754_rem_pio2>
 8005e92:	f000 0003 	and.w	r0, r0, #3
 8005e96:	2801      	cmp	r0, #1
 8005e98:	d027      	beq.n	8005eea <sin+0x8a>
 8005e9a:	2802      	cmp	r0, #2
 8005e9c:	d01d      	beq.n	8005eda <sin+0x7a>
 8005e9e:	b368      	cbz	r0, 8005efc <sin+0x9c>
 8005ea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ea4:	ed9d 0b00 	vldr	d0, [sp]
 8005ea8:	f001 f942 	bl	8007130 <__kernel_cos>
 8005eac:	ec53 2b10 	vmov	r2, r3, d0
 8005eb0:	ee10 0a10 	vmov	r0, s0
 8005eb4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005eb8:	ec41 0b10 	vmov	d0, r0, r1
 8005ebc:	b005      	add	sp, #20
 8005ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005f10 <sin+0xb0>
 8005ec8:	f001 fe8a 	bl	8007be0 <__kernel_sin>
 8005ecc:	ec51 0b10 	vmov	r0, r1, d0
 8005ed0:	ec41 0b10 	vmov	d0, r0, r1
 8005ed4:	b005      	add	sp, #20
 8005ed6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eda:	2001      	movs	r0, #1
 8005edc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ee0:	ed9d 0b00 	vldr	d0, [sp]
 8005ee4:	f001 fe7c 	bl	8007be0 <__kernel_sin>
 8005ee8:	e7e0      	b.n	8005eac <sin+0x4c>
 8005eea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005eee:	ed9d 0b00 	vldr	d0, [sp]
 8005ef2:	f001 f91d 	bl	8007130 <__kernel_cos>
 8005ef6:	ec51 0b10 	vmov	r0, r1, d0
 8005efa:	e7c2      	b.n	8005e82 <sin+0x22>
 8005efc:	2001      	movs	r0, #1
 8005efe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f02:	ed9d 0b00 	vldr	d0, [sp]
 8005f06:	f001 fe6b 	bl	8007be0 <__kernel_sin>
 8005f0a:	ec51 0b10 	vmov	r0, r1, d0
 8005f0e:	e7b8      	b.n	8005e82 <sin+0x22>
	...
 8005f18:	3fe921fb 	.word	0x3fe921fb
 8005f1c:	7fefffff 	.word	0x7fefffff

08005f20 <roundf>:
 8005f20:	b082      	sub	sp, #8
 8005f22:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005f26:	9901      	ldr	r1, [sp, #4]
 8005f28:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8005f2c:	3b7f      	subs	r3, #127	; 0x7f
 8005f2e:	2b16      	cmp	r3, #22
 8005f30:	dc10      	bgt.n	8005f54 <roundf+0x34>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	db1a      	blt.n	8005f6c <roundf+0x4c>
 8005f36:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <roundf+0x5c>)
 8005f38:	fa42 f003 	asr.w	r0, r2, r3
 8005f3c:	4201      	tst	r1, r0
 8005f3e:	d00b      	beq.n	8005f58 <roundf+0x38>
 8005f40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005f44:	411a      	asrs	r2, r3
 8005f46:	440a      	add	r2, r1
 8005f48:	ea22 0200 	bic.w	r2, r2, r0
 8005f4c:	ee00 2a10 	vmov	s0, r2
 8005f50:	b002      	add	sp, #8
 8005f52:	4770      	bx	lr
 8005f54:	2b80      	cmp	r3, #128	; 0x80
 8005f56:	d003      	beq.n	8005f60 <roundf+0x40>
 8005f58:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005f5c:	b002      	add	sp, #8
 8005f5e:	4770      	bx	lr
 8005f60:	eddd 7a01 	vldr	s15, [sp, #4]
 8005f64:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8005f68:	b002      	add	sp, #8
 8005f6a:	4770      	bx	lr
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005f72:	d1eb      	bne.n	8005f4c <roundf+0x2c>
 8005f74:	f042 527e 	orr.w	r2, r2, #1065353216	; 0x3f800000
 8005f78:	e7e8      	b.n	8005f4c <roundf+0x2c>
 8005f7a:	bf00      	nop
 8005f7c:	007fffff 	.word	0x007fffff

08005f80 <fmod>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	ed2d 8b06 	vpush	{d8-d10}
 8005f86:	eeb0 aa40 	vmov.f32	s20, s0
 8005f8a:	eef0 aa60 	vmov.f32	s21, s1
 8005f8e:	eeb0 9a41 	vmov.f32	s18, s2
 8005f92:	eef0 9a61 	vmov.f32	s19, s3
 8005f96:	4c2b      	ldr	r4, [pc, #172]	; (8006044 <fmod+0xc4>)
 8005f98:	b08a      	sub	sp, #40	; 0x28
 8005f9a:	f000 fa09 	bl	80063b0 <__ieee754_fmod>
 8005f9e:	f994 3000 	ldrsb.w	r3, [r4]
 8005fa2:	eeb0 8a40 	vmov.f32	s16, s0
 8005fa6:	eef0 8a60 	vmov.f32	s17, s1
 8005faa:	3301      	adds	r3, #1
 8005fac:	d006      	beq.n	8005fbc <fmod+0x3c>
 8005fae:	eeb0 0a49 	vmov.f32	s0, s18
 8005fb2:	eef0 0a69 	vmov.f32	s1, s19
 8005fb6:	f001 ff7b 	bl	8007eb0 <__fpclassifyd>
 8005fba:	b938      	cbnz	r0, 8005fcc <fmod+0x4c>
 8005fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8005fc0:	eef0 0a68 	vmov.f32	s1, s17
 8005fc4:	b00a      	add	sp, #40	; 0x28
 8005fc6:	ecbd 8b06 	vpop	{d8-d10}
 8005fca:	bd10      	pop	{r4, pc}
 8005fcc:	eeb0 0a4a 	vmov.f32	s0, s20
 8005fd0:	eef0 0a6a 	vmov.f32	s1, s21
 8005fd4:	f001 ff6c 	bl	8007eb0 <__fpclassifyd>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d0ef      	beq.n	8005fbc <fmod+0x3c>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	ec51 0b19 	vmov	r0, r1, d9
 8005fe4:	f7fa fdb2 	bl	8000b4c <__aeabi_dcmpeq>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d0e7      	beq.n	8005fbc <fmod+0x3c>
 8005fec:	4b16      	ldr	r3, [pc, #88]	; (8006048 <fmod+0xc8>)
 8005fee:	7824      	ldrb	r4, [r4, #0]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	ed8d ab02 	vstr	d10, [sp, #8]
 8005ffa:	ed8d 9b04 	vstr	d9, [sp, #16]
 8005ffe:	9200      	str	r2, [sp, #0]
 8006000:	9308      	str	r3, [sp, #32]
 8006002:	b194      	cbz	r4, 800602a <fmod+0xaa>
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	4610      	mov	r0, r2
 800600a:	4619      	mov	r1, r3
 800600c:	f7fa fc5a 	bl	80008c4 <__aeabi_ddiv>
 8006010:	2c02      	cmp	r4, #2
 8006012:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006016:	d10a      	bne.n	800602e <fmod+0xae>
 8006018:	f002 f96a 	bl	80082f0 <__errno>
 800601c:	2321      	movs	r3, #33	; 0x21
 800601e:	6003      	str	r3, [r0, #0]
 8006020:	9b08      	ldr	r3, [sp, #32]
 8006022:	b953      	cbnz	r3, 800603a <fmod+0xba>
 8006024:	ed9d 0b06 	vldr	d0, [sp, #24]
 8006028:	e7cc      	b.n	8005fc4 <fmod+0x44>
 800602a:	ed8d ab06 	vstr	d10, [sp, #24]
 800602e:	4668      	mov	r0, sp
 8006030:	f001 ff6e 	bl	8007f10 <matherr>
 8006034:	2800      	cmp	r0, #0
 8006036:	d1f3      	bne.n	8006020 <fmod+0xa0>
 8006038:	e7ee      	b.n	8006018 <fmod+0x98>
 800603a:	f002 f959 	bl	80082f0 <__errno>
 800603e:	9b08      	ldr	r3, [sp, #32]
 8006040:	6003      	str	r3, [r0, #0]
 8006042:	e7ef      	b.n	8006024 <fmod+0xa4>
 8006044:	20000808 	.word	0x20000808
 8006048:	08008860 	.word	0x08008860
 800604c:	00000000 	.word	0x00000000

08006050 <powf>:
 8006050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006052:	ed2d 8b04 	vpush	{d8-d9}
 8006056:	4caf      	ldr	r4, [pc, #700]	; (8006314 <powf+0x2c4>)
 8006058:	b08b      	sub	sp, #44	; 0x2c
 800605a:	eeb0 9a40 	vmov.f32	s18, s0
 800605e:	eef0 8a60 	vmov.f32	s17, s1
 8006062:	f000 fd0d 	bl	8006a80 <__ieee754_powf>
 8006066:	f994 3000 	ldrsb.w	r3, [r4]
 800606a:	3301      	adds	r3, #1
 800606c:	eeb0 8a40 	vmov.f32	s16, s0
 8006070:	d004      	beq.n	800607c <powf+0x2c>
 8006072:	eeb0 0a68 	vmov.f32	s0, s17
 8006076:	f002 f88b 	bl	8008190 <__fpclassifyf>
 800607a:	b928      	cbnz	r0, 8006088 <powf+0x38>
 800607c:	eeb0 0a48 	vmov.f32	s0, s16
 8006080:	b00b      	add	sp, #44	; 0x2c
 8006082:	ecbd 8b04 	vpop	{d8-d9}
 8006086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006088:	eeb0 0a49 	vmov.f32	s0, s18
 800608c:	f002 f880 	bl	8008190 <__fpclassifyf>
 8006090:	2800      	cmp	r0, #0
 8006092:	d132      	bne.n	80060fa <powf+0xaa>
 8006094:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609c:	d1ee      	bne.n	800607c <powf+0x2c>
 800609e:	4b9e      	ldr	r3, [pc, #632]	; (8006318 <powf+0x2c8>)
 80060a0:	9008      	str	r0, [sp, #32]
 80060a2:	2201      	movs	r2, #1
 80060a4:	ee19 0a10 	vmov	r0, s18
 80060a8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80060ac:	f7fa fa8c 	bl	80005c8 <__aeabi_f2d>
 80060b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b4:	ee18 0a90 	vmov	r0, s17
 80060b8:	f7fa fa86 	bl	80005c8 <__aeabi_f2d>
 80060bc:	f994 3000 	ldrsb.w	r3, [r4]
 80060c0:	4f96      	ldr	r7, [pc, #600]	; (800631c <powf+0x2cc>)
 80060c2:	2600      	movs	r6, #0
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80060ce:	d038      	beq.n	8006142 <powf+0xf2>
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d036      	beq.n	8006142 <powf+0xf2>
 80060d4:	4668      	mov	r0, sp
 80060d6:	f001 ff1b 	bl	8007f10 <matherr>
 80060da:	2800      	cmp	r0, #0
 80060dc:	f000 809f 	beq.w	800621e <powf+0x1ce>
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	b11b      	cbz	r3, 80060ec <powf+0x9c>
 80060e4:	f002 f904 	bl	80082f0 <__errno>
 80060e8:	9b08      	ldr	r3, [sp, #32]
 80060ea:	6003      	str	r3, [r0, #0]
 80060ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060f0:	f7fa fd86 	bl	8000c00 <__aeabi_d2f>
 80060f4:	ee00 0a10 	vmov	s0, r0
 80060f8:	e7c2      	b.n	8006080 <powf+0x30>
 80060fa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	d121      	bne.n	8006148 <powf+0xf8>
 8006104:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610c:	d157      	bne.n	80061be <powf+0x16e>
 800610e:	2301      	movs	r3, #1
 8006110:	4a81      	ldr	r2, [pc, #516]	; (8006318 <powf+0x2c8>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	ee19 0a10 	vmov	r0, s18
 8006118:	2300      	movs	r3, #0
 800611a:	9308      	str	r3, [sp, #32]
 800611c:	9201      	str	r2, [sp, #4]
 800611e:	f7fa fa53 	bl	80005c8 <__aeabi_f2d>
 8006122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006126:	ee18 0a90 	vmov	r0, s17
 800612a:	f7fa fa4d 	bl	80005c8 <__aeabi_f2d>
 800612e:	f994 3000 	ldrsb.w	r3, [r4]
 8006132:	2600      	movs	r6, #0
 8006134:	2700      	movs	r7, #0
 8006136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800613a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0c8      	beq.n	80060d4 <powf+0x84>
 8006142:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006146:	e79b      	b.n	8006080 <powf+0x30>
 8006148:	eeb0 0a48 	vmov.f32	s0, s16
 800614c:	f002 f810 	bl	8008170 <finitef>
 8006150:	4605      	mov	r5, r0
 8006152:	2800      	cmp	r0, #0
 8006154:	d068      	beq.n	8006228 <powf+0x1d8>
 8006156:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615e:	d18d      	bne.n	800607c <powf+0x2c>
 8006160:	eeb0 0a49 	vmov.f32	s0, s18
 8006164:	f002 f804 	bl	8008170 <finitef>
 8006168:	2800      	cmp	r0, #0
 800616a:	d087      	beq.n	800607c <powf+0x2c>
 800616c:	eeb0 0a68 	vmov.f32	s0, s17
 8006170:	f001 fffe 	bl	8008170 <finitef>
 8006174:	2800      	cmp	r0, #0
 8006176:	d081      	beq.n	800607c <powf+0x2c>
 8006178:	2304      	movs	r3, #4
 800617a:	4a67      	ldr	r2, [pc, #412]	; (8006318 <powf+0x2c8>)
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	ee19 0a10 	vmov	r0, s18
 8006182:	2300      	movs	r3, #0
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	9201      	str	r2, [sp, #4]
 8006188:	f7fa fa1e 	bl	80005c8 <__aeabi_f2d>
 800618c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006190:	ee18 0a90 	vmov	r0, s17
 8006194:	f7fa fa18 	bl	80005c8 <__aeabi_f2d>
 8006198:	f994 3000 	ldrsb.w	r3, [r4]
 800619c:	2600      	movs	r6, #0
 800619e:	2700      	movs	r7, #0
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80061aa:	d06e      	beq.n	800628a <powf+0x23a>
 80061ac:	4668      	mov	r0, sp
 80061ae:	f001 feaf 	bl	8007f10 <matherr>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d069      	beq.n	800628a <powf+0x23a>
 80061b6:	9b08      	ldr	r3, [sp, #32]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d097      	beq.n	80060ec <powf+0x9c>
 80061bc:	e792      	b.n	80060e4 <powf+0x94>
 80061be:	eeb0 0a68 	vmov.f32	s0, s17
 80061c2:	f001 ffd5 	bl	8008170 <finitef>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f43f af58 	beq.w	800607c <powf+0x2c>
 80061cc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80061d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d4:	f57f af52 	bpl.w	800607c <powf+0x2c>
 80061d8:	2301      	movs	r3, #1
 80061da:	4a4f      	ldr	r2, [pc, #316]	; (8006318 <powf+0x2c8>)
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	ee19 0a10 	vmov	r0, s18
 80061e2:	2300      	movs	r3, #0
 80061e4:	9308      	str	r3, [sp, #32]
 80061e6:	9201      	str	r2, [sp, #4]
 80061e8:	f7fa f9ee 	bl	80005c8 <__aeabi_f2d>
 80061ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f0:	ee18 0a90 	vmov	r0, s17
 80061f4:	f7fa f9e8 	bl	80005c8 <__aeabi_f2d>
 80061f8:	7823      	ldrb	r3, [r4, #0]
 80061fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d13c      	bne.n	800627c <powf+0x22c>
 8006202:	2200      	movs	r2, #0
 8006204:	2300      	movs	r3, #0
 8006206:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800620a:	4668      	mov	r0, sp
 800620c:	f001 fe80 	bl	8007f10 <matherr>
 8006210:	2800      	cmp	r0, #0
 8006212:	d1d0      	bne.n	80061b6 <powf+0x166>
 8006214:	f002 f86c 	bl	80082f0 <__errno>
 8006218:	2321      	movs	r3, #33	; 0x21
 800621a:	6003      	str	r3, [r0, #0]
 800621c:	e7cb      	b.n	80061b6 <powf+0x166>
 800621e:	f002 f867 	bl	80082f0 <__errno>
 8006222:	2321      	movs	r3, #33	; 0x21
 8006224:	6003      	str	r3, [r0, #0]
 8006226:	e75b      	b.n	80060e0 <powf+0x90>
 8006228:	eeb0 0a49 	vmov.f32	s0, s18
 800622c:	f001 ffa0 	bl	8008170 <finitef>
 8006230:	2800      	cmp	r0, #0
 8006232:	d090      	beq.n	8006156 <powf+0x106>
 8006234:	eeb0 0a68 	vmov.f32	s0, s17
 8006238:	f001 ff9a 	bl	8008170 <finitef>
 800623c:	2800      	cmp	r0, #0
 800623e:	d08a      	beq.n	8006156 <powf+0x106>
 8006240:	eeb0 0a48 	vmov.f32	s0, s16
 8006244:	f001 ffa4 	bl	8008190 <__fpclassifyf>
 8006248:	bb20      	cbnz	r0, 8006294 <powf+0x244>
 800624a:	4b33      	ldr	r3, [pc, #204]	; (8006318 <powf+0x2c8>)
 800624c:	9008      	str	r0, [sp, #32]
 800624e:	2201      	movs	r2, #1
 8006250:	ee19 0a10 	vmov	r0, s18
 8006254:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006258:	f7fa f9b6 	bl	80005c8 <__aeabi_f2d>
 800625c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006260:	ee18 0a90 	vmov	r0, s17
 8006264:	f7fa f9b0 	bl	80005c8 <__aeabi_f2d>
 8006268:	7824      	ldrb	r4, [r4, #0]
 800626a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800626e:	2200      	movs	r2, #0
 8006270:	2300      	movs	r3, #0
 8006272:	2c00      	cmp	r4, #0
 8006274:	d137      	bne.n	80062e6 <powf+0x296>
 8006276:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800627a:	e7c6      	b.n	800620a <powf+0x1ba>
 800627c:	4928      	ldr	r1, [pc, #160]	; (8006320 <powf+0x2d0>)
 800627e:	2000      	movs	r0, #0
 8006280:	2b02      	cmp	r3, #2
 8006282:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006286:	d0c5      	beq.n	8006214 <powf+0x1c4>
 8006288:	e7bf      	b.n	800620a <powf+0x1ba>
 800628a:	f002 f831 	bl	80082f0 <__errno>
 800628e:	2322      	movs	r3, #34	; 0x22
 8006290:	6003      	str	r3, [r0, #0]
 8006292:	e790      	b.n	80061b6 <powf+0x166>
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <powf+0x2c8>)
 8006296:	9508      	str	r5, [sp, #32]
 8006298:	2203      	movs	r2, #3
 800629a:	ee19 0a10 	vmov	r0, s18
 800629e:	e88d 000c 	stmia.w	sp, {r2, r3}
 80062a2:	f7fa f991 	bl	80005c8 <__aeabi_f2d>
 80062a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062aa:	ee18 0a90 	vmov	r0, s17
 80062ae:	f7fa f98b 	bl	80005c8 <__aeabi_f2d>
 80062b2:	f994 3000 	ldrsb.w	r3, [r4]
 80062b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062ba:	b9eb      	cbnz	r3, 80062f8 <powf+0x2a8>
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <powf+0x2d4>)
 80062be:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80062c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80062c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062ce:	d42d      	bmi.n	800632c <powf+0x2dc>
 80062d0:	4668      	mov	r0, sp
 80062d2:	f001 fe1d 	bl	8007f10 <matherr>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f47f af02 	bne.w	80060e0 <powf+0x90>
 80062dc:	f002 f808 	bl	80082f0 <__errno>
 80062e0:	2322      	movs	r3, #34	; 0x22
 80062e2:	6003      	str	r3, [r0, #0]
 80062e4:	e6fc      	b.n	80060e0 <powf+0x90>
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	f7fa faeb 	bl	80008c4 <__aeabi_ddiv>
 80062ee:	2c02      	cmp	r4, #2
 80062f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062f4:	d08e      	beq.n	8006214 <powf+0x1c4>
 80062f6:	e788      	b.n	800620a <powf+0x1ba>
 80062f8:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <powf+0x2d8>)
 80062fa:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80062fe:	2200      	movs	r2, #0
 8006300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006304:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006308:	d42c      	bmi.n	8006364 <powf+0x314>
 800630a:	f994 3000 	ldrsb.w	r3, [r4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d1de      	bne.n	80062d0 <powf+0x280>
 8006312:	e7e3      	b.n	80062dc <powf+0x28c>
 8006314:	20000808 	.word	0x20000808
 8006318:	08008870 	.word	0x08008870
 800631c:	3ff00000 	.word	0x3ff00000
 8006320:	fff00000 	.word	0xfff00000
 8006324:	47efffff 	.word	0x47efffff
 8006328:	7ff00000 	.word	0x7ff00000
 800632c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006330:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006334:	ee17 0a90 	vmov	r0, s15
 8006338:	f7fa f946 	bl	80005c8 <__aeabi_f2d>
 800633c:	4606      	mov	r6, r0
 800633e:	460f      	mov	r7, r1
 8006340:	ec47 6b10 	vmov	d0, r6, r7
 8006344:	f001 fdec 	bl	8007f20 <rint>
 8006348:	4630      	mov	r0, r6
 800634a:	ec53 2b10 	vmov	r2, r3, d0
 800634e:	4639      	mov	r1, r7
 8006350:	f7fa fbfc 	bl	8000b4c <__aeabi_dcmpeq>
 8006354:	2800      	cmp	r0, #0
 8006356:	d1d8      	bne.n	800630a <powf+0x2ba>
 8006358:	4b10      	ldr	r3, [pc, #64]	; (800639c <powf+0x34c>)
 800635a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800635e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006362:	e7d2      	b.n	800630a <powf+0x2ba>
 8006364:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006368:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800636c:	ee17 0a90 	vmov	r0, s15
 8006370:	f7fa f92a 	bl	80005c8 <__aeabi_f2d>
 8006374:	4606      	mov	r6, r0
 8006376:	460f      	mov	r7, r1
 8006378:	ec47 6b10 	vmov	d0, r6, r7
 800637c:	f001 fdd0 	bl	8007f20 <rint>
 8006380:	4630      	mov	r0, r6
 8006382:	ec53 2b10 	vmov	r2, r3, d0
 8006386:	4639      	mov	r1, r7
 8006388:	f7fa fbe0 	bl	8000b4c <__aeabi_dcmpeq>
 800638c:	2800      	cmp	r0, #0
 800638e:	d1bc      	bne.n	800630a <powf+0x2ba>
 8006390:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <powf+0x350>)
 8006392:	2200      	movs	r2, #0
 8006394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006398:	e7b7      	b.n	800630a <powf+0x2ba>
 800639a:	bf00      	nop
 800639c:	c7efffff 	.word	0xc7efffff
 80063a0:	fff00000 	.word	0xfff00000
	...

080063b0 <__ieee754_fmod>:
 80063b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	ec53 2b11 	vmov	r2, r3, d1
 80063b8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80063bc:	ea52 0009 	orrs.w	r0, r2, r9
 80063c0:	ec55 4b10 	vmov	r4, r5, d0
 80063c4:	d025      	beq.n	8006412 <__ieee754_fmod+0x62>
 80063c6:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
 80063ca:	488f      	ldr	r0, [pc, #572]	; (8006608 <__ieee754_fmod+0x258>)
 80063cc:	ea85 0b06 	eor.w	fp, r5, r6
 80063d0:	4583      	cmp	fp, r0
 80063d2:	dc1e      	bgt.n	8006412 <__ieee754_fmod+0x62>
 80063d4:	4250      	negs	r0, r2
 80063d6:	4310      	orrs	r0, r2
 80063d8:	f8df c244 	ldr.w	ip, [pc, #580]	; 8006620 <__ieee754_fmod+0x270>
 80063dc:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
 80063e0:	4560      	cmp	r0, ip
 80063e2:	ee11 8a10 	vmov	r8, s2
 80063e6:	d814      	bhi.n	8006412 <__ieee754_fmod+0x62>
 80063e8:	45cb      	cmp	fp, r9
 80063ea:	461f      	mov	r7, r3
 80063ec:	ee10 aa10 	vmov	sl, s0
 80063f0:	ee11 ea10 	vmov	lr, s2
 80063f4:	ee10 1a10 	vmov	r1, s0
 80063f8:	dc17      	bgt.n	800642a <__ieee754_fmod+0x7a>
 80063fa:	db28      	blt.n	800644e <__ieee754_fmod+0x9e>
 80063fc:	4294      	cmp	r4, r2
 80063fe:	d326      	bcc.n	800644e <__ieee754_fmod+0x9e>
 8006400:	d113      	bne.n	800642a <__ieee754_fmod+0x7a>
 8006402:	4b82      	ldr	r3, [pc, #520]	; (800660c <__ieee754_fmod+0x25c>)
 8006404:	0ff6      	lsrs	r6, r6, #31
 8006406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800640a:	ed93 0b00 	vldr	d0, [r3]
 800640e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f7fa f92b 	bl	8000670 <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	f7fa fa51 	bl	80008c4 <__aeabi_ddiv>
 8006422:	ec41 0b10 	vmov	d0, r0, r1
 8006426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 800642e:	da12      	bge.n	8006456 <__ieee754_fmod+0xa6>
 8006430:	f1bb 0f00 	cmp.w	fp, #0
 8006434:	f040 80a7 	bne.w	8006586 <__ieee754_fmod+0x1d6>
 8006438:	f1ba 0f00 	cmp.w	sl, #0
 800643c:	4653      	mov	r3, sl
 800643e:	4874      	ldr	r0, [pc, #464]	; (8006610 <__ieee754_fmod+0x260>)
 8006440:	dd0d      	ble.n	800645e <__ieee754_fmod+0xae>
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800644a:	dcfa      	bgt.n	8006442 <__ieee754_fmod+0x92>
 800644c:	e007      	b.n	800645e <__ieee754_fmod+0xae>
 800644e:	ec45 4b10 	vmov	d0, r4, r5
 8006452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006456:	ea4f 502b 	mov.w	r0, fp, asr #20
 800645a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800645e:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
 8006462:	da0f      	bge.n	8006484 <__ieee754_fmod+0xd4>
 8006464:	f1b9 0f00 	cmp.w	r9, #0
 8006468:	f040 80a7 	bne.w	80065ba <__ieee754_fmod+0x20a>
 800646c:	f1b8 0f00 	cmp.w	r8, #0
 8006470:	4643      	mov	r3, r8
 8006472:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006610 <__ieee754_fmod+0x260>
 8006476:	dd09      	ble.n	800648c <__ieee754_fmod+0xdc>
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006480:	dcfa      	bgt.n	8006478 <__ieee754_fmod+0xc8>
 8006482:	e003      	b.n	800648c <__ieee754_fmod+0xdc>
 8006484:	ea4f 5c29 	mov.w	ip, r9, asr #20
 8006488:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
 800648c:	4b61      	ldr	r3, [pc, #388]	; (8006614 <__ieee754_fmod+0x264>)
 800648e:	4298      	cmp	r0, r3
 8006490:	db5b      	blt.n	800654a <__ieee754_fmod+0x19a>
 8006492:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800649a:	4a5e      	ldr	r2, [pc, #376]	; (8006614 <__ieee754_fmod+0x264>)
 800649c:	4594      	cmp	ip, r2
 800649e:	db63      	blt.n	8006568 <__ieee754_fmod+0x1b8>
 80064a0:	f3c7 0513 	ubfx	r5, r7, #0, #20
 80064a4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80064a8:	ebcc 0000 	rsb	r0, ip, r0
 80064ac:	e007      	b.n	80064be <__ieee754_fmod+0x10e>
 80064ae:	ea52 0304 	orrs.w	r3, r2, r4
 80064b2:	d013      	beq.n	80064dc <__ieee754_fmod+0x12c>
 80064b4:	0fe3      	lsrs	r3, r4, #31
 80064b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80064ba:	0061      	lsls	r1, r4, #1
 80064bc:	3801      	subs	r0, #1
 80064be:	ebce 0401 	rsb	r4, lr, r1
 80064c2:	1b5a      	subs	r2, r3, r5
 80064c4:	b190      	cbz	r0, 80064ec <__ieee754_fmod+0x13c>
 80064c6:	4571      	cmp	r1, lr
 80064c8:	bf38      	it	cc
 80064ca:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	daed      	bge.n	80064ae <__ieee754_fmod+0xfe>
 80064d2:	0fca      	lsrs	r2, r1, #31
 80064d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80064d8:	0049      	lsls	r1, r1, #1
 80064da:	e7ef      	b.n	80064bc <__ieee754_fmod+0x10c>
 80064dc:	4b4b      	ldr	r3, [pc, #300]	; (800660c <__ieee754_fmod+0x25c>)
 80064de:	0ff6      	lsrs	r6, r6, #31
 80064e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80064e4:	ed96 0b00 	vldr	d0, [r6]
 80064e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	4571      	cmp	r1, lr
 80064ee:	4615      	mov	r5, r2
 80064f0:	bf38      	it	cc
 80064f2:	f102 35ff 	addcc.w	r5, r2, #4294967295	; 0xffffffff
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	bfac      	ite	ge
 80064fa:	ebce 0101 	rsbge	r1, lr, r1
 80064fe:	461d      	movlt	r5, r3
 8006500:	ea55 0301 	orrs.w	r3, r5, r1
 8006504:	d0ea      	beq.n	80064dc <__ieee754_fmod+0x12c>
 8006506:	4a44      	ldr	r2, [pc, #272]	; (8006618 <__ieee754_fmod+0x268>)
 8006508:	4295      	cmp	r5, r2
 800650a:	dc08      	bgt.n	800651e <__ieee754_fmod+0x16e>
 800650c:	0fcb      	lsrs	r3, r1, #31
 800650e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8006512:	4295      	cmp	r5, r2
 8006514:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006518:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800651c:	ddf6      	ble.n	800650c <__ieee754_fmod+0x15c>
 800651e:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <__ieee754_fmod+0x264>)
 8006520:	459c      	cmp	ip, r3
 8006522:	da54      	bge.n	80065ce <__ieee754_fmod+0x21e>
 8006524:	4a3b      	ldr	r2, [pc, #236]	; (8006614 <__ieee754_fmod+0x264>)
 8006526:	ebcc 0202 	rsb	r2, ip, r2
 800652a:	2a14      	cmp	r2, #20
 800652c:	dc5b      	bgt.n	80065e6 <__ieee754_fmod+0x236>
 800652e:	f1c2 0320 	rsb	r3, r2, #32
 8006532:	fa05 f303 	lsl.w	r3, r5, r3
 8006536:	40d1      	lsrs	r1, r2
 8006538:	430b      	orrs	r3, r1
 800653a:	4115      	asrs	r5, r2
 800653c:	ea45 0106 	orr.w	r1, r5, r6
 8006540:	4618      	mov	r0, r3
 8006542:	ec41 0b10 	vmov	d0, r0, r1
 8006546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	4932      	ldr	r1, [pc, #200]	; (8006614 <__ieee754_fmod+0x264>)
 800654c:	1a09      	subs	r1, r1, r0
 800654e:	291f      	cmp	r1, #31
 8006550:	dc2d      	bgt.n	80065ae <__ieee754_fmod+0x1fe>
 8006552:	f1c1 0320 	rsb	r3, r1, #32
 8006556:	fa0b fb01 	lsl.w	fp, fp, r1
 800655a:	fa2a f303 	lsr.w	r3, sl, r3
 800655e:	ea43 030b 	orr.w	r3, r3, fp
 8006562:	fa0a f101 	lsl.w	r1, sl, r1
 8006566:	e798      	b.n	800649a <__ieee754_fmod+0xea>
 8006568:	4c2a      	ldr	r4, [pc, #168]	; (8006614 <__ieee754_fmod+0x264>)
 800656a:	ebcc 0404 	rsb	r4, ip, r4
 800656e:	2c1f      	cmp	r4, #31
 8006570:	dc15      	bgt.n	800659e <__ieee754_fmod+0x1ee>
 8006572:	f1c4 0220 	rsb	r2, r4, #32
 8006576:	fa09 f504 	lsl.w	r5, r9, r4
 800657a:	fa28 f202 	lsr.w	r2, r8, r2
 800657e:	4315      	orrs	r5, r2
 8006580:	fa08 fe04 	lsl.w	lr, r8, r4
 8006584:	e790      	b.n	80064a8 <__ieee754_fmod+0xf8>
 8006586:	ea4f 23cb 	mov.w	r3, fp, lsl #11
 800658a:	2b00      	cmp	r3, #0
 800658c:	4821      	ldr	r0, [pc, #132]	; (8006614 <__ieee754_fmod+0x264>)
 800658e:	f77f af66 	ble.w	800645e <__ieee754_fmod+0xae>
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800659a:	dcfa      	bgt.n	8006592 <__ieee754_fmod+0x1e2>
 800659c:	e75f      	b.n	800645e <__ieee754_fmod+0xae>
 800659e:	4d1f      	ldr	r5, [pc, #124]	; (800661c <__ieee754_fmod+0x26c>)
 80065a0:	ebcc 0505 	rsb	r5, ip, r5
 80065a4:	fa08 f505 	lsl.w	r5, r8, r5
 80065a8:	f04f 0e00 	mov.w	lr, #0
 80065ac:	e77c      	b.n	80064a8 <__ieee754_fmod+0xf8>
 80065ae:	4b1b      	ldr	r3, [pc, #108]	; (800661c <__ieee754_fmod+0x26c>)
 80065b0:	1a1b      	subs	r3, r3, r0
 80065b2:	fa0a f303 	lsl.w	r3, sl, r3
 80065b6:	2100      	movs	r1, #0
 80065b8:	e76f      	b.n	800649a <__ieee754_fmod+0xea>
 80065ba:	f8df c058 	ldr.w	ip, [pc, #88]	; 8006614 <__ieee754_fmod+0x264>
 80065be:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80065ca:	dcfa      	bgt.n	80065c2 <__ieee754_fmod+0x212>
 80065cc:	e75e      	b.n	800648c <__ieee754_fmod+0xdc>
 80065ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80065d2:	432e      	orrs	r6, r5
 80065d4:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
 80065d8:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
 80065dc:	460a      	mov	r2, r1
 80065de:	ec43 2b10 	vmov	d0, r2, r3
 80065e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	2a1f      	cmp	r2, #31
 80065e8:	dc07      	bgt.n	80065fa <__ieee754_fmod+0x24a>
 80065ea:	f1c2 0320 	rsb	r3, r2, #32
 80065ee:	409d      	lsls	r5, r3
 80065f0:	40d1      	lsrs	r1, r2
 80065f2:	ea45 0301 	orr.w	r3, r5, r1
 80065f6:	4635      	mov	r5, r6
 80065f8:	e7a0      	b.n	800653c <__ieee754_fmod+0x18c>
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <__ieee754_fmod+0x26c>)
 80065fc:	ebcc 0303 	rsb	r3, ip, r3
 8006600:	fa45 f303 	asr.w	r3, r5, r3
 8006604:	4635      	mov	r5, r6
 8006606:	e799      	b.n	800653c <__ieee754_fmod+0x18c>
 8006608:	7fefffff 	.word	0x7fefffff
 800660c:	08008880 	.word	0x08008880
 8006610:	fffffbed 	.word	0xfffffbed
 8006614:	fffffc02 	.word	0xfffffc02
 8006618:	000fffff 	.word	0x000fffff
 800661c:	fffffbe2 	.word	0xfffffbe2
 8006620:	7ff00000 	.word	0x7ff00000
	...

08006630 <__ieee754_rem_pio2>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	ec53 2b10 	vmov	r2, r3, d0
 8006638:	4997      	ldr	r1, [pc, #604]	; (8006898 <__ieee754_rem_pio2+0x268>)
 800663a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800663e:	458b      	cmp	fp, r1
 8006640:	b08f      	sub	sp, #60	; 0x3c
 8006642:	f340 8087 	ble.w	8006754 <__ieee754_rem_pio2+0x124>
 8006646:	4995      	ldr	r1, [pc, #596]	; (800689c <__ieee754_rem_pio2+0x26c>)
 8006648:	458b      	cmp	fp, r1
 800664a:	461c      	mov	r4, r3
 800664c:	4682      	mov	sl, r0
 800664e:	dc29      	bgt.n	80066a4 <__ieee754_rem_pio2+0x74>
 8006650:	2c00      	cmp	r4, #0
 8006652:	4619      	mov	r1, r3
 8006654:	ee10 0a10 	vmov	r0, s0
 8006658:	a385      	add	r3, pc, #532	; (adr r3, 8006870 <__ieee754_rem_pio2+0x240>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f340 81a5 	ble.w	80069ac <__ieee754_rem_pio2+0x37c>
 8006662:	f7f9 fe51 	bl	8000308 <__aeabi_dsub>
 8006666:	4b8e      	ldr	r3, [pc, #568]	; (80068a0 <__ieee754_rem_pio2+0x270>)
 8006668:	459b      	cmp	fp, r3
 800666a:	4604      	mov	r4, r0
 800666c:	460d      	mov	r5, r1
 800666e:	f000 8087 	beq.w	8006780 <__ieee754_rem_pio2+0x150>
 8006672:	a381      	add	r3, pc, #516	; (adr r3, 8006878 <__ieee754_rem_pio2+0x248>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f7f9 fe46 	bl	8000308 <__aeabi_dsub>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9ca 2300 	strd	r2, r3, [sl]
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7f9 fe3e 	bl	8000308 <__aeabi_dsub>
 800668c:	a37a      	add	r3, pc, #488	; (adr r3, 8006878 <__ieee754_rem_pio2+0x248>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 fe39 	bl	8000308 <__aeabi_dsub>
 8006696:	2501      	movs	r5, #1
 8006698:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800669c:	4628      	mov	r0, r5
 800669e:	b00f      	add	sp, #60	; 0x3c
 80066a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a4:	497f      	ldr	r1, [pc, #508]	; (80068a4 <__ieee754_rem_pio2+0x274>)
 80066a6:	458b      	cmp	fp, r1
 80066a8:	f340 8087 	ble.w	80067ba <__ieee754_rem_pio2+0x18a>
 80066ac:	497e      	ldr	r1, [pc, #504]	; (80068a8 <__ieee754_rem_pio2+0x278>)
 80066ae:	458b      	cmp	fp, r1
 80066b0:	dc5b      	bgt.n	800676a <__ieee754_rem_pio2+0x13a>
 80066b2:	ea4f 552b 	mov.w	r5, fp, asr #20
 80066b6:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80066ba:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
 80066be:	4610      	mov	r0, r2
 80066c0:	4639      	mov	r1, r7
 80066c2:	ee10 6a10 	vmov	r6, s0
 80066c6:	f7fa fa73 	bl	8000bb0 <__aeabi_d2iz>
 80066ca:	f7f9 ff6b 	bl	80005a4 <__aeabi_i2d>
 80066ce:	4680      	mov	r8, r0
 80066d0:	4689      	mov	r9, r1
 80066d2:	4642      	mov	r2, r8
 80066d4:	464b      	mov	r3, r9
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80066de:	f7f9 fe13 	bl	8000308 <__aeabi_dsub>
 80066e2:	2200      	movs	r2, #0
 80066e4:	4b71      	ldr	r3, [pc, #452]	; (80068ac <__ieee754_rem_pio2+0x27c>)
 80066e6:	f7f9 ffc3 	bl	8000670 <__aeabi_dmul>
 80066ea:	4689      	mov	r9, r1
 80066ec:	4680      	mov	r8, r0
 80066ee:	f7fa fa5f 	bl	8000bb0 <__aeabi_d2iz>
 80066f2:	f7f9 ff57 	bl	80005a4 <__aeabi_i2d>
 80066f6:	4606      	mov	r6, r0
 80066f8:	460f      	mov	r7, r1
 80066fa:	4632      	mov	r2, r6
 80066fc:	463b      	mov	r3, r7
 80066fe:	4640      	mov	r0, r8
 8006700:	4649      	mov	r1, r9
 8006702:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8006706:	f7f9 fdff 	bl	8000308 <__aeabi_dsub>
 800670a:	2200      	movs	r2, #0
 800670c:	4b67      	ldr	r3, [pc, #412]	; (80068ac <__ieee754_rem_pio2+0x27c>)
 800670e:	f7f9 ffaf 	bl	8000670 <__aeabi_dmul>
 8006712:	2200      	movs	r2, #0
 8006714:	2300      	movs	r3, #0
 8006716:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800671a:	f7fa fa17 	bl	8000b4c <__aeabi_dcmpeq>
 800671e:	2800      	cmp	r0, #0
 8006720:	f000 8170 	beq.w	8006a04 <__ieee754_rem_pio2+0x3d4>
 8006724:	2300      	movs	r3, #0
 8006726:	4630      	mov	r0, r6
 8006728:	4639      	mov	r1, r7
 800672a:	2200      	movs	r2, #0
 800672c:	f7fa fa0e 	bl	8000b4c <__aeabi_dcmpeq>
 8006730:	2800      	cmp	r0, #0
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2302      	moveq	r3, #2
 8006738:	4a5d      	ldr	r2, [pc, #372]	; (80068b0 <__ieee754_rem_pio2+0x280>)
 800673a:	9201      	str	r2, [sp, #4]
 800673c:	2102      	movs	r1, #2
 800673e:	9100      	str	r1, [sp, #0]
 8006740:	462a      	mov	r2, r5
 8006742:	4651      	mov	r1, sl
 8006744:	a808      	add	r0, sp, #32
 8006746:	f000 fe3b 	bl	80073c0 <__kernel_rem_pio2>
 800674a:	2c00      	cmp	r4, #0
 800674c:	f2c0 814c 	blt.w	80069e8 <__ieee754_rem_pio2+0x3b8>
 8006750:	4605      	mov	r5, r0
 8006752:	e006      	b.n	8006762 <__ieee754_rem_pio2+0x132>
 8006754:	ed80 0b00 	vstr	d0, [r0]
 8006758:	2500      	movs	r5, #0
 800675a:	2400      	movs	r4, #0
 800675c:	e9c0 4502 	strd	r4, r5, [r0, #8]
 8006760:	2500      	movs	r5, #0
 8006762:	4628      	mov	r0, r5
 8006764:	b00f      	add	sp, #60	; 0x3c
 8006766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676a:	ee10 0a10 	vmov	r0, s0
 800676e:	4619      	mov	r1, r3
 8006770:	f7f9 fdca 	bl	8000308 <__aeabi_dsub>
 8006774:	2500      	movs	r5, #0
 8006776:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800677a:	e9ca 0100 	strd	r0, r1, [sl]
 800677e:	e7f0      	b.n	8006762 <__ieee754_rem_pio2+0x132>
 8006780:	a33f      	add	r3, pc, #252	; (adr r3, 8006880 <__ieee754_rem_pio2+0x250>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 fdbf 	bl	8000308 <__aeabi_dsub>
 800678a:	a33f      	add	r3, pc, #252	; (adr r3, 8006888 <__ieee754_rem_pio2+0x258>)
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	460d      	mov	r5, r1
 8006792:	4604      	mov	r4, r0
 8006794:	f7f9 fdb8 	bl	8000308 <__aeabi_dsub>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	e9ca 2300 	strd	r2, r3, [sl]
 80067a0:	4629      	mov	r1, r5
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7f9 fdb0 	bl	8000308 <__aeabi_dsub>
 80067a8:	a337      	add	r3, pc, #220	; (adr r3, 8006888 <__ieee754_rem_pio2+0x258>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fdab 	bl	8000308 <__aeabi_dsub>
 80067b2:	2501      	movs	r5, #1
 80067b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80067b8:	e7d3      	b.n	8006762 <__ieee754_rem_pio2+0x132>
 80067ba:	f001 fae1 	bl	8007d80 <fabs>
 80067be:	ec57 6b10 	vmov	r6, r7, d0
 80067c2:	ee10 0a10 	vmov	r0, s0
 80067c6:	a332      	add	r3, pc, #200	; (adr r3, 8006890 <__ieee754_rem_pio2+0x260>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	4639      	mov	r1, r7
 80067ce:	f7f9 ff4f 	bl	8000670 <__aeabi_dmul>
 80067d2:	2200      	movs	r2, #0
 80067d4:	4b37      	ldr	r3, [pc, #220]	; (80068b4 <__ieee754_rem_pio2+0x284>)
 80067d6:	f7f9 fd99 	bl	800030c <__adddf3>
 80067da:	f7fa f9e9 	bl	8000bb0 <__aeabi_d2iz>
 80067de:	4605      	mov	r5, r0
 80067e0:	f7f9 fee0 	bl	80005a4 <__aeabi_i2d>
 80067e4:	a322      	add	r3, pc, #136	; (adr r3, 8006870 <__ieee754_rem_pio2+0x240>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ee:	f7f9 ff3f 	bl	8000670 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7f9 fd85 	bl	8000308 <__aeabi_dsub>
 80067fe:	a31e      	add	r3, pc, #120	; (adr r3, 8006878 <__ieee754_rem_pio2+0x248>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	4680      	mov	r8, r0
 8006806:	4689      	mov	r9, r1
 8006808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800680c:	f7f9 ff30 	bl	8000670 <__aeabi_dmul>
 8006810:	2d1f      	cmp	r5, #31
 8006812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006816:	dc51      	bgt.n	80068bc <__ieee754_rem_pio2+0x28c>
 8006818:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <__ieee754_rem_pio2+0x288>)
 800681a:	1e6a      	subs	r2, r5, #1
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	459b      	cmp	fp, r3
 8006822:	d04b      	beq.n	80068bc <__ieee754_rem_pio2+0x28c>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4640      	mov	r0, r8
 800682a:	4649      	mov	r1, r9
 800682c:	f7f9 fd6c 	bl	8000308 <__aeabi_dsub>
 8006830:	4606      	mov	r6, r0
 8006832:	460f      	mov	r7, r1
 8006834:	e9ca 6700 	strd	r6, r7, [sl]
 8006838:	4632      	mov	r2, r6
 800683a:	463b      	mov	r3, r7
 800683c:	4640      	mov	r0, r8
 800683e:	4649      	mov	r1, r9
 8006840:	f7f9 fd62 	bl	8000308 <__aeabi_dsub>
 8006844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006848:	f7f9 fd5e 	bl	8000308 <__aeabi_dsub>
 800684c:	2c00      	cmp	r4, #0
 800684e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006852:	da86      	bge.n	8006762 <__ieee754_rem_pio2+0x132>
 8006854:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
 8006858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800685c:	426d      	negs	r5, r5
 800685e:	f8ca 6000 	str.w	r6, [sl]
 8006862:	f8ca 4004 	str.w	r4, [sl, #4]
 8006866:	f8ca 0008 	str.w	r0, [sl, #8]
 800686a:	f8ca 300c 	str.w	r3, [sl, #12]
 800686e:	e778      	b.n	8006762 <__ieee754_rem_pio2+0x132>
 8006870:	54400000 	.word	0x54400000
 8006874:	3ff921fb 	.word	0x3ff921fb
 8006878:	1a626331 	.word	0x1a626331
 800687c:	3dd0b461 	.word	0x3dd0b461
 8006880:	1a600000 	.word	0x1a600000
 8006884:	3dd0b461 	.word	0x3dd0b461
 8006888:	2e037073 	.word	0x2e037073
 800688c:	3ba3198a 	.word	0x3ba3198a
 8006890:	6dc9c883 	.word	0x6dc9c883
 8006894:	3fe45f30 	.word	0x3fe45f30
 8006898:	3fe921fb 	.word	0x3fe921fb
 800689c:	4002d97b 	.word	0x4002d97b
 80068a0:	3ff921fb 	.word	0x3ff921fb
 80068a4:	413921fb 	.word	0x413921fb
 80068a8:	7fefffff 	.word	0x7fefffff
 80068ac:	41700000 	.word	0x41700000
 80068b0:	08008910 	.word	0x08008910
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	08008890 	.word	0x08008890
 80068bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068c0:	4640      	mov	r0, r8
 80068c2:	4649      	mov	r1, r9
 80068c4:	f7f9 fd20 	bl	8000308 <__aeabi_dsub>
 80068c8:	ea4f 5b2b 	mov.w	fp, fp, asr #20
 80068cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068d0:	ebc3 030b 	rsb	r3, r3, fp
 80068d4:	4606      	mov	r6, r0
 80068d6:	460f      	mov	r7, r1
 80068d8:	2b10      	cmp	r3, #16
 80068da:	e9ca 6700 	strd	r6, r7, [sl]
 80068de:	ddab      	ble.n	8006838 <__ieee754_rem_pio2+0x208>
 80068e0:	a35d      	add	r3, pc, #372	; (adr r3, 8006a58 <__ieee754_rem_pio2+0x428>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ea:	f7f9 fec1 	bl	8000670 <__aeabi_dmul>
 80068ee:	4606      	mov	r6, r0
 80068f0:	460f      	mov	r7, r1
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f7f9 fd05 	bl	8000308 <__aeabi_dsub>
 80068fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4640      	mov	r0, r8
 8006908:	4649      	mov	r1, r9
 800690a:	f7f9 fcfd 	bl	8000308 <__aeabi_dsub>
 800690e:	4632      	mov	r2, r6
 8006910:	463b      	mov	r3, r7
 8006912:	f7f9 fcf9 	bl	8000308 <__aeabi_dsub>
 8006916:	a352      	add	r3, pc, #328	; (adr r3, 8006a60 <__ieee754_rem_pio2+0x430>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	4606      	mov	r6, r0
 800691e:	460f      	mov	r7, r1
 8006920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006924:	f7f9 fea4 	bl	8000670 <__aeabi_dmul>
 8006928:	4632      	mov	r2, r6
 800692a:	463b      	mov	r3, r7
 800692c:	f7f9 fcec 	bl	8000308 <__aeabi_dsub>
 8006930:	460b      	mov	r3, r1
 8006932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006936:	4602      	mov	r2, r0
 8006938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693c:	f7f9 fce4 	bl	8000308 <__aeabi_dsub>
 8006940:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006944:	ebc3 0b0b 	rsb	fp, r3, fp
 8006948:	4606      	mov	r6, r0
 800694a:	460f      	mov	r7, r1
 800694c:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
 8006950:	e9ca 6700 	strd	r6, r7, [sl]
 8006954:	dd76      	ble.n	8006a44 <__ieee754_rem_pio2+0x414>
 8006956:	a345      	add	r3, pc, #276	; (adr r3, 8006a6c <__ieee754_rem_pio2+0x43c>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006960:	f7f9 fe86 	bl	8000670 <__aeabi_dmul>
 8006964:	4606      	mov	r6, r0
 8006966:	460f      	mov	r7, r1
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006970:	f7f9 fcca 	bl	8000308 <__aeabi_dsub>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4680      	mov	r8, r0
 800697a:	4689      	mov	r9, r1
 800697c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006980:	f7f9 fcc2 	bl	8000308 <__aeabi_dsub>
 8006984:	4632      	mov	r2, r6
 8006986:	463b      	mov	r3, r7
 8006988:	f7f9 fcbe 	bl	8000308 <__aeabi_dsub>
 800698c:	a339      	add	r3, pc, #228	; (adr r3, 8006a74 <__ieee754_rem_pio2+0x444>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	4606      	mov	r6, r0
 8006994:	460f      	mov	r7, r1
 8006996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800699a:	f7f9 fe69 	bl	8000670 <__aeabi_dmul>
 800699e:	4632      	mov	r2, r6
 80069a0:	463b      	mov	r3, r7
 80069a2:	f7f9 fcb1 	bl	8000308 <__aeabi_dsub>
 80069a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069aa:	e73b      	b.n	8006824 <__ieee754_rem_pio2+0x1f4>
 80069ac:	f7f9 fcae 	bl	800030c <__adddf3>
 80069b0:	4b2d      	ldr	r3, [pc, #180]	; (8006a68 <__ieee754_rem_pio2+0x438>)
 80069b2:	459b      	cmp	fp, r3
 80069b4:	4604      	mov	r4, r0
 80069b6:	460d      	mov	r5, r1
 80069b8:	d026      	beq.n	8006a08 <__ieee754_rem_pio2+0x3d8>
 80069ba:	a325      	add	r3, pc, #148	; (adr r3, 8006a50 <__ieee754_rem_pio2+0x420>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fca4 	bl	800030c <__adddf3>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	e9ca 2300 	strd	r2, r3, [sl]
 80069cc:	4629      	mov	r1, r5
 80069ce:	4620      	mov	r0, r4
 80069d0:	f7f9 fc9a 	bl	8000308 <__aeabi_dsub>
 80069d4:	a31e      	add	r3, pc, #120	; (adr r3, 8006a50 <__ieee754_rem_pio2+0x420>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f7f9 fc97 	bl	800030c <__adddf3>
 80069de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80069e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80069e6:	e6bc      	b.n	8006762 <__ieee754_rem_pio2+0x132>
 80069e8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80069ec:	f8da 300c 	ldr.w	r3, [sl, #12]
 80069f0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80069f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	4245      	negs	r5, r0
 80069fa:	f8ca 2004 	str.w	r2, [sl, #4]
 80069fe:	f8ca 300c 	str.w	r3, [sl, #12]
 8006a02:	e6ae      	b.n	8006762 <__ieee754_rem_pio2+0x132>
 8006a04:	2303      	movs	r3, #3
 8006a06:	e697      	b.n	8006738 <__ieee754_rem_pio2+0x108>
 8006a08:	a313      	add	r3, pc, #76	; (adr r3, 8006a58 <__ieee754_rem_pio2+0x428>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fc7d 	bl	800030c <__adddf3>
 8006a12:	a313      	add	r3, pc, #76	; (adr r3, 8006a60 <__ieee754_rem_pio2+0x430>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	460d      	mov	r5, r1
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	f7f9 fc76 	bl	800030c <__adddf3>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	e9ca 2300 	strd	r2, r3, [sl]
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f7f9 fc6c 	bl	8000308 <__aeabi_dsub>
 8006a30:	a30b      	add	r3, pc, #44	; (adr r3, 8006a60 <__ieee754_rem_pio2+0x430>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fc69 	bl	800030c <__adddf3>
 8006a3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a3e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a42:	e68e      	b.n	8006762 <__ieee754_rem_pio2+0x132>
 8006a44:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006a48:	e6f6      	b.n	8006838 <__ieee754_rem_pio2+0x208>
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w
 8006a50:	1a626331 	.word	0x1a626331
 8006a54:	3dd0b461 	.word	0x3dd0b461
 8006a58:	1a600000 	.word	0x1a600000
 8006a5c:	3dd0b461 	.word	0x3dd0b461
 8006a60:	2e037073 	.word	0x2e037073
 8006a64:	3ba3198a 	.word	0x3ba3198a
 8006a68:	3ff921fb 	.word	0x3ff921fb
 8006a6c:	2e000000 	.word	0x2e000000
 8006a70:	3ba3198a 	.word	0x3ba3198a
 8006a74:	252049c1 	.word	0x252049c1
 8006a78:	397b839a 	.word	0x397b839a
 8006a7c:	00000000 	.word	0x00000000

08006a80 <__ieee754_powf>:
 8006a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a84:	ed2d 8b02 	vpush	{d8}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	edcd 0a00 	vstr	s1, [sp]
 8006a8e:	9c00      	ldr	r4, [sp, #0]
 8006a90:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006a94:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
 8006a98:	d014      	beq.n	8006ac4 <__ieee754_powf+0x44>
 8006a9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a9e:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
 8006aa2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006aa6:	dd07      	ble.n	8006ab8 <__ieee754_powf+0x38>
 8006aa8:	4858      	ldr	r0, [pc, #352]	; (8006c0c <__ieee754_powf+0x18c>)
 8006aaa:	b002      	add	sp, #8
 8006aac:	ecbd 8b02 	vpop	{d8}
 8006ab0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab4:	f001 bb8c 	b.w	80081d0 <nanf>
 8006ab8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006abc:	dd09      	ble.n	8006ad2 <__ieee754_powf+0x52>
 8006abe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006ac2:	d1f1      	bne.n	8006aa8 <__ieee754_powf+0x28>
 8006ac4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ac8:	b002      	add	sp, #8
 8006aca:	ecbd 8b02 	vpop	{d8}
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	f1b8 0f00 	cmp.w	r8, #0
 8006ad6:	db4d      	blt.n	8006b74 <__ieee754_powf+0xf4>
 8006ad8:	f04f 0a00 	mov.w	sl, #0
 8006adc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006ae0:	d03f      	beq.n	8006b62 <__ieee754_powf+0xe2>
 8006ae2:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006ae6:	d058      	beq.n	8006b9a <__ieee754_powf+0x11a>
 8006ae8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006aec:	d06e      	beq.n	8006bcc <__ieee754_powf+0x14c>
 8006aee:	9d01      	ldr	r5, [sp, #4]
 8006af0:	f8dd 9000 	ldr.w	r9, [sp]
 8006af4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006af8:	ee00 5a10 	vmov	s0, r5
 8006afc:	d01c      	beq.n	8006b38 <__ieee754_powf+0xb8>
 8006afe:	f001 fb2f 	bl	8008160 <fabsf>
 8006b02:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b06:	d04d      	beq.n	8006ba4 <__ieee754_powf+0x124>
 8006b08:	2f00      	cmp	r7, #0
 8006b0a:	d04b      	beq.n	8006ba4 <__ieee754_powf+0x124>
 8006b0c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006b10:	d048      	beq.n	8006ba4 <__ieee754_powf+0x124>
 8006b12:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006b16:	3b01      	subs	r3, #1
 8006b18:	ea5a 0203 	orrs.w	r2, sl, r3
 8006b1c:	d06e      	beq.n	8006bfc <__ieee754_powf+0x17c>
 8006b1e:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
 8006b22:	dd7b      	ble.n	8006c1c <__ieee754_powf+0x19c>
 8006b24:	4a3a      	ldr	r2, [pc, #232]	; (8006c10 <__ieee754_powf+0x190>)
 8006b26:	4297      	cmp	r7, r2
 8006b28:	f300 81d1 	bgt.w	8006ece <__ieee754_powf+0x44e>
 8006b2c:	2c00      	cmp	r4, #0
 8006b2e:	f2c0 81d4 	blt.w	8006eda <__ieee754_powf+0x45a>
 8006b32:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8006c14 <__ieee754_powf+0x194>
 8006b36:	e7c7      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006b38:	f1b8 0f00 	cmp.w	r8, #0
 8006b3c:	da4b      	bge.n	8006bd6 <__ieee754_powf+0x156>
 8006b3e:	f001 fb0f 	bl	8008160 <fabsf>
 8006b42:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b46:	d001      	beq.n	8006b4c <__ieee754_powf+0xcc>
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	d1df      	bne.n	8006b0c <__ieee754_powf+0x8c>
 8006b4c:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 8006b50:	ea57 030a 	orrs.w	r3, r7, sl
 8006b54:	d04d      	beq.n	8006bf2 <__ieee754_powf+0x172>
 8006b56:	f1ba 0f01 	cmp.w	sl, #1
 8006b5a:	d1b5      	bne.n	8006ac8 <__ieee754_powf+0x48>
 8006b5c:	eeb1 0a40 	vneg.f32	s0, s0
 8006b60:	e7b2      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006b62:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006b66:	d0ad      	beq.n	8006ac4 <__ieee754_powf+0x44>
 8006b68:	dd29      	ble.n	8006bbe <__ieee754_powf+0x13e>
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	dbe1      	blt.n	8006b32 <__ieee754_powf+0xb2>
 8006b6e:	ed9d 0a00 	vldr	s0, [sp]
 8006b72:	e7a9      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006b74:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
 8006b78:	da1e      	bge.n	8006bb8 <__ieee754_powf+0x138>
 8006b7a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006b7e:	db09      	blt.n	8006b94 <__ieee754_powf+0x114>
 8006b80:	15f3      	asrs	r3, r6, #23
 8006b82:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006b86:	fa46 f203 	asr.w	r2, r6, r3
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	429e      	cmp	r6, r3
 8006b90:	f000 8198 	beq.w	8006ec4 <__ieee754_powf+0x444>
 8006b94:	f04f 0a00 	mov.w	sl, #0
 8006b98:	e7a3      	b.n	8006ae2 <__ieee754_powf+0x62>
 8006b9a:	2c00      	cmp	r4, #0
 8006b9c:	db22      	blt.n	8006be4 <__ieee754_powf+0x164>
 8006b9e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006ba2:	e791      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	bfbc      	itt	lt
 8006ba8:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006bac:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006bb0:	f1b8 0f00 	cmp.w	r8, #0
 8006bb4:	da88      	bge.n	8006ac8 <__ieee754_powf+0x48>
 8006bb6:	e7c9      	b.n	8006b4c <__ieee754_powf+0xcc>
 8006bb8:	f04f 0a02 	mov.w	sl, #2
 8006bbc:	e78e      	b.n	8006adc <__ieee754_powf+0x5c>
 8006bbe:	2c00      	cmp	r4, #0
 8006bc0:	dab7      	bge.n	8006b32 <__ieee754_powf+0xb2>
 8006bc2:	eddd 7a00 	vldr	s15, [sp]
 8006bc6:	eeb1 0a67 	vneg.f32	s0, s15
 8006bca:	e77d      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006bcc:	eddd 7a01 	vldr	s15, [sp, #4]
 8006bd0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8006bd4:	e778      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006bd6:	b002      	add	sp, #8
 8006bd8:	ecbd 8b02 	vpop	{d8}
 8006bdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	f000 ba4e 	b.w	8007080 <__ieee754_sqrtf>
 8006be4:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006be8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006bec:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8006bf0:	e76a      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006bf2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006bf6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006bfa:	e765      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006bfc:	ee07 5a90 	vmov	s15, r5
 8006c00:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8006c04:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006c08:	e75e      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006c0a:	bf00      	nop
 8006c0c:	08008864 	.word	0x08008864
 8006c10:	3f7ffff7 	.word	0x3f7ffff7
 8006c14:	00000000 	.word	0x00000000
 8006c18:	4b800000 	.word	0x4b800000
 8006c1c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8006c20:	f280 8168 	bge.w	8006ef4 <__ieee754_powf+0x474>
 8006c24:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 8006c18 <__ieee754_powf+0x198>
 8006c28:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006c2c:	f06f 0217 	mvn.w	r2, #23
 8006c30:	ee17 7a90 	vmov	r7, s15
 8006c34:	48f2      	ldr	r0, [pc, #968]	; (8007000 <__ieee754_powf+0x580>)
 8006c36:	15f9      	asrs	r1, r7, #23
 8006c38:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8006c3c:	397f      	subs	r1, #127	; 0x7f
 8006c3e:	4287      	cmp	r7, r0
 8006c40:	440a      	add	r2, r1
 8006c42:	f047 517e 	orr.w	r1, r7, #1065353216	; 0x3f800000
 8006c46:	f340 814d 	ble.w	8006ee4 <__ieee754_powf+0x464>
 8006c4a:	48ee      	ldr	r0, [pc, #952]	; (8007004 <__ieee754_powf+0x584>)
 8006c4c:	4287      	cmp	r7, r0
 8006c4e:	f340 819b 	ble.w	8006f88 <__ieee754_powf+0x508>
 8006c52:	ed9f 4aed 	vldr	s8, [pc, #948]	; 8007008 <__ieee754_powf+0x588>
 8006c56:	3201      	adds	r2, #1
 8006c58:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006c5c:	eeb0 3a44 	vmov.f32	s6, s8
 8006c60:	2000      	movs	r0, #0
 8006c62:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006c66:	ee07 1a10 	vmov	s14, r1
 8006c6a:	ee77 7a06 	vadd.f32	s15, s14, s12
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c72:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 8006c76:	1049      	asrs	r1, r1, #1
 8006c78:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006c7c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006c80:	4401      	add	r1, r0
 8006c82:	ee77 6a46 	vsub.f32	s13, s14, s12
 8006c86:	ee02 1a10 	vmov	s4, r1
 8006c8a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006c8e:	ee72 4a46 	vsub.f32	s9, s4, s12
 8006c92:	eddf 8ade 	vldr	s17, [pc, #888]	; 800700c <__ieee754_powf+0x58c>
 8006c96:	ed9f 8ade 	vldr	s16, [pc, #888]	; 8007010 <__ieee754_powf+0x590>
 8006c9a:	eddf 1ade 	vldr	s3, [pc, #888]	; 8007014 <__ieee754_powf+0x594>
 8006c9e:	ed9f 0ade 	vldr	s0, [pc, #888]	; 8007018 <__ieee754_powf+0x598>
 8006ca2:	eddf 0ade 	vldr	s1, [pc, #888]	; 800701c <__ieee754_powf+0x59c>
 8006ca6:	ed9f 1ade 	vldr	s2, [pc, #888]	; 8007020 <__ieee754_powf+0x5a0>
 8006caa:	eddf 7ade 	vldr	s15, [pc, #888]	; 8007024 <__ieee754_powf+0x5a4>
 8006cae:	eddf 2ade 	vldr	s5, [pc, #888]	; 8007028 <__ieee754_powf+0x5a8>
 8006cb2:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8006cb6:	ee13 1a90 	vmov	r1, s7
 8006cba:	eea6 8a28 	vfma.f32	s16, s12, s17
 8006cbe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8006cc2:	f021 010f 	bic.w	r1, r1, #15
 8006cc6:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006cca:	eef0 4a61 	vmov.f32	s9, s3
 8006cce:	ee05 1a10 	vmov	s10, r1
 8006cd2:	eee6 4a08 	vfma.f32	s9, s12, s16
 8006cd6:	eef1 1a45 	vneg.f32	s3, s10
 8006cda:	eee1 6a82 	vfma.f32	s13, s3, s4
 8006cde:	eea6 0a24 	vfma.f32	s0, s12, s9
 8006ce2:	eee1 6a87 	vfma.f32	s13, s3, s14
 8006ce6:	eee6 0a00 	vfma.f32	s1, s12, s0
 8006cea:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8006cee:	eef0 6a41 	vmov.f32	s13, s2
 8006cf2:	eee6 6a20 	vfma.f32	s13, s12, s1
 8006cf6:	ee33 7a85 	vadd.f32	s14, s7, s10
 8006cfa:	ee26 6a06 	vmul.f32	s12, s12, s12
 8006cfe:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006d02:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8006d06:	eea6 7a26 	vfma.f32	s14, s12, s13
 8006d0a:	eef0 6a64 	vmov.f32	s13, s9
 8006d0e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8006d12:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 800702c <__ieee754_powf+0x5ac>
 8006d16:	ee36 6a87 	vadd.f32	s12, s13, s14
 8006d1a:	ee06 2a90 	vmov	s13, r2
 8006d1e:	ee16 2a10 	vmov	r2, s12
 8006d22:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006d26:	f022 020f 	bic.w	r2, r2, #15
 8006d2a:	ee06 2a10 	vmov	s12, r2
 8006d2e:	ee76 4a64 	vsub.f32	s9, s12, s9
 8006d32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006d36:	eee1 4a85 	vfma.f32	s9, s3, s10
 8006d3a:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006d3e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006d42:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006d46:	eef0 5a47 	vmov.f32	s11, s14
 8006d4a:	eee5 5a06 	vfma.f32	s11, s10, s12
 8006d4e:	ee15 2a90 	vmov	r2, s11
 8006d52:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006d56:	f022 020f 	bic.w	r2, r2, #15
 8006d5a:	ee05 2a10 	vmov	s10, r2
 8006d5e:	eea1 5a86 	vfma.f32	s10, s3, s12
 8006d62:	ee05 2a90 	vmov	s11, r2
 8006d66:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6e:	eee5 7aa2 	vfma.f32	s15, s11, s5
 8006d72:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006d76:	eeb0 7a67 	vmov.f32	s14, s15
 8006d7a:	eea5 7a82 	vfma.f32	s14, s11, s4
 8006d7e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8006d82:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006d86:	ee17 2a10 	vmov	r2, s14
 8006d8a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006d8e:	f022 020f 	bic.w	r2, r2, #15
 8006d92:	ee07 2a10 	vmov	s14, r2
 8006d96:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006d9a:	ee36 7ac4 	vsub.f32	s14, s13, s8
 8006d9e:	eea5 7ac2 	vfms.f32	s14, s11, s4
 8006da2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006da6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006daa:	f024 040f 	bic.w	r4, r4, #15
 8006dae:	ee07 9a90 	vmov	s15, r9
 8006db2:	ee06 4a90 	vmov	s13, r4
 8006db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006dba:	ee06 4a10 	vmov	s12, r4
 8006dbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dc2:	ee06 2a90 	vmov	s13, r2
 8006dc6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006dca:	ee06 2a10 	vmov	s12, r2
 8006dce:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006dd6:	ea5a 0303 	orrs.w	r3, sl, r3
 8006dda:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006dde:	ee37 6a26 	vadd.f32	s12, s14, s13
 8006de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006de6:	ee16 2a10 	vmov	r2, s12
 8006dea:	bf14      	ite	ne
 8006dec:	eeb0 8a67 	vmovne.f32	s16, s15
 8006df0:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006dfa:	f340 80b2 	ble.w	8006f62 <__ieee754_powf+0x4e2>
 8006dfe:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006e02:	f300 8084 	bgt.w	8006f0e <__ieee754_powf+0x48e>
 8006e06:	d077      	beq.n	8006ef8 <__ieee754_powf+0x478>
 8006e08:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006e0c:	f300 8086 	bgt.w	8006f1c <__ieee754_powf+0x49c>
 8006e10:	2300      	movs	r3, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006e18:	f022 020f 	bic.w	r2, r2, #15
 8006e1c:	ee05 2a90 	vmov	s11, r2
 8006e20:	ed9f 6a83 	vldr	s12, [pc, #524]	; 8007030 <__ieee754_powf+0x5b0>
 8006e24:	eddf 7a83 	vldr	s15, [pc, #524]	; 8007034 <__ieee754_powf+0x5b4>
 8006e28:	eddf 2a83 	vldr	s5, [pc, #524]	; 8007038 <__ieee754_powf+0x5b8>
 8006e2c:	ed9f 3a83 	vldr	s6, [pc, #524]	; 800703c <__ieee754_powf+0x5bc>
 8006e30:	ed9f 2a83 	vldr	s4, [pc, #524]	; 8007040 <__ieee754_powf+0x5c0>
 8006e34:	eddf 3a83 	vldr	s7, [pc, #524]	; 8007044 <__ieee754_powf+0x5c4>
 8006e38:	ed9f 4a83 	vldr	s8, [pc, #524]	; 8007048 <__ieee754_powf+0x5c8>
 8006e3c:	eddf 4a83 	vldr	s9, [pc, #524]	; 800704c <__ieee754_powf+0x5cc>
 8006e40:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8006e44:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006e48:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006e4c:	ee65 6a86 	vmul.f32	s13, s11, s12
 8006e50:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8006e54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006e58:	eeb0 7a66 	vmov.f32	s14, s13
 8006e5c:	eee5 6aa2 	vfma.f32	s13, s11, s5
 8006e60:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8006e64:	eef0 1a66 	vmov.f32	s3, s13
 8006e68:	eee5 1ae2 	vfms.f32	s3, s11, s5
 8006e6c:	eef0 5a43 	vmov.f32	s11, s6
 8006e70:	eee7 5a82 	vfma.f32	s11, s15, s4
 8006e74:	ee37 7a61 	vsub.f32	s14, s14, s3
 8006e78:	eee7 3aa5 	vfma.f32	s7, s15, s11
 8006e7c:	eea6 7a87 	vfma.f32	s14, s13, s14
 8006e80:	eea7 4aa3 	vfma.f32	s8, s15, s7
 8006e84:	eee7 4a84 	vfma.f32	s9, s15, s8
 8006e88:	eef0 5a64 	vmov.f32	s11, s9
 8006e8c:	eef0 4a66 	vmov.f32	s9, s13
 8006e90:	eee7 4ae5 	vfms.f32	s9, s15, s11
 8006e94:	ee66 5aa4 	vmul.f32	s11, s13, s9
 8006e98:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006e9c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006ea0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006ea4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006ea8:	ee35 0a66 	vsub.f32	s0, s10, s13
 8006eac:	ee10 2a10 	vmov	r2, s0
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eb6:	f2c0 809f 	blt.w	8006ff8 <__ieee754_powf+0x578>
 8006eba:	ee00 3a10 	vmov	s0, r3
 8006ebe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006ec2:	e601      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006ec4:	f002 0201 	and.w	r2, r2, #1
 8006ec8:	f1c2 0a02 	rsb	sl, r2, #2
 8006ecc:	e609      	b.n	8006ae2 <__ieee754_powf+0x62>
 8006ece:	4a60      	ldr	r2, [pc, #384]	; (8007050 <__ieee754_powf+0x5d0>)
 8006ed0:	4297      	cmp	r7, r2
 8006ed2:	dd62      	ble.n	8006f9a <__ieee754_powf+0x51a>
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	f77f ae2c 	ble.w	8006b32 <__ieee754_powf+0xb2>
 8006eda:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8007054 <__ieee754_powf+0x5d4>
 8006ede:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006ee2:	e5f1      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006ee4:	ed9f 4a48 	vldr	s8, [pc, #288]	; 8007008 <__ieee754_powf+0x588>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	eeb0 3a44 	vmov.f32	s6, s8
 8006eee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006ef2:	e6b8      	b.n	8006c66 <__ieee754_powf+0x1e6>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	e69d      	b.n	8006c34 <__ieee754_powf+0x1b4>
 8006ef8:	eddf 7a57 	vldr	s15, [pc, #348]	; 8007058 <__ieee754_powf+0x5d8>
 8006efc:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f04:	eef4 7ac6 	vcmpe.f32	s15, s12
 8006f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0c:	dd06      	ble.n	8006f1c <__ieee754_powf+0x49c>
 8006f0e:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8007054 <__ieee754_powf+0x5d4>
 8006f12:	ee68 7a00 	vmul.f32	s15, s16, s0
 8006f16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006f1a:	e5d5      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006f1c:	15db      	asrs	r3, r3, #23
 8006f1e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8006f22:	3b7e      	subs	r3, #126	; 0x7e
 8006f24:	fa41 f303 	asr.w	r3, r1, r3
 8006f28:	1899      	adds	r1, r3, r2
 8006f2a:	f3c1 50c7 	ubfx	r0, r1, #23, #8
 8006f2e:	4c4b      	ldr	r4, [pc, #300]	; (800705c <__ieee754_powf+0x5dc>)
 8006f30:	387f      	subs	r0, #127	; 0x7f
 8006f32:	4104      	asrs	r4, r0
 8006f34:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8006f38:	ea21 0104 	bic.w	r1, r1, r4
 8006f3c:	ee07 1a90 	vmov	s15, r1
 8006f40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f48:	f1c0 0017 	rsb	r0, r0, #23
 8006f4c:	fa43 f000 	asr.w	r0, r3, r0
 8006f50:	2a00      	cmp	r2, #0
 8006f52:	ee77 7a26 	vadd.f32	s15, s14, s13
 8006f56:	bfb8      	it	lt
 8006f58:	4240      	neglt	r0, r0
 8006f5a:	05c3      	lsls	r3, r0, #23
 8006f5c:	ee17 2a90 	vmov	r2, s15
 8006f60:	e758      	b.n	8006e14 <__ieee754_powf+0x394>
 8006f62:	493f      	ldr	r1, [pc, #252]	; (8007060 <__ieee754_powf+0x5e0>)
 8006f64:	428b      	cmp	r3, r1
 8006f66:	dc08      	bgt.n	8006f7a <__ieee754_powf+0x4fa>
 8006f68:	f47f af4e 	bne.w	8006e08 <__ieee754_powf+0x388>
 8006f6c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006f70:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8006f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f78:	d8d0      	bhi.n	8006f1c <__ieee754_powf+0x49c>
 8006f7a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8007064 <__ieee754_powf+0x5e4>
 8006f7e:	ee68 7a00 	vmul.f32	s15, s16, s0
 8006f82:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006f86:	e59f      	b.n	8006ac8 <__ieee754_powf+0x48>
 8006f88:	ed9f 4a37 	vldr	s8, [pc, #220]	; 8007068 <__ieee754_powf+0x5e8>
 8006f8c:	ed9f 3a37 	vldr	s6, [pc, #220]	; 800706c <__ieee754_powf+0x5ec>
 8006f90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006f94:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8006f98:	e665      	b.n	8006c66 <__ieee754_powf+0x1e6>
 8006f9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006f9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006fa2:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8007018 <__ieee754_powf+0x598>
 8006fa6:	eddf 7a32 	vldr	s15, [pc, #200]	; 8007070 <__ieee754_powf+0x5f0>
 8006faa:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8007074 <__ieee754_powf+0x5f4>
 8006fae:	eddf 5a32 	vldr	s11, [pc, #200]	; 8007078 <__ieee754_powf+0x5f8>
 8006fb2:	eef1 6a40 	vneg.f32	s13, s0
 8006fb6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8006fba:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006fbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006fc2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8006fc6:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006fca:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006fce:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006fd2:	eee0 7a05 	vfma.f32	s15, s0, s10
 8006fd6:	eeb0 7a67 	vmov.f32	s14, s15
 8006fda:	eea0 7a25 	vfma.f32	s14, s0, s11
 8006fde:	ee17 2a10 	vmov	r2, s14
 8006fe2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006fe6:	f022 020f 	bic.w	r2, r2, #15
 8006fea:	ee07 2a10 	vmov	s14, r2
 8006fee:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8006ff2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006ff6:	e6d6      	b.n	8006da6 <__ieee754_powf+0x326>
 8006ff8:	f001 f8f2 	bl	80081e0 <scalbnf>
 8006ffc:	e75f      	b.n	8006ebe <__ieee754_powf+0x43e>
 8006ffe:	bf00      	nop
 8007000:	001cc471 	.word	0x001cc471
 8007004:	005db3d6 	.word	0x005db3d6
 8007008:	00000000 	.word	0x00000000
 800700c:	3e53f142 	.word	0x3e53f142
 8007010:	3e6c3255 	.word	0x3e6c3255
 8007014:	3e8ba305 	.word	0x3e8ba305
 8007018:	3eaaaaab 	.word	0x3eaaaaab
 800701c:	3edb6db7 	.word	0x3edb6db7
 8007020:	3f19999a 	.word	0x3f19999a
 8007024:	3f76384f 	.word	0x3f76384f
 8007028:	369dc3a0 	.word	0x369dc3a0
 800702c:	3f763800 	.word	0x3f763800
 8007030:	35bfbe8c 	.word	0x35bfbe8c
 8007034:	3f317218 	.word	0x3f317218
 8007038:	3f317200 	.word	0x3f317200
 800703c:	b5ddea0e 	.word	0xb5ddea0e
 8007040:	3331bb4c 	.word	0x3331bb4c
 8007044:	388ab355 	.word	0x388ab355
 8007048:	bb360b61 	.word	0xbb360b61
 800704c:	3e2aaaab 	.word	0x3e2aaaab
 8007050:	3f800007 	.word	0x3f800007
 8007054:	7149f2ca 	.word	0x7149f2ca
 8007058:	3338aa3c 	.word	0x3338aa3c
 800705c:	007fffff 	.word	0x007fffff
 8007060:	43160000 	.word	0x43160000
 8007064:	0da24260 	.word	0x0da24260
 8007068:	3f15c000 	.word	0x3f15c000
 800706c:	35d1cfdc 	.word	0x35d1cfdc
 8007070:	3fb8aa3b 	.word	0x3fb8aa3b
 8007074:	36eca570 	.word	0x36eca570
 8007078:	3fb8aa00 	.word	0x3fb8aa00
 800707c:	00000000 	.word	0x00000000

08007080 <__ieee754_sqrtf>:
 8007080:	ee10 3a10 	vmov	r3, s0
 8007084:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007088:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800708c:	b470      	push	{r4, r5, r6}
 800708e:	d230      	bcs.n	80070f2 <__ieee754_sqrtf+0x72>
 8007090:	b36a      	cbz	r2, 80070ee <__ieee754_sqrtf+0x6e>
 8007092:	2b00      	cmp	r3, #0
 8007094:	db3d      	blt.n	8007112 <__ieee754_sqrtf+0x92>
 8007096:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800709a:	ea4f 50e3 	mov.w	r0, r3, asr #23
 800709e:	d32c      	bcc.n	80070fa <__ieee754_sqrtf+0x7a>
 80070a0:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
 80070a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80070a8:	07d1      	lsls	r1, r2, #31
 80070aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070ae:	bf48      	it	mi
 80070b0:	005b      	lslmi	r3, r3, #1
 80070b2:	2400      	movs	r4, #0
 80070b4:	1056      	asrs	r6, r2, #1
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4625      	mov	r5, r4
 80070ba:	2119      	movs	r1, #25
 80070bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070c0:	18a8      	adds	r0, r5, r2
 80070c2:	4298      	cmp	r0, r3
 80070c4:	dc02      	bgt.n	80070cc <__ieee754_sqrtf+0x4c>
 80070c6:	1a1b      	subs	r3, r3, r0
 80070c8:	1885      	adds	r5, r0, r2
 80070ca:	4414      	add	r4, r2
 80070cc:	3901      	subs	r1, #1
 80070ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80070d6:	d1f3      	bne.n	80070c0 <__ieee754_sqrtf+0x40>
 80070d8:	b113      	cbz	r3, 80070e0 <__ieee754_sqrtf+0x60>
 80070da:	f004 0301 	and.w	r3, r4, #1
 80070de:	441c      	add	r4, r3
 80070e0:	1064      	asrs	r4, r4, #1
 80070e2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80070e6:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 80070ea:	ee00 3a10 	vmov	s0, r3
 80070ee:	bc70      	pop	{r4, r5, r6}
 80070f0:	4770      	bx	lr
 80070f2:	eea0 0a00 	vfma.f32	s0, s0, s0
 80070f6:	bc70      	pop	{r4, r5, r6}
 80070f8:	4770      	bx	lr
 80070fa:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 80070fe:	d001      	beq.n	8007104 <__ieee754_sqrtf+0x84>
 8007100:	e00c      	b.n	800711c <__ieee754_sqrtf+0x9c>
 8007102:	460a      	mov	r2, r1
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	021c      	lsls	r4, r3, #8
 8007108:	f102 0101 	add.w	r1, r2, #1
 800710c:	d5f9      	bpl.n	8007102 <__ieee754_sqrtf+0x82>
 800710e:	1a80      	subs	r0, r0, r2
 8007110:	e7c6      	b.n	80070a0 <__ieee754_sqrtf+0x20>
 8007112:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007116:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800711a:	e7e8      	b.n	80070ee <__ieee754_sqrtf+0x6e>
 800711c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007120:	e7f5      	b.n	800710e <__ieee754_sqrtf+0x8e>
 8007122:	bf00      	nop
	...

08007130 <__kernel_cos>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	ec57 6b10 	vmov	r6, r7, d0
 8007138:	ed2d 8b02 	vpush	{d8}
 800713c:	eeb0 8a41 	vmov.f32	s16, s2
 8007140:	eef0 8a61 	vmov.f32	s17, s3
 8007144:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 8007148:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 800714c:	b083      	sub	sp, #12
 800714e:	da72      	bge.n	8007236 <__kernel_cos+0x106>
 8007150:	ee10 0a10 	vmov	r0, s0
 8007154:	4639      	mov	r1, r7
 8007156:	f7f9 fd2b 	bl	8000bb0 <__aeabi_d2iz>
 800715a:	2800      	cmp	r0, #0
 800715c:	f000 80f6 	beq.w	800734c <__kernel_cos+0x21c>
 8007160:	4632      	mov	r2, r6
 8007162:	463b      	mov	r3, r7
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fa82 	bl	8000670 <__aeabi_dmul>
 800716c:	a37c      	add	r3, pc, #496	; (adr r3, 8007360 <__kernel_cos+0x230>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	4604      	mov	r4, r0
 8007174:	460d      	mov	r5, r1
 8007176:	f7f9 fa7b 	bl	8000670 <__aeabi_dmul>
 800717a:	a37b      	add	r3, pc, #492	; (adr r3, 8007368 <__kernel_cos+0x238>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f7f9 f8c4 	bl	800030c <__adddf3>
 8007184:	4622      	mov	r2, r4
 8007186:	462b      	mov	r3, r5
 8007188:	f7f9 fa72 	bl	8000670 <__aeabi_dmul>
 800718c:	a378      	add	r3, pc, #480	; (adr r3, 8007370 <__kernel_cos+0x240>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f7f9 f8b9 	bl	8000308 <__aeabi_dsub>
 8007196:	4622      	mov	r2, r4
 8007198:	462b      	mov	r3, r5
 800719a:	f7f9 fa69 	bl	8000670 <__aeabi_dmul>
 800719e:	a376      	add	r3, pc, #472	; (adr r3, 8007378 <__kernel_cos+0x248>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f9 f8b2 	bl	800030c <__adddf3>
 80071a8:	4622      	mov	r2, r4
 80071aa:	462b      	mov	r3, r5
 80071ac:	f7f9 fa60 	bl	8000670 <__aeabi_dmul>
 80071b0:	a373      	add	r3, pc, #460	; (adr r3, 8007380 <__kernel_cos+0x250>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 f8a7 	bl	8000308 <__aeabi_dsub>
 80071ba:	4622      	mov	r2, r4
 80071bc:	462b      	mov	r3, r5
 80071be:	f7f9 fa57 	bl	8000670 <__aeabi_dmul>
 80071c2:	a371      	add	r3, pc, #452	; (adr r3, 8007388 <__kernel_cos+0x258>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 f8a0 	bl	800030c <__adddf3>
 80071cc:	4622      	mov	r2, r4
 80071ce:	462b      	mov	r3, r5
 80071d0:	f7f9 fa4e 	bl	8000670 <__aeabi_dmul>
 80071d4:	4682      	mov	sl, r0
 80071d6:	468b      	mov	fp, r1
 80071d8:	2200      	movs	r2, #0
 80071da:	4b71      	ldr	r3, [pc, #452]	; (80073a0 <__kernel_cos+0x270>)
 80071dc:	4620      	mov	r0, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	f7f9 fa46 	bl	8000670 <__aeabi_dmul>
 80071e4:	4652      	mov	r2, sl
 80071e6:	4680      	mov	r8, r0
 80071e8:	4689      	mov	r9, r1
 80071ea:	465b      	mov	r3, fp
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 fa3e 	bl	8000670 <__aeabi_dmul>
 80071f4:	ec53 2b18 	vmov	r2, r3, d8
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	4630      	mov	r0, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	f7f9 fa36 	bl	8000670 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4620      	mov	r0, r4
 800720a:	4629      	mov	r1, r5
 800720c:	f7f9 f87c 	bl	8000308 <__aeabi_dsub>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4640      	mov	r0, r8
 8007216:	4649      	mov	r1, r9
 8007218:	f7f9 f876 	bl	8000308 <__aeabi_dsub>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	2000      	movs	r0, #0
 8007222:	4960      	ldr	r1, [pc, #384]	; (80073a4 <__kernel_cos+0x274>)
 8007224:	f7f9 f870 	bl	8000308 <__aeabi_dsub>
 8007228:	ec41 0b10 	vmov	d0, r0, r1
 800722c:	b003      	add	sp, #12
 800722e:	ecbd 8b02 	vpop	{d8}
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	ee10 2a10 	vmov	r2, s0
 800723a:	ee10 0a10 	vmov	r0, s0
 800723e:	463b      	mov	r3, r7
 8007240:	4639      	mov	r1, r7
 8007242:	f7f9 fa15 	bl	8000670 <__aeabi_dmul>
 8007246:	a346      	add	r3, pc, #280	; (adr r3, 8007360 <__kernel_cos+0x230>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	4604      	mov	r4, r0
 800724e:	460d      	mov	r5, r1
 8007250:	f7f9 fa0e 	bl	8000670 <__aeabi_dmul>
 8007254:	a344      	add	r3, pc, #272	; (adr r3, 8007368 <__kernel_cos+0x238>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f9 f857 	bl	800030c <__adddf3>
 800725e:	4622      	mov	r2, r4
 8007260:	462b      	mov	r3, r5
 8007262:	f7f9 fa05 	bl	8000670 <__aeabi_dmul>
 8007266:	a342      	add	r3, pc, #264	; (adr r3, 8007370 <__kernel_cos+0x240>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f84c 	bl	8000308 <__aeabi_dsub>
 8007270:	4622      	mov	r2, r4
 8007272:	462b      	mov	r3, r5
 8007274:	f7f9 f9fc 	bl	8000670 <__aeabi_dmul>
 8007278:	a33f      	add	r3, pc, #252	; (adr r3, 8007378 <__kernel_cos+0x248>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f7f9 f845 	bl	800030c <__adddf3>
 8007282:	4622      	mov	r2, r4
 8007284:	462b      	mov	r3, r5
 8007286:	f7f9 f9f3 	bl	8000670 <__aeabi_dmul>
 800728a:	a33d      	add	r3, pc, #244	; (adr r3, 8007380 <__kernel_cos+0x250>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f7f9 f83a 	bl	8000308 <__aeabi_dsub>
 8007294:	4622      	mov	r2, r4
 8007296:	462b      	mov	r3, r5
 8007298:	f7f9 f9ea 	bl	8000670 <__aeabi_dmul>
 800729c:	a33a      	add	r3, pc, #232	; (adr r3, 8007388 <__kernel_cos+0x258>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f9 f833 	bl	800030c <__adddf3>
 80072a6:	462b      	mov	r3, r5
 80072a8:	4622      	mov	r2, r4
 80072aa:	f7f9 f9e1 	bl	8000670 <__aeabi_dmul>
 80072ae:	4b3e      	ldr	r3, [pc, #248]	; (80073a8 <__kernel_cos+0x278>)
 80072b0:	4599      	cmp	r9, r3
 80072b2:	4682      	mov	sl, r0
 80072b4:	468b      	mov	fp, r1
 80072b6:	dd8f      	ble.n	80071d8 <__kernel_cos+0xa8>
 80072b8:	4b3c      	ldr	r3, [pc, #240]	; (80073ac <__kernel_cos+0x27c>)
 80072ba:	4599      	cmp	r9, r3
 80072bc:	dc3d      	bgt.n	800733a <__kernel_cos+0x20a>
 80072be:	2200      	movs	r2, #0
 80072c0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 80072c4:	2000      	movs	r0, #0
 80072c6:	4937      	ldr	r1, [pc, #220]	; (80073a4 <__kernel_cos+0x274>)
 80072c8:	4690      	mov	r8, r2
 80072ca:	4699      	mov	r9, r3
 80072cc:	f7f9 f81c 	bl	8000308 <__aeabi_dsub>
 80072d0:	e9cd 0100 	strd	r0, r1, [sp]
 80072d4:	2200      	movs	r2, #0
 80072d6:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <__kernel_cos+0x270>)
 80072d8:	4620      	mov	r0, r4
 80072da:	4629      	mov	r1, r5
 80072dc:	f7f9 f9c8 	bl	8000670 <__aeabi_dmul>
 80072e0:	4642      	mov	r2, r8
 80072e2:	464b      	mov	r3, r9
 80072e4:	f7f9 f810 	bl	8000308 <__aeabi_dsub>
 80072e8:	4652      	mov	r2, sl
 80072ea:	4680      	mov	r8, r0
 80072ec:	4689      	mov	r9, r1
 80072ee:	465b      	mov	r3, fp
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f9 f9bc 	bl	8000670 <__aeabi_dmul>
 80072f8:	ec53 2b18 	vmov	r2, r3, d8
 80072fc:	4604      	mov	r4, r0
 80072fe:	460d      	mov	r5, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f9 f9b4 	bl	8000670 <__aeabi_dmul>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f8 fffa 	bl	8000308 <__aeabi_dsub>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4640      	mov	r0, r8
 800731a:	4649      	mov	r1, r9
 800731c:	f7f8 fff4 	bl	8000308 <__aeabi_dsub>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007328:	f7f8 ffee 	bl	8000308 <__aeabi_dsub>
 800732c:	ec41 0b10 	vmov	d0, r0, r1
 8007330:	b003      	add	sp, #12
 8007332:	ecbd 8b02 	vpop	{d8}
 8007336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007390 <__kernel_cos+0x260>
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	ed8d 7b00 	vstr	d7, [sp]
 8007346:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80073b0 <__kernel_cos+0x280>
 800734a:	e7c3      	b.n	80072d4 <__kernel_cos+0x1a4>
 800734c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8007398 <__kernel_cos+0x268>
 8007350:	b003      	add	sp, #12
 8007352:	ecbd 8b02 	vpop	{d8}
 8007356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w
 8007360:	be8838d4 	.word	0xbe8838d4
 8007364:	bda8fae9 	.word	0xbda8fae9
 8007368:	bdb4b1c4 	.word	0xbdb4b1c4
 800736c:	3e21ee9e 	.word	0x3e21ee9e
 8007370:	809c52ad 	.word	0x809c52ad
 8007374:	3e927e4f 	.word	0x3e927e4f
 8007378:	19cb1590 	.word	0x19cb1590
 800737c:	3efa01a0 	.word	0x3efa01a0
 8007380:	16c15177 	.word	0x16c15177
 8007384:	3f56c16c 	.word	0x3f56c16c
 8007388:	5555554c 	.word	0x5555554c
 800738c:	3fa55555 	.word	0x3fa55555
 8007390:	00000000 	.word	0x00000000
 8007394:	3fe70000 	.word	0x3fe70000
 8007398:	00000000 	.word	0x00000000
 800739c:	3ff00000 	.word	0x3ff00000
 80073a0:	3fe00000 	.word	0x3fe00000
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	3fd33332 	.word	0x3fd33332
 80073ac:	3fe90000 	.word	0x3fe90000
 80073b0:	3fd20000 	.word	0x3fd20000
	...

080073c0 <__kernel_rem_pio2>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80073c8:	4c81      	ldr	r4, [pc, #516]	; (80075d0 <__kernel_rem_pio2+0x210>)
 80073ca:	9ea4      	ldr	r6, [sp, #656]	; 0x290
 80073cc:	4d81      	ldr	r5, [pc, #516]	; (80075d4 <__kernel_rem_pio2+0x214>)
 80073ce:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80073d2:	9407      	str	r4, [sp, #28]
 80073d4:	4626      	mov	r6, r4
 80073d6:	1ed4      	subs	r4, r2, #3
 80073d8:	fb85 7504 	smull	r7, r5, r5, r4
 80073dc:	17e4      	asrs	r4, r4, #31
 80073de:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 80073e2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80073e6:	461d      	mov	r5, r3
 80073e8:	930a      	str	r3, [sp, #40]	; 0x28
 80073ea:	1c63      	adds	r3, r4, #1
 80073ec:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80073f0:	3d01      	subs	r5, #1
 80073f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073f6:	9306      	str	r3, [sp, #24]
 80073f8:	462b      	mov	r3, r5
 80073fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80073fc:	9500      	str	r5, [sp, #0]
 80073fe:	1b65      	subs	r5, r4, r5
 8007400:	18f4      	adds	r4, r6, r3
 8007402:	9003      	str	r0, [sp, #12]
 8007404:	9108      	str	r1, [sp, #32]
 8007406:	d416      	bmi.n	8007436 <__kernel_rem_pio2+0x76>
 8007408:	442c      	add	r4, r5
 800740a:	3401      	adds	r4, #1
 800740c:	ae22      	add	r6, sp, #136	; 0x88
 800740e:	9fa5      	ldr	r7, [sp, #660]	; 0x294
 8007410:	e008      	b.n	8007424 <__kernel_rem_pio2+0x64>
 8007412:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8007416:	f7f9 f8c5 	bl	80005a4 <__aeabi_i2d>
 800741a:	3501      	adds	r5, #1
 800741c:	42a5      	cmp	r5, r4
 800741e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007422:	d008      	beq.n	8007436 <__kernel_rem_pio2+0x76>
 8007424:	2d00      	cmp	r5, #0
 8007426:	daf4      	bge.n	8007412 <__kernel_rem_pio2+0x52>
 8007428:	3501      	adds	r5, #1
 800742a:	2000      	movs	r0, #0
 800742c:	2100      	movs	r1, #0
 800742e:	42a5      	cmp	r5, r4
 8007430:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007434:	d1f6      	bne.n	8007424 <__kernel_rem_pio2+0x64>
 8007436:	9b07      	ldr	r3, [sp, #28]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f2c0 83c2 	blt.w	8007bc2 <__kernel_rem_pio2+0x802>
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	f103 0b01 	add.w	fp, r3, #1
 8007444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007446:	a922      	add	r1, sp, #136	; 0x88
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	461a      	mov	r2, r3
 800744c:	eb01 0903 	add.w	r9, r1, r3
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 8007458:	4619      	mov	r1, r3
 800745a:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
 800745e:	eb01 0802 	add.w	r8, r1, r2
 8007462:	9b00      	ldr	r3, [sp, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f2c0 818f 	blt.w	8007788 <__kernel_rem_pio2+0x3c8>
 800746a:	9c03      	ldr	r4, [sp, #12]
 800746c:	464d      	mov	r5, r9
 800746e:	2600      	movs	r6, #0
 8007470:	2700      	movs	r7, #0
 8007472:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007476:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800747a:	f7f9 f8f9 	bl	8000670 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7f8 ff41 	bl	800030c <__adddf3>
 800748a:	4544      	cmp	r4, r8
 800748c:	4606      	mov	r6, r0
 800748e:	460f      	mov	r7, r1
 8007490:	d1ef      	bne.n	8007472 <__kernel_rem_pio2+0xb2>
 8007492:	e8ea 6702 	strd	r6, r7, [sl], #8
 8007496:	45da      	cmp	sl, fp
 8007498:	f109 0908 	add.w	r9, r9, #8
 800749c:	d1e1      	bne.n	8007462 <__kernel_rem_pio2+0xa2>
 800749e:	9907      	ldr	r1, [sp, #28]
 80074a0:	9804      	ldr	r0, [sp, #16]
 80074a2:	9c03      	ldr	r4, [sp, #12]
 80074a4:	9104      	str	r1, [sp, #16]
 80074a6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80074aa:	3b02      	subs	r3, #2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4420      	add	r0, r4
 80074b0:	1d1a      	adds	r2, r3, #4
 80074b2:	4683      	mov	fp, r0
 80074b4:	a80e      	add	r0, sp, #56	; 0x38
 80074b6:	4402      	add	r2, r0
 80074b8:	4403      	add	r3, r0
 80074ba:	920d      	str	r2, [sp, #52]	; 0x34
 80074bc:	930c      	str	r3, [sp, #48]	; 0x30
 80074be:	9a04      	ldr	r2, [sp, #16]
 80074c0:	a99a      	add	r1, sp, #616	; 0x268
 80074c2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80074cc:	dd29      	ble.n	8007522 <__kernel_rem_pio2+0x162>
 80074ce:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80074d2:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80074d6:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 80074da:	2200      	movs	r2, #0
 80074dc:	4b3e      	ldr	r3, [pc, #248]	; (80075d8 <__kernel_rem_pio2+0x218>)
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f9 f8c5 	bl	8000670 <__aeabi_dmul>
 80074e6:	f7f9 fb63 	bl	8000bb0 <__aeabi_d2iz>
 80074ea:	f7f9 f85b 	bl	80005a4 <__aeabi_i2d>
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b3a      	ldr	r3, [pc, #232]	; (80075dc <__kernel_rem_pio2+0x21c>)
 80074f2:	4606      	mov	r6, r0
 80074f4:	460f      	mov	r7, r1
 80074f6:	f7f9 f8bb 	bl	8000670 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f8 ff01 	bl	8000308 <__aeabi_dsub>
 8007506:	f7f9 fb53 	bl	8000bb0 <__aeabi_d2iz>
 800750a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800750e:	f849 0f04 	str.w	r0, [r9, #4]!
 8007512:	4639      	mov	r1, r7
 8007514:	4630      	mov	r0, r6
 8007516:	f7f8 fef9 	bl	800030c <__adddf3>
 800751a:	45d0      	cmp	r8, sl
 800751c:	4604      	mov	r4, r0
 800751e:	460d      	mov	r5, r1
 8007520:	d1db      	bne.n	80074da <__kernel_rem_pio2+0x11a>
 8007522:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007526:	ec45 4b10 	vmov	d0, r4, r5
 800752a:	4648      	mov	r0, r9
 800752c:	f000 fd90 	bl	8008050 <scalbn>
 8007530:	ec55 4b10 	vmov	r4, r5, d0
 8007534:	2200      	movs	r2, #0
 8007536:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800753a:	ee10 0a10 	vmov	r0, s0
 800753e:	4629      	mov	r1, r5
 8007540:	f7f9 f896 	bl	8000670 <__aeabi_dmul>
 8007544:	ec41 0b10 	vmov	d0, r0, r1
 8007548:	f000 fc22 	bl	8007d90 <floor>
 800754c:	2200      	movs	r2, #0
 800754e:	ec51 0b10 	vmov	r0, r1, d0
 8007552:	4b23      	ldr	r3, [pc, #140]	; (80075e0 <__kernel_rem_pio2+0x220>)
 8007554:	f7f9 f88c 	bl	8000670 <__aeabi_dmul>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4620      	mov	r0, r4
 800755e:	4629      	mov	r1, r5
 8007560:	f7f8 fed2 	bl	8000308 <__aeabi_dsub>
 8007564:	460d      	mov	r5, r1
 8007566:	4604      	mov	r4, r0
 8007568:	f7f9 fb22 	bl	8000bb0 <__aeabi_d2iz>
 800756c:	4680      	mov	r8, r0
 800756e:	f7f9 f819 	bl	80005a4 <__aeabi_i2d>
 8007572:	460b      	mov	r3, r1
 8007574:	4602      	mov	r2, r0
 8007576:	4629      	mov	r1, r5
 8007578:	4620      	mov	r0, r4
 800757a:	f7f8 fec5 	bl	8000308 <__aeabi_dsub>
 800757e:	464b      	mov	r3, r9
 8007580:	2b00      	cmp	r3, #0
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	f340 80e5 	ble.w	8007754 <__kernel_rem_pio2+0x394>
 800758a:	9a04      	ldr	r2, [sp, #16]
 800758c:	a90e      	add	r1, sp, #56	; 0x38
 800758e:	3a01      	subs	r2, #1
 8007590:	f1c9 0318 	rsb	r3, r9, #24
 8007594:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8007598:	fa45 f103 	asr.w	r1, r5, r3
 800759c:	fa01 f303 	lsl.w	r3, r1, r3
 80075a0:	a80e      	add	r0, sp, #56	; 0x38
 80075a2:	1aeb      	subs	r3, r5, r3
 80075a4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80075a8:	f1c9 0517 	rsb	r5, r9, #23
 80075ac:	4488      	add	r8, r1
 80075ae:	fa43 f505 	asr.w	r5, r3, r5
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	dd41      	ble.n	800763a <__kernel_rem_pio2+0x27a>
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f108 0801 	add.w	r8, r8, #1
 80075be:	f340 82c9 	ble.w	8007b54 <__kernel_rem_pio2+0x794>
 80075c2:	2200      	movs	r2, #0
 80075c4:	4614      	mov	r4, r2
 80075c6:	a90d      	add	r1, sp, #52	; 0x34
 80075c8:	9804      	ldr	r0, [sp, #16]
 80075ca:	46ae      	mov	lr, r5
 80075cc:	e012      	b.n	80075f4 <__kernel_rem_pio2+0x234>
 80075ce:	bf00      	nop
 80075d0:	08008a20 	.word	0x08008a20
 80075d4:	2aaaaaab 	.word	0x2aaaaaab
 80075d8:	3e700000 	.word	0x3e700000
 80075dc:	41700000 	.word	0x41700000
 80075e0:	40200000 	.word	0x40200000
 80075e4:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
 80075e8:	b10b      	cbz	r3, 80075ee <__kernel_rem_pio2+0x22e>
 80075ea:	600d      	str	r5, [r1, #0]
 80075ec:	2401      	movs	r4, #1
 80075ee:	3201      	adds	r2, #1
 80075f0:	4290      	cmp	r0, r2
 80075f2:	dd0d      	ble.n	8007610 <__kernel_rem_pio2+0x250>
 80075f4:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	d0f3      	beq.n	80075e4 <__kernel_rem_pio2+0x224>
 80075fc:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8007600:	3201      	adds	r2, #1
 8007602:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8007606:	4290      	cmp	r0, r2
 8007608:	600b      	str	r3, [r1, #0]
 800760a:	f04f 0401 	mov.w	r4, #1
 800760e:	dcf1      	bgt.n	80075f4 <__kernel_rem_pio2+0x234>
 8007610:	4675      	mov	r5, lr
 8007612:	9b06      	ldr	r3, [sp, #24]
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd0e      	ble.n	8007636 <__kernel_rem_pio2+0x276>
 8007618:	2b01      	cmp	r3, #1
 800761a:	f000 80a3 	beq.w	8007764 <__kernel_rem_pio2+0x3a4>
 800761e:	2b02      	cmp	r3, #2
 8007620:	d109      	bne.n	8007636 <__kernel_rem_pio2+0x276>
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	1e5a      	subs	r2, r3, #1
 8007626:	ab0e      	add	r3, sp, #56	; 0x38
 8007628:	a90e      	add	r1, sp, #56	; 0x38
 800762a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007632:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007636:	2d02      	cmp	r5, #2
 8007638:	d074      	beq.n	8007724 <__kernel_rem_pio2+0x364>
 800763a:	2200      	movs	r2, #0
 800763c:	2300      	movs	r3, #0
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 fa83 	bl	8000b4c <__aeabi_dcmpeq>
 8007646:	2800      	cmp	r0, #0
 8007648:	f000 8249 	beq.w	8007ade <__kernel_rem_pio2+0x71e>
 800764c:	9a04      	ldr	r2, [sp, #16]
 800764e:	9b07      	ldr	r3, [sp, #28]
 8007650:	1e50      	subs	r0, r2, #1
 8007652:	4283      	cmp	r3, r0
 8007654:	dc10      	bgt.n	8007678 <__kernel_rem_pio2+0x2b8>
 8007656:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800765a:	3b01      	subs	r3, #1
 800765c:	aa0e      	add	r2, sp, #56	; 0x38
 800765e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007664:	2200      	movs	r2, #0
 8007666:	f853 1904 	ldr.w	r1, [r3], #-4
 800766a:	42a3      	cmp	r3, r4
 800766c:	ea42 0201 	orr.w	r2, r2, r1
 8007670:	d1f9      	bne.n	8007666 <__kernel_rem_pio2+0x2a6>
 8007672:	2a00      	cmp	r2, #0
 8007674:	f040 80a4 	bne.w	80077c0 <__kernel_rem_pio2+0x400>
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	aa0e      	add	r2, sp, #56	; 0x38
 800767c:	3b01      	subs	r3, #1
 800767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f040 8264 	bne.w	8007b50 <__kernel_rem_pio2+0x790>
 8007688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800768a:	2301      	movs	r3, #1
 800768c:	f852 1904 	ldr.w	r1, [r2], #-4
 8007690:	3301      	adds	r3, #1
 8007692:	2900      	cmp	r1, #0
 8007694:	d0fa      	beq.n	800768c <__kernel_rem_pio2+0x2cc>
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	18d3      	adds	r3, r2, r3
 800769a:	f102 0a01 	add.w	sl, r2, #1
 800769e:	459a      	cmp	sl, r3
 80076a0:	9309      	str	r3, [sp, #36]	; 0x24
 80076a2:	dc3c      	bgt.n	800771e <__kernel_rem_pio2+0x35e>
 80076a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076aa:	eb0a 0903 	add.w	r9, sl, r3
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	4698      	mov	r8, r3
 80076b2:	4490      	add	r8, r2
 80076b4:	188b      	adds	r3, r1, r2
 80076b6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80076ba:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80076bc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80076c0:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 80076c4:	aa22      	add	r2, sp, #136	; 0x88
 80076c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076ca:	9304      	str	r3, [sp, #16]
 80076cc:	ab72      	add	r3, sp, #456	; 0x1c8
 80076ce:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 80076d2:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80076d6:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80076da:	f7f8 ff63 	bl	80005a4 <__aeabi_i2d>
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	e8e8 0102 	strd	r0, r1, [r8], #8
 80076e6:	f04f 0600 	mov.w	r6, #0
 80076ea:	f04f 0700 	mov.w	r7, #0
 80076ee:	db11      	blt.n	8007714 <__kernel_rem_pio2+0x354>
 80076f0:	9c03      	ldr	r4, [sp, #12]
 80076f2:	4645      	mov	r5, r8
 80076f4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80076f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80076fc:	f7f8 ffb8 	bl	8000670 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	f7f8 fe00 	bl	800030c <__adddf3>
 800770c:	455c      	cmp	r4, fp
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	d1ef      	bne.n	80076f4 <__kernel_rem_pio2+0x334>
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	4598      	cmp	r8, r3
 8007718:	e8ea 6702 	strd	r6, r7, [sl], #8
 800771c:	d1db      	bne.n	80076d6 <__kernel_rem_pio2+0x316>
 800771e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	e6cc      	b.n	80074be <__kernel_rem_pio2+0xfe>
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	2000      	movs	r0, #0
 800772a:	49b3      	ldr	r1, [pc, #716]	; (80079f8 <__kernel_rem_pio2+0x638>)
 800772c:	f7f8 fdec 	bl	8000308 <__aeabi_dsub>
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	2c00      	cmp	r4, #0
 8007736:	d080      	beq.n	800763a <__kernel_rem_pio2+0x27a>
 8007738:	9806      	ldr	r0, [sp, #24]
 800773a:	ed9f 0bab 	vldr	d0, [pc, #684]	; 80079e8 <__kernel_rem_pio2+0x628>
 800773e:	f000 fc87 	bl	8008050 <scalbn>
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	ec53 2b10 	vmov	r2, r3, d0
 800774a:	f7f8 fddd 	bl	8000308 <__aeabi_dsub>
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	e772      	b.n	800763a <__kernel_rem_pio2+0x27a>
 8007754:	d111      	bne.n	800777a <__kernel_rem_pio2+0x3ba>
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	aa0e      	add	r2, sp, #56	; 0x38
 800775a:	3b01      	subs	r3, #1
 800775c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8007760:	15ed      	asrs	r5, r5, #23
 8007762:	e726      	b.n	80075b2 <__kernel_rem_pio2+0x1f2>
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	1e5a      	subs	r2, r3, #1
 8007768:	ab0e      	add	r3, sp, #56	; 0x38
 800776a:	a90e      	add	r1, sp, #56	; 0x38
 800776c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007770:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007774:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007778:	e75d      	b.n	8007636 <__kernel_rem_pio2+0x276>
 800777a:	2200      	movs	r2, #0
 800777c:	4b9f      	ldr	r3, [pc, #636]	; (80079fc <__kernel_rem_pio2+0x63c>)
 800777e:	f7f9 fa03 	bl	8000b88 <__aeabi_dcmpge>
 8007782:	b958      	cbnz	r0, 800779c <__kernel_rem_pio2+0x3dc>
 8007784:	4605      	mov	r5, r0
 8007786:	e758      	b.n	800763a <__kernel_rem_pio2+0x27a>
 8007788:	2600      	movs	r6, #0
 800778a:	2700      	movs	r7, #0
 800778c:	e8ea 6702 	strd	r6, r7, [sl], #8
 8007790:	45da      	cmp	sl, fp
 8007792:	f109 0908 	add.w	r9, r9, #8
 8007796:	f47f ae64 	bne.w	8007462 <__kernel_rem_pio2+0xa2>
 800779a:	e680      	b.n	800749e <__kernel_rem_pio2+0xde>
 800779c:	9b04      	ldr	r3, [sp, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f108 0801 	add.w	r8, r8, #1
 80077a4:	bfc8      	it	gt
 80077a6:	2502      	movgt	r5, #2
 80077a8:	f73f af0b 	bgt.w	80075c2 <__kernel_rem_pio2+0x202>
 80077ac:	4632      	mov	r2, r6
 80077ae:	463b      	mov	r3, r7
 80077b0:	2000      	movs	r0, #0
 80077b2:	4991      	ldr	r1, [pc, #580]	; (80079f8 <__kernel_rem_pio2+0x638>)
 80077b4:	f7f8 fda8 	bl	8000308 <__aeabi_dsub>
 80077b8:	2502      	movs	r5, #2
 80077ba:	4606      	mov	r6, r0
 80077bc:	460f      	mov	r7, r1
 80077be:	e73c      	b.n	800763a <__kernel_rem_pio2+0x27a>
 80077c0:	a90e      	add	r1, sp, #56	; 0x38
 80077c2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80077c6:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80077ca:	9906      	ldr	r1, [sp, #24]
 80077cc:	9000      	str	r0, [sp, #0]
 80077ce:	3918      	subs	r1, #24
 80077d0:	4602      	mov	r2, r0
 80077d2:	9503      	str	r5, [sp, #12]
 80077d4:	9106      	str	r1, [sp, #24]
 80077d6:	b96b      	cbnz	r3, 80077f4 <__kernel_rem_pio2+0x434>
 80077d8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80077dc:	3b01      	subs	r3, #1
 80077de:	a80e      	add	r0, sp, #56	; 0x38
 80077e0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80077e4:	f853 0904 	ldr.w	r0, [r3], #-4
 80077e8:	3a01      	subs	r2, #1
 80077ea:	3918      	subs	r1, #24
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d0f9      	beq.n	80077e4 <__kernel_rem_pio2+0x424>
 80077f0:	9200      	str	r2, [sp, #0]
 80077f2:	9106      	str	r1, [sp, #24]
 80077f4:	9806      	ldr	r0, [sp, #24]
 80077f6:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 80079e8 <__kernel_rem_pio2+0x628>
 80077fa:	f000 fc29 	bl	8008050 <scalbn>
 80077fe:	9b00      	ldr	r3, [sp, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	ec55 4b10 	vmov	r4, r5, d0
 8007806:	f2c0 81c1 	blt.w	8007b8c <__kernel_rem_pio2+0x7cc>
 800780a:	00da      	lsls	r2, r3, #3
 800780c:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
 8007810:	a90e      	add	r1, sp, #56	; 0x38
 8007812:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8007816:	eb08 0b02 	add.w	fp, r8, r2
 800781a:	9206      	str	r2, [sp, #24]
 800781c:	3604      	adds	r6, #4
 800781e:	f10b 0708 	add.w	r7, fp, #8
 8007822:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8007826:	f7f8 febd 	bl	80005a4 <__aeabi_i2d>
 800782a:	4622      	mov	r2, r4
 800782c:	462b      	mov	r3, r5
 800782e:	f7f8 ff1f 	bl	8000670 <__aeabi_dmul>
 8007832:	2200      	movs	r2, #0
 8007834:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007838:	4b71      	ldr	r3, [pc, #452]	; (8007a00 <__kernel_rem_pio2+0x640>)
 800783a:	4620      	mov	r0, r4
 800783c:	4629      	mov	r1, r5
 800783e:	f7f8 ff17 	bl	8000670 <__aeabi_dmul>
 8007842:	4547      	cmp	r7, r8
 8007844:	4604      	mov	r4, r0
 8007846:	460d      	mov	r5, r1
 8007848:	d1eb      	bne.n	8007822 <__kernel_rem_pio2+0x462>
 800784a:	ac4a      	add	r4, sp, #296	; 0x128
 800784c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007850:	9404      	str	r4, [sp, #16]
 8007852:	f04f 0a00 	mov.w	sl, #0
 8007856:	f1b9 0f00 	cmp.w	r9, #0
 800785a:	f2c0 812b 	blt.w	8007ab4 <__kernel_rem_pio2+0x6f4>
 800785e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a04 <__kernel_rem_pio2+0x644>
 8007862:	465d      	mov	r5, fp
 8007864:	a362      	add	r3, pc, #392	; (adr r3, 80079f0 <__kernel_rem_pio2+0x630>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	2600      	movs	r6, #0
 800786c:	2700      	movs	r7, #0
 800786e:	2400      	movs	r4, #0
 8007870:	e003      	b.n	800787a <__kernel_rem_pio2+0x4ba>
 8007872:	45a2      	cmp	sl, r4
 8007874:	db10      	blt.n	8007898 <__kernel_rem_pio2+0x4d8>
 8007876:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800787a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800787e:	f7f8 fef7 	bl	8000670 <__aeabi_dmul>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4630      	mov	r0, r6
 8007888:	4639      	mov	r1, r7
 800788a:	f7f8 fd3f 	bl	800030c <__adddf3>
 800788e:	3401      	adds	r4, #1
 8007890:	45a1      	cmp	r9, r4
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	daec      	bge.n	8007872 <__kernel_rem_pio2+0x4b2>
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800789e:	f1ab 0b08 	sub.w	fp, fp, #8
 80078a2:	e9c3 6700 	strd	r6, r7, [r3]
 80078a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80078a8:	459b      	cmp	fp, r3
 80078aa:	f10a 0a01 	add.w	sl, sl, #1
 80078ae:	d1d2      	bne.n	8007856 <__kernel_rem_pio2+0x496>
 80078b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80078b2:	9c04      	ldr	r4, [sp, #16]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	f200 808d 	bhi.w	80079d4 <__kernel_rem_pio2+0x614>
 80078ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80078be:	00dd      	.short	0x00dd
 80078c0:	00a500a5 	.word	0x00a500a5
 80078c4:	0004      	.short	0x0004
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f340 815c 	ble.w	8007b86 <__kernel_rem_pio2+0x7c6>
 80078ce:	9b00      	ldr	r3, [sp, #0]
 80078d0:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80078da:	18e2      	adds	r2, r4, r3
 80078dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078e0:	e9d2 8900 	ldrd	r8, r9, [r2]
 80078e4:	f103 0208 	add.w	r2, r3, #8
 80078e8:	3310      	adds	r3, #16
 80078ea:	eb04 0a02 	add.w	sl, r4, r2
 80078ee:	18e5      	adds	r5, r4, r3
 80078f0:	ed3a 7b02 	vldmdb	sl!, {d7}
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	ec51 0b17 	vmov	r0, r1, d7
 80078fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007900:	f7f8 fd04 	bl	800030c <__adddf3>
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007910:	f7f8 fcfa 	bl	8000308 <__aeabi_dsub>
 8007914:	464b      	mov	r3, r9
 8007916:	4642      	mov	r2, r8
 8007918:	f7f8 fcf8 	bl	800030c <__adddf3>
 800791c:	e965 0102 	strd	r0, r1, [r5, #-8]!
 8007920:	ab4c      	add	r3, sp, #304	; 0x130
 8007922:	429d      	cmp	r5, r3
 8007924:	46b0      	mov	r8, r6
 8007926:	46b9      	mov	r9, r7
 8007928:	e9ca 6700 	strd	r6, r7, [sl]
 800792c:	d1e0      	bne.n	80078f0 <__kernel_rem_pio2+0x530>
 800792e:	9b00      	ldr	r3, [sp, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	f340 8128 	ble.w	8007b86 <__kernel_rem_pio2+0x7c6>
 8007936:	9b06      	ldr	r3, [sp, #24]
 8007938:	4423      	add	r3, r4
 800793a:	ed93 7b00 	vldr	d7, [r3]
 800793e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007942:	f10b 0a10 	add.w	sl, fp, #16
 8007946:	ed8d 7b00 	vstr	d7, [sp]
 800794a:	44a2      	add	sl, r4
 800794c:	f10b 0b08 	add.w	fp, fp, #8
 8007950:	eb04 050b 	add.w	r5, r4, fp
 8007954:	46d0      	mov	r8, sl
 8007956:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800795a:	f8cd a010 	str.w	sl, [sp, #16]
 800795e:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
 8007962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007966:	464a      	mov	r2, r9
 8007968:	4653      	mov	r3, sl
 800796a:	f7f8 fccf 	bl	800030c <__adddf3>
 800796e:	4606      	mov	r6, r0
 8007970:	460f      	mov	r7, r1
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4648      	mov	r0, r9
 8007978:	4651      	mov	r1, sl
 800797a:	f7f8 fcc5 	bl	8000308 <__aeabi_dsub>
 800797e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007982:	f7f8 fcc3 	bl	800030c <__adddf3>
 8007986:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800798a:	45c3      	cmp	fp, r8
 800798c:	e9cd 6700 	strd	r6, r7, [sp]
 8007990:	e9c5 6700 	strd	r6, r7, [r5]
 8007994:	d1e3      	bne.n	800795e <__kernel_rem_pio2+0x59e>
 8007996:	f8dd a010 	ldr.w	sl, [sp, #16]
 800799a:	2000      	movs	r0, #0
 800799c:	2100      	movs	r1, #0
 800799e:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80079a2:	f7f8 fcb3 	bl	800030c <__adddf3>
 80079a6:	45d3      	cmp	fp, sl
 80079a8:	d1f9      	bne.n	800799e <__kernel_rem_pio2+0x5de>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80d3 	beq.w	8007b58 <__kernel_rem_pio2+0x798>
 80079b2:	6862      	ldr	r2, [r4, #4]
 80079b4:	68e3      	ldr	r3, [r4, #12]
 80079b6:	9f08      	ldr	r7, [sp, #32]
 80079b8:	6825      	ldr	r5, [r4, #0]
 80079ba:	68a4      	ldr	r4, [r4, #8]
 80079bc:	603d      	str	r5, [r7, #0]
 80079be:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80079c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	60bc      	str	r4, [r7, #8]
 80079d0:	6138      	str	r0, [r7, #16]
 80079d2:	6179      	str	r1, [r7, #20]
 80079d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d6:	f003 0007 	and.w	r0, r3, #7
 80079da:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80079de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e2:	bf00      	nop
 80079e4:	f3af 8000 	nop.w
 80079e8:	00000000 	.word	0x00000000
 80079ec:	3ff00000 	.word	0x3ff00000
 80079f0:	40000000 	.word	0x40000000
 80079f4:	3ff921fb 	.word	0x3ff921fb
 80079f8:	3ff00000 	.word	0x3ff00000
 80079fc:	3fe00000 	.word	0x3fe00000
 8007a00:	3e700000 	.word	0x3e700000
 8007a04:	08008a38 	.word	0x08008a38
 8007a08:	9d06      	ldr	r5, [sp, #24]
 8007a0a:	3508      	adds	r5, #8
 8007a0c:	4425      	add	r5, r4
 8007a0e:	2000      	movs	r0, #0
 8007a10:	2100      	movs	r1, #0
 8007a12:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007a16:	f7f8 fc79 	bl	800030c <__adddf3>
 8007a1a:	42a5      	cmp	r5, r4
 8007a1c:	d1f9      	bne.n	8007a12 <__kernel_rem_pio2+0x652>
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d04a      	beq.n	8007aba <__kernel_rem_pio2+0x6fa>
 8007a24:	9e08      	ldr	r6, [sp, #32]
 8007a26:	4602      	mov	r2, r0
 8007a28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a2c:	e886 000c 	stmia.w	r6, {r2, r3}
 8007a30:	460b      	mov	r3, r1
 8007a32:	4602      	mov	r2, r0
 8007a34:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007a38:	f7f8 fc66 	bl	8000308 <__aeabi_dsub>
 8007a3c:	9b00      	ldr	r3, [sp, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dd0d      	ble.n	8007a5e <__kernel_rem_pio2+0x69e>
 8007a42:	ad4c      	add	r5, sp, #304	; 0x130
 8007a44:	2401      	movs	r4, #1
 8007a46:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007a4a:	f7f8 fc5f 	bl	800030c <__adddf3>
 8007a4e:	9b00      	ldr	r3, [sp, #0]
 8007a50:	3401      	adds	r4, #1
 8007a52:	42a3      	cmp	r3, r4
 8007a54:	daf7      	bge.n	8007a46 <__kernel_rem_pio2+0x686>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80a7 	beq.w	8007bac <__kernel_rem_pio2+0x7ec>
 8007a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a62:	9908      	ldr	r1, [sp, #32]
 8007a64:	4602      	mov	r2, r0
 8007a66:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6c:	f003 0007 	and.w	r0, r3, #7
 8007a70:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	9b06      	ldr	r3, [sp, #24]
 8007a7a:	9d00      	ldr	r5, [sp, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	2000      	movs	r0, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	441c      	add	r4, r3
 8007a84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a88:	3d01      	subs	r5, #1
 8007a8a:	f7f8 fc3f 	bl	800030c <__adddf3>
 8007a8e:	1c6b      	adds	r3, r5, #1
 8007a90:	d1f8      	bne.n	8007a84 <__kernel_rem_pio2+0x6c4>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	4602      	mov	r2, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 808e 	beq.w	8007bb8 <__kernel_rem_pio2+0x7f8>
 8007a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aa0:	9908      	ldr	r1, [sp, #32]
 8007aa2:	e9c1 2300 	strd	r2, r3, [r1]
 8007aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa8:	f003 0007 	and.w	r0, r3, #7
 8007aac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	2700      	movs	r7, #0
 8007ab8:	e6ee      	b.n	8007898 <__kernel_rem_pio2+0x4d8>
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	4602      	mov	r2, r0
 8007abe:	e9c3 0100 	strd	r0, r1, [r3]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007ac8:	f7f8 fc1e 	bl	8000308 <__aeabi_dsub>
 8007acc:	9c00      	ldr	r4, [sp, #0]
 8007ace:	2c00      	cmp	r4, #0
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	dcb5      	bgt.n	8007a42 <__kernel_rem_pio2+0x682>
 8007ad6:	9908      	ldr	r1, [sp, #32]
 8007ad8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007adc:	e7c5      	b.n	8007a6a <__kernel_rem_pio2+0x6aa>
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	9503      	str	r5, [sp, #12]
 8007ae2:	4258      	negs	r0, r3
 8007ae4:	ec47 6b10 	vmov	d0, r6, r7
 8007ae8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007aec:	f000 fab0 	bl	8008050 <scalbn>
 8007af0:	ec55 4b10 	vmov	r4, r5, d0
 8007af4:	2200      	movs	r2, #0
 8007af6:	4b38      	ldr	r3, [pc, #224]	; (8007bd8 <__kernel_rem_pio2+0x818>)
 8007af8:	ee10 0a10 	vmov	r0, s0
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7f9 f843 	bl	8000b88 <__aeabi_dcmpge>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d034      	beq.n	8007b70 <__kernel_rem_pio2+0x7b0>
 8007b06:	2200      	movs	r2, #0
 8007b08:	4b34      	ldr	r3, [pc, #208]	; (8007bdc <__kernel_rem_pio2+0x81c>)
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7f8 fdaf 	bl	8000670 <__aeabi_dmul>
 8007b12:	f7f9 f84d 	bl	8000bb0 <__aeabi_d2iz>
 8007b16:	4606      	mov	r6, r0
 8007b18:	f7f8 fd44 	bl	80005a4 <__aeabi_i2d>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <__kernel_rem_pio2+0x818>)
 8007b20:	f7f8 fda6 	bl	8000670 <__aeabi_dmul>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f7f8 fbec 	bl	8000308 <__aeabi_dsub>
 8007b30:	f7f9 f83e 	bl	8000bb0 <__aeabi_d2iz>
 8007b34:	9904      	ldr	r1, [sp, #16]
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	460a      	mov	r2, r1
 8007b3a:	3318      	adds	r3, #24
 8007b3c:	3201      	adds	r2, #1
 8007b3e:	9306      	str	r3, [sp, #24]
 8007b40:	460b      	mov	r3, r1
 8007b42:	a90e      	add	r1, sp, #56	; 0x38
 8007b44:	9200      	str	r2, [sp, #0]
 8007b46:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007b4a:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
 8007b4e:	e651      	b.n	80077f4 <__kernel_rem_pio2+0x434>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e5a0      	b.n	8007696 <__kernel_rem_pio2+0x2d6>
 8007b54:	2400      	movs	r4, #0
 8007b56:	e55c      	b.n	8007612 <__kernel_rem_pio2+0x252>
 8007b58:	e9d4 6700 	ldrd	r6, r7, [r4]
 8007b5c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007b60:	9d08      	ldr	r5, [sp, #32]
 8007b62:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8007b66:	e9c5 6700 	strd	r6, r7, [r5]
 8007b6a:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8007b6e:	e731      	b.n	80079d4 <__kernel_rem_pio2+0x614>
 8007b70:	4629      	mov	r1, r5
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7f9 f81c 	bl	8000bb0 <__aeabi_d2iz>
 8007b78:	9a04      	ldr	r2, [sp, #16]
 8007b7a:	9200      	str	r2, [sp, #0]
 8007b7c:	a90e      	add	r1, sp, #56	; 0x38
 8007b7e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8007b82:	e637      	b.n	80077f4 <__kernel_rem_pio2+0x434>
 8007b84:	ac4a      	add	r4, sp, #296	; 0x128
 8007b86:	2000      	movs	r0, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	e70e      	b.n	80079aa <__kernel_rem_pio2+0x5ea>
 8007b8c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	f63f af20 	bhi.w	80079d4 <__kernel_rem_pio2+0x614>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <__kernel_rem_pio2+0x7dc>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bd3 	.word	0x08007bd3
 8007ba0:	08007bcb 	.word	0x08007bcb
 8007ba4:	08007bcb 	.word	0x08007bcb
 8007ba8:	08007b85 	.word	0x08007b85
 8007bac:	460b      	mov	r3, r1
 8007bae:	9908      	ldr	r1, [sp, #32]
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007bb6:	e758      	b.n	8007a6a <__kernel_rem_pio2+0x6aa>
 8007bb8:	460b      	mov	r3, r1
 8007bba:	9908      	ldr	r1, [sp, #32]
 8007bbc:	e9c1 2300 	strd	r2, r3, [r1]
 8007bc0:	e771      	b.n	8007aa6 <__kernel_rem_pio2+0x6e6>
 8007bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	e469      	b.n	800749e <__kernel_rem_pio2+0xde>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	2100      	movs	r1, #0
 8007bce:	ac4a      	add	r4, sp, #296	; 0x128
 8007bd0:	e725      	b.n	8007a1e <__kernel_rem_pio2+0x65e>
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	e75c      	b.n	8007a92 <__kernel_rem_pio2+0x6d2>
 8007bd8:	41700000 	.word	0x41700000
 8007bdc:	3e700000 	.word	0x3e700000

08007be0 <__kernel_sin>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	ec55 4b10 	vmov	r4, r5, d0
 8007be8:	ed2d 8b02 	vpush	{d8}
 8007bec:	eeb0 8a41 	vmov.f32	s16, s2
 8007bf0:	eef0 8a61 	vmov.f32	s17, s3
 8007bf4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bf8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	4682      	mov	sl, r0
 8007c00:	da07      	bge.n	8007c12 <__kernel_sin+0x32>
 8007c02:	ee10 0a10 	vmov	r0, s0
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 ffd2 	bl	8000bb0 <__aeabi_d2iz>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f000 808e 	beq.w	8007d2e <__kernel_sin+0x14e>
 8007c12:	4622      	mov	r2, r4
 8007c14:	462b      	mov	r3, r5
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 fd29 	bl	8000670 <__aeabi_dmul>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460f      	mov	r7, r1
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 fd21 	bl	8000670 <__aeabi_dmul>
 8007c2e:	a347      	add	r3, pc, #284	; (adr r3, 8007d4c <__kernel_sin+0x16c>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 fd18 	bl	8000670 <__aeabi_dmul>
 8007c40:	a344      	add	r3, pc, #272	; (adr r3, 8007d54 <__kernel_sin+0x174>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fb5f 	bl	8000308 <__aeabi_dsub>
 8007c4a:	4632      	mov	r2, r6
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	f7f8 fd0f 	bl	8000670 <__aeabi_dmul>
 8007c52:	a342      	add	r3, pc, #264	; (adr r3, 8007d5c <__kernel_sin+0x17c>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f7f8 fb58 	bl	800030c <__adddf3>
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	463b      	mov	r3, r7
 8007c60:	f7f8 fd06 	bl	8000670 <__aeabi_dmul>
 8007c64:	a33f      	add	r3, pc, #252	; (adr r3, 8007d64 <__kernel_sin+0x184>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fb4d 	bl	8000308 <__aeabi_dsub>
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	f7f8 fcfd 	bl	8000670 <__aeabi_dmul>
 8007c76:	a33d      	add	r3, pc, #244	; (adr r3, 8007d6c <__kernel_sin+0x18c>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fb46 	bl	800030c <__adddf3>
 8007c80:	e9cd 0100 	strd	r0, r1, [sp]
 8007c84:	f1ba 0f00 	cmp.w	sl, #0
 8007c88:	d037      	beq.n	8007cfa <__kernel_sin+0x11a>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4b2e      	ldr	r3, [pc, #184]	; (8007d48 <__kernel_sin+0x168>)
 8007c8e:	ec51 0b18 	vmov	r0, r1, d8
 8007c92:	f7f8 fced 	bl	8000670 <__aeabi_dmul>
 8007c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c9a:	4682      	mov	sl, r0
 8007c9c:	468b      	mov	fp, r1
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 fce5 	bl	8000670 <__aeabi_dmul>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 fb2b 	bl	8000308 <__aeabi_dsub>
 8007cb2:	4632      	mov	r2, r6
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	f7f8 fcdb 	bl	8000670 <__aeabi_dmul>
 8007cba:	ec53 2b18 	vmov	r2, r3, d8
 8007cbe:	f7f8 fb23 	bl	8000308 <__aeabi_dsub>
 8007cc2:	a31f      	add	r3, pc, #124	; (adr r3, 8007d40 <__kernel_sin+0x160>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	4606      	mov	r6, r0
 8007cca:	460f      	mov	r7, r1
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4649      	mov	r1, r9
 8007cd0:	f7f8 fcce 	bl	8000670 <__aeabi_dmul>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4630      	mov	r0, r6
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f7f8 fb16 	bl	800030c <__adddf3>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 fb0e 	bl	8000308 <__aeabi_dsub>
 8007cec:	ec41 0b10 	vmov	d0, r0, r1
 8007cf0:	b003      	add	sp, #12
 8007cf2:	ecbd 8b02 	vpop	{d8}
 8007cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fcb5 	bl	8000670 <__aeabi_dmul>
 8007d06:	a30e      	add	r3, pc, #56	; (adr r3, 8007d40 <__kernel_sin+0x160>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f7f8 fafc 	bl	8000308 <__aeabi_dsub>
 8007d10:	4642      	mov	r2, r8
 8007d12:	464b      	mov	r3, r9
 8007d14:	f7f8 fcac 	bl	8000670 <__aeabi_dmul>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	f7f8 faf6 	bl	800030c <__adddf3>
 8007d20:	ec41 0b10 	vmov	d0, r0, r1
 8007d24:	b003      	add	sp, #12
 8007d26:	ecbd 8b02 	vpop	{d8}
 8007d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2e:	ec45 4b10 	vmov	d0, r4, r5
 8007d32:	b003      	add	sp, #12
 8007d34:	ecbd 8b02 	vpop	{d8}
 8007d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3c:	f3af 8000 	nop.w
 8007d40:	55555549 	.word	0x55555549
 8007d44:	3fc55555 	.word	0x3fc55555
 8007d48:	3fe00000 	.word	0x3fe00000
 8007d4c:	5acfd57c 	.word	0x5acfd57c
 8007d50:	3de5d93a 	.word	0x3de5d93a
 8007d54:	8a2b9ceb 	.word	0x8a2b9ceb
 8007d58:	3e5ae5e6 	.word	0x3e5ae5e6
 8007d5c:	57b1fe7d 	.word	0x57b1fe7d
 8007d60:	3ec71de3 	.word	0x3ec71de3
 8007d64:	19c161d5 	.word	0x19c161d5
 8007d68:	3f2a01a0 	.word	0x3f2a01a0
 8007d6c:	1110f8a6 	.word	0x1110f8a6
 8007d70:	3f811111 	.word	0x3f811111
	...

08007d80 <fabs>:
 8007d80:	ec53 2b10 	vmov	r2, r3, d0
 8007d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d88:	ec43 2b10 	vmov	d0, r2, r3
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop

08007d90 <floor>:
 8007d90:	ec51 0b10 	vmov	r0, r1, d0
 8007d94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 8007da0:	2d13      	cmp	r5, #19
 8007da2:	460c      	mov	r4, r1
 8007da4:	460f      	mov	r7, r1
 8007da6:	ee10 6a10 	vmov	r6, s0
 8007daa:	dc1d      	bgt.n	8007de8 <floor+0x58>
 8007dac:	2d00      	cmp	r5, #0
 8007dae:	db43      	blt.n	8007e38 <floor+0xa8>
 8007db0:	4b3d      	ldr	r3, [pc, #244]	; (8007ea8 <floor+0x118>)
 8007db2:	fa43 f805 	asr.w	r8, r3, r5
 8007db6:	ea01 0308 	and.w	r3, r1, r8
 8007dba:	4303      	orrs	r3, r0
 8007dbc:	d019      	beq.n	8007df2 <floor+0x62>
 8007dbe:	a338      	add	r3, pc, #224	; (adr r3, 8007ea0 <floor+0x110>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 faa2 	bl	800030c <__adddf3>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f7f8 fee6 	bl	8000b9c <__aeabi_dcmpgt>
 8007dd0:	b120      	cbz	r0, 8007ddc <floor+0x4c>
 8007dd2:	2c00      	cmp	r4, #0
 8007dd4:	db49      	blt.n	8007e6a <floor+0xda>
 8007dd6:	ea27 0408 	bic.w	r4, r7, r8
 8007dda:	2600      	movs	r6, #0
 8007ddc:	4623      	mov	r3, r4
 8007dde:	4632      	mov	r2, r6
 8007de0:	ec43 2b10 	vmov	d0, r2, r3
 8007de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de8:	2d33      	cmp	r5, #51	; 0x33
 8007dea:	dd06      	ble.n	8007dfa <floor+0x6a>
 8007dec:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007df0:	d032      	beq.n	8007e58 <floor+0xc8>
 8007df2:	ec41 0b10 	vmov	d0, r0, r1
 8007df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dfa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007dfe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007e02:	fa28 f803 	lsr.w	r8, r8, r3
 8007e06:	ea10 0f08 	tst.w	r0, r8
 8007e0a:	d0f2      	beq.n	8007df2 <floor+0x62>
 8007e0c:	a324      	add	r3, pc, #144	; (adr r3, 8007ea0 <floor+0x110>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f7f8 fa7b 	bl	800030c <__adddf3>
 8007e16:	2200      	movs	r2, #0
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f7f8 febf 	bl	8000b9c <__aeabi_dcmpgt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0dc      	beq.n	8007ddc <floor+0x4c>
 8007e22:	2c00      	cmp	r4, #0
 8007e24:	db27      	blt.n	8007e76 <floor+0xe6>
 8007e26:	463c      	mov	r4, r7
 8007e28:	ea26 0608 	bic.w	r6, r6, r8
 8007e2c:	4623      	mov	r3, r4
 8007e2e:	4632      	mov	r2, r6
 8007e30:	ec43 2b10 	vmov	d0, r2, r3
 8007e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e38:	a319      	add	r3, pc, #100	; (adr r3, 8007ea0 <floor+0x110>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fa65 	bl	800030c <__adddf3>
 8007e42:	2200      	movs	r2, #0
 8007e44:	2300      	movs	r3, #0
 8007e46:	f7f8 fea9 	bl	8000b9c <__aeabi_dcmpgt>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d0c6      	beq.n	8007ddc <floor+0x4c>
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	db1c      	blt.n	8007e8c <floor+0xfc>
 8007e52:	2600      	movs	r6, #0
 8007e54:	4634      	mov	r4, r6
 8007e56:	e7c1      	b.n	8007ddc <floor+0x4c>
 8007e58:	ee10 2a10 	vmov	r2, s0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	f7f8 fa55 	bl	800030c <__adddf3>
 8007e62:	ec41 0b10 	vmov	d0, r0, r1
 8007e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e6e:	fa43 f505 	asr.w	r5, r3, r5
 8007e72:	442f      	add	r7, r5
 8007e74:	e7af      	b.n	8007dd6 <floor+0x46>
 8007e76:	2d14      	cmp	r5, #20
 8007e78:	d010      	beq.n	8007e9c <floor+0x10c>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8007e80:	fa03 f505 	lsl.w	r5, r3, r5
 8007e84:	19ae      	adds	r6, r5, r6
 8007e86:	bf28      	it	cs
 8007e88:	18ff      	addcs	r7, r7, r3
 8007e8a:	e7cc      	b.n	8007e26 <floor+0x96>
 8007e8c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 8007e90:	4b06      	ldr	r3, [pc, #24]	; (8007eac <floor+0x11c>)
 8007e92:	4332      	orrs	r2, r6
 8007e94:	bf18      	it	ne
 8007e96:	461c      	movne	r4, r3
 8007e98:	2600      	movs	r6, #0
 8007e9a:	e79f      	b.n	8007ddc <floor+0x4c>
 8007e9c:	3701      	adds	r7, #1
 8007e9e:	e7c2      	b.n	8007e26 <floor+0x96>
 8007ea0:	8800759c 	.word	0x8800759c
 8007ea4:	7e37e43c 	.word	0x7e37e43c
 8007ea8:	000fffff 	.word	0x000fffff
 8007eac:	bff00000 	.word	0xbff00000

08007eb0 <__fpclassifyd>:
 8007eb0:	ec53 2b10 	vmov	r2, r3, d0
 8007eb4:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8007eb8:	b410      	push	{r4}
 8007eba:	d008      	beq.n	8007ece <__fpclassifyd+0x1e>
 8007ebc:	4811      	ldr	r0, [pc, #68]	; (8007f04 <__fpclassifyd+0x54>)
 8007ebe:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8007ec2:	4284      	cmp	r4, r0
 8007ec4:	d808      	bhi.n	8007ed8 <__fpclassifyd+0x28>
 8007ec6:	2004      	movs	r0, #4
 8007ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	b91a      	cbnz	r2, 8007ed8 <__fpclassifyd+0x28>
 8007ed0:	2002      	movs	r0, #2
 8007ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8007edc:	4809      	ldr	r0, [pc, #36]	; (8007f04 <__fpclassifyd+0x54>)
 8007ede:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	d9ef      	bls.n	8007ec6 <__fpclassifyd+0x16>
 8007ee6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007eea:	d201      	bcs.n	8007ef0 <__fpclassifyd+0x40>
 8007eec:	2003      	movs	r0, #3
 8007eee:	e7eb      	b.n	8007ec8 <__fpclassifyd+0x18>
 8007ef0:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <__fpclassifyd+0x58>)
 8007ef2:	4299      	cmp	r1, r3
 8007ef4:	d001      	beq.n	8007efa <__fpclassifyd+0x4a>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e7e6      	b.n	8007ec8 <__fpclassifyd+0x18>
 8007efa:	fab2 f082 	clz	r0, r2
 8007efe:	0940      	lsrs	r0, r0, #5
 8007f00:	e7e2      	b.n	8007ec8 <__fpclassifyd+0x18>
 8007f02:	bf00      	nop
 8007f04:	7fdfffff 	.word	0x7fdfffff
 8007f08:	7ff00000 	.word	0x7ff00000
 8007f0c:	00000000 	.word	0x00000000

08007f10 <matherr>:
 8007f10:	2000      	movs	r0, #0
 8007f12:	4770      	bx	lr
	...

08007f20 <rint>:
 8007f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f22:	ec53 2b10 	vmov	r2, r3, d0
 8007f26:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8007f2a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 8007f2e:	2813      	cmp	r0, #19
 8007f30:	b083      	sub	sp, #12
 8007f32:	4619      	mov	r1, r3
 8007f34:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8007f38:	ee10 5a10 	vmov	r5, s0
 8007f3c:	dc2f      	bgt.n	8007f9e <rint+0x7e>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	db49      	blt.n	8007fd6 <rint+0xb6>
 8007f42:	4e3f      	ldr	r6, [pc, #252]	; (8008040 <rint+0x120>)
 8007f44:	4106      	asrs	r6, r0
 8007f46:	ea03 0706 	and.w	r7, r3, r6
 8007f4a:	4317      	orrs	r7, r2
 8007f4c:	d02c      	beq.n	8007fa8 <rint+0x88>
 8007f4e:	0876      	lsrs	r6, r6, #1
 8007f50:	4033      	ands	r3, r6
 8007f52:	431d      	orrs	r5, r3
 8007f54:	d00c      	beq.n	8007f70 <rint+0x50>
 8007f56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f5a:	2813      	cmp	r0, #19
 8007f5c:	ea21 0606 	bic.w	r6, r1, r6
 8007f60:	fa43 f100 	asr.w	r1, r3, r0
 8007f64:	ea41 0106 	orr.w	r1, r1, r6
 8007f68:	bf0c      	ite	eq
 8007f6a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007f6e:	2500      	movne	r5, #0
 8007f70:	4834      	ldr	r0, [pc, #208]	; (8008044 <rint+0x124>)
 8007f72:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8007f76:	462a      	mov	r2, r5
 8007f78:	e9d4 4500 	ldrd	r4, r5, [r4]
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	462b      	mov	r3, r5
 8007f80:	4622      	mov	r2, r4
 8007f82:	f7f8 f9c3 	bl	800030c <__adddf3>
 8007f86:	e9cd 0100 	strd	r0, r1, [sp]
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f92:	f7f8 f9b9 	bl	8000308 <__aeabi_dsub>
 8007f96:	ec41 0b10 	vmov	d0, r0, r1
 8007f9a:	b003      	add	sp, #12
 8007f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f9e:	2833      	cmp	r0, #51	; 0x33
 8007fa0:	dd06      	ble.n	8007fb0 <rint+0x90>
 8007fa2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007fa6:	d042      	beq.n	800802e <rint+0x10e>
 8007fa8:	ec43 2b10 	vmov	d0, r2, r3
 8007fac:	b003      	add	sp, #12
 8007fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fb8:	40f0      	lsrs	r0, r6
 8007fba:	4202      	tst	r2, r0
 8007fbc:	d0f4      	beq.n	8007fa8 <rint+0x88>
 8007fbe:	0840      	lsrs	r0, r0, #1
 8007fc0:	4202      	tst	r2, r0
 8007fc2:	d0d5      	beq.n	8007f70 <rint+0x50>
 8007fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc8:	ea25 0000 	bic.w	r0, r5, r0
 8007fcc:	fa43 f606 	asr.w	r6, r3, r6
 8007fd0:	ea46 0500 	orr.w	r5, r6, r0
 8007fd4:	e7cc      	b.n	8007f70 <rint+0x50>
 8007fd6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007fda:	4310      	orrs	r0, r2
 8007fdc:	ee10 7a10 	vmov	r7, s0
 8007fe0:	d0e2      	beq.n	8007fa8 <rint+0x88>
 8007fe2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8007fe6:	4307      	orrs	r7, r0
 8007fe8:	4278      	negs	r0, r7
 8007fea:	4307      	orrs	r7, r0
 8007fec:	4815      	ldr	r0, [pc, #84]	; (8008044 <rint+0x124>)
 8007fee:	0c59      	lsrs	r1, r3, #17
 8007ff0:	0b3f      	lsrs	r7, r7, #12
 8007ff2:	0449      	lsls	r1, r1, #17
 8007ff4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8007ff8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007ffc:	ea47 0301 	orr.w	r3, r7, r1
 8008000:	e9d0 6700 	ldrd	r6, r7, [r0]
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	463b      	mov	r3, r7
 800800a:	4632      	mov	r2, r6
 800800c:	f7f8 f97e 	bl	800030c <__adddf3>
 8008010:	e9cd 0100 	strd	r0, r1, [sp]
 8008014:	463b      	mov	r3, r7
 8008016:	4632      	mov	r2, r6
 8008018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800801c:	f7f8 f974 	bl	8000308 <__aeabi_dsub>
 8008020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008024:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8008028:	ec41 0b10 	vmov	d0, r0, r1
 800802c:	e7be      	b.n	8007fac <rint+0x8c>
 800802e:	ee10 0a10 	vmov	r0, s0
 8008032:	4619      	mov	r1, r3
 8008034:	f7f8 f96a 	bl	800030c <__adddf3>
 8008038:	ec41 0b10 	vmov	d0, r0, r1
 800803c:	e7b6      	b.n	8007fac <rint+0x8c>
 800803e:	bf00      	nop
 8008040:	000fffff 	.word	0x000fffff
 8008044:	08008a70 	.word	0x08008a70
	...

08008050 <scalbn>:
 8008050:	ec53 2b10 	vmov	r2, r3, d0
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800805a:	4619      	mov	r1, r3
 800805c:	4605      	mov	r5, r0
 800805e:	bb14      	cbnz	r4, 80080a6 <scalbn+0x56>
 8008060:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008064:	4311      	orrs	r1, r2
 8008066:	d02a      	beq.n	80080be <scalbn+0x6e>
 8008068:	4619      	mov	r1, r3
 800806a:	2200      	movs	r2, #0
 800806c:	4b38      	ldr	r3, [pc, #224]	; (8008150 <scalbn+0x100>)
 800806e:	4e39      	ldr	r6, [pc, #228]	; (8008154 <scalbn+0x104>)
 8008070:	ee10 0a10 	vmov	r0, s0
 8008074:	f7f8 fafc 	bl	8000670 <__aeabi_dmul>
 8008078:	42b5      	cmp	r5, r6
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	db1f      	blt.n	80080c0 <scalbn+0x70>
 8008080:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8008084:	3c36      	subs	r4, #54	; 0x36
 8008086:	442c      	add	r4, r5
 8008088:	f240 70fe 	movw	r0, #2046	; 0x7fe
 800808c:	4284      	cmp	r4, r0
 800808e:	dc1f      	bgt.n	80080d0 <scalbn+0x80>
 8008090:	2c00      	cmp	r4, #0
 8008092:	dd2d      	ble.n	80080f0 <scalbn+0xa0>
 8008094:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8008098:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800809c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80080a0:	ec43 2b10 	vmov	d0, r2, r3
 80080a4:	bd70      	pop	{r4, r5, r6, pc}
 80080a6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80080aa:	4284      	cmp	r4, r0
 80080ac:	d1eb      	bne.n	8008086 <scalbn+0x36>
 80080ae:	ee10 0a10 	vmov	r0, s0
 80080b2:	4619      	mov	r1, r3
 80080b4:	f7f8 f92a 	bl	800030c <__adddf3>
 80080b8:	ec41 0b10 	vmov	d0, r0, r1
 80080bc:	bd70      	pop	{r4, r5, r6, pc}
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	a31f      	add	r3, pc, #124	; (adr r3, 8008140 <scalbn+0xf0>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 fad3 	bl	8000670 <__aeabi_dmul>
 80080ca:	ec41 0b10 	vmov	d0, r0, r1
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	ec43 2b11 	vmov	d1, r2, r3
 80080d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008148 <scalbn+0xf8>
 80080d8:	f000 f8ea 	bl	80082b0 <copysign>
 80080dc:	a31a      	add	r3, pc, #104	; (adr r3, 8008148 <scalbn+0xf8>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	ec51 0b10 	vmov	r0, r1, d0
 80080e6:	f7f8 fac3 	bl	8000670 <__aeabi_dmul>
 80080ea:	ec41 0b10 	vmov	d0, r0, r1
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80080f4:	da13      	bge.n	800811e <scalbn+0xce>
 80080f6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80080fa:	428d      	cmp	r5, r1
 80080fc:	ec43 2b11 	vmov	d1, r2, r3
 8008100:	dce8      	bgt.n	80080d4 <scalbn+0x84>
 8008102:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8008140 <scalbn+0xf0>
 8008106:	f000 f8d3 	bl	80082b0 <copysign>
 800810a:	a30d      	add	r3, pc, #52	; (adr r3, 8008140 <scalbn+0xf0>)
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	ec51 0b10 	vmov	r0, r1, d0
 8008114:	f7f8 faac 	bl	8000670 <__aeabi_dmul>
 8008118:	ec41 0b10 	vmov	d0, r0, r1
 800811c:	bd70      	pop	{r4, r5, r6, pc}
 800811e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8008122:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8008126:	3436      	adds	r4, #54	; 0x36
 8008128:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800812c:	4610      	mov	r0, r2
 800812e:	4619      	mov	r1, r3
 8008130:	2200      	movs	r2, #0
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <scalbn+0x108>)
 8008134:	f7f8 fa9c 	bl	8000670 <__aeabi_dmul>
 8008138:	ec41 0b10 	vmov	d0, r0, r1
 800813c:	bd70      	pop	{r4, r5, r6, pc}
 800813e:	bf00      	nop
 8008140:	c2f8f359 	.word	0xc2f8f359
 8008144:	01a56e1f 	.word	0x01a56e1f
 8008148:	8800759c 	.word	0x8800759c
 800814c:	7e37e43c 	.word	0x7e37e43c
 8008150:	43500000 	.word	0x43500000
 8008154:	ffff3cb0 	.word	0xffff3cb0
 8008158:	3c900000 	.word	0x3c900000
 800815c:	00000000 	.word	0x00000000

08008160 <fabsf>:
 8008160:	ee10 3a10 	vmov	r3, s0
 8008164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008168:	ee00 3a10 	vmov	s0, r3
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop

08008170 <finitef>:
 8008170:	ee10 3a10 	vmov	r3, s0
 8008174:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008178:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800817c:	bfac      	ite	ge
 800817e:	2000      	movge	r0, #0
 8008180:	2001      	movlt	r0, #1
 8008182:	4770      	bx	lr
	...

08008190 <__fpclassifyf>:
 8008190:	ee10 3a10 	vmov	r3, s0
 8008194:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8008198:	d101      	bne.n	800819e <__fpclassifyf+0xe>
 800819a:	2002      	movs	r0, #2
 800819c:	4770      	bx	lr
 800819e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80081a2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80081a6:	d201      	bcs.n	80081ac <__fpclassifyf+0x1c>
 80081a8:	2004      	movs	r0, #4
 80081aa:	4770      	bx	lr
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <__fpclassifyf+0x34>)
 80081ae:	1e42      	subs	r2, r0, #1
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d801      	bhi.n	80081b8 <__fpclassifyf+0x28>
 80081b4:	2003      	movs	r0, #3
 80081b6:	4770      	bx	lr
 80081b8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 80081bc:	fab0 f080 	clz	r0, r0
 80081c0:	0940      	lsrs	r0, r0, #5
 80081c2:	4770      	bx	lr
 80081c4:	007ffffe 	.word	0x007ffffe
	...

080081d0 <nanf>:
 80081d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80081d8 <nanf+0x8>
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	7fc00000 	.word	0x7fc00000
 80081dc:	00000000 	.word	0x00000000

080081e0 <scalbnf>:
 80081e0:	b508      	push	{r3, lr}
 80081e2:	ee10 3a10 	vmov	r3, s0
 80081e6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80081ea:	ed2d 8b02 	vpush	{d8}
 80081ee:	d011      	beq.n	8008214 <scalbnf+0x34>
 80081f0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80081f4:	d211      	bcs.n	800821a <scalbnf+0x3a>
 80081f6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80081fa:	d313      	bcc.n	8008224 <scalbnf+0x44>
 80081fc:	0dd2      	lsrs	r2, r2, #23
 80081fe:	4402      	add	r2, r0
 8008200:	2afe      	cmp	r2, #254	; 0xfe
 8008202:	dc2e      	bgt.n	8008262 <scalbnf+0x82>
 8008204:	2a00      	cmp	r2, #0
 8008206:	dd1a      	ble.n	800823e <scalbnf+0x5e>
 8008208:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800820c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008210:	ee00 3a10 	vmov	s0, r3
 8008214:	ecbd 8b02 	vpop	{d8}
 8008218:	bd08      	pop	{r3, pc}
 800821a:	ecbd 8b02 	vpop	{d8}
 800821e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008222:	bd08      	pop	{r3, pc}
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <scalbnf+0xbc>)
 8008226:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80082a0 <scalbnf+0xc0>
 800822a:	4298      	cmp	r0, r3
 800822c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008230:	db22      	blt.n	8008278 <scalbnf+0x98>
 8008232:	ee10 3a10 	vmov	r3, s0
 8008236:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800823a:	3a19      	subs	r2, #25
 800823c:	e7df      	b.n	80081fe <scalbnf+0x1e>
 800823e:	f112 0f16 	cmn.w	r2, #22
 8008242:	da1e      	bge.n	8008282 <scalbnf+0xa2>
 8008244:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008248:	4298      	cmp	r0, r3
 800824a:	dc0a      	bgt.n	8008262 <scalbnf+0x82>
 800824c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80082a4 <scalbnf+0xc4>
 8008250:	eef0 0a40 	vmov.f32	s1, s0
 8008254:	eeb0 0a48 	vmov.f32	s0, s16
 8008258:	f000 f83a 	bl	80082d0 <copysignf>
 800825c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008260:	e7d8      	b.n	8008214 <scalbnf+0x34>
 8008262:	ed9f 8a11 	vldr	s16, [pc, #68]	; 80082a8 <scalbnf+0xc8>
 8008266:	eef0 0a40 	vmov.f32	s1, s0
 800826a:	eeb0 0a48 	vmov.f32	s0, s16
 800826e:	f000 f82f 	bl	80082d0 <copysignf>
 8008272:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008276:	e7cd      	b.n	8008214 <scalbnf+0x34>
 8008278:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80082a4 <scalbnf+0xc4>
 800827c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8008280:	e7c8      	b.n	8008214 <scalbnf+0x34>
 8008282:	3219      	adds	r2, #25
 8008284:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008288:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800828c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80082ac <scalbnf+0xcc>
 8008290:	ee00 3a10 	vmov	s0, r3
 8008294:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008298:	e7bc      	b.n	8008214 <scalbnf+0x34>
 800829a:	bf00      	nop
 800829c:	ffff3cb0 	.word	0xffff3cb0
 80082a0:	4c000000 	.word	0x4c000000
 80082a4:	0da24260 	.word	0x0da24260
 80082a8:	7149f2ca 	.word	0x7149f2ca
 80082ac:	33000000 	.word	0x33000000

080082b0 <copysign>:
 80082b0:	ec53 2b10 	vmov	r2, r3, d0
 80082b4:	ee11 0a90 	vmov	r0, s3
 80082b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80082bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80082c0:	ea41 0300 	orr.w	r3, r1, r0
 80082c4:	ec43 2b10 	vmov	d0, r2, r3
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	0000      	movs	r0, r0
	...

080082d0 <copysignf>:
 80082d0:	ee10 3a10 	vmov	r3, s0
 80082d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082d8:	ee10 3a90 	vmov	r3, s1
 80082dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e0:	4313      	orrs	r3, r2
 80082e2:	ee00 3a10 	vmov	s0, r3
 80082e6:	4770      	bx	lr
	...

080082f0 <__errno>:
 80082f0:	4b01      	ldr	r3, [pc, #4]	; (80082f8 <__errno+0x8>)
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000c38 	.word	0x20000c38
 80082fc:	00000000 	.word	0x00000000

08008300 <ram_areas>:
 8008300:	08008ec4 200024c8 200024c8 200024c8     .....$. .$. .$. 
 8008310:	08008ec4 20000000 20000000 20000000     ....... ... ... 
 8008320:	08008ec4 2001c000 2001c000 2001c000     ....... ... ... 
 8008330:	08008ec4 00000000 00000000 00000000     ................
 8008340:	08008ec4 10000000 10000000 10000000     ................
 8008350:	08008ec4 40024000 40024000 40024000     .....@.@.@.@.@.@
 8008360:	08008ec4 00000000 00000000 00000000     ................
 8008370:	08008ec4 00000000 00000000 00000000     ................
 8008380:	656c6469 00000000 00000000 00000000     idle............

08008390 <ch_debug>:
 8008390:	6e69616d 18431600 08480404 1814100c     main..C...H.....
 80083a0:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

080083b0 <vmt>:
 80083b0:	08001e51 08001e31 08001e11 08001dd1     Q...1...........
 80083c0:	08001df1 08001db1 08001d91 08001d71     ............q...

080083d0 <zero_status>:
	...

080083e0 <active_status>:
	...

080083f0 <halted_status>:
 80083f0:	00000001 00000000 00000000 00000000     ................

08008400 <_stm32_dma_streams>:
 8008400:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8008410:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8008420:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8008430:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8008440:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8008450:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8008460:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8008470:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8008480:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8008490:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80084a0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80084b0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

080084c0 <fsparams>:
 80084c0:	00000080 00000140 00000003 00000000     ....@...........
 80084d0:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

080084e0 <ep0config>:
 80084e0:	00000000 08002291 080025e1 080026a1     ....."...%...&..
 80084f0:	00400040 20001208 20001208 00000001     @.@.... ... ....
 8008500:	20001218 00000000 00000000 00000000     ... ............
 8008510:	20414d44 6c696166 00657275 00000000     DMA failure.....

08008520 <pal_default_config>:
 8008520:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8008530:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8008540:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8008550:	04000000 00000040 02208001 00000000     ....@..... .....
 8008560:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8008570:	00060600 55000100 00000000 ffffffff     .......U........
 8008580:	00555055 00000fff 00000000 00000000     UPU.............
 8008590:	00000040 00000000 ffffffff 00000000     @...............
 80085a0:	0000ffff 00000000 00000000 00000000     ................
 80085b0:	00000000 ffffffff 00000000 0000ffff     ................
	...
 80085d0:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80085ec:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8008608:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8008620:	6c756e28 0000296c 00000000 00000000     (null)..........

08008630 <pow10>:
 8008630:	0000000a 00000064 000003e8 00002710     ....d........'..
 8008640:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8008650:	3b9aca00 00000000 00000000 00000000     ...;............
 8008660:	2044454c 61647075 00006574 00000000     LED update......

08008670 <encoderSPI>:
 8008670:	08004871 40020000 00000004 00000000     qH.....@........

08008680 <ep1config>:
 8008680:	00000002 00000000 08002011 08002091     ......... ... ..
 8008690:	00400040 20001c94 20001ca4 00000002     @.@.... ... ....
	...

080086b0 <vcom_configuration_descriptor>:
 80086b0:	00000043 08008700 00000000 00000000     C...............

080086c0 <ep2config>:
 80086c0:	00000003 00000000 080020f1 00000000     ......... ......
 80086d0:	00000010 200017fc 00000000 00000001     ....... ........
	...

080086f0 <usbcfg>:
 80086f0:	08004a61 08004a11 08001f81 08004a41     aJ...J......AJ..

08008700 <vcom_configuration_descriptor_data>:
 8008700:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8008710:	24050001 05011000 01000124 02022404     ...$....$....$..
 8008720:	00062405 82050701 ff000803 00010409     .$..............
 8008730:	00000a02 01050700 00004002 02810507     .........@......
 8008740:	00000040 00000000 00000000 00000000     @...............

08008750 <vcom_device_descriptor_data>:
 8008750:	01100112 40000002 57400483 02010200     .......@..@W....
 8008760:	00000103 00000000 00000000 00000000     ................

08008770 <vcom_string0>:
 8008770:	04090304 00000000 00000000 00000000     ................

08008780 <vcom_string1>:
 8008780:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8008790:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80087a0:	00630069 00000073 00000000 00000000     i.c.s...........

080087b0 <vcom_string2>:
 80087b0:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 80087c0:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 80087d0:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 80087e0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

080087f0 <vcom_string3>:
 80087f0:	00330308 00330031 00000000 00000000     ..3.1.3.........

08008800 <vcom_strings>:
 8008800:	00000004 08008770 00000026 08008780     ....p...&.......
 8008810:	00000038 080087b0 00000008 080087f0     8...............

08008820 <serusbcfg>:
 8008820:	20000f88 00020101 00000000 00000000     ... ............

08008830 <vcom_device_descriptor>:
 8008830:	00000012 08008750 00000000 00000000     ....P...........
 8008840:	6d6d6f43 64707520 00657461 00000000     Comm update.....
 8008850:	000a6625 00000000 00000000 00000000     %f..............
 8008860:	646f6d66 00000000 00000000 00000000     fmod............
 8008870:	66776f70 00000000 00000000 00000000     powf............

08008880 <Zero>:
	...
 800888c:	80000000                                ....

08008890 <npio2_hw>:
 8008890:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 80088a0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 80088b0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 80088c0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 80088d0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 80088e0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 80088f0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 8008900:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

08008910 <two_over_pi>:
 8008910:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 8008920:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 8008930:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 8008940:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 8008950:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 8008960:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 8008970:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 8008980:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 8008990:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 80089a0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 80089b0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 80089c0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 80089d0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 80089e0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 80089f0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 8008a00:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 8008a10:	0060e27b 00c08c6b 00000000 00000000     {.`.k...........

08008a20 <init_jk>:
 8008a20:	00000002 00000003 00000004 00000006     ................

08008a30 <PIo2>:
 8008a30:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 8008a40:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 8008a50:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 8008a60:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

08008a70 <TWO52>:
 8008a70:	00000000 43300000 00000000 c3300000     ......0C......0.
 8008a80:	00000043                                C...
